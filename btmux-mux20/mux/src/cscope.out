cscope 15 /data/home/nick/sandbox/merged/mux/src               0000940371
	@_build.h

10 #i‚de‡
MUX_BUILD_NUM


11 
szBuûdNum
[];

12 
	#MUX_BUILD_NUM
 
szBuûdNum


	)

15 #i‚de‡
MUX_BUILD_DATE


16 
szBuûdD©e
[];

17 
	#MUX_BUILD_DATE
 
szBuûdD©e


	)

20 
	#MUX_VERSION
 "2.4.0.22"

21 
	#MUX_RELEASE_DATE
 "2005-OCT-19"

22 

	)

25 
	#ALPHA


	)

	@alloc.h

6 #i‚de‡
M_ALLOC_H


7 
	#M_ALLOC_H


	)

9 
	#POOL_LBUF
 0

	)

10 
	#POOL_SBUF
 1

	)

11 
	#POOL_MBUF
 2

	)

12 
	#POOL_BOOL
 3

	)

13 
	#POOL_DESC
 4

	)

14 
	#POOL_QENTRY
 5

	)

15 
	#POOL_PCACHE
 6

	)

16 
	#NUM_POOLS
 7

	)

18 #ifde‡
FIRANMUX


19 
	#LBUF_SIZE
 16000

20 #ñ£

	)

21 
	#LBUF_SIZE
 8000

23 
	#GBUF_SIZE
 1024

24 
	#MBUF_SIZE
 400

25 
	#PBUF_SIZE
 128

26 
	#SBUF_SIZE
 64

27 

	)

28 
poﬁ_öô
(, );

29 *
poﬁ_Æloc
(, const *, const *, );

30 *
poﬁ_Æloc_lbuf
(const *, const *, );

31 
poﬁ_‰ì
(, *, const *, );

32 
poﬁ_‰ì_lbuf
(*, const *, );

33 
li°_buf°©s
(
dbªf
);

34 
li°_bu·ø˚
(
dbªf
);

36 
	#Æloc_lbuf
(
s
Ë
	`poﬁ_Æloc_lbuf
(s, 
__FILE__
, 
__LINE__
)

	)

37 
	#‰ì_lbuf
(
b
Ë
	`poﬁ_‰ì_lbuf
((*)(b), 
__FILE__
, 
__LINE__
)

	)

38 
	#Æloc_mbuf
(
s
Ë
	`poﬁ_Æloc
(
POOL_MBUF
,s, 
__FILE__
, 
__LINE__
)

	)

39 
	#‰ì_mbuf
(
b
Ë
	`poﬁ_‰ì
(
POOL_MBUF
,(*)(b), 
__FILE__
, 
__LINE__
)

	)

40 
	#Æloc_sbuf
(
s
Ë
	`poﬁ_Æloc
(
POOL_SBUF
,s, 
__FILE__
, 
__LINE__
)

	)

41 
	#‰ì_sbuf
(
b
Ë
	`poﬁ_‰ì
(
POOL_SBUF
,(*)(b), 
__FILE__
, 
__LINE__
)

	)

42 
	#Æloc_boﬁ
(
s
Ë(
boﬁexp
 *)
	`poﬁ_Æloc
(
POOL_BOOL
,s, 
__FILE__
, 
__LINE__
)

	)

43 
	#‰ì_boﬁ
(
b
Ë
	`poﬁ_‰ì
(
POOL_BOOL
,(*)(b), 
__FILE__
, 
__LINE__
)

	)

44 
	#Æloc_qíåy
(
s
Ë(
BQUE
 *)
	`poﬁ_Æloc
(
POOL_QENTRY
,s, 
__FILE__
, 
__LINE__
)

	)

45 
	#‰ì_qíåy
(
b
Ë
	`poﬁ_‰ì
(
POOL_QENTRY
,(*)(b), 
__FILE__
, 
__LINE__
)

	)

46 
	#Æloc_pˇche
(
s
Ë(
PCACHE
 *)
	`poﬁ_Æloc
(
POOL_PCACHE
,s, 
__FILE__
, 
__LINE__
)

	)

47 
	#‰ì_pˇche
(
b
Ë
	`poﬁ_‰ì
(
POOL_PCACHE
,(*)(b), 
__FILE__
, 
__LINE__
)

	)

49 
	#ß„_c›y_chr
(
§c
, 
buff
, 
buÂ
, 
nSizeOfBuf„r
) \

51 i‡((*
buÂ
 - 
buff
Ë< 
nSizeOfBuf„r
) \

53 **
buÂ
 = 
§c
; \

54 (*
buÂ
)++; \

56 }

	)

58 
	#ß„_°r
(
s
,
b
,
p
Ë
	`ß„_c›y_°r_lbuf
(s,b,p)

	)

59 
	#ß„_chr
(
c
,
b
,
p
Ë
	`ß„_c›y_chr
(c,b,p,(
LBUF_SIZE
-1))

	)

60 
	#ß„_boﬁ
(
c
,
b
,
p
Ë
	`ß„_chr
(((cË? '1' : '0'),b,p)

	)

61 
	#ß„_sb_°r
(
s
,
b
,
p
Ë
	`ß„_c›y_°r
(s,b,p,(
SBUF_SIZE
-1))

	)

62 
	#ß„_sb_chr
(
c
,
b
,
p
Ë
	`ß„_c›y_chr
(c,b,p,(
SBUF_SIZE
-1))

	)

63 
	#ß„_mb_°r
(
s
,
b
,
p
Ë
	`ß„_c›y_°r
(s,b,p,(
MBUF_SIZE
-1))

	)

64 
	#ß„_mb_chr
(
c
,
b
,
p
Ë
	`ß„_c›y_chr
(c,b,p,(
MBUF_SIZE
-1))

	)

	@ansi.h

13 #i‚de‡
_ANSI_H


14 
	#_ANSI_H


	)

16 
	#BEEP_CHAR
 '\07'

	)

17 
	#ESC_CHAR
 '\033'

	)

18 
	#ANSI_ATTR_CMD
 'm'

	)

20 
	#ANSI_NORMAL
 "\033[0m"

	)

22 
	#ANSI_HILITE
 "\033[1m"

	)

23 
	#ANSI_UNDER
 "\033[4m"

	)

24 
	#ANSI_BLINK
 "\033[5m"

	)

25 
	#ANSI_INVERSE
 "\033[7m"

	)

29 
	#ANSI_FOREGROUND
 "\033[3"

	)

30 
	#ANSI_BLACK
 "\033[30m"

	)

31 
	#ANSI_RED
 "\033[31m"

	)

32 
	#ANSI_GREEN
 "\033[32m"

	)

33 
	#ANSI_YELLOW
 "\033[33m"

	)

34 
	#ANSI_BLUE
 "\033[34m"

	)

35 
	#ANSI_MAGENTA
 "\033[35m"

	)

36 
	#ANSI_CYAN
 "\033[36m"

	)

37 
	#ANSI_WHITE
 "\033[37m"

	)

41 
	#ANSI_BACKGROUND
 "\033[4"

	)

42 
	#ANSI_BBLACK
 "\033[40m"

	)

43 
	#ANSI_BRED
 "\033[41m"

	)

44 
	#ANSI_BGREEN
 "\033[42m"

	)

45 
	#ANSI_BYELLOW
 "\033[43m"

	)

46 
	#ANSI_BBLUE
 "\033[44m"

	)

47 
	#ANSI_BMAGENTA
 "\033[45m"

	)

48 
	#ANSI_BCYAN
 "\033[46m"

	)

49 
	#ANSI_BWHITE
 "\033[47m"

	)

	@attrcache.h

6 #i‚de‡
_ATTRCACHE_H


7 
	#_ATTRCACHE_H


	)

9 
	sA«me


11 
	mobje˘
;

12 
	m©ånum
;

13 } 
	tA«me
;

15 c⁄° *
ˇche_gë
(
A«me
 *
«m
, *
pLí
);

16 
boﬁ
 
ˇche_put
(
A«me
 *
«m
, c⁄° *
obj
, 
size_t
 
Àn
);

17 
ˇche_öô
(c⁄° *
game_dú_fûe
, c⁄° *
game_∑g_fûe
,

18 
nCachePages
);

19 
ˇche_˛o£
();

20 
ˇche_tick
();

21 
boﬁ
 
ˇche_sync
();

22 
ˇche_dñ
(
A«me
 *
«m
);

	@attrs.h

6 #i‚de‡
_ATTRS_H


7 
	#_ATTRS_H


	)

10 
	#AF_ODARK
 0x00000001UL

11 
	#AF_DARK
 0x00000002UL

12 
	#AF_WIZARD
 0x00000004UL

13 
	#AF_MDARK
 0x00000008UL

14 
	#AF_INTERNAL
 0x00000010UL

15 
	#AF_NOCMD
 0x00000020UL

16 
	#AF_LOCK
 0x00000040UL

17 
	#AF_DELETED
 0x00000080UL

18 
	#AF_NOPROG
 0x00000100UL

19 
	#AF_GOD
 0x00000200UL

20 
	#AF_IS_LOCK
 0x00000400UL

21 
	#AF_VISUAL
 0x00000800UL

22 
	#AF_PRIVATE
 0x00001000UL

23 
	#AF_HTML
 0x00002000UL

24 
	#AF_NOPARSE
 0x00004000UL

25 
	#AF_REGEXP
 0x00008000UL

26 
	#AF_NOCLONE
 0x00010000UL

27 
	#AF_CONST
 0x00020000UL

28 
	#AF_CASE
 0x00040000UL

29 
	#AF_ISUSED
 0x00080000UL

31 

	)

32 
	#A_OSUCC
 1

	)

33 
	#A_OFAIL
 2

	)

34 
	#A_FAIL
 3

	)

35 
	#A_SUCC
 4

	)

36 
	#A_PASS
 5

	)

37 
	#A_DESC
 6

	)

38 
	#A_SEX
 7

	)

39 
	#A_ODROP
 8

	)

40 
	#A_DROP
 9

	)

41 
	#A_OKILL
 10

	)

42 
	#A_KILL
 11

	)

43 
	#A_ASUCC
 12

	)

44 
	#A_AFAIL
 13

	)

45 
	#A_ADROP
 14

	)

46 
	#A_AKILL
 15

	)

47 
	#A_AUSE
 16

	)

48 
	#A_CHARGES
 17

	)

49 
	#A_RUNOUT
 18

	)

50 
	#A_STARTUP
 19

	)

51 
	#A_ACLONE
 20

	)

52 
	#A_APAY
 21

	)

53 
	#A_OPAY
 22

	)

54 
	#A_PAY
 23

	)

55 
	#A_COST
 24

	)

56 
	#A_MONEY
 25

	)

57 
	#A_LISTEN
 26

	)

58 
	#A_AAHEAR
 27

	)

59 
	#A_AMHEAR
 28

	)

60 
	#A_AHEAR
 29

	)

61 
	#A_LAST
 30

	)

62 
	#A_QUEUEMAX
 31

	)

63 
	#A_IDESC
 32

	)

64 
	#A_ENTER
 33

	)

65 
	#A_OXENTER
 34

	)

66 
	#A_AENTER
 35

	)

67 
	#A_ADESC
 36

	)

68 
	#A_ODESC
 37

	)

69 
	#A_RQUOTA
 38

	)

70 
	#A_ACONNECT
 39

	)

71 
	#A_ADISCONNECT
 40

	)

72 
	#A_ALLOWANCE
 41

	)

73 
	#A_LOCK
 42

	)

74 
	#A_NAME
 43

	)

75 
	#A_COMMENT
 44

	)

76 
	#A_USE
 45

	)

77 
	#A_OUSE
 46

	)

78 
	#A_SEMAPHORE
 47

	)

79 
	#A_TIMEOUT
 48

	)

80 
	#A_QUOTA
 49

	)

81 
	#A_LEAVE
 50

	)

82 
	#A_OLEAVE
 51

	)

83 
	#A_ALEAVE
 52

	)

84 
	#A_OENTER
 53

	)

85 
	#A_OXLEAVE
 54

	)

86 
	#A_MOVE
 55

	)

87 
	#A_OMOVE
 56

	)

88 
	#A_AMOVE
 57

	)

89 
	#A_ALIAS
 58

	)

90 
	#A_LENTER
 59

	)

91 
	#A_LLEAVE
 60

	)

92 
	#A_LPAGE
 61

	)

93 
	#A_LUSE
 62

	)

94 
	#A_LGIVE
 63

	)

95 
	#A_EALIAS
 64

	)

96 
	#A_LALIAS
 65

	)

97 
	#A_EFAIL
 66

	)

98 
	#A_OEFAIL
 67

	)

99 
	#A_AEFAIL
 68

	)

100 
	#A_LFAIL
 69

	)

101 
	#A_OLFAIL
 70

	)

102 
	#A_ALFAIL
 71

	)

103 
	#A_REJECT
 72

	)

104 
	#A_AWAY
 73

	)

105 
	#A_IDLE
 74

	)

106 
	#A_UFAIL
 75

	)

107 
	#A_OUFAIL
 76

	)

108 
	#A_AUFAIL
 77

	)

109 
	#A_PFAIL
 78

	)

110 
	#A_TPORT
 79

	)

111 
	#A_OTPORT
 80

	)

112 
	#A_OXTPORT
 81

	)

113 
	#A_ATPORT
 82

	)

114 
	#A_PRIVS
 83

	)

115 
	#A_LOGINDATA
 84

	)

116 
	#A_LTPORT
 85

	)

117 
	#A_LDROP
 86

	)

118 
	#A_LRECEIVE
 87

	)

119 
	#A_LASTSITE
 88

	)

120 
	#A_INPREFIX
 89

	)

121 
	#A_PREFIX
 90

	)

122 
	#A_INFILTER
 91

	)

123 
	#A_FILTER
 92

	)

124 
	#A_LLINK
 93

	)

125 
	#A_LTELOUT
 94

	)

126 
	#A_FORWARDLIST
 95

	)

127 
	#A_MAILFOLDERS
 96

	)

128 
	#A_LUSER
 97

	)

129 
	#A_LPARENT
 98

	)

130 
	#A_LCONTROL
 99

	)

131 
	#A_VA
 100

	)

133 
	#A_LGET
 127

	)

134 
	#A_MFAIL
 128

	)

135 
	#A_GFAIL
 129

	)

136 
	#A_OGFAIL
 130

	)

137 
	#A_AGFAIL
 131

	)

138 
	#A_RFAIL
 132

	)

139 
	#A_ORFAIL
 133

	)

140 
	#A_ARFAIL
 134

	)

141 
	#A_DFAIL
 135

	)

142 
	#A_ODFAIL
 136

	)

143 
	#A_ADFAIL
 137

	)

144 
	#A_TFAIL
 138

	)

145 
	#A_OTFAIL
 139

	)

146 
	#A_ATFAIL
 140

	)

147 
	#A_TOFAIL
 141

	)

148 
	#A_OTOFAIL
 142

	)

149 
	#A_ATOFAIL
 143

	)

150 
	#A_LASTIP
 144

	)

154 #ifde‡
WOD_REALMS


155 
	#A_UMBRADESC
 145

	)

156 
	#A_WRAITHDESC
 146

	)

157 
	#A_FAEDESC
 147

	)

158 
	#A_MATRIXDESC
 148

	)

162 
	#A_CMDCHECK
 198

163 
	#A_MONIKER
 199

164 
	#A_LASTPAGE
 200

	)

165 
	#A_MAIL
 201

	)

166 
	#A_AMAIL
 202

	)

167 
	#A_SIGNATURE
 203

	)

168 
	#A_DAILY
 204

	)

169 
	#A_MAILTO
 205

	)

170 
	#A_MAILMSG
 206

	)

171 
	#A_MAILSUB
 207

	)

172 
	#A_MAILCURF
 208

	)

173 
	#A_LSPEECH
 209

	)

174 
	#A_PROGCMD
 210

	)

175 
	#A_MAILFLAGS
 211

	)

176 
	#A_DESTROYER
 212

	)

178 
	#A_NEWOBJS
 213

	)

179 
	#A_SAYSTRING
 214

180 
	#A_SPEECHMOD
 215

181 
	#A_EXITVARDEST
 216

	)

182 
	#A_LCHOWN
 217

	)

183 
	#A_CREATED
 218

184 
	#A_MODIFIED
 219

185 

	)

186 
	#A_VRML_URL
 220

	)

187 
	#A_HTDESC
 221

	)

191 
	#A_REASON
 222

192 #ifde‡
GAME_DOOFERMUX


	)

193 
	#A_REGINFO
 223

195 
	#A_CONNINFO
 224

198 
	#A_LMAIL
 225

199 
	#A_LOPEN
 226

201 
	#A_IDLETMOUT
 240

	)

203 
	#A_EXITFORMAT
 241

	)

204 
	#A_CONFORMAT
 242

	)

205 
	#A_NAMEFORMAT
 243

	)

206 
	#A_DESCFORMAT
 244

	)

209 #ifde‡
REALITY_LVLS


210 
	#A_RLEVEL
 250

	)

214 
	#A_VLIST
 252

	)

215 
	#A_LIST
 253

	)

216 
	#A_STRUCT
 254

	)

217 
	#A_TEMP
 255

	)

219 
	#A_USER_START
 256

220 

	)

221 
	#ATR_BUF_CHUNK
 100

	)

222 
	#ATR_BUF_INCR
 6

	)

	@autoconf.h

4 #i‚de‡
AUTOCONF_H


5 
	#AUTOCONF_H


	)

7 
	~"c›yright.h
"

17 
	#STDC_HEADERS
 1

	)

19 
	#HAVE_UNISTD_H
 1

	)

25 
	#RETSIGTYPE
 

	)

29 
	#HAVE_TM_ZONE
 1

	)

33 
	#HAVE_SETRLIMIT
 1

	)

35 
	#HAVE_GETRUSAGE
 1

	)

37 
	#HAVE_GETDTABLESIZE
 1

	)

39 
	#HAVE_GETPAGESIZE
 1

	)

41 
	#HAVE_GETTIMEOFDAY
 1

	)

43 
	#HAVE_USLEEP
 1

	)

45 
	#HAVE_NANOSLEEP
 1

	)

47 
	#HAVE_SETITIMER
 1

	)

55 
	#MALLOC_IN_STDLIB_H
 1

	)

59 
	#HAVE_ERRNO_H
 1

	)

61 
	#HAVE_MALLOC_H
 1

	)

63 
	#HAVE_SYS_WAIT_H
 1

	)

65 
	#HAVE_SYS_SELECT_H
 1

	)

71 
	#WORDS_LITTLEENDIAN
 1

	)

77 
	#SIZEOF_SHORT
 2

	)

79 
	#SIZEOF_UNSIGNED_SHORT
 2

	)

81 
	#SIZEOF_INT
 4

	)

83 
	#SIZEOF_UNSIGNED_INT
 4

	)

85 
	#SIZEOF_LONG
 4

	)

87 
	#SIZEOF_UNSIGNED_LONG
 4

	)

89 
	#CAN_UNALIGN_SHORT
 1

	)

91 
	#CAN_UNALIGN_INT
 1

	)

93 
	#CAN_UNALIGN_LONG
 1

	)

95 
	#CAN_UNALIGN_LONGLONG
 1

	)

115 
	#HAVE_LINGER
 1

	)

117 
	#HAVE_STRUCT_SIGCONTEXT
 1

	)

119 
	#EXTENDED_STDIO_DCLS
 1

	)

121 
	#EXTENDED_SOCKET_DCLS
 1

	)

123 
	#SOCKLEN_T_DCL
 1

	)

125 
	#TIME_WITH_SYS_TIME
 1

	)

127 
	#HAVE_SYS_TIME_H
 1

	)

139 
	#SMALLEST_INT_GTE_NEG_QUOTIENT
 1

	)

141 
	#HAVE_DEV_URANDOM
 1

	)

143 
	#HAVE_FPU_CONTROL_H
 1

	)

149 
	#HAVE_FENV_H
 1

	)

155 
	#HAVE_IN_ADDR_T
 1

	)

157 
	#HAVE_FCNTL_H
 1

	)

159 
	#HAVE_LIBCRYPT
 1

	)

161 
	#HAVE_CRYPT
 1

	)

163 
	#HAVE_PREAD
 1

	)

165 
	#HAVE_PWRITE
 1

	)

173 #i‡!
deföed
(
STDC_HEADERS
)

174 #îr‹ 
MUX
 
ªquúes
 
°™d¨d
 
hódîs
.

177 #i‚de‡
_GNU_SOURCE


178 
	#_GNU_SOURCE


	)

181 #ifde‡
HAVE_UNISTD_H


182 
	~<uni°d.h
>

185 
	~<°d¨g.h
>

186 
	~<°dlib.h
>

187 
	~<limôs.h
>

189 #ifde‡
NEED_MEMORY_H


190 
	~<mem‹y.h
>

193 
	~<°rög.h
>

195 #ifde‡
NEED_INDEX_DCL


196 
	#ödex
 
°rchr


	)

197 
	#rödex
 
°ºchr


	)

198 
	#bc›y
(
s
,
d
,
n
Ë
	`memmove
(d,s,n)

	)

201 #ifde‡
TIME_WITH_SYS_TIME


202 
	~<sys/time.h
>

203 
	~<time.h
>

205 #ifde‡
HAVE_SYS_TIME_H


206 
	~<sys/time.h
>

208 
	~<time.h
>

212 #i‡
deföed
(
HAVE_SETRLIMIT
Ë|| deföed(
HAVE_GETRUSAGE
)

213 
	~<sys/ªsour˚.h
>

214 #ifde‡
NEED_GETRUSAGE_DCL


215 
gërußge
(, 
rußge
 *);

217 #ifde‡
NEED_GETRLIMIT_DCL


218 
gëæimô
(, 
æimô
 *);

219 
£ålimô
(, 
æimô
 *);

223 #ifde‡
HAVE_SYS_FILE_H


224 
	~<sys/fûe.h
>

227 #ifde‡
HAVE_SYS_STAT_H


228 
	~<sys/°©.h
>

231 #ifde‡
HAVE_GETTIMEOFDAY


232 #ifde‡
NEED_GETTIMEOFDAY_DCL


233 
gëtimeofday
(
timevÆ
 *, 
timez⁄e
 *);

237 #ifde‡
HAVE_GETDTABLESIZE


238 
gëdèbÀsize
();

241 #ifde‡
HAVE_FCNTL_H


242 
	~<f˙é.h
>

245 #ifde‡
HAVE_SYS_WAIT_H


246 
	~<sys/waô.h
>

249 #ifde‡
HAVE_GETPAGESIZE


251 #ifde‡
NEED_GETPAGESIZE_DECL


252 
gë∑gesize
();

257 #ifde‡
_SC_PAGESIZE


258 
	#gë∑gesize
(Ë
	`sysc⁄f
(
_SC_PAGESIZE
)

	)

261 
	~<sys/∑øm.h
>

263 #ifde‡
EXEC_PAGESIZE


264 
	#gë∑gesize
(Ë
EXEC_PAGESIZE


	)

266 #ifde‡
NBPG


267 #i‚de‡
CLSIZE


268 
	#CLSIZE
 1

	)

270 
	#gë∑gesize
(Ë
NBPG
 * 
CLSIZE


	)

272 #ifde‡
PAGESIZE


273 
	#gë∑gesize
(Ë
PAGESIZE


	)

275 #ifde‡
NBPC


276 
	#gë∑gesize
(Ë
NBPC


	)

278 
	#gë∑gesize
(Ë0

	)

287 #ifde‡
HAVE_ERRNO_H


288 
	~<î∫o.h
>

290 
î∫o
;

295 #i‡!
deföed
(
MALLOC_IN_STDLIB_H
)

296 #i‡ 
deföed
(
HAVE_MALLOC_H
)

297 
	~<mÆloc.h
>

298 #ñi‡
deföed
(
NEED_MALLOC_DCL
)

299 *
mÆloc
();

300 *
ªÆloc
(*, );

301 
‰ì
(*);

305 #ifde‡
NEED_SYS_ERRLIST_DCL


306 *
sys_îæi°
[];

309 
	~<sys/ty≥s.h
>

310 
	~<°dio.h
>

311 
	~<sys/f˙é.h
>

313 #ifde‡
NEED_SPRINTF_DCL


314 *
•rötf
(*, const *, ...);

317 #i‚de‡
EXTENDED_STDIO_DCLS


318 
Ârötf
(
FILE
 *, const *, ...);

319 
¥ötf
(const *, ...);

320 
ssˇnf
(const *, const *, ...);

321 
˛o£
();

322 
f˛o£
(
FILE
 *);

323 
fÊush
(
FILE
 *);

324 
fgëc
(
FILE
 *);

325 
Âutc
(, 
FILE
 *);

326 
Âuts
(c⁄° *, 
FILE
 *);

327 
‰ód
(*, 
size_t
, size_t, 
FILE
 *);

328 
f£ek
(
FILE
 *, , );

329 
fwrôe
(*, 
size_t
, size_t, 
FILE
 *);

330 
pid_t
 
gëpid
();

331 
p˛o£
(
FILE
 *);

332 
ª«me
(*, *);

333 
time_t
 
time
(time_t *);

334 
ungëc
(, 
FILE
 *);

335 
u∆ök
(const *);

338 
	~<sys/sockë.h
>

339 #i‚de‡
EXTENDED_SOCKET_DCLS


340 
ac˚±
(, 
sockaddr
 *, *);

341 
böd
(, 
sockaddr
 *, );

342 
li°í
(, );

343 
£ndto
(, *, , ,

344 
sockaddr
 *, );

345 
£tsock›t
(, , , *, );

346 
shutdown
(, );

347 
sockë
(, , );

348 
£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

351 
	tdbªf
;

352 
	tFLAG
;

353 
	tPOWER
;

354 #ifde‡
REALITY_LVLS


355 
	tRLEVEL
;

357 
	tboﬁexp_ty≥
;

358 
	tIBUF
[16];

	@btech/aero.bomb.h

17 #i‚de‡
AERO_BOMB_H


18 
	#AERO_BOMB_H


	)

21 *
	m«me
;

22 
	maff
;

23 
	mty≥
;

24 
	mweight
;

25 } 
	tBOMBINFO
;

28 
	mx
, 
	my
, 
	mty≥
;

29 
MAP
 *
	mm≠
;

30 } 
	tbomb_shŸ
;

	@btech/artillery.h

18 #i‚de‡
ARTILLERY_H


19 
	#ARTILLERY_H


	)

21 
	s¨tûÀry_shŸ_ty≥
 {

22 
	m‰om_x
, 
	m‰om_y
;

23 
	mto_x
, 
	mto_y
;

24 
	mty≥
;

25 
	mmode
;

26 
	mishô
;

27 
dbªf
 
	mshoŸî
;

28 
dbªf
 
	mm≠
;

29 
¨tûÀry_shŸ_ty≥
 *
	m√xt
;

31 } 
	t¨tûÀry_shŸ
;

34 
	#IS_LTOM
 30

	)

35 
	#IS_THUMPER
 31

	)

36 
	#IS_SNIPER
 32

	)

37 
	#IS_ARROW
 27

	)

39 
	#CL_ARROW
 71

	)

	@btech/autopilot.h

17 #i‚de‡
AUTOPILOT_H


18 
	#AUTOPILOT_H


	)

20 
	~"mech.evíts.h
"

22 
	#AUTOPILOT_MEMORY
 100

	)

23 
	#AUTOPILOT_NC_DELAY
 1

	)

26 
	#AUTOPILOT_GOTO_TICK
 3

	)

27 
	#AUTOPILOT_LEAVE_TICK
 5

	)

28 
	#AUTOPILOT_WAITFOE_TICK
 4

	)

29 
	#AUTOPILOT_PURSUE_TICK
 3

	)

30 
	#AUTOPILOT_FOLLOW_TICK
 3

	)

35 
dbªf
 
	mmynum
;

36 
MECH
 *
	mmymech
;

37 
	mm≠ödex
;

38 
dbªf
 
	mmymechnum
;

39 
	m•ìd
;

40 
	mofsx
, 
	mofsy
;

41 
	mèrg
;

43 
	mÊags
;

44 
	m¥ogøm_cou¡î
;

45 
	mfú°_‰ì
;

46 
	mcomm™ds
[
AUTOPILOT_MEMORY
];

49 
	mahód_ok
;

50 
	mauto_cmode
;

51 
	mauto_cdi°
;

52 
	mauto_goweight
;

53 
	mauto_fweight
;

54 
	mauto_√rvous
;

56 
	mb_msc
, 
	mw_msc
, 
	mb_bsc
, 
	mw_bsc
, 
	mb_d™
, 
	mw_d™
;

57 
CLöórTimeAbsﬁuã
 
	mœ°_upd
;

58 } 
	tAUTO
;

60 
	#AUTO_GOET
 15

	)

61 
	#AUTO_GOTT
 240

	)

63 
	#AUTOPILOT_AUTOGUN
 1

	)

64 
	#AUTOPILOT_GUNZOMBIE
 2

	)

65 
	#AUTOPILOT_PILZOMBIE
 4

	)

66 
	#AUTOPILOT_ROAMMODE
 8

	)

67 
	#AUTOPILOT_LSENS
 16

	)

68 
	#AUTOPILOT_CHASETARG
 32

	)

69 
	#AUTOPILOT_SWARMCHARGE
 64

	)

71 
	#Gu¬ög
(
a
Ë(◊)->
Êags
 & 
AUTOPILOT_AUTOGUN
)

	)

72 
	#SèπGun
(
a
Ë◊)->
Êags
 |
AUTOPILOT_AUTOGUN


	)

73 
	#St›Gun
(
a
Ë◊)->
Êags
 &~(
AUTOPILOT_AUTOGUN
|
AUTOPILOT_GUNZOMBIE
)

	)

75 
	#Upd©eAutoSís‹
(
a
) \

76 
	`AUTOEVENT
(
a
, 
EVENT_AUTOGS
, 
auto_gun_£ns‹_evít
, 1, 1)

	)

78 
	#TrulySèπGun
(
a
) \

79 dÿ{ 
	`AUTOEVENT
(
a
, 
EVENT_AUTOGUN
, 
auto_gun_evít
, 1, 0); \

80 
	`AUTOEVENT
(
a
, 
EVENT_AUTOGS
, 
auto_gun_£ns‹_evít
, 1, 0); } 0)

	)

82 
	#DoSèπGun
(
a
) \

83 dÿ{ 
	`SèπGun
(
a
Ë; 
	`TrulySèπGun
(a); \

84 
a
->
Êags
 &~
AUTOPILOT_GUNZOMBIE
; } 0)

	)

86 
	#TrulySt›Gun
(
a
) \

87 dÿ{ 
	`muxevít_ªmove_ty≥_d©a
(
EVENT_AUTOGUN
, 
a
); \

88 
	`muxevít_ªmove_ty≥_d©a
(
EVENT_AUTOGS
, 
a
); } 0)

	)

90 
	#DoSt›Gun
(
a
) \

91 dÿ{ 
	`St›Gun
(
a
); 
	`TrulySt›Gun
◊); } 0)

	)

93 
	#Zombify
(
a
) \

94 dÿ{ 
a
->
Êags
 |
AUTOPILOT_GUNZOMBIE
; 
	`TrulySt›Gun
◊); } 0)

	)

96 
	#PûZombify
(
a
) \

97 dÿ{ 
a
->
Êags
 |
AUTOPILOT_PILZOMBIE
; } 0)

	)

99 
	#UnZombify
(
a
) \

100 dÿ{ i‡(
a
->
Êags
 & 
AUTOPILOT_GUNZOMBIE
Ë{ 
	`TrulySèπGun
(a);\

101 
a
->
Êags
 &~
AUTOPILOT_GUNZOMBIE
; } } 0)

	)

103 
	#UnZombifyAuto
(
a
) \

104 dÿ{ i‡(
	`Gu¬ög
(
a
)Ë
	`UnZombify
◊); i‡◊->
Êags
 & 
AUTOPILOT_PILZOMBIE
) { \

105 
a
->
Êags
 &~
AUTOPILOT_PILZOMBIE
 ;\

106 
	`AUTOEVENT
(
a
, 
EVENT_AUTOCOM
, 
auto_com_evít
, 1, 0); } } 0)

	)

108 
	#UnZombifyMech
(
mech
) \

109 dÿ{ 
AUTO
 *
au
; i‡(
	`MechAuto
(
mech
) > 0 && \

110 (
au
=
°©ic_ˇ°
 <
AUTO
 *> (
	`FödObje˘sD©a
(
	`MechAuto
(
mech
))))Ë
	`UnZombifyAuto
◊u); } 0)

	)

112 
	#GVAL
(
a
,
b
) \

113 (((
a
->
¥ogøm_cou¡î
 + (
b
)Ë<á->
fú°_‰ì
) ? \

114 
a
->
comm™ds
[◊->
¥ogøm_cou¡î
+(
b
))] : -1)

	)

116 
	#CCLEN
(
a
) \

117 (1 + 
acom
[
a
->
comm™ds
[a->
¥ogøm_cou¡î
]].
¨gcou¡
)

	)

119 
	#PG
(
a
) \

120 
a
->
¥ogøm_cou¡î


	)

125 
	mGOAL_DUMBGOTO
,

126 
	mGOAL_GOTO
,

127 
	mGOAL_DUMBFOLLOW
,

128 
	mGOAL_FOLLOW
,

129 
	mGOAL_LEAVEBASE
,

130 
	mGOAL_WAIT
,

132 
	mCOMMAND_SPEED
,

133 
	mCOMMAND_JUMP
,

134 
	mCOMMAND_STARTUP
,

135 
	mCOMMAND_SHUTDOWN
,

136 
	mCOMMAND_AUTOGUN
,

137 
	mCOMMAND_STOPGUN
,

138 
	mCOMMAND_ENTERBASE
,

139 
	mCOMMAND_LOAD
,

140 
	mCOMMAND_UNLOAD
,

141 
	mCOMMAND_REPORT
,

142 
	mCOMMAND_PICKUP
,

143 
	mCOMMAND_DROPOFF
,

144 
	mCOMMAND_ENTERBAY
,

145 
	mCOMMAND_EMBARK
,

146 
	mCOMMAND_UDISEMBARK
,

147 
	mCOMMAND_CMODE
,

148 
	mCOMMAND_SWARM
,

149 
	mCOMMAND_ATTACKLEG
,

150 
	mCOMMAND_CHASEMODE
,

151 
	mCOMMAND_SWARMMODE
,

152 
	mCOMMAND_ROAMMODE
,

153 
	mGOAL_ROAM
,

154 
	mNUM_COMMANDS


158 *
	m«me
;

159 
	m¨gcou¡
;

160 } 
	tACOM
;

162 
	~"p.aut›ûŸ.h
"

163 
	~"p.ai.h
"

164 
	~"p.aut›ûŸ_comm™d.h
"

165 
	~"p.aut›ûŸ_comm™ds.h
"

166 
	~"p.autogun.h
"

	@btech/btconfig.h

16 
	~"c⁄fig.h
"

18 #i‚de‡
BTCONFIG_H


19 
	#BTCONFIG_H


	)

24 
	#BT_COMPLEXREPAIRS


	)

26 
	#BT_CARRIERS


	)

33 
	#BT_MOVEMENT_MODES


	)

40 
	#BT_EXILE_SKILLS


	)

51 
	#BT_EXILE_MW3STATS


	)

57 
	#BT_EXTENDED_ADVANTAGES


	)

63 
	#BT_TARGCOMP_MODES


	)

77 
	#BT_CALCULATE_BV


	)

83 
	#BT_ADVANCED_ECON


	)

94 
	#BT_ADVANCED_ECON_INIT


	)

97 
	#BT_USE_VRT


	)

100 
	#BT_PART_WEIGHTS


	)

105 
	#WEIGHT_OVERSPEEDING


	)

109 
	#COPY_CHANS_ON_EJECT


	)

124 
	#WEIGHTVARIABLE_STATUS


	)

128 
	#OBSERVATORIC_OL_RADIO


	)

130 
	#RS_MECH_IDLE
 86400

	)

131 
	#SIM_MECH_IDLE
 3600

	)

134 
	#ATMO_Z
 100

	)

137 
	#ORBIT_Z
 300

	)

140 
	#ACCEL_MOD
 5

	)

144 
	#AERO_SECS_THRUST
 30

	)

146 
	#PIL_XP_EVERY_N_STEPS
 10

	)

149 
	#AFTERLIFE_DBREF
 
bãchc⁄f
.
a·îli„_dbªf


	)

150 
	#AFTERSCEN_DBREF
 
bãchc⁄f
.
a·îs˚n_dbªf


	)

153 
	#USED_MW_STORE
 
bãchc⁄f
.
bãch_u£dmech°‹e


	)

155 
	#MINE_NEXT_MODIFIER
 2/3

	)

156 
	#MINE_MIN
 5

	)

157 
	#MINE_TABLE
 2

	)

160 
	#ODDJUMP


	)

163 
	#BT_PARTIAL


	)

167 
	#ECON_ALLOW_MULTIPLE_LOAD_UNLOAD


	)

170 
	#CLAN_SUPPORT


	)

173 
	#C3_SUPPORT


	)

176 #unde‡
MENU_CHARGEN


179 
	#MENU_CUSTOMIZE


	)

182 
	#BTH_DEBUG


	)

185 
	#XP_DEBUG


	)

188 #unde‡
TEMPLATE_DEBUG


191 #unde‡
JUMPDEBUG


194 #unde‡
SENSOR_BTH_DEBUG


197 #unde‡
SENSOR_DEBUG


200 
	#TEMPLATE_VERBOSE_ERRORS


	)

203 #unde‡
VERBOSE_MAP_STUFF


206 
	#BUILDINGS_REPAIR_THEMSELVES


	)

207 
	#BUILDINGS_REBUILD_FROM_DESTRUCTION


	)

209 
	#BUILDING_REPAIR_AMOUNT
 1

	)

210 
	#BUILDING_REPAIR_DELAY
 120

	)

213 
	#BUILDING_DREBUILD_DELAY
 7200

	)

217 
	#ECM_ON_CONTACTS


	)

219 
	#LATERAL_TICK
 6

	)

220 
	#HEAT_TICK
 2

	)

221 
	#JUMP_TICK
 1

	)

222 
	#MOVE_TICK
 1

	)

223 
	#MOVE_MOD
 
MOVE_TICK
 / 2

	)

224 
	#WEAPON_TICK
 2

	)

226 
	#ARTY_SPEED
 5

	)

227 
	#ARTILLERY_MAPSHEET_SIZE
 20

	)

228 
	#ARTILLERY_MINIMUM_FLIGHT
 10

	)

230 
	#DROP_TO_STAND_RECYCLE
 (
MOVE_TICK
 * 12)

	)

231 
	#JUMP_TO_HIT_RECYCLE
 (
JUMP_TICK
 * 12 / (
	`MechTy≥
(
mech
Ë=
CLASS_BSUIT
 ? 4 : 1))

	)

233 
	#INITIAL_PLOS_TICK
 1

	)

234 
	#LOS_TICK
 2

	)

235 
	#HIDE_TICK
 10

	)

236 
	#PLOS_TICK
 3

	)

237 
	#SCHANGE_TICK
 10

	)

238 
	#SPOT_TICK
 10

	)

240 
	#PHYSICAL_RECYCLE_TIME
 30

	)

241 
	#STARTUP_TIME
 30

	)

242 
	#UNCONSCIOUS_TIME
 30

	)

243 
	#WEAPON_RECYCLE_TIME
 30

	)

244 
	#FALL_TICK
 3

	)

245 
	#FALL_ACCEL
 1

	)

246 
	#OOD_SPEED
 2

	)

247 
	#OOD_TICK
 1

	)

248 
	#DUMP_TICK
 30

	)

249 
	#DUMP_GRAD_TICK
 1

	)

250 
	#DUMP_SPEED
 (
DUMP_TICK
/
DUMP_GRAD_TICK
)

	)

251 
	#MASC_TICK
 60

	)

252 
	#SCHARGE_TICK
 60

	)

253 
	#RANDOM_TICK
 6

	)

255 
	#DS_SPAM_TIME
 10

	)

258 
	#MAX_BOOM_TIME
 30

	)

260 
	#BOOM_BTH
 9

	)

261 
	#MAX_C3_SLAVES
 3

	)

264 
	#DEFAULT_GUNNERY
 6

	)

265 
	#DEFAULT_PILOTING
 6

	)

266 
	#DEFAULT_SPOTTING
 8

	)

267 
	#DEFAULT_ARTILLERY
 8

	)

268 
	#DEFAULT_COMM
 6

	)

271 
	#DEFAULT_TACRANGE
 20

	)

272 
	#DEFAULT_LRSRANGE
 40

	)

273 
	#DEFAULT_RADIORANGE
 80

	)

274 
	#DEFAULT_SCANRANGE
 20

	)

275 
	#DEFAULT_HEATSINKS
 10

	)

278 
	#DEFAULT_COMPUTER
 2

	)

279 
	#DEFAULT_RADIO
 3

	)

280 
	#DEFAULT_PART_LEVEL
 3

	)

283 
	#DEFAULT_CLCOMPUTER
 5

	)

284 
	#DEFAULT_CLRADIO
 5

	)

285 
	#DEFAULT_CLPART_LEVEL
 5

	)

288 
	#LRS_DISPLAY_WIDTH
 70

	)

289 
	#LRS_DISPLAY_WIDTH2
 35

	)

290 
	#LRS_DISPLAY_HEIGHT
 11

	)

291 
	#LRS_DISPLAY_HEIGHT2
 5

	)

295 #unde‡
HAVE_LOC_IN_CENSUS


297 
	#NAMELEN
 20

	)

298 
	#RANKLEN
 20

	)

299 
	#JOBLEN
 30

	)

300 #ifde‡
HAVE_LOC_IN_CENSUS


301 
	#LOCLEN
 20

	)

321 
	#ADVANCED_LOS


	)

322 #unde‡
SIMPLE_SENSORS


323 
	#LOCK_TICK
 8

	)

328 #unde‡
ADVANCED_LOS


329 
	#SIMPLE_SENSORS


	)

330 
	#LOCK_TICK
 0

	)

334 
	#INITIAL_RANK
 3

	)

335 
	#FINAL_RANK
 2

	)

337 
	#ECM_RANGE
 6

	)

342 
	#FIRE_DURATION
 ((
	`Numbî
(60,180)))

	)

347 
	#SMOKE_DURATION
 ((
	`Numbî
(90,150)))

	)

350 #unde‡
DFM_AFFECT_BTH


352 
	#LITE_RANGE
 30

	)

354 
	tbyã
;

	@btech/btechstats.h

19 #i‚de‡
BTECHSTATS_H


20 
	#BTECHSTATS_H


	)

22 
	~"db.h
"

23 
	~"exã∫s.h
"

24 
	~"öãrÁ˚.h
"

25 
	~"c⁄fig.h
"

26 
	~"powîs.h
"

27 
	~"bãch°©s_globÆ.h
"

29 #ifde‡
BTECHSTATS_C


30 *
	gbãch_ch¨vÆuëy≥_«mes
[] = {

37 *
	gbãch_ch¨skûlÊag_«mes
[] = {

46 
	#EE_NUMBER
 11

	)

48 #ifde‡
BTECHSTATS


52 
	sch¨_vÆue
 {

53 *
	m«me
;

54 
	mty≥
;

55 
	mÊag
;

56 
	mx±hªshﬁd
;

57 } 
	gch¨_vÆues
[] = {

59 {"XP", 
CHAR_VALUE
, 0, 0},

60 {"MaxXP", 
CHAR_VALUE
, 0, 0},

61 {"Ty≥", 
CHAR_VALUE
, 0, 0},

62 {"Levñ", 
CHAR_VALUE
, 0, 0},

63 {"Package", 
CHAR_VALUE
, 0, 0},

64 {"Lives", 
CHAR_VALUE
, 0, 0},

65 {"Brui£", 
CHAR_VALUE
, 0, 0},

66 {"LëhÆ", 
CHAR_VALUE
, 0, 0},

67 {"Unu£d1", 
CHAR_VALUE
, 0, 0},

70 {"Ambidexåous", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

71 {"Blood«me", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

72 {"Comb©_Sí£", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

73 {"C⁄è˘", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

74 {"Dr›shù", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

75 {"EI_Im∂™t", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

76 {"Ex˚±i⁄Æ_Aâribuã", 
CHAR_ADVANTAGE
, 
CHAR_ADV_EXCEPT
, 0},

77 {"Exåa_Edge", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

78 {"L™d_Gø¡", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

79 {"Rïuèti⁄", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

80 {"Sixth_Sí£", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

81 {"TôÀ", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

82 {"Tough√ss", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

83 {"Wó…h", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

84 {"Wñl-C⁄√˘ed", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

85 {"Wñl_Equù≥d", 
CHAR_ADVANTAGE
, 
CHAR_ADV_VALUE
, 0},

86 {"Dodge_M™euvî", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

87 {"M™euvîög_A˚", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

88 {"Mñì_S≥cüli°", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

89 {"Paö_Resi°™˚", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

90 {"S≥ed_Dem⁄", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

91 {"Tech_A±ôude", 
CHAR_ADVANTAGE
, 
CHAR_ADV_BOOL
, 0},

93 {"Buûd", 
CHAR_ATTRIBUTE
, 0, 0},

94 {"ReÊexes", 
CHAR_ATTRIBUTE
, 0, 0},

95 {"I¡uôi⁄", 
CHAR_ATTRIBUTE
, 0, 0},

96 {"Ló∫", 
CHAR_ATTRIBUTE
, 0, 0},

97 {"Ch¨isma", 
CHAR_ATTRIBUTE
, 0, 0},

100 {"A¸ob©ics", 
CHAR_SKILL
, 
CHAR_ATHLETIC
, 50},

101 {"Admöi°øti⁄", 
CHAR_SKILL
, 
CHAR_MENTAL
, 50},

102 {"A…î«ã_Idítôy", 
CHAR_SKILL
, 
CHAR_MENTAL
, 50},

103 {"Aµøißl", 
CHAR_SKILL
, 
CHAR_MENTAL
, 50},

104 {"Archîy", 
CHAR_SKILL
, 
CHAR_ATHLETIC
, 50},

105 {"Bœde", 
CHAR_SKILL
, 
CHAR_ATHLETIC
 | 
CAREER_MISC
, 50},

106 {"Buªau¸acy", 
CHAR_SKILL
, 
CHAR_SOCIAL
 | 
CAREER_MISC
, 50},

107 {"Climbög", 
CHAR_SKILL
, 
CHAR_ATHLETIC
, 50},

108 {"Comm-C⁄víti⁄Æ", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_TECH
, 150},

109 {"Comm-Hy≥Ωul£", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_TECH
, 50},

110 {"Compuãr", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_TECH
, 50},

111 {"Cry±ogøphy", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_TECH
, 50},

112 {"Demﬁôi⁄s", 
CHAR_SKILL
, 
CHAR_MENTAL
, 50},

113 {"Disgui£", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_RECON
, 50},

114 {"Engöìrög", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_TECH
, 50},

115 {"Esˇ≥_Aπi°", 
CHAR_SKILL
, 
CHAR_PHYSICAL
 | 
CAREER_RECON
, 50},

116 {"F‹gîy", 
CHAR_SKILL
, 
CHAR_MENTAL
, 50},

117 {"Gamblög", 
CHAR_SKILL
, 
CHAR_MENTAL
, 50},

118 {"Gu¬îy-AπûÀry", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
, 500},

119 {"Gu¬îy-BÆli°ic", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
, 2500},

120 {"Gu¬îy-Fœmî", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
, 500},

121 {"Gu¬îy-La£r", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
, 2500},

122 {"Gu¬îy-Missûe", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
, 2500},

123 {"Gu¬îy-SpŸtög", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
, 250},

124 {"Im≥rs⁄©i⁄", 
CHAR_SKILL
, 
CHAR_SOCIAL
, 50},

125 {"I¡îrog©i⁄", 
CHAR_SKILL
, 
CHAR_SOCIAL
 | 
CAREER_RECON
, 50},

126 {"Jump_Pack", 
CHAR_SKILL
, 
CHAR_ATHLETIC
, 50},

127 {"Lódîshù", 
CHAR_SKILL
, 
CHAR_SOCIAL
 | 
CAREER_ACADMISC
, 50},

128 {"Medãch", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_MISC
, 300},

129 {"Navig©i⁄", 
CHAR_SKILL
, 
CHAR_MENTAL
, 25},

130 {"NegŸüti⁄", 
CHAR_SKILL
, 
CHAR_SOCIAL
, 25},

131 {"Pî˚±i⁄", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_RECON
, 150},

132 {"PûŸög-Aîo•a˚", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_AERO
, 3000},

133 {"PûŸög-Bùed", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_BMECH
, 3000},

134 {"PûŸög-BSuô", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_CAVALRY
, 3000},

135 {"PûŸög-Hovî", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_CAVALRY
, 3000},

136 {"PûŸög-NavÆ", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_CAVALRY
, 3000},

137 {"PûŸög-Quad", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_BMECH
, 3000},

138 {"PûŸög-S∑˚¸a·", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_DROPSHIP
, 3000},

139 {"PûŸög-Tøcked", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_CAVALRY
, 3000},

140 {"PûŸög-WhìÀd", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_PHYSICAL
 | 
CAREER_CAVALRY
, 3000},

141 {"PrŸocﬁ", 
CHAR_SKILL
, 
CHAR_SOCIAL
, 50},

142 {"Quickdøw", 
CHAR_SKILL
, 
CHAR_PHYSICAL
, 50},

143 {"Re£¨ch", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_TECH
, 100},

144 {"Ru¬ög", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_ATHLETIC
, 100},

145 {"Ridög", 
CHAR_SKILL
, 
CHAR_ATHLETIC
, 50},

146 {"S¸ounge", 
CHAR_SKILL
, 
CHAR_SOCIAL
 | 
CAREER_TECH
, 50},

147 {"Securôy_Sy°ems", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_RECON
, 50},

148 {"Sedu˘i⁄", 
CHAR_SKILL
, 
CHAR_SOCIAL
, 50},

149 {"SmÆl_Arms", 
CHAR_SKILL
, 
CHAR_PHYSICAL
 | 
CAREER_MISC
, 50},

150 {"SãÆth", 
CHAR_SKILL
, 
CHAR_PHYSICAL
 | 
CAREER_RECON
, 50},

151 {"Så©egy", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_ACADMISC
, 50},

152 {"Såìtwi£", 
CHAR_SKILL
, 
CHAR_SOCIAL
, 50},

153 {"Suµ‹t_Wóp⁄s", 
CHAR_SKILL
, 
CHAR_PHYSICAL
 | 
CAREER_MISC
, 50},

154 {"SurvivÆ", 
CHAR_SKILL
, 
CHAR_MENTAL
, 50},

155 {"Swimmög", 
CHAR_SKILL
, 
CHAR_ATHLETIC
, 50},

156 {"Ta˘ics", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_ACADMISC
, 50},

157 {"Technicün-Aîo•a˚", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_MENTAL
 | 
CAREER_TECHVEH
, 50},

158 {"Technicün-B©éemech", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_MENTAL
 | 
CAREER_TECHMECH
, 600},

159 {"Technicün-BSuô", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_MENTAL
 | 
CAREER_TECHBS
, 300},

160 {"Technicün-EÀ˘r⁄ics", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_MENTAL
 | 
CAREER_TECH
, 50},

161 {"Technicün-Mech™ic", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_MENTAL
 | 
CAREER_TECHVEH
, 400},

162 {"Technicün-Wóp⁄s", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_MENTAL
 | 
CAREER_TECH
, 300},

163 {"Technicün-S∑˚¸a·", 
CHAR_SKILL
, 
SK_XP
 | 
CHAR_MENTAL
, 300},

164 {"Throwög_Wóp⁄s", 
CHAR_SKILL
, 
CHAR_PHYSICAL
, 50},

165 {"Tökî", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_TECH
, 50},

166 {"Tøckög", 
CHAR_SKILL
, 
CHAR_MENTAL
 | 
CAREER_RECON
, 50},

167 {"Tøöög", 
CHAR_SKILL
, 
CHAR_SOCIAL
, 50},

168 {"U«rmed_Comb©", 
CHAR_SKILL
, 
CHAR_ATHLETIC
 | 
CAREER_MISC
, 50},

169 {"Zîo-G_O≥øti⁄s", 
CHAR_SKILL
, 
CHAR_PHYSICAL
, 50},

174 
	#NUM_CHARVALUES
 (
ch¨_vÆues
)/(
ch¨_vÆue
)

	)

176 *
	gch¨_vÆues_sh‹t
[
NUM_CHARVALUES
];

180 *
	gch¨_Àvñs
[] = {

188 
	#NUM_CHARLEVELS
 5

	)

190 *
	gch¨_ty≥s
[] = {

199 
	#NUM_CHARTYPES
 6

	)

201 *
	gch¨_∑ckages
[] = {

214 
	#NUM_CHARPACKAGES
 9

	)

222 
dbªf
 
	mmdbªf
;

223 
	mvÆues
[
NUM_CHARVALUES
];

224 
CLöórTimeAbsﬁuã
 
	mœ°_u£
[
NUM_CHARVALUES
];

225 
	mxp
[
NUM_CHARVALUES
];

226 } 
	tPSTATS
;

230 
	~"p.bãch°©s.h
"

	@btech/btechstats_global.h

17 #i‚de‡
BTECHSTATS_GLOBAL_H


18 
	#BTECHSTATS_GLOBAL_H


	)

20 
	#VALUES_HEALTH
 1

	)

21 
	#VALUES_SKILLS
 2

	)

22 
	#VALUES_ATTRS
 4

	)

23 
	#VALUES_ADVS
 8

	)

24 
	#VALUES_ALL
 15

	)

25 
	#VALUES_CO
 6

	)

28 
	#CHAR_LASTSKILLTYPE
 
CHAR_SOCIAL


	)

32 
	#CHAR_VALUE
 0

	)

33 
	#CHAR_SKILL
 1

	)

34 
	#CHAR_ADVANTAGE
 2

	)

35 
	#CHAR_ATTRIBUTE
 3

	)

39 
	#CHAR_ATHLETIC
 0x0001

	)

40 
	#CHAR_MENTAL
 0x0002

	)

41 
	#CHAR_PHYSICAL
 0x0004

	)

42 
	#CHAR_SOCIAL
 0x0008

	)

45 
	#CAREER_CAVALRY
 0x0010

	)

46 
	#CAREER_BMECH
 0x0020

	)

47 
	#CAREER_AERO
 0x0040

	)

48 
	#CAREER_ARTILLERY
 0x0080

	)

49 
	#CAREER_DROPSHIP
 0x0100

	)

50 
	#CAREER_TECHMECH
 0x0200

	)

51 
	#CAREER_TECHVEH
 0x0400

	)

52 
	#CAREER_TECH
 (
CAREER_TECHMECH
|
CAREER_TECHVEH
|
CAREER_TECHBS
)

	)

53 
	#CAREER_MISC
 0x0800

	)

54 
	#CAREER_ACADMISC
 0x1000

	)

55 
	#CAREER_RECON
 0x2000

	)

56 
	#SK_XP
 0x4000

	)

57 
	#CAREER_GUNNER
 0x8000

	)

58 
	#CAREER_BSUIT
 0x10000

	)

59 
	#CAREER_TECHBS
 0x20000

	)

61 
	#XP_MAX
 (256*256*256Ë

	)

66 
	#CHAR_ADV_VALUE
 0

	)

67 
	#CHAR_ADV_BOOL
 1

	)

68 
	#CHAR_ADV_EXCEPT
 2

	)

70 
	#CHAR_BLD
 1

	)

71 
	#CHAR_REF
 2

	)

72 
	#CHAR_INT
 4

	)

73 
	#CHAR_LRN
 8

	)

74 
	#CHAR_CHA
 16

	)

76 
	#GREEN
 0

	)

77 
	#REGULAR
 1

	)

78 
	#VETEREN
 2

	)

79 
	#ELITE
 3

	)

80 
	#HISTORICAL
 4

	)

83 
	~"p.bãch.h
"

84 
	~"p.bãch°©s.h
"

86 
	#ch¨_gvÆue
 
ch¨_gë°©vÆue


	)

87 
	#ch¨_svÆue
 
ch¨_£t°©vÆue


	)

89 
	#ch¨_gëlives
(
a
Ë
	`ch¨_gëvÆue
◊, "lives")

	)

90 
	#ch¨_gëxp
(
a
Ë
	`ch¨_gëvÆue
◊, "maxxp")

	)

91 
	#ch¨_gëx∑vaû
(
a
Ë
	`ch¨_gëvÆue
◊, "xp")

	)

92 
	#ch¨_gëxp
(
a
Ë
	`ch¨_gëvÆue
◊, "maxxp")

	)

93 
	#ch¨_gëx∑vaû
(
a
Ë
	`ch¨_gëvÆue
◊, "xp")

	)

94 
	#ch¨_gëbrui£
(
a
Ë
	`ch¨_gëvÆue
(◊), "brui£")

	)

95 
	#ch¨_gëmaxbrui£
(
a
Ë
	`ch¨_gëvÆue
(◊), "maxbrui£")

	)

96 
	#ch¨_gëÀthÆ
(
a
Ë
	`ch¨_gëvÆue
(◊), "ÀthÆ")

	)

97 
	#ch¨_gëmaxÀthÆ
(
a
Ë
	`ch¨_gëvÆue
(◊), "maxÀthÆ")

	)

99 
	#ch¨_glives
(
a
Ë
	`ch¨_gvÆue
◊, "lives")

	)

100 
	#ch¨_gxp
(
a
Ë
	`ch¨_gvÆue
◊, "maxxp")

	)

101 
	#ch¨_gx∑vaû
(
a
Ë
	`ch¨_gvÆue
◊, "xp")

	)

102 
	#ch¨_gbrui£
(
a
Ë
	`ch¨_gvÆue
(◊), "brui£")

	)

103 
	#ch¨_gmaxbrui£
(
a
Ë(
	`ch¨_gvÆue
(◊), "buûd")*10)

	)

104 
	#ch¨_gÀthÆ
(
a
Ë
	`ch¨_gvÆue
(◊), "ÀthÆ")

	)

105 
	#ch¨_gmaxÀthÆ
(
a
Ë(
	`ch¨_gvÆue
(◊), "buûd")*10)

	)

107 
	#ch¨_£éives
(
a
,
b
Ë
	`ch¨_£tvÆue
(◊), "lives", (b))

	)

108 
	#ch¨_£tbrui£
(
a
,
b
Ë
	`ch¨_£tvÆue
(◊), "Brui£", (b))

	)

109 
	#ch¨_£tmaxbrui£
(
a
,
b
Ë
	`ch¨_£tvÆue
(◊), "maxbrui£", (b))

	)

110 
	#ch¨_£éëhÆ
(
a
,
b
Ë
	`ch¨_£tvÆue
(◊), "LëhÆ", (b))

	)

111 
	#ch¨_£tmaxÀthÆ
(
a
,
b
Ë
	`ch¨_£tvÆue
(◊), "maxÀthÆ", (b))

	)

113 
	#ch¨_¶ives
(
a
,
b
Ë
	`ch¨_svÆue
(◊), "lives", (b))

	)

114 
	#ch¨_sbrui£
(
a
,
b
Ë
	`ch¨_svÆue
(◊), "brui£", (b))

	)

115 
	#ch¨_smaxbrui£
(
a
,
b
Ë
	`ch¨_svÆue
(◊), "maxbrui£", (b))

	)

116 
	#ch¨_¶ëhÆ
(
a
,
b
Ë
	`ch¨_svÆue
(◊), "ÀthÆ", (b))

	)

117 
	#ch¨_smaxÀthÆ
(
a
,
b
Ë
	`ch¨_svÆue
(◊), "maxÀthÆ", (b))

	)

119 
	#EE_NUMBER
 11

	)

120 
	#LIVES_NUMBER
 5

	)

122 
	#ch¨_gë°©vÆuebycode
(
s
,
code
Ë(codê>0 ? (s->
vÆues
[code] + (
ch¨_vÆues
[code].
ty≥
 =
CHAR_SKILL
 ? 
	`ch¨_xp_b⁄us
(s,codeË: 0Ë): -1)

	)

123 
	#ch¨_gë°©vÆuebycode
(
s
,
code
Ë(codê>0 ? (s->
vÆues
[code] + (
ch¨_vÆues
[code].
ty≥
 =
CHAR_SKILL
 ? 
	`ch¨_xp_b⁄us
(s,codeË: 0Ë): -1)

	)

124 
	#ch¨_£t°©vÆuebycode
(
s
,
code
,
vÆue
) \

125 i‡(
code
 >= 0) \

126 { i‡(
code
 =
EE_NUMBER
Ë
s
->
vÆues
[
LIVES_NUMBER
]+=
vÆue
-s->values[code];\

127 
s
->
vÆues
[
code
] = 
vÆue
; }

	)

128 
	#ch¨_gëvÆuebycode
(
∂ayî
,
code
) \

129 
	`ch¨_gë°©vÆuebycode
(
	`ªåõve_°©s
(
∂ayî
, 
VALUES_ALL
), 
code
)

	)

130 
	#ch¨_£tvÆuebycode
(
∂ayî
,
code
,
vÆue
) \

131 { 
PSTATS
 *
hm
 = 
	`ªåõve_°©s
(
∂ayî
, 
VALUES_ALL
); \

132 
	`ch¨_£t°©vÆuebycode
(
hm
, 
code
, 
vÆue
); \

133 
	`°‹e_°©s
(
∂ayî
, 
hm
, 
VALUES_ALL
); \

134 }

	)

	@btech/btmacros.h

20 
	~"c⁄fig.h
"

22 #i‚de‡
BTMACROS_H


23 
	#BTMACROS_H


	)

25 
	~<m©h.h
>

26 
	~"mech.h
"

27 
	~"muxevít.h
"

28 
	~"p.evít.h
"

30 
	#LOS_NB
 
InLöeOfSight_NB


	)

31 
	#MWÆkögS≥ed
(
max•ìd
Ë((Ë2.0 * (max•ìdË/ 3.0 + 0.1)

	)

32 
	#WÆkögS≥ed
(
max•ìd
Ë((Ë2.0 * (max•ìdË/ 3.0)

	)

33 
	#IsRu¬ög
(
•ìd
,
max•ìd
Ë(•ìd > 
	`MWÆkögS≥ed
(max•ìd))

	)

34 
	#is_´ro
(
mech
Ë((
	`MechTy≥
(mechË=
CLASS_AERO
Ë|| (
	`IsDS
(mech)))

	)

35 
	#IsF‹e°
(
t
Ë— =
LIGHT_FOREST
 ||Å =
HEAVY_FOREST
)

	)

36 
	#IsF‹e°Hex
(
m≠
,
x
,
y
Ë(
	`IsF‹e°
(
	`GëRTîøö
(m≠,x,y)))

	)

37 
	#IsMou¡aös
(
t
Ë— =
MOUNTAINS
)

	)

38 
	#IsMou¡aösHex
(
m≠
,
x
,
y
Ë(
	`IsMou¡aös
(
	`GëRTîøö
(m≠,x,y)))

	)

39 
	#IsRough
(
t
Ë— =
ROUGH
)

	)

40 
	#IsRoughHex
(
m≠
,
x
,
y
Ë(
	`IsRough
(
	`GëRTîøö
(m≠,x,y)))

	)

41 
	#IsBuûdög
(
t
Ë— =
BUILDING
)

	)

42 
	#IsBuûdögHex
(
m≠
,
x
,
y
Ë(
	`IsBuûdög
(
	`GëRTîøö
(m≠,x,y)))

	)

43 
	#Ba£EÀv
(
ãº
,
ñev
Ë(—îrË=
WATER
 ? -”ÀvË: (ãºË=
ICE
 ? -”ÀvË: (ñev))

	)

44 
	#EÀv©i⁄
(
mech_m≠
,
x
,
y
Ë
	`Ba£EÀv
(
	`GëRTîøö
(mech_m≠,x,y),
	`GëEÀv©i⁄
(mech_m≠,x,y))

	)

45 
	#MechEÀv©i⁄
(
mech
Ë
	`Ba£EÀv
(
	`MechRTîøö
(mech),
	`abs
(
	`MechEÀv
(mech)))

	)

46 
	#MechEngöeSizeC
(
mech
) \

47 ((Ë
	`röt
((2 * 
	`MechMaxS≥ed
(
mech
Ë/ 
KPH_PER_MP
Ë/ 3Ë* 
	`MechT⁄s
(mech))

	)

48 
	#MechLowîEÀv©i⁄
(
mech
) \

49 (
	`MechRTîøö
(
mech
Ë!
BRIDGE
 ? 
	`MechEÀv©i⁄
(mechË: 
	`bridge_w_ñev©i⁄
(mech))

	)

50 
	#MechUµîEÀv©i⁄
(
mech
Ë(
	`MechRTîøö
(mechË=
ICE
 ? 0 : 
	`MechEÀv©i⁄
(mech))

	)

51 
	#MechsEÀv©i⁄
(
mech
) \

52 (
	`MechZ
(
mech
Ë- ((
	`MechUµîEÀv©i⁄
(mechË<MechZ(mechË? MechUµîEÀv©i⁄(mechË: 
	`MechLowîEÀv©i⁄
(mech))))

	)

55 
	#GŸPûŸ
(
mech
) \

56 (
	`MechPûŸ
(
mech
Ë> 0 && 
	`Loˇti⁄
(MechPûŸ(mech)Ë=mech->
mynum
)

	)

58 
	#RGŸPûŸ
(
mech
) \

59 ((
	`GŸPûŸ
(
mech
)Ë&& (
	`C⁄√˘ed
(
	`MechPûŸ
(mech)Ë|| !
	`isPœyî
(MechPûŸ(mech))))

	)

61 
	#GŸGPûŸ
(
mech
) \

62 ((
pûŸ_ovîride
 && 
	`GunPûŸ
(
mech
) > 0) || \

63 (!
pûŸ_ovîride
 && 
	`GŸPûŸ
(
mech
)))

	)

65 
	#RGŸGPûŸ
(
mech
) \

66 ((
pûŸ_ovîride
 && 
	`GunPûŸ
(
mech
Ë> 0 && (
	`C⁄√˘ed
(GunPilot(mech)) || \

67 !
	`isPœyî
(
	`GunPûŸ
(
mech
)))) \

68 || (!
pûŸ_ovîride
 && 
	`RGŸPûŸ
(
mech
)))

	)

70 
	#AîoBay
(
a
,
b
Ë◊)->
pd
.
bay
[b]

	)

71 
	#AîoFuñ
(
a
Ë◊)->
ud
.
fuñ


	)

72 
	#AîoFuñMax
(
a
Ë◊)->
rd
.
maxfuñ


	)

73 
	#AîoFuñOrig
(
a
Ë◊)->
ud
.
fuñ_‹ig


	)

74 
	#AîoSI
(
a
Ë◊)->
ud
.
si


	)

75 
	#AîoSIOrig
(
a
Ë◊)->
ud
.
si_‹ig


	)

76 
	#AîoTuºë
(
a
,
b
Ë◊)->
pd
.
tuºë
[b]

	)

77 
	#AîoUnußbÀArcs
(
a
Ë◊)->
pd
.
unußbÀ_¨cs


	)

78 
	#AîoFªeFuñ
(
a
Ë((
	`MechTy≥
◊Ë=
CLASS_VTOL
Ë&& 
bãchc⁄f
.
bãch_nofusi⁄vtﬁfuñ
 && (!(
	`MechS≥cüls
◊Ë& 
ICE_TECH
)))

	)

79 
	#DSLa°Msg
(
a
Ë◊)->
rd
.
œ°_ds_msg


	)

80 
	#GunPûŸ
(
a
Ë(
pûŸ_ovîride
>0?pûŸ_ovîride:
	`MechPûŸ
◊))

	)

81 
	#MechRadioTy≥
(
a
Ë(◊)->
ud
.
ødioöfo
)

	)

82 
	#MechRadioInfo
(
a
Ë(
	`MechRadioTy≥
◊Ë/ 
FREQS
)

	)

83 
	#MechFªqs
(
a
Ë(
	`MechRadioTy≥
◊Ë% 
FREQS
)

	)

84 
	#MFªqs
(
a
Ë
	`MechFªqs
◊)

	)

85 
	#MechAim
(
a
Ë◊)->
rd
.
aim


	)

86 
	#MechAimTy≥
(
a
Ë◊)->
rd
.
aim_ty≥


	)

87 
	#MechAuto
(
a
Ë◊)->
rd
.
aut›ûŸ_num


	)

88 
	#MechBTH
(
a
Ë◊)->
rd
.
ba£tohô


	)

89 
	#MechBa£WÆk
(
a
Ë◊)->
ud
.
wÆk•ìd


	)

90 
	#MechBa£Run
(
a
Ë◊)->
ud
.
run•ìd


	)

91 
	#MechBoomSèπ
(
a
Ë◊)->
rd
.
boom_°¨t


	)

92 
	#MechC¨rõdC¨go
(
a
Ë◊)->
rd
.
ˇrgo_weight


	)

93 
	#SëCWCheck
(
a
Ë
	`MechCrôSètus
◊Ë&~
LOAD_OK


	)

94 
	#SëWCheck
(
a
Ë
	`MechCrôSètus
◊Ë&~
OWEIGHT_OK


	)

95 
	#SëC¨rõdC¨go
(
a
,
b
Ëdÿ{ 
	`MechC¨rõdC¨go
◊Ë(bË; 
	`SëCWCheck
◊); } 0)

	)

96 
	#MechC¨ryög
(
a
Ë◊)->
rd
.
ˇºyög


	)

97 
	#SëC¨ryög
(
a
,
b
Ëdÿ{ 
	`MechC¨ryög
◊Ë(bË; 
	`SëCWCheck
◊Ë; } 0)

	)

98 
	#MechCh¨geT¨gë
(
a
Ë◊)->
rd
.
chgèrgë


	)

99 
	#MechCh¨geTimî
(
a
Ë◊)->
rd
.
ch¨gëimî


	)

100 
	#MechCh¨geDi°™˚
(
a
Ë◊)->
rd
.
ch¨gedi°


	)

101 
	#MechCoco⁄
(
a
Ë◊)->
rd
.
coco⁄


	)

102 
	#MechComm
(
a
Ë◊)->
rd
.
commc⁄v


	)

103 
	#MechCommLa°
(
a
Ë◊)->
rd
.
commc⁄v_œ°


	)

104 
	#MechCompuãr
(
a
Ë◊)->
ud
.
compuãr


	)

105 
	#MechCrôSètus
(
a
Ë◊)->
rd
.
¸ô°©us


	)

106 
	#MechDFAT¨gë
(
a
Ë◊)->
rd
.
dÁèrgë


	)

107 
	#MechDesúedAngÀ
(
a
Ë◊)->
rd
.
™gÀ


	)

108 
	#MechDesúedFacög
(
a
Ë◊)->
rd
.
desúedÁcög


	)

109 
	#MechDesúedS≥ed
(
a
Ë◊)->
rd
.
desúed_•ìd


	)

110 
	#MechEÀv
(
a
Ë◊)->
pd
.
ñev


	)

111 
	#MechEndFZ
(
a
Ë◊)->
rd
.
ídfz


	)

112 
	#MechEngöeHót
(
a
Ë◊)->
rd
.
ígöehót


	)

113 
	#MechFX
(
a
Ë◊)->
pd
.
fx


	)

114 
	#MechFY
(
a
Ë◊)->
pd
.
fy


	)

115 
	#MechFZ
(
a
Ë◊)->
pd
.
fz


	)

116 
	#MechFacög
(
a
Ë(
	`FSIM2SHO
(◊)->
pd
.
Ácög
))

	)

117 
	#MechRFacög
(
a
Ë◊)->
pd
.
Ácög


	)

118 
	#SëRFacög
(
a
,
b
Ë
	`MechRFacög
◊Ë(b)

	)

119 
	#SëFacög
(
a
,
b
Ë
	`SëRFacög
◊,
	`SHO2FSIM
(b))

	)

120 
	#AddRFacög
(
a
,
b
Ë
	`MechRFacög
◊Ë+
	)
b

121 
	#AddFacög
(
a
,
b
Ë
	`AddRFacög
◊,
	`SHO2FSIM
(b))

	)

122 
	#MechFúeAdju°mít
(
a
Ë◊)->
rd
.
fúe_adju°mít


	)

123 
	#MechGoögX
(
a
Ë◊)->
rd
.
goögx


	)

124 
	#MechGoögY
(
a
Ë◊)->
rd
.
goögy


	)

125 
	#MechHót
(
a
Ë◊)->
rd
.
hót


	)

126 
	#MechHótLa°
(
a
Ë◊)->
rd
.
hótboom_œ°


	)

127 
	#MechHexes
(
a
Ë◊)->
pd
.
hexes_wÆked


	)

128 
	#MechID
(
a
Ë◊)->
ID


	)

129 
	#MechIsOmniMech
(
a
Ë
	`MechS≥cüls2
◊Ë& 
OMNIMECH_TECH


	)

130 
	#MechInÁ¡ryS≥cüls
(
a
Ë◊)->
rd
.
öÁ¡ry_•ecüls


	)

131 
	#MechJumpHódög
(
a
Ë◊)->
rd
.
jumphódög


	)

132 
	#MechJumpLígth
(
a
Ë◊)->
rd
.
jum∂ígth


	)

133 
	#MechJumpS≥ed
(
a
Ë◊)->
rd
.
jump•ìd


	)

134 
	#MechJumpT›
(
a
Ë◊)->
rd
.
jum±›


	)

135 
	#MechLRSR™ge
(
a
Ë◊)->
ud
.
Ãs_ønge


	)

136 
	#MechLWRT
(
a
Ë◊)->
rd
.
œ°_wóp⁄_ªcy˛e


	)

137 
	#MechLa°RndU
(
a
Ë◊)->
rd
.
œ°∫du


	)

138 
	#MechLa°U£
(
a
Ë◊)->
rd
.
œ°u£d


	)

139 
	#MechLa°Sèπup
(
a
Ë◊)->
rd
.
œ°_°¨tup


	)

140 
	#MechLa°X
(
a
Ë◊)->
pd
.
œ°_x


	)

141 
	#MechLa°Y
(
a
Ë◊)->
pd
.
œ°_y


	)

142 
	#MechL©îÆ
(
a
Ë◊)->
rd
.
œãøl


	)

143 
	#MechMASCCou¡î
(
a
Ë◊)->
rd
.
masc_vÆue


	)

144 
	#MechSCh¨geCou¡î
(
a
Ë◊)->
rd
.
sch¨ge_vÆue


	)

145 
	#MechEngöeSizeV
(
a
Ë◊)->
rd
.
î©


	)

146 
	#MechEngöeSize
(
a
Ë(
	`MechEngöeSizeV
◊Ë> 0 ? MechEngöeSizeV◊Ë: 
	`MechEngöeSizeC
◊))

	)

147 
	#MechMaxS≥ed
(
a
Ë◊)->
ud
.
max•ìd


	)

148 
	#SëMaxS≥ed
(
a
,
b
Ëdÿ{
	`MechMaxS≥ed
◊Ëb;
	`MechCrôSètus
◊Ë&~
SPEED_OK
;
	`c‹ª˘_•ìd
◊);} 0)

	)

149 
	#LowîMaxS≥ed
(
a
,
b
Ë
	`SëMaxS≥ed
◊,
	`MechMaxS≥ed
◊)-b)

	)

150 
	#DivideMaxS≥ed
(
a
,
b
Ë
	`SëMaxS≥ed
◊,
	`MechMaxS≥ed
◊)/b)

	)

151 
	#MechRMaxS≥ed
(
a
Ë◊)->
rd
.
r•d


	)

152 
	#MMaxS≥ed
(
a
Ë((Ë
	`MechC¨goMaxS≥ed
(◊),(Ë
	`MechMaxS≥ed
(◊))))

	)

153 
	#MechMaxSuôs
(
a
Ë◊)->
rd
.
maxsuôs


	)

154 
	#MechMöusHót
(
a
Ë◊)->
rd
.
möus_hót


	)

155 
	#MechMove
(
a
Ë◊)->
ud
.
move


	)

156 
	#MechIsQuad
(
a
Ë(
	`MechMove
◊Ë=
MOVE_QUAD
)

	)

157 
	#MechIsBùed
(
a
Ë(
	`MechMove
◊Ë=
MOVE_BIPED
)

	)

158 
	#MechNumOsöks
(
a
Ë◊)->
rd
.
⁄umsöks


	)

159 
	#MechNumSìn
(
a
Ë◊)->
rd
.
num_£í


	)

160 
	#MechPNumSìn
(
a
Ë◊)->
rd
.
ˇn_£e


	)

161 
	#MechRólNumsöks
(
a
Ë◊)->
ud
.
numsöks


	)

162 
	#MechA˘iveNumsöks
(
a
Ë(
	`MechRólNumsöks
◊Ë- 
	`MechDißbÀdHS
◊))

	)

163 
	#MechDißbÀdHS
(
a
Ë◊)->
rd
.
dißbÀd_hs


	)

164 
	#MechPî
(
a
Ë◊)->
rd
.
≥r


	)

165 
	#MechPªfs
(
a
Ë◊)->
rd
.
mech_¥efs


	)

166 
	#MechPKûÀr
(
a
Ë(
	`MechPªfs
◊Ë& 
MECHPREF_PKILL
)

	)

167 
	#SëMechPKûÀr
(
a
Ë(
	`MechPªfs
◊Ë|
MECHPREF_PKILL
)

	)

168 
	#UnSëMechPKûÀr
(
a
Ë(
	`MechPªfs
◊Ë&~
MECHPREF_PKILL
)

	)

169 
	#MechSLW¨n
(
a
Ë(
	`MechPªfs
◊Ë& 
MECHPREF_SLWARN
)

	)

170 
	#MechAutoFÆl
(
a
Ë(
	`MechPªfs
◊Ë& 
MECHPREF_AUTOFALL
)

	)

171 
	#MechArm‹W¨n
(
a
Ë(!(
	`MechPªfs
◊Ë& 
MECHPREF_NOARMORWARN
))

	)

172 
	#MechAmmoW¨n
(
a
Ë(!(
	`MechPªfs
◊Ë& 
MECHPREF_NOAMMOWARN
))

	)

173 
	#MechFaûSènd
(
a
Ë(!(
	`MechPªfs
◊Ë& 
MECHPREF_NOFAILSTAND
))

	)

174 
	#MechAutoc⁄SD
(
a
Ë(
	`MechPªfs
◊Ë& 
MECHPREF_AUTOCON_SD
)

	)

175 
	#MechNoFrõndlyFúe
(
a
Ë(
	`MechPªfs
◊Ë& 
MECHPREF_NOFRIENDLYFIRE
)

	)

176 
	#MechWÆkXPFa˘‹
(
a
Ë◊)->
rd
.
wxf


	)

177 
	#MechPûŸ
(
a
Ë◊)->
pd
.
pûŸ


	)

178 
	#MechPûŸSkûlBa£
(
a
Ë◊)->
rd
.
pûŸskûlba£


	)

179 
	#MechPûŸSètus
(
a
Ë◊)->
pd
.
pûŸ°©us


	)

180 
	#MechPlusHót
(
a
Ë◊)->
rd
.
∂us_hót


	)

181 
	#MechRadio
(
a
Ë◊)->
ud
.
ødio


	)

182 
	#MechRadioR™ge
(
a
Ë◊)->
ud
.
ødio_ønge


	)

183 
	#MechRnd
(
a
Ë◊)->
rd
.
∫d


	)

184 
	#MechSˇnR™ge
(
a
Ë◊)->
ud
.
sˇn_ønge


	)

185 
	#MechSe˘i⁄s
(
a
Ë◊)->
ud
.
£˘i⁄s


	)

186 
	#MechSís‹
(
a
Ë◊)->
rd
.
£ns‹


	)

187 
	#MechS≥cüls
(
a
Ë◊)->
rd
.
•ecüls


	)

188 
	#MechS≥cüls2
(
a
Ë◊)->
rd
.
•ecüls2


	)

189 
	#MechS≥ed
(
a
Ë◊)->
rd
.
•ìd


	)

190 
	#MechSpŸãr
(
a
Ë◊)->
rd
.
•Ÿãr


	)

191 
	#MechSèŒ
(
a
Ë◊)->
pd
.
°Æl


	)

192 
	#MechSèπFX
(
a
Ë◊)->
rd
.
°¨tfx


	)

193 
	#MechSèπFY
(
a
Ë◊)->
rd
.
°¨tfy


	)

194 
	#MechSèπFZ
(
a
Ë◊)->
rd
.
°¨tfz


	)

195 
	#MechSèπSpö
(
a
Ë◊)->
rd
.
s•ö


	)

196 
	#MechSètus
(
a
Ë◊)->
rd
.
°©us


	)

198 
	#MechSètus2
(
a
Ë◊)->
rd
.
°©us2


	)

200 
	#MechSw¨mT¨gë
(
a
Ë◊)->
rd
.
sw¨mög


	)

201 
	#MechTacR™ge
(
a
Ë◊)->
ud
.
èc_ønge


	)

202 
	#MechT™kCrôSètus
(
a
Ë◊)->
rd
.
ènk¸ô°©us


	)

203 
	#MechT¨gX
(
a
Ë◊)->
rd
.
èrgx


	)

204 
	#MechT¨gY
(
a
Ë◊)->
rd
.
èrgy


	)

205 
	#MechT¨gZ
(
a
Ë◊)->
rd
.
èrgz


	)

206 
	#MechT¨gë
(
a
Ë◊)->
rd
.
èrgë


	)

207 
	#MechTóm
(
a
Ë◊)->
pd
.
ãam


	)

208 
	#MechTîøö
(
a
Ë◊)->
pd
.
ãºaö


	)

209 
	#MechRTîøö
(
a
Ë((
	`MechTîøö
◊Ë=
FIRE
 || MechTîøö◊Ë=
SMOKE
Ë? 
	`mech_undîlyög_ãºaö
◊Ë: MechTîøö◊))

	)

210 
	#MechT⁄s
(
a
Ë◊)->
ud
.
t⁄s


	)

211 
	#MechRT⁄s
(
a
Ë
	`gë_weight
◊)

	)

212 
	#MechRT⁄sV
(
a
Ë◊)->
rd
.
row


	)

213 
	#MechRólT⁄s
(
a
Ë(◊)->
rd
.
row
 / 1024)

	)

214 
	#MechRCT⁄sV
(
a
Ë◊)->
rd
.
rcw


	)

215 
	#MechTu∫Damage
(
a
Ë◊)->
rd
.
tu∫damage


	)

216 
	#MechSèggîedLa°Tu∫
(
a
Ë◊)->
rd
.
°aggî°amp


	)

217 
	#MechSèggîSèmp
(
a
Ë(◊)->
rd
.
°aggî°amp
 - 1)

	)

218 
	#SëMechSèggîSèmp
(
a
,
b
Ë(◊)->
rd
.
°aggî°amp
 = (bË+ 1)

	)

219 
	#MechTuºëFacög
(
a
Ë◊)->
rd
.
tuºëÁcög


	)

220 
	#MechTy≥
(
a
Ë◊)->
ud
.
ty≥


	)

221 
	#MechTy≥_Name
(
a
Ë◊)->
ud
.
mech_«me


	)

222 
	#MechTy≥_Ref
(
a
Ë◊)->
ud
.
mech_ty≥


	)

223 
	#MechVFacög
(
a
Ë
	`Ac˚±abÀDegªe
(
	`MechFacög
◊Ë+ 
	`MechL©îÆ
◊))

	)

224 
	#MechVîtiˇlS≥ed
(
a
Ë◊)->
rd
.
vîtiˇl•ìd


	)

225 
	#MechVisMod
(
a
Ë◊)->
rd
.
vis_mod


	)

226 
	#MechWópHót
(
a
Ë◊)->
rd
.
wóphót


	)

227 
	#MechX
(
a
Ë◊)->
pd
.
x


	)

228 
	#MechY
(
a
Ë◊)->
pd
.
y


	)

229 
	#MechZ
(
a
Ë◊)->
pd
.
z


	)

230 
	#MechLX
(
a
Ë◊)->
rd
.
lx


	)

231 
	#MechLY
(
a
Ë◊)->
rd
.
ly


	)

233 
	#MechT¨gComp
(
a
Ë◊)->
ud
.
èrgcomp


	)

234 
	#MechBVLa°
(
a
Ë◊)->
ud
.
mechbv_œ°


	)

235 
	#MechBV
(
a
Ë◊)->
ud
.
mechbv


	)

236 
	#C¨goS∑˚
(
a
Ë◊)->
ud
.
ˇrgo•a˚


	)

237 
	#C¨MaxT⁄
(
a
Ë◊)->
ud
.
ˇrmaxt⁄


	)

238 
	#Hótcutoff
(
a
Ë(
	`MechCrôSètus
◊Ë& 
HEATCUTOFF
)

	)

240 
	#MechHasDHS
(
a
Ë(
	`MechS≥cüls
◊Ë& (
CLAN_TECH
|
DOUBLE_HEAT_TECH
))

	)

241 
	#CœnMech
(
a
Ë(
	`MechS≥cüls
◊Ë& 
CLAN_TECH
)

	)

243 
	#HS_Size
(
a
Ë(
	`MechTy≥
(
mech
Ë=
CLASS_MECH
 ? (
	`CœnMech
◊Ë? 2 : ((
	`MechS≥cüls
◊Ë& 
DOUBLE_HEAT_TECH
Ë? 3 : 1)Ë: 1)

	)

244 
	#HS_Efficõncy
(
a
Ë(
	`MechHasDHS
◊Ë? 2 : 1)

	)

246 
	#DSS∑m
(
mek
,
msg
Ëdÿ{ i‡(
	`Dr›Shù
(
	`MechTy≥
(mek)Ë&& 
	`DSOkToNŸify
(mek)Ë
	`MechLOSBrﬂdˇ°
(mek,msg); } 0)

	)

247 
	#DSS∑m_O
(
mek
,
msg
Ëdÿ{ i‡(
	`Dr›Shù
(
	`MechTy≥
(mek))Ë
	`MechLOSBrﬂdˇ°
(mek,msg); } 0)

	)

249 
	#MechHasTuºë
(
a
Ë((
	`MechTy≥
◊Ë=
CLASS_VEH_GROUND
 || \

250 
	`MechTy≥
(
a
Ë=
CLASS_VEH_NAVAL
 || \

251 
	`MechTy≥
(
a
Ë=
CLASS_VTOL
) && \

252 
	`GëSe˘OI¡
(
a
, 
TURRET
))

	)

254 
	#MechSìmsFrõnd
(
a
, 
b
Ë(
	`MechTóm
(a) == MechTeam(b) && \

255 
	`InLöeOfSight_NB
(
a
, 
b
, 0, 0, 0))

	)

257 
	#MECHEVENT
(
mech
,
ty≥
,
func
,
time
,
d©a
) \

258 dÿ{ i‡(
mech
->
mynum
 > 0) \

259 
	`muxevít_add
(
time
, 0, 
ty≥
, 
func
, (*Ë(
mech
), (*Ë(
d©a
)); } 0)

	)

261 
	#AUTOEVENT
◊uto,
ty≥
,
func
,
time
,
d©a
) \

262 
	`muxevít_add
(
time
, 0, 
ty≥
, 
func
, (*Ë◊uto), (*Ë(
d©a
))

	)

264 
	#MAPEVENT
(
m≠
,
ty≥
,
func
,
time
,
d©a
) \

265 
	`muxevít_add
(
time
, 0, 
ty≥
, 
func
, (*Ë(
m≠
), (*Ë(
d©a
))

	)

266 
	#St›Dec
(
a
Ë
	`muxevít_ªmove_ty≥_d©a2
(
EVENT_DECORATION
, (*Ëa)

	)

268 
	#OBJEVENT
(
obj
,
ty≥
,
func
,
time
,
d©a
) \

269 
	`muxevít_add
(
time
, 0, 
ty≥
, 
func
, (*Ë
obj
, (*Ë(
d©a
))

	)

271 
	#GëP¨tTy≥
(
a
,
b
,
c
Ë
	`MechSe˘i⁄s
◊)[b].
¸ôiˇls
[c].
ty≥


	)

272 
	#SëP¨tTy≥
(
a
,
b
,
c
,
d
Ë
	`GëP¨tTy≥
◊,b,c)=
	)
d

274 
	#GëP¨tFúeMode
(
a
,
b
,
c
Ë
	`MechSe˘i⁄s
◊)[b].
¸ôiˇls
[c].
fúemode


	)

275 
	#SëP¨tFúeMode
(
a
,
b
,
c
,
d
Ë
	`GëP¨tFúeMode
◊,b,c)=
	)
d

277 
	#GëP¨tAmmoMode
(
a
,
b
,
c
Ë
	`MechSe˘i⁄s
◊)[b].
¸ôiˇls
[c].
ammomode


	)

278 
	#SëP¨tAmmoMode
(
a
,
b
,
c
,
d
Ë
	`GëP¨tAmmoMode
◊,b,c)=
	)
d

280 
	#GëP¨tDamageFœgs
(
a
,
b
,
c
Ë
	`MechSe˘i⁄s
◊)[b].
¸ôiˇls
[c].
wópDamageFœgs


	)

281 
	#SëP¨tDamageFœgs
(
a
,
b
,
c
,
d
Ë
	`GëP¨tDamageFœgs
◊,b,c)=
	)
d

283 
	#GëP¨tDesúedAmmoLoc
(
a
,
b
,
c
Ë
	`MechSe˘i⁄s
◊)[b].
¸ôiˇls
[c].
desúedAmmoLoc


	)

284 
	#SëP¨tDesúedAmmoLoc
(
a
,
b
,
c
,
d
Ë
	`GëP¨tDesúedAmmoLoc
◊,b,c)=
	)
d

286 
	#GëP¨tD©a
(
a
,
b
,
c
Ë
	`MechSe˘i⁄s
◊)[b].
¸ôiˇls
[c].
d©a


	)

287 
	#SëP¨tD©a
(
a
,
b
,
c
,
d
Ë
	`GëP¨tD©a
◊,b,c)=
	)
d

289 
	#GëP¨tRBønd
(
mech
,
a
,
b
Ë
	`MechSe˘i⁄s
(mech)[a].
¸ôiˇls
[b].
bønd


	)

290 
	#GëP¨tBønd
(
mech
,
a
,
b
Ë(
	`GëP¨tRBønd
(mech,a,b)%16)

	)

292 
	#SëP¨tBønd
(
mech
,
a
,
b
,
d
) \

293 
	`GëP¨tRBønd
(
mech
,
a
,
b
Ë(
d
Ë+ (
	`P¨tTempNuke
(mech,a,b)<<4)

	)

294 
	#P¨tTempNuke
(
mech
,
a
,
b
Ë(
	`GëP¨tRBønd
(mech,a,b)>>4)

	)

295 
	#SëP¨tTempNuke
(
mech
,
a
,
b
,
d
) \

296 
	`GëP¨tRBønd
(
mech
,
a
,
b
Ë
	`GëP¨tBønd
(mech,a,bË+ ((
d
Ë<< 4)

	)

297 
	#CÀ¨TempNuke
(
mech
,
a
,
b
Ë
	`GëP¨tRBønd
(mech,a,bË
	`GëP¨tBønd
(mech,a,b)

	)

299 
	#P¨tIsN⁄fun˘i⁄Æ
(
a
,
b
,
c
Ë(
	`P¨tIsDißbÀd
◊,b,cË|| 
	`P¨tIsBrokí
◊,b,cË|| 
	`P¨tIsDe°royed
◊,b,c))

	)

300 
	#P¨tIsDamaged
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË& 
DAMAGED_MODE
)

	)

301 
	#DamageP¨t
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË|
DAMAGED_MODE
)

	)

302 
	#UnDamageP¨t
(
a
,
b
,
c
Ëdÿ{ (
	`GëP¨tFúeMode
◊,b,cË&~
DAMAGED_MODE
); 
	`SëP¨tDamageFœgs
◊,b,c,0); 
	`SëP¨tTempNuke
◊,b,c,0); } 0)

	)

303 
	#P¨tIsDißbÀd
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË& 
DISABLED_MODE
)

	)

304 
	#DißbÀP¨t
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË|
DISABLED_MODE
)

	)

305 
	#UnDißbÀP¨t
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË&~
DISABLED_MODE
)

	)

306 
	#P¨tIsBrokí
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË& (
DESTROYED_MODE
|
BROKEN_MODE
))

	)

307 
	#BªakP¨t
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË|
BROKEN_MODE
)

	)

308 
	#UnBªakP¨t
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË&~
BROKEN_MODE
)

	)

309 
	#P¨tIsDe°royed
(
a
,
b
,
c
Ë(
	`GëP¨tFúeMode
◊,b,cË& 
DESTROYED_MODE
)

	)

310 
	#De°royP¨t
(
a
,
b
,
c
Ëdÿ{ (
	`GëP¨tFúeMode
◊,b,cË|
DESTROYED_MODE
); GëP¨tFúeMode◊,b,cË&~(
BROKEN_MODE
|
DISABLED_MODE
|
DAMAGED_MODE
); 
	`SëP¨tDamageFœgs
◊,b,c,0); 
	`SëP¨tTempNuke
◊,b,c,0); } 0)

	)

311 
	#UnDe°royP¨t
(
a
,
b
,
c
Ëdÿ{ (
	`GëP¨tFúeMode
◊,b,cË&~(
DESTROYED_MODE
|
HOTLOAD_MODE
|
DISABLED_MODE
|
BROKEN_MODE
|
DAMAGED_MODE
)); 
	`SëP¨tDamageFœgs
◊,b,c,0); 
	`SëP¨tTempNuke
◊,b,c,0); } 0)

	)

313 
	#W≤IsRecy˛ög
(
a
,
b
,
c
Ë(
	`GëP¨tD©a
(a,b,c) > 0 && \

314 
	`IsWóp⁄
(
	`GëP¨tTy≥
(
a
,
b
,
c
)) && \

315 !
	`P¨tIsN⁄fun˘i⁄Æ
(
a
,
b
,
c
) && \

316 !
	`Se˘IsDe°royed
(
a
,
b
))

	)

317 
	#Se˘Arm‹Rïaú
(
a
,
b
Ë
	`Some⁄eFixögA
◊,b)

	)

318 
	#Se˘RArm‹Rïaú
(
a
,
b
Ë
	`Some⁄eFixögA
◊,b+8)

	)

319 
	#Se˘I¡sRïaú
(
a
,
b
Ë
	`Some⁄eFixögI
◊,b)

	)

321 
	#Se˘IsDe°royed
(
a
,
b
Ë(!
	`GëSe˘Arm‹
◊,bË&& ((
	`is_´ro
◊Ë|| !
	`GëSe˘I¡
◊,b)Ë&& !
	`IsDS
◊)))

	)

322 
	#SëSe˘De°royed
(
a
,
b
)

	)

323 
	#UnSëSe˘De°royed
(
a
,
b
)

	)

324 
	#Se˘IsBªached
(
a
,
b
Ë(◊)->
ud
.
£˘i⁄s
[b].
c⁄fig
 & 
SECTION_BREACHED
)

	)

325 
	#SëSe˘Bªached
(
a
,
b
) \

326 dÿ{ 
	`MechSe˘i⁄s
(
a
)[
b
].
c⁄fig
 |
SECTION_BREACHED
 ; 
	`SëWCheck
◊); } 0)

	)

327 
	#UnSëSe˘Bªached
(
a
,
b
) \

328 dÿ{ 
	`MechSe˘i⁄s
(
a
)[
b
].
c⁄fig
 &~
SECTION_BREACHED
 ; 
	`SëWCheck
◊); } 0)

	)

334 
	#Se˘IsFlooded
(
a
,
b
Ë(◊)->
ud
.
£˘i⁄s
[b].
c⁄fig
 & 
SECTION_FLOODED
)

	)

335 
	#SëSe˘Flooded
(
a
,
b
Ëdÿ{ 
	`MechSe˘i⁄s
◊)[b].
c⁄fig
 |
SECTION_FLOODED
 ; 
	`SëWCheck
◊); } 0)

	)

336 
	#UnSëSe˘Flooded
(
a
,
b
Ëdÿ{ 
	`MechSe˘i⁄s
◊)[b].
c⁄fig
 &~
SECTION_FLOODED
 ; 
	`SëWCheck
◊); } 0)

	)

338 
	#GëSe˘Arm‹
(
a
,
b
Ë(◊)->
ud
.
£˘i⁄s
[b].
¨m‹
)

	)

339 
	#GëSe˘RArm‹
(
a
,
b
Ë(◊)->
ud
.
£˘i⁄s
[b].
ª¨
)

	)

340 
	#GëSe˘I¡
(
a
,
b
Ë(◊)->
ud
.
£˘i⁄s
[b].
öã∫Æ
)

	)

342 
	#SëSe˘Arm‹
(
a
,
b
,
c
Ëdÿ{ (a)->
ud
.
£˘i⁄s
[b].
¨m‹
=c;
	`SëWCheck
◊); } 0)

	)

343 
	#SëSe˘RArm‹
(
a
,
b
,
c
Ëdÿ{ (a)->
ud
.
£˘i⁄s
[b].
ª¨
=c;
	`SëWCheck
◊); } 0)

	)

344 
	#SëSe˘I¡
(
a
,
b
,
c
Ëdÿ{ (a)->
ud
.
£˘i⁄s
[b].
öã∫Æ
=c;
	`SëWCheck
◊); } 0)

	)

346 
	#GëSe˘OArm‹
(
a
,
b
Ë◊)->
ud
.
£˘i⁄s
[b].
¨m‹_‹ig


	)

347 
	#GëSe˘ORArm‹
(
a
,
b
Ë◊)->
ud
.
£˘i⁄s
[b].
ª¨_‹ig


	)

348 
	#GëSe˘OI¡
(
a
,
b
Ë◊)->
ud
.
£˘i⁄s
[b].
öã∫Æ_‹ig


	)

350 
	#SëSe˘OArm‹
(
a
,
b
,
c
Ë◊)->
ud
.
£˘i⁄s
[b].
¨m‹_‹ig
=
	)
c

351 
	#SëSe˘ORArm‹
(
a
,
b
,
c
Ë◊)->
ud
.
£˘i⁄s
[b].
ª¨_‹ig
=
	)
c

352 
	#SëSe˘OI¡
(
a
,
b
,
c
Ë◊)->
ud
.
£˘i⁄s
[b].
öã∫Æ_‹ig
=
	)
c

354 
	#C™Jump
(
a
Ë(!(
	`Sèbûizög
◊)Ë&& !(
	`Jumpög
◊)))

	)

359 
	#CªwStu¬ed
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_UNSTUN_CREW
, (*Ëa)

	)

360 
	#StunCªw
(
a
Ë
	`MECHEVENT
◊, 
EVENT_UNSTUN_CREW
, 
un°un_¸ew_evít
, 60, 0)

	)

362 
	#Bu∫ög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_VEHICLEBURN
, (*Ëa)

	)

363 
	#Bu∫ögSide
(
a
,
side
Ë
	`muxevít_cou¡_ty≥_d©a_d©a
(
EVENT_VEHICLEBURN
, (*Ëa, (*Ëside)

	)

364 
	#St›Bu∫ög
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_VEHICLEBURN
, (*Ëa)

	)

365 
	#St›Bu∫ögSide
(
a
,
side
Ë
	`muxevít_ªmove_ty≥_d©a_d©a
(
EVENT_VEHICLEBURN
, (*Ëa, (*Ëside)

	)

366 
	#Extöguishög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_VEHICLE_EXTINGUISH
, (*Ëa)

	)

367 
	#Jñlõd
(
a
Ë(
	`MechCrôSètus
◊Ë& 
JELLIED
)

	)

368 
	#Ex∂odög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_EXPLODE
, (*Ëa)

	)

369 
	#Dumpög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_DUMP
, (*Ëa)

	)

370 
	#Dumpög_Ty≥
(
a
,
ty≥
Ë(
	`muxevít_cou¡_ty≥_d©a_d©a
(
EVENT_DUMP
, (*Ëa, (*Ëty≥Ë|| muxevít_cou¡_ty≥_d©a_d©a(EVENT_DUMP, (*Ëa, (*Ë0))

	)

371 
	#DumpögD©a
(
a
,
d©a2
Ë
	`muxevít_gë_ty≥_d©a
(
EVENT_DUMP
, (*Ëa, d©a2);

	)

372 
	#Ch™gögL©îÆ
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_LATERAL
,(*Ëa)

	)

373 
	#Sìög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_PLOS
,(*Ëa)

	)

374 
	#Lockög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_LOCK
,(*Ëa)

	)

375 
	#Hidög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_HIDE
,(*Ëa)

	)

376 
	#HasCamo
(
a
Ë(
	`MechS≥cüls2
◊Ë& 
CAMO_TECH
)

	)

377 
	#Diggög
(
a
Ë(
	`MechT™kCrôSètus
◊Ë& 
DIGGING_IN
)

	)

378 
	#MechDugIn
(
a
Ë(
	`MechT™kCrôSètus
(
mech
Ë& 
DUG_IN
)

	)

379 
	#Ch™gögHuŒdown
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_CHANGING_HULLDOWN
,(*Ëa)

	)

380 
	#IsHuŒdown
(
a
Ë(
	`MechSètus
◊Ë& 
HULLDOWN
)

	)

381 
	#FÆlög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_FALL
,(*Ëa)

	)

382 
	#Movög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_MOVE
,(*Ëa)

	)

383 
	#RemovögPods
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_REMOVE_PODS
,(*Ëa)

	)

384 
	#Sís‹Ch™ge
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_SCHANGE
,(*Ëa)

	)

385 
	#Sèbûizög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_JUMPSTABIL
,(*Ëa)

	)

386 
	#Sèndªcovîög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_STANDFAIL
, (*Ëa)

	)

387 
	#Sèndög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_STAND
,(*Ëa)

	)

388 
	#Sèπög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_STARTUP
,(*Ëa)

	)

389 
	#Recovîög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_RECOVERY
,(*Ëa)

	)

390 
	#TakögOff
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_TAKEOFF
,(*Ëa)

	)

391 
	#NextRecy˛e
(
a
Ë
	`muxevít_fú°_ty≥_d©a
(
EVENT_RECYCLE
,(*Ëa)

	)

392 
	#Recy˛ög
(
a
Ë(
	`NextRecy˛e
◊Ë>0 ? 1 : 0)

	)

393 
	#FlyögT
(
a
Ë(
	`is_´ro
◊Ë|| 
	`MechMove
◊Ë=
MOVE_VTOL
)

	)

394 
	#RﬁlögT
(
a
Ë((
	`MechTy≥
◊Ë=
CLASS_AERO
Ë|| (MechTy≥◊Ë=
CLASS_DS
))

	)

395 
	#MaybeMove
(
a
) \

396 dÿ{ i‡(!
	`Movög
(
a
Ë&& 
	`Sèπed
◊Ë&& (!
	`FÆÀn
(
mech
Ë|| 
	`MechTy≥
◊Ë=
CLASS_MECH
)) \

397 
	`MECHEVENT
(
a
,
EVENT_MOVE
,
	`is_´ro
◊Ë? 
´ro_move_evít
 : 
mech_move_evít
,\

398 
MOVE_TICK
,0); } 0)

	)

399 
	#SëRecy˛eP¨t
(
a
,
b
,
c
,
d
) \

400 dÿ{ 
	`MaybeRecy˛e
(
a
,
d
Ë; 
	`SëP¨tD©a
◊,
b
,
c
,d); } 0)

	)

401 
	#SëRecy˛eLimb
(
a
,
b
,
c
) \

402 dÿ{ 
	`MaybeRecy˛e
(
a
,
c
Ë; (a)->
ud
.
£˘i⁄s
[
b
].
ªcy˛e
=c; } 0)

	)

403 
	#Upd©eRecy˛ög
(
a
) \

404 dÿ{ i‡(
	`Sèπed
(
a
Ë&& !
	`De°royed
◊Ë&& !◊->
rd
.
œ°_wóp⁄_ªcy˛e
 =
muxevít_tick
)) \

405 
	`ªcy˛e_wóp⁄ry
(
a
); } 0)

	)

406 
	#St›Ex∂odög
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_EXPLODE
, (*Ëa)

	)

407 
	#St›L©îÆ
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_LATERAL
,(*Ëa)

	)

408 
	#St›Masc
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_MASC_FAIL
,(*Ëa)

	)

409 
	#St›MascR
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_MASC_REGEN
,(*Ëa)

	)

410 
	#St›SCh¨ge
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_SCHARGE_FAIL
,(*Ëa)

	)

411 
	#St›SCh¨geR
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_SCHARGE_REGEN
,(*Ëa)

	)

412 
	#St›Dump
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_DUMP
, (*Ëa)

	)

413 
	#St›Jump
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_JUMP
, (*Ëa)

	)

414 
	#St›OOD
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_OOD
, (*Ëa)

	)

415 
	#St›Movög
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_MOVE
, (*Ëa)

	)

416 
	#St›Sènd
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_STAND
, (*Ëa)

	)

417 
	#St›Sèbûiz©i⁄
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_JUMPSTABIL
, (*Ëa)

	)

418 
	#St›Sís‹Ch™ge
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_SCHANGE
,(*Ëa)

	)

419 
	#St›Sèπup
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_STARTUP
, (*Ëa)

	)

420 
	#St›Hidög
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_HIDE
, (*Ëa)

	)

421 
	#St›Diggög
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_DIG
, (*Ëa);
	`MechT™kCrôSètus
◊Ë&~
DIGGING_IN


	)

422 
	#St›HuŒDown
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_CHANGING_HULLDOWN
, (*Ëa)

	)

423 
	#St›TakeOff
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_TAKEOFF
, (*Ëa)

	)

424 
	#UnjammögTuºë
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_UNJAM_TURRET
, (*Ëa)

	)

425 
	#UnJammögAmmo
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_UNJAM_AMMO
, (*Ëa)

	)

426 
	#UnJammögAmmoD©a
(
a
,
ty≥
Ë
	`muxevít_gë_ty≥_d©a
(
EVENT_UNJAM_AMMO
, (*Ëa, (*Ëty≥)

	)

427 
	#Wóp⁄UnJammögAmmo
(
a
,
ty≥
Ë
	`muxevít_cou¡_ty≥_d©a_d©a
(
EVENT_UNJAM_AMMO
, (*Ëa, (*Ëty≥)

	)

428 
	#E¡îögH™g¨
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_ENTER_HANGAR
, (*Ëa)

	)

429 
	#OODög
(
a
Ë
	`MechCoco⁄
◊)

	)

430 
	#C_OODög
(
a
Ë(
	`MechCoco⁄
◊Ë> 0)

	)

431 
	#InS≥cül
(
a
Ë(
	`MechSètus
◊Ë& 
UNDERSPECIAL
)

	)

432 
	#InGøvôy
(
a
Ë(
	`MechSètus
◊Ë& 
UNDERGRAVITY
)

	)

433 
	#InVacuum
(
a
Ë(
	`MechSètus
◊Ë& 
UNDERVACUUM
)

	)

434 
	#Jumpög
(
a
Ë(
	`MechSètus
◊Ë& 
JUMPING
)

	)

435 
	#Sèπed
(
a
Ë(
	`MechSètus
◊Ë& 
STARTED
)

	)

436 
	#De°royed
(
a
Ë(
	`MechSètus
◊Ë& 
DESTROYED
)

	)

437 
	#FÆÀn
(
a
Ë(
	`MechSètus
◊Ë& 
FALLEN
)

	)

438 
	#Immobûe
(
a
Ë–!
	`Sèπed
◊Ë|| 
	`Unc⁄
◊Ë|| 
	`Blöded
◊Ë|| (
	`MechMove
◊Ë=
MOVE_NONE
Ë|| ((
	`MechSètus
◊Ë& 
FALLEN
Ë&& ( (
	`MechTy≥
◊Ë!
CLASS_MECH
Ë&& (MechTy≥◊Ë!
CLASS_MW
Ë)Ë)

	)

439 
	#L™ded
(
a
Ë(
	`MechSètus
◊Ë& 
LANDED
)

	)

440 
	#Towed
(
a
Ë(
	`MechSètus
◊Ë& 
TOWED
)

	)

441 
	#TowabÀ
(
a
Ë(
	`MechCrôSètus
◊Ë& 
TOWABLE
)

	)

442 
	#Pîf‹mögA˘i⁄
(
a
Ë(
	`MechSètus
◊Ë& 
PERFORMING_ACTION
)

	)

443 
	#St›Pîf‹mögA˘i⁄
(
a
Ë(
	`MechSètus
◊Ë&~
PERFORMING_ACTION
)

	)

445 
	#MakeMechFÆl
(
a
Ë
	`MechSètus
◊Ë|
FALLEN
;
	`FÆlCíãrsT‹so
◊);
	`M¨kF‹LOSUpd©e
◊);
	`MechFloods
◊);
	`St›Sènd
◊);
	`St›HuŒDown
◊);MechSètus◊Ë&~
HULLDOWN
;

	)

446 
	#FÆlCíãrsT‹so
(
a
Ë
	`MechSètus
◊Ë&~(
TORSO_RIGHT
|
TORSO_LEFT
|
FLIPPED_ARMS
)

	)

447 
	#MakeMechSènd
(
a
Ë
	`MechSètus
◊Ë&~
FALLEN
;
	`M¨kF‹LOSUpd©e
◊)

	)

448 
	#SèndMechTime
(
a
Ë(30 / 
	`BOUNDED
(1,(
	`MechMaxS≥ed
◊)/
MP2
),30))

	)

449 
	#St›Lock
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_LOCK
, (*)á);\

450 
	`MechSètus
(
a
Ë&~
LOCK_MODES


	)

451 
	#SórchlightCh™gög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_SLITECHANGING
, (*Ëa)

	)

452 
	#HótcutoffCh™gög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_HEATCUTOFFCHANGING
, (*Ëa)

	)

454 
	#SìWhíShutdown
(
a
Ë(
	`MechSètus
(
mech
Ë& 
AUTOCON_WHEN_SHUTDOWN
)

	)

456 
	#Lo£Lock
(
a
Ë
	`St›Lock
◊);
	`MechT¨gë
◊)=-1;
	`MechT¨gX
◊)=-1;
	`MechT¨gY
◊)=-1;i‡(
	`MechAim
◊Ë!
NUM_SECTIONS
Ë{ 
	`mech_nŸify
◊, 
MECHALL
, "Loˇti⁄-•ecifi¯èrgëögÖowî†down."); MechAim◊ËNUM_SECTIONS; }

	)

457 
	#SèπSìög
(
a
) \

458 
	`MECHEVENT
(
a
,
EVENT_PLOS
,
mech_∂os_evít
,
INITIAL_PLOS_TICK
,0)

	)

460 
	#Sèπup
(
a
) \

461 dÿ{ 
	`MechSètus
(
a
Ë|
STARTED
;
	`MechTu∫Damage
◊Ë0;
	`MaybeRecy˛e
(a,1); \

462 
	`MechNumSìn
(
a
)=0; 
	`SèπSìög
◊); } 0)

	)

464 
	#Shutdown
(
a
) \

465 dÿ{ i‡(!
	`De°royed
(
a
)Ë{ 
	`Upd©eRecy˛ög
◊); 
	`MechS≥ed
(a) = 0.0; \

466 
	`MechCrôSètus
(
a
Ë&~(
HEATCUTOFF
); 
	`MechSètus
◊Ë&~(
STARTED
|
MASC_ENABLED
); \

467 
	`MechSètus2
(
a
Ë&~(
ECM_ENABLED
|
ECCM_ENABLED
|
PER_ECM_ENABLED
|
PER_ECCM_ENABLED
|
ANGEL_ECM_ENABLED
|
ANGEL_ECCM_ENABLED
|
NULLSIGSYS_ON
|
STH_ARMOR_ON
);\

468 
	`MechDesúedS≥ed
(
a
) = 0.0; }; \

469 
	`MechPûŸ
(
a
Ë-1; 
	`MechT¨gë
◊Ë-1; 
	`St›Sèπup
(a); \

470 
	`St›MoveMode
(
a
); 
	`MechSètus2
◊Ë&~(
MOVE_MODES
); \

471 
	`St›Jump
(
a
); 
	`St›Movög
◊); 
	`MechMASCCou¡î
(a) = 0; \

472 
	`St›Sènd
(
a
); 
	`St›Sèbûiz©i⁄
◊); 
	`St›TakeOff
(a); \

473 
	`St›Hidög
(
a
); 
	`St›Diggög
◊); 
	`St›HuŒDown
◊); 
	`°›TAG
(a); \

474 
	`Dr›Club
(
a
); 
	`St›Masc
◊); 
	`MechCh¨geT¨gë
(a) = -1;\

475 
	`St›Sw¨mög
(
a
,0); 
	`MechSCh¨geCou¡î
(a) = 0; \

476 i‡(
	`MechC¨ryög
(
a
) > 0) {\

477 
	`mech_dr›off
(
GOD
, 
a
, ""); \

479 } 0)

	)

481 
	#De°roy
(
a
) \

482 dÿ{ i‡(
	`Unc⁄
(
a
)) \

483 { 
	`MechSètus
(
a
Ë&~(
BLINDED
|
UNCONSCIOUS
); \

484 
	`mech_nŸify
(
a
, 
MECHALL
, "The mech was destroyed whileÖilot was unconscious!"); \

486 
	`Shutdown
(
a
Ë; 
	`MechSètus
◊Ë|
DESTROYED
;\

487 
	`St›BSuôSw¨mîs
(
°©ic_ˇ°
 <
MAP
 *> (
	`FödObje˘sD©a
(
a
->
m≠ödex
)),a,1); \

488 
	`muxevít_ªmove_d©a
((*Ë
a
); \

489 i‡((
	`MechTy≥
(
a
Ë=
CLASS_MECH
 && 
	`Jumpög
(a)) || \

490 (
	`MechTy≥
(
a
Ë!
CLASS_MECH
 && 
	`MechZ
◊Ë> 
	`MechUµîEÀv©i⁄
(a)))\

491 
	`MECHEVENT
(
a
, 
EVENT_FALL
, 
mech_ÁŒ_evít
, 
FALL_TICK
, -1); \

492 } 0)

	)

493 
	#De°royAndDump
(
a
) \

494 dÿ{ 
	`De°roy
(
a
); 
	`MechVîtiˇlS≥ed
(a) = 0.0; \

495 i‡(
	`MechRTîøö
(
a
Ë=
WATER
 || MechRTîøö◊Ë=
ICE
) \

496 
	`MechZ
(
a
Ë-
	`MechEÀv
(a); \

498 i‡(
	`MechRTîøö
(
a
Ë=
BRIDGE
) { \

499 i‡(
	`MechZ
(
a
Ë>
	`MechUµîEÀv©i⁄
(a)) \

500 
	`MechZ
(
a
Ë
	`MechUµîEÀv©i⁄
(a); \

502 
	`MechZ
(
a
Ë
	`MechLowîEÀv©i⁄
(a); \

504 
	`MechZ
(
a
Ë
	`MechEÀv
(a); \

505 
	`MechFZ
(
a
Ë
ZSCALE
 * 
	`MechZ
◊); } 0)

	)

507 
	#GëTîøö
(
m≠n
,
x
,
y
Ë
	`Codög_GëTîøö
(m≠n->
m≠
[y][x])

	)

508 
	#GëEÀv©i⁄
(
m≠n
,
x
,
y
Ë
	`Codög_GëEÀv©i⁄
(m≠n->
m≠
[y][x])

	)

510 
	#GëRTîøö
(
m≠
,
x
,
y
Ë((
	`GëTîøö
(m≠,x,y)==
FIRE
 || GëTîøö(m≠,x,y)==
SMOKE
Ë? 
	`m≠_undîlyög_ãºaö
(m≠,x,yË: GëTîøö(m≠,x,y))

	)

511 
	#SëM≠
(
m≠n
,
x
,
y
,
t
,
e
Ëm≠n->
m≠
[y][x] = 
	`Codög_GëIndex
—,e)

	)

512 
	#SëM≠B
(
m≠n
,
x
,
y
,
t
,
e
Ëm≠n[y][x] = 
	`Codög_GëIndex
—,e)

	)

513 
	#SëTîøö
(
m≠n
,
x
,
y
,
t
Ëdÿ{
	`SëM≠
(m≠n,x,y,t,
	`GëEÀv©i⁄
(m≠n,x,y));
	`Upd©eMechsTîøö
(m≠n,x,y,t); } 0)

	)

514 
	#SëTîøöBa£
(
m≠n
,
x
,
y
,
t
Ë
	`SëM≠
(m≠n,x,y,t,
	`GëEÀv©i⁄
(m≠n,x,y))

	)

515 
	#SëEÀv©i⁄
(
m≠n
,
x
,
y
,
e
Ë
	`SëM≠
(m≠n,x,y,
	`GëTîøö
(m≠n,x,y),e)

	)

517 
	#£nd_ch™√l
(
ch™
,
msg
Ë
	`SídCh™√lMesßge
(
GOD
, 
	`£À˘_ch™√l
(ch™), msg, msg)

	)

519 
	#S˚nEº‹
(
msg
...Ë
	`£nd_ch™√l
("S˚nEº‹s",
	`çrötf
(msg))

	)

520 
	#S˚nSètus
(
msg
...Ë
	`£nd_ch™√l
("S˚nSètus",
	`çrötf
(msg))

	)

521 
	#SídAI
(
msg
...Ë
	`£nd_ch™√l
("MechAI",
	`çrötf
(msg))

	)

522 
	#SídAŒoc
(
msg
)

	)

523 
	#SídLoc
(
msg
)

	)

524 
	#SídCu°om
(
msg
Ë
	`£nd_ch™√l
("MechCu°om",msg)

	)

525 
	#SídDB
(
msg
Ë
	`£nd_ch™√l
("DBInfo",msg)

	)

526 
	#SídDebug
(
msg
Ë
	`£nd_ch™√l
("MechDebugInfo",msg)

	)

527 
	#SídEc⁄
(
msg
Ë
	`£nd_ch™√l
("MechEc⁄Info",msg)

	)

528 
	#SídEº‹
(
msg
Ë
	`£nd_ch™√l
("MechEº‹s",msg)

	)

529 
	#SídEvít
(
msg
Ë
	`£nd_ch™√l
("EvítInfo",msg)

	)

530 
	#SídSís‹
(
msg
Ë
	`£nd_ch™√l
("MechSís‹",msg)

	)

531 
	#SídTriggî
(
msg
Ë
	`£nd_ch™√l
("MöeTriggîs",msg)

	)

532 
	#SídXP
(
msg
Ë
	`£nd_ch™√l
("MechXP",msg)

	)

533 
	#SídDSInfo
(
msg
Ë
	`£nd_ch™√l
("DSInfo",msg)

	)

538 
	#SídAâackEmôs
(
msg
Ë
	`£nd_ch™√l
("MechAâackEmôs",msg)

	)

539 
	#SídAâacks
(
msg
Ë
	`£nd_ch™√l
("MechAâacks",msg)

	)

540 
	#SídAâackXP
(
msg
Ë
	`£nd_ch™√l
("MechAâackXP",msg)

	)

541 
	#SídBTHDebug
(
msg
Ë
	`£nd_ch™√l
("MechBTHDebug",msg)

	)

542 
	#SídFªqs
(
msg
Ë
	`£nd_ch™√l
("MechFªqs",msg)

	)

543 
	#SídPûŸXP
(
msg
Ë
	`£nd_ch™√l
("MechPûŸXP",msg)

	)

544 
	#SídTechXP
(
msg
Ë
	`£nd_ch™√l
("MechTechXP",msg)

	)

550 #ifde‡
TEMPLATE_VERBOSE_ERRORS


552 
	#TEMPLATE_ERR
(
a
,
b
...) \

553 i‡(
a
) { \

554 
	`nŸify
(
∂ayî
, 
	`çrötf
(
b
)); \

555 i‡(
Â
Ë
	`f˛o£
(Â);  -1; }

	)

557 
	#TEMPLATE_GERR
(
a
,
b
...) \

558 i‡(
a
) { \

559 
foob¨buf
[512]; \

560 
	`•rötf
(
foob¨buf
, 
b
); \

561 
	`SídEº‹
(
foob¨buf
); \

562 i‡(
Â
Ë
	`f˛o£
(Â);  -1; }

	)

565 
	#TEMPLATE_ERR
(
a
,
b
...) \

566 i‡(
a
) { \

567 i‡(
Â
Ë
	`f˛o£
(Â);  -1; }

	)

568 
	#TEMPLATE_GERR
 
TEMPLATE_ERR


	)

572 
	#HŸLﬂdög
(
wópödx
,
mode
) \

573 ((
mode
 & 
HOTLOAD_MODE
Ë&& (
MechWóp⁄s
[
wópödx
].
•ecül
 & 
IDF
))

	)

575 
	#Múr‹Posôi⁄
(
‰om
,
to
,
heightMod
) \

576 dÿ{ 
	`MechFX
(
to
ËMechFX(
‰om
); \

577 
	`MechFY
(
to
ËMechFY(
‰om
); \

578 
	`MechFZ
(
to
ËMechFZ(
‰om
Ë+ (
heightMod
 * 
ZSCALE
); \

579 
	`MechX
(
to
ËMechX(
‰om
); \

580 
	`MechY
(
to
ËMechY(
‰om
); \

581 
	`MechZ
(
to
ËMechZ(
‰om
Ë+ 
heightMod
; \

582 
	`MechLa°X
(
to
ËMechLa°X(
‰om
); \

583 
	`MechLa°Y
(
to
ËMechLa°Y(
‰om
); \

584 
	`MechTîøö
(
to
ËMechTîøö(
‰om
); \

585 
	`MechEÀv
(
to
ËMechEÀv(
‰om
Ë+ 
heightMod
; 
	`M¨kF‹LOSUpd©e
—o); 
	`MechFloods
—o); } 0)

	)

588 
	#FödPunchLoc
(
mech
,
hôloc
,
¨c
,
is¸ôiˇl
,
i§ór
) \

589 dÿ{ i‡(
	`MechTy≥
(
mech
Ë!
CLASS_MECH
) \

590 
hôloc
 = 
	`FödHôLoˇti⁄
(
mech
, 
¨c
, &
is¸ôiˇl
, &
i§ór
); \

592 
hôloc
 = 
	`FödPunchLoˇti⁄
(
¨c
); } 0)

	)

594 
	#FödKickLoc
(
mech
,
hôloc
,
¨c
,
is¸ôiˇl
,
i§ór
) \

595 dÿ{ i‡(
	`MechTy≥
(
mech
Ë!
CLASS_MECH
) \

596 
hôloc
 = 
	`FödHôLoˇti⁄
(
mech
, 
¨c
, &
is¸ôiˇl
, &
i§ór
); \

598 
hôloc
 = 
	`FödKickLoˇti⁄
(
¨c
); } 0)

	)

602 
	#VÆidCo‹dA
(
mech_m≠
,
√wx
,
√wy
,
msg
) \

603 
	`DOCHECK
(
√wx
 < 0 ||Çewx >
mech_m≠
->
m≠_width
 || \

604 
√wy
 < 0 ||Çewy >
mech_m≠
->
m≠_height
, \

605 
msg
)

	)

606 
	#VÆidCo‹d
(
mech_m≠
,
√wx
,
√wy
) \

607 
	`VÆidCo‹dA
(
mech_m≠
,
√wx
, 
√wy
, "IŒegÆ co‹dö©es!")

	)

608 
	#FlMechR™ge
(
m≠
,
m1
,
m2
) \

609 
	`FaMechR™ge
(
m1
,
m2
)

	)

611 
	#Ródnum
(
tov¨
,
‰omv¨
) \

612 (!(
tov¨
 = 
	`©oi
(
‰omv¨
)Ë&& 
	`°rcmp
(‰omv¨, "0"))

	)

614 
	#SëBô
(
vÆ
,
bô
Ë(vÆ |bô)

	)

615 
	#UnSëBô
(
vÆ
,
bô
Ë(vÆ &~(bô))

	)

616 
	#EvÆBô
(
vÆ
,
bô
,
°©e
) \

617 dÿ{i‡(
°©e
Ë
	`SëBô
(
vÆ
,
bô
); 
	`UnSëBô
(vÆ,bô);} 0)

	)

618 
	#ToggÀBô
(
vÆ
,
bô
) \

619 dÿ{ i‡(!(
vÆ
 & 
bô
)Ë
	`SëBô
(vÆ,bô);
	`UnSëBô
(vÆ,bô); } 0)

	)

620 
	#Sìs360
(
mech
Ë((
	`MechMove
(mech)==
MOVE_NONE
Ë|| (
	`MechTy≥
(mechË=
CLASS_BSUIT
))

	)

621 
	#FödWóp⁄s
(
m
,
i
,
wa
,
wda
,
¸
Ë
	`FödWóp⁄s_Adv™˚d
(m,i,wa,wda,¸,1)

	)

623 
	#C⁄töueFlyög
(
mech
) \

624 i‡(
	`FlyögT
(
mech
)) { \

625 
	`MechSètus
(
mech
Ë&~
LANDED
; \

626 
	`MechZ
(
mech
) += 1; \

627 
	`MechFZ
(
mech
Ë
ZSCALE
 * 
	`MechZ
(mech); \

628 
	`St›Movög
(
mech
); }

	)

630 
	#Ovîw©î
(
mech
) \

631 (
	`MechMove
(
mech
Ë=
MOVE_HOVER
 || 
	`MechTy≥
(mechË=
CLASS_MW
 || \

632 
	`MechMove
(
mech
Ë=
MOVE_FOIL
 || MechMove(mechË=
MOVE_HULL
)

	)

634 
	#MoveMod
(
mech
) \

635 (
	`MechTy≥
(
mech
Ë=
CLASS_MW
 ? 3 : \

636 (
	`MechIsBùed
(
mech
Ë|| 
	`MechIsQuad
(mech)Ë? 2 : 1)

	)

638 
	#IsW©î
(
t
Ë(—Ë=
ICE
 || (tË=
WATER
 || (tË=
BRIDGE
)

	)

639 
	#InW©î
(
mech
Ë(
	`IsW©î
(
	`MechRTîøö
((mech))Ë&& 
	`MechZ
(mech)<0)

	)

640 
	#OnW©î
(
mech
Ë(
	`IsW©î
(
	`MechRTîøö
((mech))Ë&& 
	`MechZ
(mech)<=0)

	)

642 
	#IsC3
(
mech
Ë((
	`MechS≥cüls
(mechË& (
C3_MASTER_TECH
|
C3_SLAVE_TECH
)Ë&& !
	`C3De°royed
(mech))

	)

643 
	#IsC3i
(
mech
Ë((
	`MechS≥cüls2
(mechË& 
C3I_TECH
Ë&& !
	`C3iDe°royed
(mech))

	)

644 
	#IsAMS
(
wópödx
Ë(
MechWóp⁄s
[wópödx].
•ecül
 & 
AMS
)

	)

648 
	#AmmoMod
(
mech
,
loc
,
pos
) \

649 ((!
	`IsAmmo
(
	`GëP¨tTy≥
(
mech
,
loc
,
pos
)) || \

650 
	`GëP¨tFúeMode
(
mech
,
loc
,
pos
Ë& 
HALFTON_MODE
 || \

651 
	`GëP¨tAmmoMode
(
mech
,
loc
,
pos
Ë& 
AC_AP_MODE
 || \

652 
	`GëP¨tAmmoMode
(
mech
,
loc
,
pos
Ë& 
AC_PRECISION_MODE
Ë? 1 : 2)

	)

654 
	#FuŒAmmo
(
mech
,
loc
,
pos
) \

656 
MechWóp⁄s
[
	`Ammo2I
(
	`GëP¨tTy≥
(
mech
,
loc
,
pos
))].
amm›ît⁄
 / (3 - 
	`AmmoMod
(mech,Üoc,Öos)))

	)

658 
	#JumpS≥ed
(
mech
,
m≠
) \

659 ((
	`InGøvôy
(
mech
Ë&& 
m≠
Ë? (
	`MechJumpS≥ed
(mechË* 100 / ((
	`MAX
(50, 
	`M≠Gøvôy
(m≠))))Ë: MechJumpS≥ed(mech))

	)

660 
	#JumpS≥edMP
(
mech
,
m≠
) \

661 ((Ë(
	`JumpS≥ed
(
mech
,
m≠
Ë* 
MP_PER_KPH
))

	)

663 
	#NŸInW©î
(
mech
Ë(!(
	`OnW©î
(mech)))

	)

664 
	#W©îBó°
(
mech
Ë(
	`MechMove
(mech)==
MOVE_HULL
 || MechMove(mech)==
MOVE_FOIL
)

	)

666 
	#IsCøp
(
vÆ
) \

667 (((
vÆ
Ë=
	`S≥cül
(
ENDO_STEEL
)Ë|| ((vÆË=S≥cül(
FERRO_FIBROUS
)) || \

668 ((
vÆ
Ë=
	`S≥cül
(
TRIPLE_STRENGTH_MYOMER
)Ë|| ((vÆË=S≥cül(
STEALTH_ARMOR
)) || \

669 ((
vÆ
Ë=
	`S≥cül
(
HVY_FERRO_FIBROUS
)Ë|| ((vÆË=S≥cül(
LT_FERRO_FIBROUS
)))

	)

671 
	#Spönög
(
mech
Ë(
	`MechCrôSètus
(mechË& 
SPINNING
)

	)

672 
	#St›Spönög
(
mech
Ë(
	`MechCrôSètus
(mechË&~
SPINNING
)

	)

673 
	#SèπSpönög
(
mech
Ë(
	`MechCrôSètus
(mechË|
SPINNING
)

	)

675 
	#MechLô
(
mech
Ë(
	`MechCrôSètus
(mechË& 
SLITE_LIT
)

	)

676 
	#MechLôes
(
mech
Ë(
	`MechSètus2
(mechË& 
SLITE_ON
)

	)

677 
	#IsLô
(
mech
Ë(
	`MechLô
(mechË|| 
	`MechLôes
(mech))

	)

679 
	#OkayCrôSe˘
(
£˘
,
num
,
ok
Ë
	`OkayCrôSe˘2
(
mech
,£˘,num,ok)

	)

680 
	#OkayCrôSe˘S
(
£˘
,
num
,
ok
Ë
	`OkayCrôSe˘
(£˘,num,
	`I2S≥cül
(ok))

	)

681 
	#OkayCrôSe˘2
(
mech
,
£˘
,
num
,
ok
) \

682 (
	`GëP¨tTy≥
(
mech
,
£˘
,
num
)==(
ok
Ë&& !
	`P¨tIsN⁄fun˘i⁄Æ
(mech,£˘,num))

	)

683 
	#OkayCrôSe˘S2
(
mech
,
£˘
,
num
,
ok
Ë
	`OkayCrôSe˘2
(mech,£˘,num,
	`I2S≥cül
(ok))

	)

684 
	#MAPMOVEMOD
(
m≠
Ë((m≠)->
movemod
 > 0 ? (Ë(m≠)->movemod / 100.0 : 1.0)

	)

686 
	#RCache_Remove
(
n
)

	)

687 
	#RCache_Flush
()

	)

690 
	#FaMechR™ge
(
mech
,
èrgë
) \

691 
	`FödR™ge
(
	`MechFX
(
mech
), 
	`MechFY
(mech), 
	`MechFZ
(mech), \

692 
	`MechFX
(
èrgë
), 
	`MechFY
—¨gë), 
	`MechFZ
—¨gë))

	)

694 
	#DSBórMod
(
ds
) \

695 ((
	`MechFacög
(
ds
Ë+30Ë/ 60Ë% 6

	)

698 
	#ECMA˘ive
(
mech
Ë(
	`ECME«bÀd
(mechË&& !
	`ECMCou¡îed
(mech))

	)

699 
	#ECCMA˘ive
(
mech
Ë
	`ECCME«bÀd
(mech)

	)

701 
	#ECME«bÀd
(
mech
Ë(
	`MechSètus2
(mechË& 
ECM_ENABLED
)

	)

702 
	#ECCME«bÀd
(
mech
Ë(
	`MechSètus2
(mechË& 
ECCM_ENABLED
)

	)

704 
	#E«bÀECM
(
mech
Ë(
	`MechSètus2
(mechË|
ECM_ENABLED
)

	)

705 
	#E«bÀECCM
(
mech
Ë(
	`MechSètus2
(mechË|
ECCM_ENABLED
)

	)

707 
	#DißbÀECM
(
mech
Ë(
	`MechSètus2
(mechË&~
ECM_ENABLED
)

	)

708 
	#DißbÀECCM
(
mech
Ë(
	`MechSètus2
(mechË&~
ECCM_ENABLED
)

	)

710 
	#PîECMA˘ive
(
mech
Ë(
	`PîECME«bÀd
(mechË&& !
	`ECMCou¡îed
(mech))

	)

711 
	#PîECCMA˘ive
(
mech
Ë
	`PîECCME«bÀd
(mech)

	)

713 
	#PîECME«bÀd
(
mech
Ë(
	`MechSètus2
(mechË& 
PER_ECM_ENABLED
)

	)

714 
	#PîECCME«bÀd
(
mech
Ë(
	`MechSètus2
(mechË& 
PER_ECCM_ENABLED
)

	)

716 
	#E«bÀPîECM
(
mech
Ë(
	`MechSètus2
(mechË|
PER_ECM_ENABLED
)

	)

717 
	#E«bÀPîECCM
(
mech
Ë(
	`MechSètus2
(mechË|
PER_ECCM_ENABLED
)

	)

719 
	#DißbÀPîECM
(
mech
Ë(
	`MechSètus2
(mechË&~
PER_ECM_ENABLED
)

	)

720 
	#DißbÀPîECCM
(
mech
Ë(
	`MechSètus2
(mechË&~
PER_ECCM_ENABLED
)

	)

722 
	#AnyECMDi°urbed
(
mech
Ë(
	`ECMDi°urbed
(mechË|| 
	`AngñECMDi°urbed
(mech))

	)

723 
	#AnyECMPrŸe˘ed
(
mech
Ë(
	`ECMPrŸe˘ed
(mechË|| 
	`AngñECMPrŸe˘ed
(mech))

	)

724 
	#AnyECMA˘ive
(
mech
Ë(
	`ECMA˘ive
(mechË|| 
	`AngñECMA˘ive
(mech))

	)

725 
	#AnyECCMA˘ive
(
mech
Ë(
	`ECCMA˘ive
(mechË|| 
	`AngñECCMA˘ive
(mech))

	)

727 
	#ECMDi°urbed
(
mech
Ë(
	`MechSètus2
(mechË& 
ECM_DISTURBANCE
)

	)

728 
	#ECMPrŸe˘ed
(
mech
Ë((
	`MechSètus2
(mechË& 
ECM_PROTECTED
Ë|| 
	`ECMA˘ive
(mechË|| 
	`PîECMA˘ive
(mech))

	)

730 
	#ECMCou¡îed
(
mech
Ë(
	`MechSètus2
(mechË& 
ECM_COUNTERED
)

	)

731 
	#SëECMCou¡îed
(
mech
Ë(
	`MechSètus2
(mechË|
ECM_COUNTERED
)

	)

732 
	#UnSëECMCou¡îed
(
mech
Ë(
	`MechSètus2
(mechË&~
ECM_COUNTERED
)

	)

734 
	#SëECMDi°urbed
(
mech
Ë(
	`MechSètus2
(mechË|
ECM_DISTURBANCE
)

	)

735 
	#UnSëECMDi°urbed
(
mech
Ë(
	`MechSètus2
(mechË&~
ECM_DISTURBANCE
)

	)

737 
	#SëECMPrŸe˘ed
(
mech
Ë(
	`MechSètus2
(mechË|
ECM_PROTECTED
)

	)

738 
	#UnSëECMPrŸe˘ed
(
mech
Ë(
	`MechSètus2
(mechË&~
ECM_PROTECTED
)

	)

741 
	#HasW‹kögECMSuôe
(
mech
Ë(((
	`MechS≥cüls
(mechË& 
ECM_TECH
) && \

742 !(
	`MechSètus2
(
mech
Ë& 
ECM_DESTROYED
)) || \

743 ((
	`MechS≥cüls2
(
mech
Ë& 
ANGEL_ECM_TECH
) && \

744 !(
	`MechSètus2
(
mech
Ë& 
ANGEL_ECM_DESTROYED
)) || \

745 (
	`MechInÁ¡ryS≥cüls
(
mech
Ë& 
FC_INFILTRATORII_STEALTH_TECH
))

	)

749 
	#AngñECMA˘ive
(
mech
Ë(
	`AngñECME«bÀd
(mechË&& !
	`ECMCou¡îed
(mech))

	)

750 
	#AngñECCMA˘ive
(
mech
Ë
	`AngñECCME«bÀd
(mech)

	)

752 
	#AngñECME«bÀd
(
mech
Ë(
	`MechSètus2
(mechË& 
ANGEL_ECM_ENABLED
)

	)

753 
	#AngñECCME«bÀd
(
mech
Ë(
	`MechSètus2
(mechË& 
ANGEL_ECCM_ENABLED
)

	)

755 
	#E«bÀAngñECM
(
mech
Ë(
	`MechSètus2
(mechË|
ANGEL_ECM_ENABLED
)

	)

756 
	#E«bÀAngñECCM
(
mech
Ë(
	`MechSètus2
(mechË|
ANGEL_ECCM_ENABLED
)

	)

758 
	#DißbÀAngñECM
(
mech
Ë(
	`MechSètus2
(mechË&~
ANGEL_ECM_ENABLED
)

	)

759 
	#DißbÀAngñECCM
(
mech
Ë(
	`MechSètus2
(mechË&~
ANGEL_ECCM_ENABLED
)

	)

761 
	#AngñECMPrŸe˘ed
(
mech
Ë((
	`MechSètus2
(mechË& 
ANGEL_ECM_PROTECTED
Ë|| 
	`AngñECMA˘ive
(mech))

	)

762 
	#AngñECMDi°urbed
(
mech
Ë(
	`MechSètus2
(mechË& 
ANGEL_ECM_DISTURBED
)

	)

764 
	#SëAngñECMDi°urbed
(
mech
Ë(
	`MechSètus2
(mechË|
ANGEL_ECM_DISTURBED
)

	)

765 
	#UnSëAngñECMDi°urbed
(
mech
Ë(
	`MechSètus2
(mechË&~
ANGEL_ECM_DISTURBED
)

	)

767 
	#SëAngñECMPrŸe˘ed
(
mech
Ë(
	`MechSètus2
(mechË|
ANGEL_ECM_PROTECTED
)

	)

768 
	#UnSëAngñECMPrŸe˘ed
(
mech
Ë(
	`MechSètus2
(mechË&~
ANGEL_ECM_PROTECTED
)

	)

770 
	#HasW‹kögAngñECMSuôe
(
mech
Ë((
	`MechS≥cüls2
(mechË& 
ANGEL_ECM_TECH
) && \

771 !(
	`MechSètus2
(
mech
Ë& 
ANGEL_ECM_DESTROYED
))

	)

774 
	#SãÆthArm‹A˘ive
(
mech
Ë(
	`MechSètus2
(mechË& 
STH_ARMOR_ON
)

	)

775 
	#E«bÀSãÆthArm‹
(
mech
Ë(
	`MechSètus2
(mechË|
STH_ARMOR_ON
)

	)

776 
	#DißbÀSãÆthArm‹
(
mech
Ë(
	`MechSètus2
(mechË&~
STH_ARMOR_ON
)

	)

777 
	#SãÆthArm‹Ch™gög
(
mech
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_STEALTH_ARMOR
, (*Ëmech)

	)

779 
	#De°royNuŒSigSys
(
mech
Ë(
	`MechCrôSètus
(mechË|
NSS_DESTROYED
)

	)

780 
	#NuŒSigSysDe°
(
mech
Ë(
	`MechCrôSètus
(mechË& 
NSS_DESTROYED
)

	)

781 
	#NuŒSigSysA˘ive
(
mech
Ë(
	`MechSètus2
(mechË& 
NULLSIGSYS_ON
)

	)

782 
	#E«bÀNuŒSigSys
(
mech
Ë(
	`MechSètus2
(mechË|
NULLSIGSYS_ON
)

	)

783 
	#DißbÀNuŒSigSys
(
mech
Ë(
	`MechSètus2
(mechË&~
NULLSIGSYS_ON
)

	)

784 
	#NuŒSigSysCh™gög
(
mech
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_NSS
, (*Ëmech)

	)

788 
	#HasC3
(
mech
Ë(
	`HasC3m
(mechË|| 
	`HasC3s
(mech))

	)

789 
	#HasC3m
(
mech
Ë((
	`MechS≥cüls
(mechË& 
C3_MASTER_TECH
))

	)

790 
	#HasC3s
(
mech
Ë((
	`MechS≥cüls
(mechË& 
C3_SLAVE_TECH
))

	)

791 
	#C3De°royed
(
mech
Ë(
	`MechCrôSètus
(mechË& 
C3_DESTROYED
)

	)

792 
	#MechC3Nëw‹k
(
a
Ë◊)->
sd
.
C3Nëw‹k


	)

793 
	#MechC3Nëw‹kEÀm
(
a
,
b
Ë◊)->
sd
.
C3Nëw‹k
[b]

	)

794 
	#MechC3Nëw‹kSize
(
a
Ë◊)->
sd
.
wC3Nëw‹kSize


	)

795 
	#MechTŸÆC3Ma°îs
(
a
Ë◊)->
sd
.
wTŸÆC3Ma°îs


	)

796 
	#MechW‹kögC3Ma°îs
(
a
Ë◊)->
sd
.
wW‹kögC3Ma°îs


	)

800 
	#HasC3i
(
mech
Ë((
	`MechS≥cüls2
(mechË& 
C3I_TECH
))

	)

801 
	#C3iDe°royed
(
mech
Ë(
	`MechCrôSètus
(mechË& 
C3I_DESTROYED
)

	)

802 
	#MechC3iNëw‹k
(
a
Ë◊)->
sd
.
C3iNëw‹k


	)

803 
	#MechC3iNëw‹kEÀm
(
a
,
b
Ë◊)->
sd
.
C3iNëw‹k
[b]

	)

804 
	#MechC3iNëw‹kSize
(
a
Ë◊)->
sd
.
wC3iNëw‹kSize


	)

808 
	#HasTAG
(
mech
Ë–(
	`MechS≥cüls2
(mechË& 
TAG_TECH
Ë|| 
	`HasC3m
(mechË)

	)

809 
	#TAGT¨gë
(
mech
Ë(mech)->
sd
.
ègT¨gë


	)

810 
	#TaggedBy
(
mech
Ë(mech)->
sd
.
èggedBy


	)

811 
	#TagRecy˛ög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_TAG_RECYCLE
,(*Ëa)

	)

814 
	#C¨ryögClub
(
mech
Ë–(
	`MechSe˘i⁄s
(mech)[
RARM
].
•ecüls
 & 
CARRYING_CLUB
Ë|| (MechSe˘i⁄s(mech)[
LARM
].•ecül†& CARRYING_CLUB))

	)

815 
	#Dr›Club
(
mech
Ëdÿ{ if(
	`C¨ryögClub
(mech)Ë{ 
	`MechSe˘i⁄s
(mech)[
RARM
].
•ecüls
 &~
CARRYING_CLUB
; MechSe˘i⁄s(mech)[
LARM
].•ecül†&~CARRYING_CLUB; 
	`mech_nŸify
(mech, 
MECHALL
, "You∏˛ub fÆl†tÿthêgroundánd sh©ãrs."); 
	`MechLOSBrﬂdˇ°
(mech, "'†˛ub fÆl†tÿthêgroundánd sh©ãrs."); } } 0)

	)

818 
	#Sèggîög
(
mech
Ë–
	`SèggîLevñ
(mechË> 0 )

	)

819 
	#CheckögSèggîDamage
(
mech
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_CHECK_STAGGER
,(*Ëmech)

	)

820 
	#SèπSèggîCheck
(
mech
Ëdÿ{ 
	`MECHEVENT
(mech, 
EVENT_CHECK_STAGGER
, 
check_°aggî_evít
, 30, 0); 
	`SídDebug
(
	`çrötf
("Sèπög sèggî check f‹ %d.", mech->
mynum
)); } 0)

	)

821 
	#St›SèggîCheck
(
mech
Ëdÿ{ 
	`muxevít_ªmove_ty≥_d©a
(
EVENT_CHECK_STAGGER
, (*Ëmech); (mech)->
rd
.
°aggîDamage
=0; (mech)->rd.
œ°SèggîNŸify
=0; 
	`SídDebug
(
	`çrötf
("St›pög sèggî check f‹ %d.", mech->
mynum
)); } 0)

	)

822 
	#SèggîDamage
(
mech
Ë–(mech)->
rd
.
°aggîDamage
 )

	)

823 
	#La°SèggîNŸify
(
mech
Ë–(mech)->
rd
.
œ°SèggîNŸify
 )

	)

824 
	#SèggîLevñ
(
mech
Ë–(mech)->
rd
.
°aggîDamage
 / 20 )

	)

826 
	#MechIsOb£rv©‹
(
mech
Ë(
	`MechCrôSètus
(mechË& 
OBSERVATORIC
)

	)

829 
	#MechLOSFœg_WoodCou¡
(
Êag
) \

830 (((
Êag
Ë/ 
MECHLOSFLAG_WOOD
Ë% 
MECHLOSMAX_WOOD
)

	)

831 
	#MechLOSFœg_W©îCou¡
(
Êag
) \

832 (((
Êag
Ë/ 
MECHLOSFLAG_WATER
Ë% 
MECHLOSMAX_WATER
)

	)

834 
	#MechToMech_LOSFœg
(
m≠
, 
‰om
, 
to
) \

835 ((
m≠
)->
LOSöfo
[
‰om
->
m≠numbî
][
to
->m≠numbî])

	)

837 
	#MoveModeCh™ge
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_MOVEMODE
,(*Ëa)

	)

838 
	#MoveModeLock
(
a
Ë(
	`MechSètus2
◊Ë& 
MOVE_MODES_LOCK
 || (
	`MoveModeCh™ge
◊Ë&& !(MechSètus2◊Ë& 
DODGING
)))

	)

839 
	#MoveModeD©a
(
a
Ë
	`muxevít_cou¡_ty≥_d©a_fú°ev
(
EVENT_MOVEMODE
, (*Ëa)

	)

840 
	#St›MoveMode
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_MOVEMODE
, (*Ëa)

	)

841 
	#S¥ötög
(
a
Ë(
	`MechSètus2
◊Ë& 
SPRINTING
)

	)

842 
	#Evadög
(
a
Ë(
	`MechSètus2
◊Ë& 
EVADING
)

	)

843 
	#Dodgög
(
a
Ë(
	`MechSètus2
◊Ë& 
DODGING
)

	)

844 
	#SideSlùpög
(
a
Ë
	`muxevít_cou¡_ty≥_d©a
(
EVENT_SIDESLIP
, (*Ëa)

	)

845 
	#St›Side¶ù
(
a
Ë
	`muxevít_ªmove_ty≥_d©a
(
EVENT_SIDESLIP
, (*Ëa)

	)

	@btech/chargen_commands.h

15 #i‚de‡
CHARGEN_COMMANDS_H


16 
	#CHARGEN_COMMANDS_H


	)

18 
	~"hñp.h
"

20 
	$ch¨gí_look
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

22 
ch¨gí_°ru˘
 *
°
;

23 
coﬁmíu
 *
c
;

25 
	`DOCHECK
(
Sèã
 =
NOTBEGUN
, 
BEGINSTARTS
);

26 
	`DOCHECK
(
Sèã
 =
DONE
 &&

27 
Aµlõd
 == 2, "Type 'leave'ÅoÜeaveÅhe booth!");

28 
c
 = 
	`föd_¥›î_míu
(
°
);

29 i‡(
Sèã
 =
DONE
) {

30 
	`nŸify
(
∂ayî
, "Options:");

31 i‡(!
Aµlõd
) {

32 
	`nŸify
(
∂ayî
, "\tApply Sets yourÖlstats (no Preváfter it)");

33 
	`nŸify
(
∂ayî
, "\tPrev Go backÅoÖrevious menu(s)");

35 
	`nŸify
(
∂ayî
, "\tDone Finalizes your char creation");

36 
	`nŸify
(
∂ayî
, "\tReset Lets you start chargen from beginning");

39 
	`DOCHECK
(!
c
, "Hrm..Ço menu,áre you sure you're 'k?");

40 
	`ShowCoﬁMíu
(
∂ayî
, 
c
);

41 
	}
}

43 
	$ch¨gí_begö
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

45 
PSTATS
 *
s
;

46 
ch¨gí_°ru˘
 *
°
;

48 
	`DOCHECK
(
Sèã
,

50 
	`DOCHECK
(
	`©oi
(
	`sûly_©r_gë
(
∂ayî
, 
A_RANKNUM
)Ë!
INITIAL_RANK
 &&

51 !
	`Wiz
(
∂ayî
), "There isÇo going backÅo chargen! Get out.");

52 
s
 = 
	`ªåõve_°©s
(
∂ayî
, 
VALUES_ALL
);

53 
	`˛ór_∂ayî
(
s
);

54 
	`°‹e_°©s
(
∂ayî
, 
s
, 
VALUES_ALL
);

55 
°
->
¥ôŸÆ
 = 8;

56 
	`adv™˚_°©e
(
∂ayî
, 
°
);

57 
	}
}

59 
	$ch¨gí_≠∂y
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

62 
ch¨gí_°ru˘
 *
°
;

63 
i
, 
j
;

65 
	`DOCHECK
(
Sèã
 !
DONE
, "Youáren't yet done with your chargen!");

66 
	`DOCHECK
(
Aµlõd
,

70 
	`≠∂y_vÆues
(
∂ayî
, 
°
->
cm
[
MENU_ADV
], 1);

71 
	`≠∂y_vÆues
(
∂ayî
, 
°
->
cm
[
MENU_ATT
], 1);

74 i‡(
°
->
ócou¡
 > 0) {

75 
j
 = 0;

76 
i
 = 
FIRST_ATT
; i <
LAST_ATT
; i++)

77 i‡(
°
->
©åibuãs
[
i
] > 6)

78 
j
 |1 << (
i
 - 
FIRST_ATT
);

79 
	`ch¨_£tvÆuebycode
(
∂ayî
, 
EA_NUMBER
, 
j
);

81 
i
 = 0; i < 
NUM_SKIMENUS
; i++)

82 
	`≠∂y_vÆues
(
∂ayî
, 
°
->
sm
[
i
], 1);

83 
	`nŸify
(
∂ayî
, "Your statsáreÇow set! Enjoy!");

84 
Aµlõd
 = 1;

85 
	}
}

87 
	$ch¨gí_d⁄e
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

89 
ch¨gí_°ru˘
 *
°
, *
t
;

90 
i
;

92 
	`DOCHECK
(
Sèã
 !
DONE
, "Youáren't yet done with your chargen!");

93 i‡(!
Aµlõd
)

94 
	`ch¨gí_≠∂y
(
∂ayî
, 
d©a
, 
buf„r
);

95 
Aµlõd
 = 2;

96 
	`nŸify
(
∂ayî
,

98 i‡(!
	`Wiz
(
∂ayî
)) {

99 
	`sûly_©r_£t
(
∂ayî
, 
A_JOB
, "Looking forá factionÅo join");

100 
	`sûly_©r_£t
(
∂ayî
, 
A_RANKNUM
, 
	`çrötf
("%d", 
FINAL_RANK
));

102 i‡(
ch¨gí_li°
 =
°
)

103 
ch¨gí_li°
 = 
°
->
√xt
;

105 
t
 = 
ch¨gí_li°
;Å->
√xt
 !
°
;Å =Å->next);

106 
t
->
√xt
 = 
°
->next;

108 
i
 = 0; i < 
NUM_MENUS
; i++)

109 i‡(
°
->
cm
[
i
])

110 
	`‰ì
((*Ë
°
->
cm
[
i
]);

111 
i
 = 0; i < 
NUM_SKIMENUS
; i++)

112 i‡(
°
->
sm
[
i
])

113 
	`‰ì
((*Ë
°
->
sm
[
i
]);

114 
	`‰ì
((*Ë
°
);

115 
	}
}

119 
	$ch¨gí_√xt
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

121 
ch¨gí_°ru˘
 *
°
;

122 
i
;

124 
	`DOCHECK
(
Sèã
 =
NOTBEGUN
, 
BEGINSTARTS
);

125 i‡(
	`ˇn_adv™˚_°©e
(
°
)) {

126 i‡((
i
 = 
	`ˇn_¥o˚ed
(
∂ayî
, 
°
)) > 0)

127 
	`adv™˚_°©e
(
∂ayî
, 
°
);

128 i‡(!
i
) {

129 
	`nŸify
(
∂ayî
, "Checking data..");

130 
	`nŸify
(
∂ayî
,

134 
	`nŸify
(
∂ayî
, "Uh.. where do you wantÅo goÇext,ányway?");

135 
	}
}

137 
	$ch¨gí_¥ev
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

139 
ch¨gí_°ru˘
 *
°
;

141 
	`DOCHECK
(
Sèã
 =
NOTBEGUN
, 
BEGINSTARTS
);

142 i‡(
	`ˇn_go_back_°©e
(
°
))

143 
	`go_back_°©e
(
∂ayî
, 
°
);

145 
	`nŸify
(
∂ayî
, "Well.. weáll wantÅo go back, don't we?");

146 
	}
}

149 
	$ch¨gí_ª£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

151 
ch¨gí_°ru˘
 *
°
;

153 
	`DOCHECK
(
Sèã
 =
NOTBEGUN
,

155 
	`bzîo
(
°
, (
ch¨gí_°ru˘
));

157 
	`ch¨gí_begö
(
∂ayî
, 
d©a
, 
buf„r
);

158 
	}
}

160 
	$ch¨gí_hñp
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

162 
buf
[
MBUF_SIZE
];

164 
	`°r˝y
(
buf
, "chargen");

165 
	`hñp_wrôe
(
∂ayî
, 
buf
, &
mud°©e
.
√ws_hèb
, 
mudc⁄f
.
√ws_fûe
, 0);

166 
	}
}

	@btech/chargen_menus.h

15 #i‚de‡
CHARGEN_MENUS_H


16 
	#CHARGEN_MENUS_H


	)

18 
	$lowe°_bô
(
num
)

20 
i
, 
j
;

22 
i
 = 0;; i++) {

23 
j
 = 1 << 
i
;

24 i‡(
j
 > 
num
)

26 i‡(
num
 & 
j
)

27  
i
;

29 
	}
}

32 
coﬁmíu
 *
	$¸óã_míu_of_ch¨vÆues
(
dbªf
 
∂ayî
, *
hódög
,

33 
ty≥
, 
Êag
, 
maxvÆ
)

35 
coﬁmíu
 *
c
 = 
NULL
;

36 
i
, 
t
, 
f
, 
co
 = 0, 
wb
;

37 
buf
[512];

39 i‡(
hódög
)

40 
	`°r˝y
(
buf
, 
hódög
);

42 i‡(
Êag
 > 0) {

43 
i
 = 
	`lowe°_bô
(
Êag
);

44 
	`•rötf
(
buf
, "%†%s†f‹ %s", 
bãch_ch¨skûlÊag_«mes
[
i
],

45 &(
bãch_ch¨vÆuëy≥_«mes
[
ty≥
][5]), 
	`Name
(
∂ayî
));

47 
	`•rötf
(
buf
, "%ss for %s",

48 &(
bãch_ch¨vÆuëy≥_«mes
[
ty≥
][5]), 
	`Name
(
∂ayî
));

50 
buf
[0] = 
	`touµî
(buf[0]);

51 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
 | 
CM_LINE
);

52 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
buf
, 
CM_ONE
 | 
CM_CENTER
);

53 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
 | 
CM_LINE
);

54 
i
 = 0; i < 
NUM_CHARVALUES
; i++)

55 i‡((
t
 = 
ch¨_vÆues
[
i
].
ty≥
) ==Åype ||Åype < 0)

56 i‡(((
f
 = 
ch¨_vÆues
[
i
].
Êag
) & flag) || flag < 0)

57 
co
++;

58 
wb
 = 
	`CoﬁMíu_FPWBô
(
co
, 18);

59 
i
 = 0; i < 
NUM_CHARVALUES
; i++)

60 i‡((
t
 = 
ch¨_vÆues
[
i
].
ty≥
) ==Åype ||Åype < 0)

61 i‡(((
f
 = 
ch¨_vÆues
[
i
].
Êag
) & flag) || flag < 0) {

62 i‡(
t
 =
CHAR_ADVANTAGE
 && 
f
 =
CHAR_ADV_BOOL
)

63 
	`Cª©eMíuE¡ry_N‹mÆ
(&
c
, 
ch¨_vÆues
[
i
].
«me
,

64 
wb
 | 
CM_TOGGLE
, 
i
 + 1, 1);

66 
	`Cª©eMíuE¡ry_N‹mÆ
(&
c
, 
ch¨_vÆues
[
i
].
«me
,

67 
wb
 | 
CM_NUMBER
, 
i
 + 1, 
maxvÆ
);

69 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
 | 
CM_LINE
);

70  
c
;

71 
	}
}

73 
coﬁmíu
 *
	$¸óã_∑ckskûl_míu
(
dbªf
 
∂ayî
,

74 
ch¨gí_°ru˘
 *
°
)

76 
coﬁmíu
 *
c
 = 
NULL
;

77 
i
, 
t
, 
f
, 
co
 = 0, 
wb
;

78 
ty≥
 = 
CHAR_SKILL
;

79 
Êag
 = 
°
->
cho£n_∑ckages
 + 
CAREER_MISC
;

81 i‡(
°
->
cho£n_∑ckagëy≥
 >
BASIC_UNIV
)

82 
Êag
 |
CAREER_ACADMISC
;

83 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
 | 
CM_LINE
);

84 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
	`çrötf
("Package Skills for %s",

85 
	`Name
(
∂ayî
)), 
CM_ONE
 | 
CM_CENTER
);

86 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
 | 
CM_LINE
);

87 
i
 = 0; i < 
NUM_CHARVALUES
; i++)

88 i‡((
t
 = 
ch¨_vÆues
[
i
].
ty≥
) ==Åype)

89 i‡(((
f
 = 
ch¨_vÆues
[
i
].
Êag
) & flag))

90 
co
++;

91 
wb
 = 
	`CoﬁMíu_FPWBô
(
co
, 18);

92 
i
 = 0; i < 
NUM_CHARVALUES
; i++)

93 i‡((
t
 = 
ch¨_vÆues
[
i
].
ty≥
) ==Åype)

94 i‡(((
f
 = 
ch¨_vÆues
[
i
].
Êag
) & flag))

95 
	`Cª©eMíuE¡ry_N‹mÆ
(&
c
, 
ch¨_vÆues
[
i
].
«me
,

96 
wb
 | 
CM_NUMBER
, 
i
 + 1, 3);

97 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
 | 
CM_LINE
);

98 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, "Pªv = Pªviou†míu", 
CM_TWO
 | 
CM_CENTER
);

99 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, "NexàNexàmíu", 
CM_TWO
 | 
CM_CENTER
);

100 
	`Cª©eMíuE¡ry_N‹mÆ
(&
c
, "Sètus", 
CM_ONE
 | 
CM_CENTER
, -1, 0);

101 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
 | 
CM_LINE
);

102  
c
;

103 
	}
}

	@btech/coolmenu.h

15 #i‚de‡
COOLMENU_H


16 
	#COOLMENU_H


	)

19 
	#MAX_MENU_LENGTH
 400

	)

20 
	#MAX_MENU_WIDTH
 240

	)

21 
	#MENU_CHAR_WIDTH
 78

	)

36 
	#CM_ONE
 0x001

	)

37 
	#CM_TWO
 0x002

	)

38 
	#CM_THREE
 0x004

	)

39 
	#CM_FOUR
 0x008

	)

40 
	#CM_CENTER
 0x010

	)

41 
	#CM_TOGGLE
 0x020

	)

42 
	#CM_NUMBER
 0x040

	)

43 
	#CM_LINE
 0x080

	)

44 
	#CM_STRING
 0x100

	)

45 
	#CM_NO_HILITE
 0x200

	)

46 
	#CM_NOTOG
 0x400

	)

47 
	#CM_NORIGHT
 0x800

	)

48 
	#CM_NOCUT
 0x1000

	)

50 
	#LETTERFIRST
 (
CM_TOGGLE
|
CM_NUMBER
|
CM_STRING
)

	)

51 
	#RIGHTEDGES
 (
CM_TOGGLE
|
CM_NUMBER
)

	)

53 
	scoﬁmíu_ty≥
 {

54 
	mid
;

55 *
	mãxt
;

56 
	mvÆue
;

57 
	mmaxvÆue
;

58 
	mÀâî
;

59 
	mÊags
;

60 
coﬁmíu_ty≥
 *
	m√xt
;

61 } 
	tcoﬁmíu
;

63 
	#Cª©eMíuE¡ry_VSim∂e
(
c
,
ãxt
) \

64 
	`Cª©eMíuE¡ry_N‹mÆ
(
c
, 
ãxt
, 
CM_ONE
, 0, 999)

	)

65 
	#Cª©eMíuE¡ry_Sim∂e
(
c
,
ãxt
,
Êag
) \

66 
	`Cª©eMíuE¡ry_N‹mÆ
(
c
, 
ãxt
, 
Êag
, 0, 999)

	)

67 
	#Cª©eMíuE¡ry_N‹mÆ
(
c
,
ãxt
,
Êag
,
id
,
mv
) \

68 
	`Cª©eMíuE¡ry_KûÀr
(
c
, 
ãxt
, 
Êag
, 
id
, 0, 
mv
)

	)

69 
Cª©eMíuE¡ry_KûÀr
(
coﬁmíu
 ** 
c
, *
ãxt
, 
Êag
, 
id
,

70 
vÆue
, 
maxvÆue
);

72 
KûlCoﬁMíu
(
coﬁmíu
 * 
c
);

73 
ShowCoﬁMíu
(
dbªf
 
∂ayî
, 
coﬁmíu
 * 
c
);

74 **
MakeCoﬁMíuText
(
coﬁmíu
 * 
c
);

75 
CoﬁMíu_FPWBô
(
numbî
, 
maxÀn
);

78 
coﬁmíu
 *
SñCﬁ_Míu
(
cﬁumns
, *
hódög
, **
°rögs
, 
ty≥
,

79 
max
);

82 
coﬁmíu
 *
SñCﬁ_FunSåögMíuK
(
cﬁumns
, *
hódög
,

83 *(*
fun
Ë(), 
œ°
);

86 
coﬁmíu
 *
SñCﬁ_FunSåögMíu
(
cﬁumns
, *
hódög
,

87 *(*
fun
) ());

89 
	#AutoCﬁ_Míu
(
hó
,
°ri
,
typ
Ë
	`SñCﬁ_Míu
(-1,hó,°ri,typ,0)

	)

90 
	#AutoCﬁ_SåögMíu
(
hód
,
°r
Ë
	`AutoCﬁ_Míu
(hód,°r,0)

	)

91 
	#AutoCﬁ_FunSåögMíuK
(
hó
,
fun
,
œs
) \

92 
	`SñCﬁ_FunSåögMíuK
(-1,
hó
,
fun
,
œs
)

	)

93 
	#AutoCﬁ_FunSåögMíu
(
hó
,
fun
) \

94 
	`SñCﬁ_FunSåögMíuK
(-1,
hó
,
fun
)

	)

95 
	#SñCﬁ_SåögMíu
(
cﬁ
,
hód
,
°r
Ë
	`SñCﬁ_Míu
(cﬁ,hód,°r,0,0)

	)

	@btech/coolmenu_interface.h

15 #i‚de‡
COOLMENU_INTERFACE_H


16 
	#COOLMENU_INTERFACE_H


	)

19 
	~"mech.h
"

21 
	#ECOMMANDS
(
b«me
,
Àâî
) \

22 
	`ECMD
(
b«me
 ## 
_add
); \

23 
	`ECMD
(
b«me
 ## 
_möus
); \

24 
	`ECMD
(
b«me
 ## 
_toggÀ
); \

25 
	`ECMD
(
b«me
 ## 
_£t
)

	)

27 
	#ECOMMANDSET
(
«me
) \

28 
	`ECOMMANDS
(
«me
 ## 
_a
,'a'); \

29 
	`ECOMMANDS
(
«me
 ## 
_b
,'b'); \

30 
	`ECOMMANDS
(
«me
 ## 
_c
,'c'); \

31 
	`ECOMMANDS
(
«me
 ## 
_d
,'d'); \

32 
	`ECOMMANDS
(
«me
 ## 
_e
,'e'); \

33 
	`ECOMMANDS
(
«me
 ## 
_f
,'f'); \

34 
	`ECOMMANDS
(
«me
 ## 
_g
,'g'); \

35 
	`ECOMMANDS
(
«me
 ## 
_h
,'h'); \

36 
	`ECOMMANDS
(
«me
 ## 
_i
,'i'); \

37 
	`ECOMMANDS
(
«me
 ## 
_j
,'j'); \

38 
	`ECOMMANDS
(
«me
 ## 
_k
,'k'); \

39 
	`ECOMMANDS
(
«me
 ## 
_l
,'l'); \

40 
	`ECOMMANDS
(
«me
 ## 
_m
,'m'); \

41 
	`ECOMMANDS
(
«me
 ## 
_n
,'n'); \

42 
	`ECOMMANDS
(
«me
 ## 
_o
,'o'); \

43 
	`ECOMMANDS
(
«me
 ## 
_p
,'p'); \

44 
	`ECOMMANDS
(
«me
 ## 
_q
,'q'); \

45 
	`ECOMMANDS
(
«me
 ## 
_r
,'r'); \

46 
	`ECOMMANDS
(
«me
 ## 
_s
,'s'); \

47 
	`ECOMMANDS
(
«me
 ## 
_t
,'t'); \

48 
	`ECOMMANDS
(
«me
 ## 
_u
,'u'); \

49 
	`ECOMMANDS
(
«me
 ## 
_v
,'v'); \

50 
	`ECOMMANDS
(
«me
 ## 
_w
,'w'); \

51 
	`ECOMMANDS
(
«me
 ## 
_x
,'x'); \

52 
	`ECOMMANDS
(
«me
 ## 
_y
,'y'); \

53 

	)

55 
	#_GCOMMAND_PLUS
(
b«me
,
n
) \

56 {0, 
n
, "«da", 
b«me
 ## 
_add
},

	)

57 
	#_GCOMMAND_MINUS
(
b«me
,
n
) \

58 {0, 
n
, "«da", 
b«me
 ## 
_möus
},

	)

59 
	#_GCOMMAND_SET
(
b«me
,
n
) \

60 {0, 
n
, "«da", 
b«me
 ## 
_£t
},

	)

61 
	#_GCOMMAND_TOGGLE
(
b«me
,
n
) \

62 {0, 
n
, "«da", 
b«me
 ## 
_toggÀ
},

	)

64 
	#GCOMMAND_PLUS
(
b«me
, 
n
Ë
	`_GCOMMAND_PLUS
(b«me, #n)

	)

65 
	#GCOMMAND_MINUS
(
b«me
, 
n
Ë
	`_GCOMMAND_MINUS
(b«me, #n)

	)

66 
	#GCOMMAND_SET
(
b«me
, 
n
Ë
	`_GCOMMAND_SET
(b«me, #n)

	)

67 
	#GCOMMAND_TOGGLE
(
b«me
, 
n
Ë
	`_GCOMMAND_TOGGLE
(b«me, #n)

	)

71 
	#GCOMMANDS
(
b«me
,
Àâî
) \

72 
	`_GCOMMAND_PLUS
(
b«me
, #letter "+") \

73 
	`_GCOMMAND_MINUS
(
b«me
, #letter "-") \

74 
	`_GCOMMAND_SET
(
b«me
, #letter "=") \

75 
	`_GCOMMAND_TOGGLE
(
b«me
,#letter ".") \

76 
	`_GCOMMAND_TOGGLE
(
b«me
, #Àâî)

	)

79 
	#GCOMMANDSET
(
«me
) \

80 
	`GCOMMANDS
(
«me
 ## 
_a
,
a
) \

81 
	`GCOMMANDS
(
«me
 ## 
_b
,
b
) \

82 
	`GCOMMANDS
(
«me
 ## 
_c
,
c
) \

83 
	`GCOMMANDS
(
«me
 ## 
_d
,
d
) \

84 
	`GCOMMANDS
(
«me
 ## 
_e
,
e
) \

85 
	`GCOMMANDS
(
«me
 ## 
_f
,
f
) \

86 
	`GCOMMANDS
(
«me
 ## 
_g
,
g
) \

87 
	`GCOMMANDS
(
«me
 ## 
_h
,
h
) \

88 
	`GCOMMANDS
(
«me
 ## 
_i
,
i
) \

89 
	`GCOMMANDS
(
«me
 ## 
_j
,
j
) \

90 
	`GCOMMANDS
(
«me
 ## 
_k
,
k
) \

91 
	`GCOMMANDS
(
«me
 ## 
_l
,
l
) \

92 
	`GCOMMANDS
(
«me
 ## 
_m
,
m
) \

93 
	`GCOMMANDS
(
«me
 ## 
_n
,
n
) \

94 
	`GCOMMANDS
(
«me
 ## 
_o
,
o
) \

95 
	`GCOMMANDS
(
«me
 ## 
_p
,
p
) \

96 
	`GCOMMANDS
(
«me
 ## 
_q
,
q
) \

97 
	`GCOMMANDS
(
«me
 ## 
_r
,
r
) \

98 
	`GCOMMANDS
(
«me
 ## 
_s
,
s
) \

99 
	`GCOMMANDS
(
«me
 ## 
_t
,
t
) \

100 
	`GCOMMANDS
(
«me
 ## 
_u
,
u
) \

101 
	`GCOMMANDS
(
«me
 ## 
_v
,
v
) \

102 
	`GCOMMANDS
(
«me
 ## 
_w
,
w
) \

103 
	`GCOMMANDS
(
«me
 ## 
_x
,
x
) \

104 
	`GCOMMANDS
(
«me
 ## 
_y
,
y
) \

105 

	)

	@btech/coolmenu_interface2.h

18 
coﬁmíu
 *
	$ªåõve_m©chög_Àâî
(
coﬁmíu
 * 
c
, 
l
)

20 
l
 = 
	`mux_tﬁowî
(l);

21 ; 
c
; c = c->
√xt
)

22 i‡(
c
->
Àâî
 =
l
)

23  
c
;

24  
NULL
;

25 
	}
}

28 
coﬁmíu
 *
	$ªåõve_m©chög_id
(
coﬁmíu
 * 
c
, 
i
)

30 ; 
c
; c = c->
√xt
)

31 i‡(
c
->
id
 =
i
)

32  
c
;

33  
NULL
;

34 
	}
}

36 #ifde‡
DASMAGIC4


37 
	#MAYBESHOW
 
	`ShowCoﬁMíu
(
∂ayî
, 
c
)

	)

39 
	#MAYBESHOW


	)

42 
	$upd©e_íåy
(
dbªf
 
∂ayî
, 
coﬁmíu
 * 
c
, 
l
, 
vÆ
)

44 
o
;

45 
coﬁmíu
 *
d
 = 
	`ªåõve_m©chög_Àâî
(
c
, 
l
);

47 
	`DOCHECK
(!
d
, "InvalidÜetter!");

48 
	`DOCHECK
(
c
->
Êags
 & 
CM_NUMBER
, "InvalidÅype of field!");

49 
o
 = 
d
->
vÆue
;

50 
d
->
vÆue
 +
vÆ
;

51 i‡(
d
->
vÆue
 < 0) {

52 
vÆ
 = 0 - 
o
;

53 
d
->
vÆue
 = 0;

55 i‡(
d
->
vÆue
 > d->
maxvÆue
) {

56 
vÆ
 = 
d
->
maxvÆue
 - 
o
;

57 
d
->
vÆue
 = d->
maxvÆue
;

59 
	`DOCHECK
(!
vÆ
,

61 i‡(
vÆ
 > 0)

62 
	`nŸify
(
∂ayî
, 
	`çrötf
("%†ö¸ó£d by %dÅÿ%d!", 
d
->
ãxt
, 
vÆ
,

63 
d
->
vÆue
));

65 
	`nŸify
(
∂ayî
, 
	`çrötf
("%†de¸ó£d by %dÅÿ%d!", 
d
->
ãxt
,

66 0 - 
vÆ
, 
d
->
vÆue
));

67 
DASMAGIC3
;

68 
MAYBESHOW
;

69 
	}
}

71 
	$upd©e_íåy_toggÀ
(
dbªf
 
∂ayî
, 
coﬁmíu
 * 
c
, 
l
)

73 
coﬁmíu
 *
d
 = 
	`ªåõve_m©chög_Àâî
(
c
, 
l
);

75 
	`DOCHECK
(!
d
, "InvalidÜetter!");

76 
	`DOCHECK
(!(
d
->
Êags
 & 
CM_TOGGLE
), "InvalidÅype of field!");

77 #i‚de‡
REAL_SNEAKY_SET


78 i‡(
d
->
vÆue
)

79 
	`nŸify
(
∂ayî
, 
	`çrötf
("%†£àoff!", 
d
->
ãxt
));

81 
	`nŸify
(
∂ayî
, 
	`çrötf
("%†£à⁄!", 
d
->
ãxt
));

83 
d
->
vÆue
 = !d->value;

84 
DASMAGIC3
;

85 
MAYBESHOW
;

86 
	}
}

88 
	$upd©e_íåy_£t
(
dbªf
 
∂ayî
, 
coﬁmíu
 * 
c
, 
l
,

89 *
buf„r
)

91 
coﬁmíu
 *
d
 = 
	`ªåõve_m©chög_Àâî
(
c
, 
l
);

92 
i
;

94 
	`DOCHECK
(!
d
, "InvalidÜetter!");

95 
	`DOCHECK
(!(
d
->
Êags
 & (
CM_STRING
 | 
CM_NUMBER
)),

97 i‡(
d
->
Êags
 & 
CM_STRING
) {

98 i‡(
d
->
ãxt
)

99 
	`‰ì
((*Ë
d
->
ãxt
);

100 
d
->
ãxt
 = 
	`°rdup
(
buf„r
);

102 
i
 = 
	`©oi
(
buf„r
);

103 i‡(
i
 > 
d
->
maxvÆue
)

104 
i
 = 
d
->
maxvÆue
;

105 
	`DOCHECK
(
i
 < 0,

107 
	`nŸify
(
∂ayî
, 
	`çrötf
("%†£àtÿ%d!", 
d
->
ãxt
, 
i
));

108 
d
->
vÆue
 = 
i
;

110 
DASMAGIC3
;

111 
MAYBESHOW
;

112 
	}
}

116 
	#CMD
(
a
Ë
	`a
 (
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

	)

119 
	#COMMAND_ADD
(
‚ame
,
Àâî
,
mod
) \

120 
	`CMD
(
‚ame
) \

121 { 
DASMAGIC
; 
	`DOCHECK
(!
c
, "Huh?"); i‡(
buf„r
 && (
	`°æí
(buffer) > 1 || (buffer[0] && buffer[0] != ' '))) \

122 { i‡(
	`©oi
(
buf„r
) > 0) \

123 
	`upd©e_íåy
(
∂ayî
, 
DASMAGIC2
, 
Àâî
, 
mod
*
	`©oi
(
buf„r
)); \

125 
	`nŸify
(
∂ayî
, "Invalidárgument!"); \

126 } 
	`upd©e_íåy
(
∂ayî
, 
DASMAGIC2
, 
Àâî
, 
mod
*1); }

	)

128 
	#COMMAND_TOGGLE
(
‚ame
,
Àâî
) \

129 
	`CMD
(
‚ame
) \

130 { 
DASMAGIC
; 
	`DOCHECK
(!
c
, "Huh?"); i‡(
buf„r
 && (
	`°æí
(buf„rË> 1 || (buf„r[0] && buf„r[0] !' '))Ë
	`nŸify
(
∂ayî
, "Invalidárgument!"); \

131 
	`upd©e_íåy_toggÀ
(
∂ayî
, 
DASMAGIC2
, 
Àâî
); }

	)

133 
	#COMMAND_SET
(
‚ame
,
Àâî
) \

134 
	`CMD
(
‚ame
) \

135 { 
DASMAGIC
; 
	`DOCHECK
(!
c
, "Huh?"); i‡(!(
buf„r
 && (
	`°æí
(buf„rË> 1 || (buf„r[0] && buf„r[0] !' ')))Ë
	`nŸify
(
∂ayî
, "Lackárgument(s)!"); \

136 
	`upd©e_íåy_£t
(
∂ayî
, 
DASMAGIC2
, 
Àâî
, 
buf„r
); }

	)

138 
	#COMMANDS
(
b«me
,
Àâî
) \

139 
	`COMMAND_ADD
(
b«me
 ## 
_add
,
Àâî
,1); \

140 
	`COMMAND_ADD
(
b«me
 ## 
_möus
,
Àâî
,-1); \

141 
	`COMMAND_TOGGLE
(
b«me
 ## 
_toggÀ
,
Àâî
); \

142 
	`COMMAND_SET
(
b«me
 ## 
_£t
,
Àâî
);

	)

144 
	#COMMANDSET
(
«me
) \

145 
	`COMMANDS
(
«me
 ## 
_a
,'a'); \

146 
	`COMMANDS
(
«me
 ## 
_b
,'b'); \

147 
	`COMMANDS
(
«me
 ## 
_c
,'c'); \

148 
	`COMMANDS
(
«me
 ## 
_d
,'d'); \

149 
	`COMMANDS
(
«me
 ## 
_e
,'e'); \

150 
	`COMMANDS
(
«me
 ## 
_f
,'f'); \

151 
	`COMMANDS
(
«me
 ## 
_g
,'g'); \

152 
	`COMMANDS
(
«me
 ## 
_h
,'h'); \

153 
	`COMMANDS
(
«me
 ## 
_i
,'i'); \

154 
	`COMMANDS
(
«me
 ## 
_j
,'j'); \

155 
	`COMMANDS
(
«me
 ## 
_k
,'k'); \

156 
	`COMMANDS
(
«me
 ## 
_l
,'l'); \

157 
	`COMMANDS
(
«me
 ## 
_m
,'m'); \

158 
	`COMMANDS
(
«me
 ## 
_n
,'n'); \

159 
	`COMMANDS
(
«me
 ## 
_o
,'o'); \

160 
	`COMMANDS
(
«me
 ## 
_p
,'p'); \

161 
	`COMMANDS
(
«me
 ## 
_q
,'q'); \

162 
	`COMMANDS
(
«me
 ## 
_r
,'r'); \

163 
	`COMMANDS
(
«me
 ## 
_s
,'s'); \

164 
	`COMMANDS
(
«me
 ## 
_t
,'t'); \

165 
	`COMMANDS
(
«me
 ## 
_u
,'u'); \

166 
	`COMMANDS
(
«me
 ## 
_v
,'v'); \

167 
	`COMMANDS
(
«me
 ## 
_w
,'w'); \

168 
	`COMMANDS
(
«me
 ## 
_x
,'x'); \

169 
	`COMMANDS
(
«me
 ## 
_y
,'y'); \

170 
	`COMMANDS
(
«me
 ## 
_z
,'z');

	)

	@btech/create.h

15 #i‚de‡
CREATE_H


16 
	#CREATE_H


	)

18 
	#Cª©e
(
a
,
b
,
c
) \

19 i‡(!((
a
Ë–
b
 * ) 
	`ˇŒoc
(–b ), 
c
 ) )) \

20 { 
	`¥ötf
 ("U«bÀÅÿmÆloc!\n"); 
	`exô
(1); }

	)

22 
	#MyReCª©e
(
a
,
b
,
c
) \

23 i‡(!((
a
Ë–
b
 * ) 
	`ªÆloc
((*Ëa, –b ) * (
c
) ) )) \

24 { 
	`¥ötf
 ("U«bÀÅÿªÆloc!\n"); 
	`exô
(1); }

	)

26 
	#ReCª©e
(
a
,
b
,
c
) \

27 i‡(
a
Ë{ 
	`MyReCª©e
◊,
b
,
c
); } { 
	`Cª©e
◊,b,c); }

	)

29 
	#Fªe
(
a
Ëi‡◊Ë{
	`‰ì
◊);a=0;}

	)

	@btech/debug.h

9 #i‚de‡
DEBUG_H


10 
	#DEBUG_H


	)

11 #i‚de‡
DOCHECK


12 
	#DOCHECK
(
a
,
b
Ëi‡◊Ë{ 
	`nŸify
(
∂ayî
, b); ; }

	)

14 
debug_Æloc‰ì
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

15 
debug_li°
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

16 
debug_shutdown
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/extern.h

17 #i‚de‡
EXTERN_H


18 
	#EXTERN_H


	)

	@btech/failures.h

13 #i‚de‡
_FAILURES_H


14 
	#_FAILURES_H


	)

16 
	~"p.Áûuªs.h
"

18 
	#IsAutoˇ¬⁄
(
a
Ë(
MechWóp⁄s
[a].
ty≥
 =
TAMMO
)

	)

19 
	#IsE√rgy
(
a
Ë(
MechWóp⁄s
[a].
ty≥
==
TBEAM
)

	)

20 
	#IsFœmî
(
a
Ë(
MechWóp⁄s
[a].
ty≥
==
TBEAM
 && \

21 
	`°r°r
(
MechWóp⁄s
[
a
].
«me
, "Fœmî"))

	)

24 
	#HEAT
 1

	)

25 
	#RANGE
 2

	)

26 
	#DAMAGE
 3

	)

27 
	#POWER_SPIKE
 4

	)

28 
	#WEAPON_JAMMED
 5

	)

29 
	#WEAPON_DUD
 6

	)

30 
	#CRAZY_MISSILES
 7

	)

32 
	#FAIL_STATIC
 1

	)

35 
	#FAIL_NONE
 0

	)

36 
	#FAIL_JAMMED
 1

	)

37 
	#FAIL_SHORTED
 2

	)

38 
	#FAIL_DUD
 3

	)

39 
	#FAIL_EMPTY
 4

	)

40 
	#FAIL_DESTROYED
 5

	)

41 
	#FAIL_AMMOJAMMED
 6

	)

42 
	#FAIL_AMMOCRITJAMMED
 7

	)

44 
	sbønd_d©a
 {

45 *
	m«me
;

46 
	mÀvñ
;

47 
	msuc˚ss
;

48 
	mmodifõr
;

51 
	sÁûuª_d©a
 {

52 *
	mmesßge
;

53 
	md©a
;

54 (*
	mfunc
Ë(
	mMECH
 *, , , , , , *, *);

55 
	mty≥
;

56 
	mÊag
;

67 #i‚de‡
_FAILURES_C


69 
bønd_d©a
 
bønds
[];

70 
Áûuª_d©a
 
Áûuªs
[];

72 
bønd_d©a
 
	gbønds
[] = {

110 
	#REQ_HEAT
 1

	)

111 
	#REQ_TARGET
 2

	)

112 
	#REQ_TAC
 3

	)

113 
	#REQ_LRS
 4

	)

114 
	#REQ_SCANNERS
 5

	)

115 
	#REQ_COMPUTER
 6

	)

116 
	#REQ_RADIO
 7

	)

118 
Áûuª_d©a
 
	gÁûuªs
[] = {

119 
	#ENERGY_INDEX
 0

	)

123 
FaûuªWóp⁄Damage
, 
FAIL_NONE
, 0},

125 
FaûuªWóp⁄Damage
, 
FAIL_NONE
, 0},

127 
FaûuªWóp⁄Damage
, 
FAIL_NONE
, 0},

129 30, 
FaûuªWóp⁄Hót
, 
FAIL_NONE
, 
REQ_HEAT
},

131 0, 
FaûuªWóp⁄Spike
, 
FAIL_SHORTED
, 0},

132 {"%ch%¸Wóp⁄ mñt†down!%˙", 0, 
FaûuªWóp⁄Spike
, 
FAIL_SHORTED
,

136 
	#AC_INDEX
 6

	)

139 
FaûuªWóp⁄Dud
, 
FAIL_NONE
, 0},

140 {"%ch%¸RoundÇŸ fúed! Dud!%˙", 0, 
FaûuªWóp⁄Dud
, 
FAIL_DUD
, 0},

141 {"%ch%¸Wóp⁄ JAMS... cÀ¨ög!%˙", 0, 
FaûuªWóp⁄Jammed
,

142 
FAIL_JAMMED
, 0},

144 20, 
FaûuªWóp⁄Hót
, 
FAIL_NONE
, 
REQ_HEAT
},

146 40, 
FaûuªWóp⁄Hót
, 
FAIL_NONE
, 
REQ_HEAT
},

147 {"%ch%¸RoundÇŸ fúed! STUCK i¿chambî!%˙", 0, 
FaûuªWóp⁄Dud
,

148 
FAIL_DUD
, 0},

151 
	#MISSILE_INDEX
 12

	)

153 {"%ch%¸Rack jams,áâempögÅÿ˛ór!%˙", 0, 
FaûuªWóp⁄Jammed
,

154 
FAIL_JAMMED
, 0},

156 
FaûuªWóp⁄Missûes
, 
FAIL_NONE
, 0},

158 
FaûuªWóp⁄Missûes
, 
FAIL_NONE
, 0},

160 
FaûuªWóp⁄Missûes
, 
FAIL_NONE
, 0},

162 
FaûuªWóp⁄Spike
, 
FAIL_SHORTED
, 0},

164 
FaûuªWóp⁄Spike
, 
FAIL_SHORTED
, 0},

167 
	#FLAMMER_INDEX
 18

	)

170 
FaûuªWóp⁄Jammed
, 
FAIL_JAMMED
, 0},

172 
FaûuªWóp⁄Spike
, 
FAIL_SHORTED
, 0},

174 
FaûuªWóp⁄Hót
, 
FAIL_NONE
, 0},

177 0, 
FaûuªWóp⁄Spike
, 
FAIL_SHORTED
, 0},

179 0, 
FaûuªWóp⁄Jammed
, 
FAIL_JAMMED
, 0},

181 
FaûuªWóp⁄Spike
, 
FAIL_EMPTY
, 0},

184 
	#COMPUTER_INDEX
 24

	)

187 
FaûuªCompuãrT¨gë
, 
FAIL_NONE
, 
REQ_TARGET
},

189 
FaûuªCompuãrSˇ¬î
, 
FAIL_NONE
, 
REQ_TAC
},

191 2, 
FaûuªCompuãrSˇ¬î
, 
FAIL_NONE
, 
REQ_LRS
},

193 
FaûuªCompuãrSˇ¬î
, 
FAIL_NONE
, 
REQ_SCANNERS
},

195 7, 
FaûuªCompuãrSˇ¬î
, 
FAIL_NONE
, 
REQ_SCANNERS
},

197 0, 
FaûuªCompuãrShutdown
, 
FAIL_NONE
, 
REQ_COMPUTER
},

200 
	#RADIO_INDEX
 30

	)

201 {"n⁄e", 50, 
FaûuªRadioSètic
, 
FAIL_NONE
, 0},

202 {"n⁄e", 70, 
FaûuªRadioSètic
, 
FAIL_NONE
, 0},

204 
FaûuªRadioR™ge
, 
FAIL_NONE
, 
REQ_RADIO
},

206 
FaûuªRadioR™ge
, 
FAIL_NONE
, 
REQ_RADIO
},

208 0, 
FaûuªRadioSh‹t
, 
FAIL_NONE
, 
REQ_RADIO
},

210 
FaûuªRadioSh‹t
, 
FAIL_NONE
, 
REQ_RADIO
}

	@btech/floatsim.h

15 #i‚de‡
FLOATSIM_H


16 
	#FLOATSIM_H


	)

20 
	#INT_DECIMAL_BITS
 8

	)

23 
	#SHO_DECIMAL_BITS
 5

	)

27 
	#FSIM2INT
(
a
Ë(◊Ë>> 
INT_DECIMAL_BITS
)

	)

28 
	#FSIM2SHO
(
a
Ë(◊Ë>> 
SHO_DECIMAL_BITS
)

	)

29 
	#INT2FSIM
(
a
Ë(◊Ë<< 
INT_DECIMAL_BITS
)

	)

30 
	#SHO2FSIM
(
a
Ë(◊Ë<< 
SHO_DECIMAL_BITS
)

	)

	@btech/glue.h

21 
	~"mudc⁄f.h
"

22 
	~"comm™d.h
"

23 
	~"c⁄fig.h
"

24 
	~"m≠s.h
"

27 #i‚de‡
_GLUE_H


28 
	#_GLUE_H


	)

30 
	#VERIFY
 0

	)

31 
	#SAVE
 1

	)

32 
	#LOAD
 2

	)

34 
	#XCODE_VERSION
 2

	)

36 
	#SPECIAL_FREE
 0

	)

37 
	#SPECIAL_ALLOC
 1

	)

39 
	#GFLAG_ALL
 0

	)

40 
	#GFLAG_MECH
 1

	)

41 
	#GFLAG_GROUNDVEH
 2

	)

42 
	#GFLAG_AERO
 4

	)

43 
	#GFLAG_DS
 8

	)

44 
	#GFLAG_VTOL
 16

	)

45 
	#GFLAG_NAVAL
 32

	)

46 
	#GFLAG_BSUIT
 64

	)

47 
	#GFLAG_MW
 128

	)

49 
	~"glue_ty≥s.h
"

51 
	#Have_MechPowî
(
a
,
b
Ë(((
	`Powîs2
((
	`Ow√r
◊))Ë& (b)Ë|| 
	`Wiz¨d
(Ow√r◊))Ë&& 
	`Inhîôs
(◊)))

	)

53 
	#H¨dcode
(
a
Ë((
	`Fœgs3
◊Ë& 
MARK_9
Ë!0)

	)

54 
	#s_H¨dcode
(
a
Ë
	`s_Fœgs
(◊), 
FLAG_WORD3
, 
	`Fœgs3
◊Ë| 
MARK_9
)

	)

55 
	#c_H¨dcode
(
a
Ë
	`s_Fœgs
(◊), 
FLAG_WORD3
, 
	`Fœgs3
◊Ë& ~
MARK_9
)

	)

57 
	#Zombõ
(
a
Ë((
	`Fœgs3
◊Ë& 
MARK_8
Ë!0)

	)

58 
	#s_Zombõ
(
a
Ë
	`s_Fœgs
(◊), 
FLAG_WORD3
, 
	`Fœgs3
◊Ë| 
MARK_8
)

	)

59 
	#c_Zombõ
(
a
Ë
	`s_Fœgs
(◊), 
FLAG_WORD3
, 
	`Fœgs3
◊Ë& ~
MARK_8
)

	)

61 
	sComm™dsSåu˘
 {

62 
	mÊag
;

63 *
	m«me
;

64 *
	mhñpmsg
;

65 (*
	mfunc
) (, *, *);

66 } 
	tComm™dsSåu˘
;

68 
	sS≥cülObje˘Såu˘
 {

69 *
	mty≥
;

70 
Comm™dsSåu˘
 *
	mcomm™ds
;

71 
	md©asize
;

72 (*
	mÆloc‰ìfunc
) (, **, );

73 
	mupd©eTime
;

75 (*
	mupd©efunc
) (, *);

78 
	mpowî_√eded
;

80 } 
	tS≥cülObje˘Såu˘
;

82 
CF_HAND
(
cf_öt
);

83 
CF_HAND
(
cf_boﬁ
);

84 
CF_HAND
(
cf_°rög_dyn
);

86 
bãchd©a
 
	tBTECHDATA
;

87 
	sbãchd©a


89 *
	mc⁄fig_fûe
;

90 *
	mhcode_db
;

91 *
	mec⁄_db
;

92 *
	mmech_db
;

93 *
	mm≠_db
;

94 
	mbãch_di£mb¨k
;

95 
	mbãch_ígöe
;

96 
	mbãch_ic
;

97 
	mbãch_∑πs
;

98 
	mbãch_v¸ô
;

99 
	mbãch_¶owdown
;

100 
	mbãch_Áßtu∫
;

101 
	mbãch_dyn•ìd
;

102 
	mbãch_showãch
;

103 
	mbãch_°ackpﬁe
;

104 
	mbãch_ãºaömode
;

105 
	mbãch_î™ge
;

106 
	mphys_u£_pskûl
;

107 
	m«mech™ge_days
;

108 
	mbãch_√wãºaö
;

109 
	mbãch_Áß¸ô
;

110 
	mbãch_√wch¨ge
;

111 
	mbãch_ènk‰õndly
;

112 
	mbãch_skid˛iff
;

113 
	mbãch_xp_bthmod
;

114 
	mbãch_xp_missûemod
;

115 
	mbãch_xp_ammomod
;

116 
	mbãch_deÁu…wópdam
;

117 
	mbãch_xp_modifõr
;

118 
	mbãch_deÁu…wópbv
;

119 
	mbãch_ﬁdxpsy°em
;

120 
	mbãch_xp_vπmod
;

121 
	mbãch_limôedª∑ús
;

122 
	mbãch_exãndedhide
;

123 
	mbãch_digb⁄us
;

124 
	mbãch_dig_⁄ly_fs
;

125 
	mbãch_u£dmech°‹e
;

126 
	mbãch_mw∑ª¡
;

127 
	mbãch_masc
;

128 
	mbãch_x∂oss_asßu…
;

129 
	mbãch_x∂oss_hóvy
;

130 
	mbãch_x∂oss_medium
;

131 
	mbãch_x∂oss_light
;

132 
	mbãch_x∂oss_bsuô
;

133 
	mbãch_x∂oss_execuãd
;

134 
	mbãch_gœn˚
;

135 
	mbãch_Áccou¡
;

136 
	mbãch_¸ôÀvñ
;

137 
	mbãch_ènkshõld
;

138 
	mbãch_Êﬂt¸ô
;

139 
	mbãch_exâ¨gmod
;

140 
	mbãch_mtx¸ô
;

141 
	mbãch_bsuômode
;

142 
	mbãch_hódt›unchèb
;

143 
	mbãch_aut›xp
;

144 
	mbãch_com∂exª∑ú
;

145 
	mbãch_Ælow•röt
;

146 
	mbãch_‰ìãchtime
;

147 
	mbãch_œxc‹e
;

148 
	mbãch_u£_ãch_bsuô
;

149 
	mbãch_nofusi⁄vtﬁfuñ
;

150 
	mbãch_xp_u£PûŸBVMod
;

151 
	mbãch_Áßadvvhl¸ô
;

152 
	mbãch_Áßadvvhlfúe
;

153 
	mbãch_Áßadvvtﬁ¸ô
;

154 
	mbãch_x∂oss
;

155 
	mbãch_hŸlﬂdaddshÆfbthmod
;

156 
	mbãch_moddamagewôhwoods
;

157 
	mbãch_exãndedmovemod
;

158 
	mbãch_moddamagewôhønge
;

159 
	mbãch_divrŸ‹damage
;

160 
	mbãch_√w°aggî
;

161 
	mbãch_mw_losm≠
;

162 
	mbãch_°ackög
;

163 
	mbãch_°ackdamage
;

164 
	mbãch_é3_ch¨ge
;

165 
	mbãch_ooc_comsys
;

166 
	ma·îli„_dbªf
;

167 
	ma·îs˚n_dbªf
;

168 
	mhudöfo_íabÀd
;

169 
	mhudöfo_show_m≠öfo
;

170 
	mhave_•ecüls
;

173 
BTECHDATA
 
bãchc⁄f
;

175 
	sc⁄Â¨m2
 {

176 *
	m≤ame
;

177 (*
	möãΩªãr
)(*
	mvp
, *
	m°r
, *
	mpExåa
, 
UINT32
 
	mnExåa
, 
dbªf
 
	m∂ayî
, *
	mcmd
);

178 
	mÊags
;

179 
	mΩîms
;

180 *
	mloc
;

181 *
	mpExåa
;

182 
UINT32
 
	mnExåa
;

183 } 
	tCONF2
;

185 #ifde‡
_GLUE_C


187 
	~"p.mech.move.h
"

188 
	~"p.debug.h
"

189 
	~"tuºë.h
"

190 
	~"p.´ro.move.h
"

191 
	~"p.mech.m≠s.h
"

192 
	~"p.ds.bay.h
"

193 
	~"p.mech.nŸify.h
"

194 
	~"p.mech.utûs.h
"

195 
	~"p.mech.comb©.h
"

196 
	~"p.mech.upd©e.h
"

197 
	~"p.mechªp.h
"

198 
	~"p.mech.ª°ri˘.h
"

199 
	~"p.mech.adv™˚d.h
"

200 
	~"p.mech.tic.h
"

201 
	~"p.ds.tuºë.h
"

202 
	~"p.mech.c⁄è˘s.h
"

203 
	~"p.mech.°©us.h
"

204 
	~"p.mech.sˇn.h
"

205 
	~"p.mech.£ns‹.h
"

206 
	~"p.m≠.h
"

207 
	~"p.mech.pickup.h
"

208 
	~"p.eje˘.h
"

209 
	~"p.mech.c3.h
"

210 
	~"p.bsuô.h
"

211 
	~"p.mech.°¨tup.h
"

212 
	~"p.mech.c⁄si°ícy.h
"

213 
	~"p.mech.physiˇl.h
"

214 
	~"mech.ãch.h
"

215 
	~"p.mech.ãch.ª∑ús.h
"

216 
	~"p.glue.scode.h
"

217 
	~"mechªp.h
"

218 
	~"p.möe.h
"

219 
	~"mech.cu°om.h
"

220 
	~"p.mech.cu°om.h
"

221 
	~"s˚n.h
"

222 
	~"p.bãch°©s.h
"

223 
	~"aut›ûŸ.h
"

224 
	~"p.evíts.h
"

225 
	~"p.mech.èg.h
"

226 
	~"p.mech.c3i.h
"

227 
	~"p.mech.fúe.h
"

228 
	~"p.mech.íh™˚d.¸ôiˇls.h
"

229 
	~"p.mech.•Ÿ.h
"

230 
	~"p.mech.ammodump.h
"

231 
	~"p.mech.damage.h
"

233 
√waut›ûŸ
(
dbªf
, **, );

234 
√wtuºë
(
dbªf
, **, );

235 
√w‰ìmech
(
dbªf
, **, );

237 
muxevít_ªmove_ty≥_d©a
(, *);

239 
ECMD
(
f_m≠block_£t
);

240 
ECMD
(
f_m≠block_£txy
);

241 
ECMD
(
Li°F‹ms
);

242 
ECMD
(
öôüã_ood
);

243 
ECMD
(
mech_Radd°uff
);

244 
ECMD
(
mech_Rfix°uff
);

245 
ECMD
(
mech_Rªmove°uff
);

246 
ECMD
(
mech_Rª£t°uff
);

247 
ECMD
(
mech_bomb
);

248 
ECMD
(
mech_lﬂdˇrgo
);

249 
ECMD
(
mech_lo£mô
);

250 
ECMD
(
mech_m™i„°
);

251 
ECMD
(
mech_°‹es
);

252 
ECMD
(
mech_domy°uff
);

253 
ECMD
(
mech_u∆ﬂdˇrgo
);

254 
ECMD
(
ãch_magic
);

255 
ECMD
(
mech_ö„∫o
);

256 
ECMD
(
mech_sw¨m
);

257 
ECMD
(
mech_sw¨m1
);

258 
ECMD
(
mech_dig
);

260 
ECMD
(
f_m≠_lﬂdm≠
);

262 
ECMD
(
f_døw
);

263 
ECMD
(
f_shóth
);

264 
ECMD
(
f_hﬁd
);

265 
ECMD
(
f_put
);

267 
ECMD
(
f_shout
);

268 
ECMD
(
f_emŸe
);

269 
ECMD
(
f_ßy
);

270 
ECMD
(
f_whi•î
);

288 
	#SHEADER
(
a
,
b
) \

289 { 
a
, 
b
, b, 
NULL
 }

	)

290 
	#HEADER
(
a
Ë
	`SHEADER
(0,a)

	)

292 
Comm™dsSåu˘
 
	gmechcomm™ds
[] = {

294 
HEADER
("Movement"),

298 
mech_hódög
},

301 
mech_•ìd
},

303 
mech_vîtiˇl
},

306 
´ro_˛imb
},

308 
´ro_dive
},

310 
´ro_thru°
},

313 
mech_œãøl
},

314 {129, "STAND", "Sènd u∞a·îá fÆ»‹ dr›pögÖr⁄e.", 
mech_°™d
},

315 {1, "PRONE", "F‹˚ you∏'mechÅÿdr›Ör⁄êwhîêô is.", 
mech_dr›
},

317 
mech_thøsh
},

320 
mech_jump
},

323 
mech_huŒdown
},

326 
mech_íãrba£
},

330 
mech_íãrbay
},

333 
mech_boŸÀggî
},

336 
mech_•röt
},

339 
mech_evade
},

342 
mech_dodge
},

344 
HEADER
("Radio"),

346 
mech_li°_‰eqs
},

348 "Síd†<°rög> o¿ch™√»<Àâî>'†‰eq.", 
mech_£ndch™√l
},

350 "Radi€†(LOSË<ID> wôh <STRING>", 
mech_ødio
},

353 
mech_£t_ch™√l‰eq
},

356 
mech_£t_ch™√lmode
},

359 
mech_£t_ch™√…ôÀ
},

362 
HEADER
("Weapons"),

365 
mech_£â¨gë
},

367 "Compuã†ba£-to-hô f‹ giví wóp⁄ándÅ¨gë.", 
mech_sight
},

370 
mech_fúewóp⁄
},

373 
mech_èrgë
},

376 
mech_èg
},

380 
mech_ams
},

383 
mech_¨m‹põrcög
},

385 
mech_¨ãmis
},

387 
mech_ex∂osive
},

390 
mech_˛u°î
},

392 "Sës/un£t†¨tûÀry wóp⁄Åÿfúêmöêrounds.", 
mech_möe
},

395 
mech_smoke
},

398 
mech_sw¨m
},

401 
mech_sw¨m1
},

404 
mech_Êechëã
},

407 
mech_g©éög
},

409 
mech_Êamîhót
},

412 
mech_hŸlﬂd
},

416 
mech_ö¨c_ammo_toggÀ
},

419 
mech_ö˚ndüry
},

422 
mech_ö„∫o
},

423 {0, "LBX <wó≤um>", "Së†wóp⁄Åÿ™d from LBX Mode.", 
mech_lbx
},

424 {0, "NARC <wó≤um>", "Së†wóp⁄Åÿ™d from NARC Mode.", 
mech_«rc
},

427 
mech_¥ecisi⁄
},

430 
mech_øc
},

433 
mech_øpidfúe
},

435 
mech_u…ø
},

437 
mech_dißbÀwóp
},

439 
mech_unjamammo
},

442 
mech_u£bö
},

447 
mech_addtic
},

448 {0, "CLEARTIC <NUM>", "CÀ¨†thêTIC <num>.", 
mech_˛óπic
},

452 
mech_dñtic
},

456 
mech_fúëic
},

457 {0, "LISTTIC <NUM>", "Li°†wóp⁄†öÅhêTIC <num>.", 
mech_li°tic
},

460 
HEADER
("Information"),

464 
mech_brõf
},

466 
mech_c⁄è˘s
},

469 
mech_¸ô°©us
},

471 "Inf‹m©i⁄ o¿deÁu…Å¨gë,Çum, o∏x,y", 
mech_ªp‹t
},

474 
mech_sˇn
},

478 
mech_£ns‹
},

482 
mech_°©us
},

484 
mech_võw
},

486 
mech_wóp⁄•ecs
},

488 
mech_wóp⁄°©us
},

491 
HEADER
("Navigation"),

492 {0, "BEARING [<X Y>] [<X Y>]", "Samêf‹m©á†ønge.", 
mech_bórög
},

495 
mech_ëa
},

497 
mech_föd˚¡î
},

499 
mech_«vig©e
},

502 
mech_ønge
},

505 "Show†thê(Mech/Tîøö/EÀv©i⁄/LOS/Sís‹s/Height/ComböedËl⁄gÑ™gêm≠", 
mech_Ãsm≠
},

508 
mech_ècm≠
},

511 
HEADER
("Special"),

514 
´ro_checklz
},

517 
öôüã_ood
},

520 
mech_lo£mô
},

523 
mech_damage
},

525 
mech_weight
},

528 
mech_bomb
},

529 {2, "DIG", "Sèπ†buºowög f‹ covî [n⁄-hovî†⁄ly].", 
mech_dig
},

533 
mech_fixtuºë
},

537 
mech_ex∂ode
},

540 
mech_ß„ty
},

542 
mech_mech¥efs
},

545 {0, "DROPOFF", "Dr›†thêmech youáª c¨ryög.", 
mech_dr›off
},

546 {0, "PICKUP [ID]", "Pick†u∞[ID].", 
mech_pickup
},

549 
mech_©èchˇbÀs
},

551 
mech_dëachˇbÀs
},

556 
mech_dump
},

559 
mech_Êù¨ms
},

563 
mech_ecm
},

566 
mech_eccm
},

569 
mech_™gñecm
},

572 
mech_™gñeccm
},

576 
mech_≥ªcm
},

579 
mech_≥ªccm
},

583 
mech_°ó…h¨m‹
},

586 
mech_nuŒsig
},

590 
mech_di£mb¨k
},

591 {0, "UDISEMBARK", "GëÅhêunô ouào‡ô'†ˇºõr.", 
mech_udi£mb¨k
},

592 {0, "EMBARK", "Climb i¡ÿ®'mech / vehi˛e", 
mech_emb¨k
},

593 {1, "MASC", "ToggÀ†MASC o¿™d off", 
mech_masc
},

594 {0, "SCHARGE", "ToggÀ†Su≥rch¨gî o¿™d off", 
mech_sch¨ge
},

596 {-2, "LAND", "Tîmö©êyou∏jum∞‹Ü™dá VTOL/Aîo/DS", 
mech_œnd
},

597 {-35, "TAKEOFF", "VTOL/Aîÿèkêof‡comm™d", 
´ro_èkeoff
},

599 "RŸ©e†thêt‹sÿ60 degªe†righà‹Üe·.", 
mech_rŸ©ë‹so
},

601 {0, "SLITE", "Tu∫†you∏£¨chlighà⁄/off", 
mech_¶ôe
},

605 
mech_•Ÿ
},

606 {0, "STARTUP [OVERRIDE]", "Commí˚†°¨tu∞cy˛e.", 
mech_°¨tup
},

607 {0, "SHUTDOWN", "Shut†dow¿thêmech.", 
mech_shutdown
},

608 {34, "TURRET", "SëÅhêtuºë facög.", 
mech_tuºë
},

611 
mech_auto_tuºë
},

614 
vehi˛e_extöquish_fúe
},

619 
mech_c3_joö_Àave
},

622 
mech_c3_mesßge
},

624 
mech_c3_èrgës
},

626 
mech_c3_√tw‹k
},

630 
mech_c3i_joö_Àave
},

633 
mech_c3i_mesßge
},

635 
mech_c3i_èrgës
},

637 
mech_c3i_√tw‹k
},

643 
hót_cutoff
},

646 
show_«rc_pods
},

649 
ªmove_ö¨c_pods_mech
},

652 
ªmove_ö¨c_pods_ènk
},

655 
SHEADER
(1, "Physical"),

656 {1, "AXE [R | L | B] [<TARGET-ID>]", "Axe†®èrgë", 
mech_axe
},

659 "Ch¨ge†®èrgë. '-'Ñemove†ch¨gêcomm™d.", 
mech_ch¨ge
},

661 
mech_sw‹d
},

662 {1, "CLUB [<TARGET-ID>]", "Club†®èrgë wôháÅªe", 
mech_˛ub
},

663 {1, "KICK [R | L] [<TARGET-ID>]", "Kick†®èrgë", 
mech_kick
},

664 {1, "PUNCH [R | L | B] [<TARGET-ID>]", "Punche†®èrgë", 
mech_punch
},

666 "Gøb†®åìánd c¨rõ†ôároundá†®˛ub", 
mech_gøb˛ub
},

669 "Aâack†Àg†o‡thêèrgë b©éemech", 
bsuô_©èckÀg
},

672 
bsuô_hide
},

674 "Sw¨m†thêèrgë / dr› of‡èrgë (-)", 
bsuô_sw¨m
},

676 "Jëtis⁄ you∏back∑ck", 
Jëtis⁄Packs
},

679 
HEADER
("Repair"),

680 {0, "CHECKSTATUS", "Check†mech'†ãch°©us", 
ãch_check°©us
},

682 
show_mechs_damage
},

684 
ãch_fix
},

685 {0, "FIXARMOR <LOC>", "Rïaú†¨m‹ i¿<loc>", 
ãch_fix¨m‹
},

687 
ãch_fixöã∫Æ
},

689 
ãch_ª©èch
},

691 
ãch_ª∂a˚suô
},

693 
ãch_ª£Æ
},

697 
ãch_ªlﬂd
},

700 
ãch_toggÀty≥
},

701 {0, "REMOVEGUN <NUM>", "Remove†thêgun", 
ãch_ªmovegun
},

702 {0, "REMOVEPART <LOC> <POS>", "Remove†thê∑π", 
ãch_ªmovï¨t
},

703 {0, "REMOVESECTION <LOC>", "Remove†thê£˘i⁄", 
ãch_ªmove£˘i⁄
},

708 
ãch_ª∂a˚gun
},

712 
ãch_ª∑úgun
},

714 
ãch_ª∂a˚∑π
},

716 
ãch_ª∑ú∑π
},

717 {0, "REPAIRS", "Show†ª∑ús/s¸≠pög i¿¥ogªss", 
ãch_ª∑ús
},

720 
ãch_u∆ﬂd
},

723 
ãch_magic
},

726 
HEADER
("Cargo"),

730 
mech_lﬂdˇrgo
},

731 {0, "MANIFEST", "Li°†°uf‡ˇºõd by mech.", 
mech_m™i„°
},

732 {0, "STORES", "Li°†°uf‡öÅhêbay.", 
mech_°‹es
},

735 
mech_u∆ﬂdˇrgo
},

738 
HEADER
("@Restricted"),

740 "@Cª©e†/ DißbÀ†bay†⁄á DS", 
mech_¸óãbays
},

742 
£t_xcode°uff
},

744 
£t_xcode°uff
},

745 {0, "@VIEWXCODE", "@Võw†xcodêvÆue†⁄ obje˘", 
li°_xcode°uff
},

749 
mech_¢ùe
},

752 
mech_Radd°uff
},

755 
mech_Rfix°uff
},

756 {0, "CLEARSTUFF", "@Remove†Æ»°uf‡‰om 'mech", 
mech_Rª£t°uff
},

760 
mech_Rªmove°uff
},

762 
mech_R£tm≠ödex
},

763 {0, "SETTEAM <NUM>", "@Së†thêãams.", 
mech_R£âóm
},

765 
mech_R£txy
},

766 {0, 
NULL
, NULL, NULL}

769 
ECMD
(
m≠_addi˚
);

770 
ECMD
(
m≠_dñi˚
);

771 
ECMD
(
m≠_£tc⁄dôi⁄s
);

773 
Comm™dsSåu˘
 
	gm≠comm™ds
[] = {

774 {0, "@VIEWXCODE", "@Võw†xcodêvÆue†⁄ obje˘", 
li°_xcode°uff
},

776 
£t_xcode°uff
},

778 
£t_xcode°uff
},

782 
m≠_addi˚
},

784 "@Dñëe†fú°-mñtög i˚†© <NUMBER> ch™˚", 
m≠_dñi˚
},

787 
m≠_∑thföd
},

790 
m≠_£tc⁄dôi⁄s
},

791 {0, "VIEW <X> <Y>", "@Show†thêm≠ cíãªdáàX,Y", 
m≠_võw
},

795 
m≠_add_block
},

797 
m≠_add_möe
},

800 
m≠_addhex
},

801 {0, "SETLINKED", "@Së†thêm≠Üöked", 
m≠_£éöked
},

802 {0, "@MAPEMIT <MESSAGE>", "@Emô†°uf‡tÿthêm≠", 
m≠_m≠emô
},

803 {0, "FIXMAP", "@Fixe†öc⁄si°ícõ†ö m≠", 
debug_fixm≠
},

804 {0, "LOADMAP <NAME>", "@Lﬂd†thê«med m≠", 
m≠_lﬂdm≠
},

805 {0, "SAVEMAP <NAME>", "@Save†thêm≠á†«me", 
m≠_ßvem≠
},

806 {0, "SETMAPSIZE <X> <Y>", "@Së†xánd y sizêo‡m≠", 
m≠_£tm≠size
},

809 
m≠_li°mechs
},

811 
m≠_˛órmechs
},

813 "@Add†fúêth©Üa°†<duøti⁄> secs", 
m≠_addfúe
},

815 "@Add†smokêth©Üa°†<duøti⁄> secs", 
m≠_addsmoke
},

817 "@Dñëe†obje˘†o‡eôhîÅy≥ o∏© x/y", 
m≠_dñobj
},

820 
m≠_upd©ñöks
},

823 {0, "STORES", "Li°†°uf‡öÅhêh™g¨.", 
mech_m™i„°
},

825 
mech_Radd°uff
},

828 
mech_Rfix°uff
},

830 
mech_Rªmove°uff
},

831 {0, "CLEARSTUFF", "@Remove†Æ»°uf‡‰om m≠", 
mech_Rª£t°uff
},

832 {0, 
NULL
, NULL, NULL}

836 
Comm™dsSåu˘
 
	gmechªpcomm™ds
[] = {

838 
mechªp_R£â¨gë
},

841 
mechªp_Rlﬂd√w
},

843 
mechªp_Rª°‹e
},

847 
mechªp_Rßvëemp2
},

850 
mechªp_R£èrm‹
},

853 
mechªp_Raddwóp
},

856 
mechªp_Rª£t¸ôs
},

858 
mechªp_Rª∑ú
},

861 
mechªp_Rªlﬂd
},

864 
mechªp_Radd•ecül
},

866 
mechªp_Rdi•œy£˘i⁄
},

868 
mechªp_Rshowãch
},

870 "@Add†thêadv™˚dÅechnﬁogyÅÿthêmech.", 
mechªp_Raddãch
},

873 
mechªp_Rdñãch
},

876 
mechªp_Raddö·ech
},

879 
mechªp_Rdñö·ech
},

880 {0, "SETTONS <NUM>", "@Së†thêmechÅ⁄«ge", 
mechªp_R£â⁄s
},

882 "@Së†thêmechÅy≥", 
mechªp_R£ây≥
},

884 "@Së†thêmech movemíàty≥", 
mechªp_R£tmove
},

886 
mechªp_R£t•ìd
},

888 
mechªp_R£thótsöks
},

890 
mechªp_R£tjump•ìd
},

892 
mechªp_R£ér§™ge
},

894 
mechªp_R£âa¸™ge
},

896 
mechªp_R£tsˇƒ™ge
},

898 
mechªp_R£åadi‹™ge
},

900 "Së†ˇrgo•a˚ánd max c¨gÿt⁄«ge", 
mechªp_£tˇrgo•a˚
},

902 {0, 
NULL
, NULL, NULL}

905 #ifde‡
MENU_CUSTOMIZE


906 
	~"coﬁmíu_öãrÁ˚.h
"

907 
ECOMMANDSET
(
cu
);

910 
Comm™dsSåu˘
 
	gcu°omcomm™ds
[] = {

911 #ifde‡
MENU_CUSTOMIZE


912 
GCOMMANDSET
(
cu
) {0, "@SETXCODE <NAME> <VALUE|DATA>",

914 
£t_xcode°uff
},

915 {0, "@VIEWXCODE", "@Võw†xcodêvÆue†⁄ obje˘", 
li°_xcode°uff
},

918 
cu°om_weight1
},

920 
cu°om_weight2
},

921 {0, "EDIT <ªf>", "A…î†<ªf>", 
cu°om_edô
},

922 {0, "FINISH", "QuôÉdôög mode", 
cu°om_föish
},

923 {0, "Z", "Back", 
cu°om_back
},

924 {0, "L", "Show†míu", 
cu°om_look
},

925 {0, "LO", "Show†míu", 
cu°om_look
},

926 {0, "LOO", "Show†míu", 
cu°om_look
},

927 {0, "LOOK", "Show†míu", 
cu°om_look
},

928 {0, "HELP", "Show†hñ∞f‹ cu°omiz©i⁄", 
cu°om_hñp
},

931 
cu°om_¸ô°©us
},

934 
cu°om_°©us
},

936 
cu°om_wóp⁄•ecs
},

937 {0, 
NULL
, NULL, NULL}

941 #ifde‡
MENU_CHARGEN


942 
	~"coﬁmíu_öãrÁ˚.h
"

943 
ECOMMANDSET
(
cm
);

946 
Comm™dsSåu˘
 
	gch¨gícomm™ds
[] = {

947 #ifde‡
MENU_CHARGEN


948 
GCOMMANDSET
(
cm
) {0, "DONE", "Finishes your chargen (permanent)",

949 
ch¨gí_d⁄e
},

950 {0, "BEGIN", "Sèπ†ch¨gí", 
ch¨gí_begö
},

951 {0, "NEXT", "G€†tÿ√xà°agêo‡ch¨gí", 
ch¨gí_√xt
},

952 {0, "PREV", "G€†tÿ¥eviou†°agêo‡ch¨gí", 
ch¨gí_¥ev
},

956 
ch¨gí_≠∂y
},

958 
ch¨gí_ª£t
},

959 {0, "L", "Show†míu", 
ch¨gí_look
},

960 {0, "LO", "Show†míu", 
ch¨gí_look
},

961 {0, "LOO", "Show†míu", 
ch¨gí_look
},

962 {0, "LOOK", "Show†míu", 
ch¨gí_look
},

963 {0, "STATUS", "Show†míu", 
ch¨gí_look
},

964 {0, "HELP", "Show†hñ∞f‹ ch¨gí", 
ch¨gí_hñp
},

966 {0, 
NULL
, NULL, NULL}

969 
Comm™dsSåu˘
 
	gaut›ûŸcomm™ds
[] = {

970 {0, "ENGAGE", "Engage†thêaut›ûŸ", 
auto_ígage
},

971 {0, "DISENGAGE", "Di£ngage†thêaut›ûŸ", 
auto_di£ngage
},

974 
auto_addcomm™d
},

976 
auto_dñcomm™d
},

978 
auto_li°comm™ds
},

979 {0, "JUMP <NUM>", "Së†cuºíàö°ru˘i⁄Åÿ<NUM>", 
auto_jump
},

980 {0, 
NULL
, NULL, NULL}

983 
Comm™dsSåu˘
 
	gtuºëcomm™ds
[] = {

985 
£t_xcode°uff
},

987 
£t_xcode°uff
},

988 {0, "@VIEWXCODE", "@Võw†xcodêvÆue†⁄ obje˘", 
li°_xcode°uff
},

990 
tuºë_deöôülize
},

991 {0, "INITIALIZE", "Së†youá†thêgu¬î", 
tuºë_öôülize
},

994 "Add†wó≤um, o∏lownum-highnumÅÿgiví TIC", 
tuºë_addtic
},

996 
tuºë_bórög
},

997 {0, "CLEARTIC <NUM>", "CÀ¨†thêTICÇumbî giví ", 
tuºë_˛óπic
},

999 
tuºë_c⁄è˘s
},

1002 
tuºë_¸ô°©us
},

1004 
tuºë_dñtic
},

1006 
tuºë_ëa
},

1008 
tuºë_föd˚¡î
},

1011 
tuºë_fúewóp⁄
},

1013 
tuºë_fúëic
},

1014 {0, "LISTTIC <NUM>", "Li°†wóp⁄†öÅhêgiví TIC", 
tuºë_li°tic
},

1018 
tuºë_£â¨gë
},

1021 "Show†thêl⁄gÑ™gêm≠", 
tuºë_Ãsm≠
},

1023 
tuºë_«vig©e
},

1026 
tuºë_ønge
},

1028 "Inf‹m©i⁄ o¿deÁu…Å¨gë,Çum, o∏x,y", 
tuºë_ªp‹t
},

1031 
tuºë_sˇn
},

1035 
tuºë_sight
},

1038 
tuºë_°©us
},

1042 
tuºë_ècm≠
},

1044 
tuºë_wóp⁄•ecs
},

1045 {0, 
NULL
, NULL, NULL}

1048 
Comm™dsSåu˘
 
	gs˚ncomm™ds
[] = {

1050 
£t_xcode°uff
},

1051 {0, "@VIEWXCODE", "@Võw†xcodêvÆue†⁄ obje˘", 
li°_xcode°uff
},

1052 {0, "ENGAGE", "Sèπ†thês˚«rio", 
s˚n_°¨t
},

1053 {0, "END", "End†thês˚«rio", 
s˚n_íd
},

1056 "Rï‹t†°©u†o‡thês˚«riÿ[/f‹ o√ side]", 
s˚n_°©us
},

1057 {0, 
NULL
, NULL, NULL}

1060 
ECMD
(
debug_makemechs
);

1061 
ECMD
(
debug_mem‹y
);

1062 
ECMD
(
debug_£tvπ
);

1063 
ECMD
(
debug_£tx∂evñ
);

1065 
Comm™dsSåu˘
 
	gdebugcomm™ds
[] = {

1066 {0, "EVENTSTATS", "@Show†evíà°©i°ics", 
debug_EvítTy≥s
},

1070 
debug_mem‹y
},

1074 
debug_makemechs
},

1075 {0, "LISTFORMS", "@Show†f‹ms", 
Li°F‹ms
},

1079 
debug_£tvπ
},

1082 
debug_£tx∂evñ
},

1084 
debug_shutdown
},

1087 
debug_x±›
},

1088 {0, 
NULL
, NULL, NULL}

1091 
Comm™dsSåu˘
 
	gsscomm™ds
[] = {

1093 
£t_xcode°uff
},

1094 {0, "@VIEWXCODE", "@Võw†xcodêvÆue†⁄ obje˘", 
li°_xcode°uff
},

1095 {0, 
NULL
, NULL, NULL}

1098 
	#LINEB
(
txt
,
cmd
,
°r
,
func
,
upd
,
updfunc
,
powî
) \

1099 { 
txt
, 
cmd
, 
°r
, 
func
, 
upd
, 
updfunc
, 
powî
 }

	)

1100 
	#LINE
(
txt
,
cmd
,
°r
,
func
,
upd
,
updfunc
,
powî
) \

1101 
	`LINEB
(
txt
,
cmd
,(
°r
),
func
,
upd
,
updfunc
,
powî
)

	)

1104 
	#LINE_NU
(
txt
,
cmd
,
°r
,
fu
,
powî
) \

1105 
	`LINE
(
txt
,
cmd
,
°r
,
fu
,0,
NULL
,
powî
)

	)

1108 
	#LINE_ND
(
txt
,
cmd
,
powî
) \

1109 
	`LINEB
(
txt
,
cmd
,0,
NULL
,0,NULL,
powî
)

	)

1112 
	#LINE_NFS
(
txt
,
cmd
,
t
,
powî
) \

1113 
	`LINEB
(
txt
,
cmd
,(
t
),
NULL
,0,NULL,
powî
)

	)

1115 
S≥cülObje˘Såu˘
 
	gS≥cülObje˘s
[] = {

1116 
LINE
("MECH", 
mechcomm™ds
, 
MECH
, 
√w‰ìmech
, 
HEAT_TICK
, 
mech_upd©e
, 
POW_BUILDER
),

1117 
LINE_ND
("DEBUG", 
debugcomm™ds
, 
POW_BUILDER
),

1118 
LINE_NU
("MECHREP", 
mechªpcomm™ds
, 
mechªp_d©a
, 
√w‰ìmechªp
, 
POW_BUILDER
),

1119 
LINE
("MAP", 
m≠comm™ds
, 
MAP
, 
√w‰ìm≠
, 
LOS_TICK
, 
m≠_upd©e
, 
POW_BUILDER
),

1120 
LINE_ND
("CHARGEN", 
ch¨gícomm™ds
, 
POW_BUILDER
),

1121 
LINE_NU
("AUTOPILOT", 
aut›ûŸcomm™ds
, 
AUTO
, 
√waut›ûŸ
, 
POW_BUILDER
),

1122 
LINE_NU
("TURRET", 
tuºëcomm™ds
, 
TURRET_T
, 
√wtuºë
, 
POW_BUILDER
),

1123 
LINE_NU
("CUSTOM", 
cu°omcomm™ds
, 
cu°om_°ru˘
, 
√w‰ìcu°om
, 
POW_BUILDER
),

1124 
LINE_NFS
("SCEN", 
s˚ncomm™ds
, 
SCEN
, 
POW_BUILDER
),

1125 
LINE_NFS
("SSIDE", 
sscomm™ds
, 
SSIDE
, 
POW_BUILDER
),

1126 
LINE_NFS
("SSOBJ", 
sscomm™ds
, 
SSOBJ
, 
POW_BUILDER
),

1127 
LINE_NFS
("SSINS", 
sscomm™ds
, 
SSINS
, 
POW_BUILDER
),

1128 
LINE_NFS
("SSEXT", 
sscomm™ds
, 
SSEXT
, 
POW_BUILDER
)

1131 
	#NUM_SPECIAL_OBJECTS
 \

1132 (((
S≥cülObje˘s
))/((
S≥cülObje˘Såu˘
)))

	)

1134 #unde‡
HEADER


1141 #ifde‡
mem˝y


1142 #unde‡
mem˝y


	@btech/glue_types.h

15 #i‚de‡
GLUE_TYPES_H


16 
	#GLUE_TYPES_H


	)

18 
	#GTYPE_MECH
 0

	)

19 
	#GTYPE_DEBUG
 1

	)

20 
	#GTYPE_MECHREP
 2

	)

21 
	#GTYPE_MAP
 3

	)

22 
	#GTYPE_CHARGEN
 4

	)

23 
	#GTYPE_AUTO
 5

	)

24 
	#GTYPE_TURRET
 6

	)

25 
	#GTYPE_CUSTOM
 7

	)

27 
	#GTYPE_SCEN
 8

	)

28 
	#GTYPE_SSIDE
 9

	)

29 
	#GTYPE_SSOBJ
 10

	)

30 
	#GTYPE_SSINS
 11

	)

31 
	#GTYPE_SSEXT
 12

	)

	@btech/hudinfo.h

9 #i‚de‡
HUDINFO_H


10 
	#HUDINFO_H


	)

12 
	#HUD_PROTO_VERSION
 "0.7"

	)

14 
hud_gíîÆ°©us
(
DESC
 *, 
MECH
 *, *, *);

15 
hud_wóp⁄s
(
DESC
 *, 
MECH
 *, *, *);

16 
hud_wóp⁄li°
(
DESC
 *, 
MECH
 *, *, *);

17 
hud_limb°©us
(
DESC
 *, 
MECH
 *, *, *);

18 
hud_ammo°©us
(
DESC
 *, 
MECH
 *, *, *);

19 
hud_ãm∂©eöfo
(
DESC
 *, 
MECH
 *, *, *);

20 
hud_ãm∂©órm‹
(
DESC
 *, 
MECH
 *, *, *);

21 
hud_¨m‹°©us
(
DESC
 *, 
MECH
 *, *, *);

22 
hud_c⁄è˘s
(
DESC
 *, 
MECH
 *, *, *);

23 
hud_buûdög_c⁄è˘s
(
DESC
 *, 
MECH
 *, *, *);

24 
hud_¨m‹sˇn
(
DESC
 *, 
MECH
 *, *, *);

25 
hud_wópsˇn
(
DESC
 *, 
MECH
 *, *, *);

26 
hud_è˘iˇl
(
DESC
 *, 
MECH
 *, *, *);

27 
hud_c⁄dôi⁄s
(
DESC
 *, 
MECH
 *, *, *);

31 
	#HUDCMD_HASARG
 0x00001

	)

32 
	#HUDCMD_NEEDMECH
 0x00002

	)

33 
	#HUDCMD_STARTED
 0x00004

	)

34 
	#HUDCMD_NONDEST
 0x00008

	)

35 
	#HUDCMD_AWAKE
 0x00016

	)

37 
	#HUDCMD_ACTIVE
 (
HUDCMD_NEEDMECH
 | 
HUDCMD_STARTED
 | 
HUDCMD_NONDEST
 \

38 | 
HUDCMD_AWAKE
)

	)

40 
	#HUDCMD_PASSIVE
 (
HUDCMD_NEEDMECH
)

	)

42 
	#HUDCMD_INFO
 (0)

	)

44 
	shudöfo_comm™d_°ru˘
 {

45 *
	mcmd
;

46 *
	mmsg˛ass
;

47 
	mÊag
;

48 (*
	mh™dÀr
)(
	mDESC
 *, 
	mMECH
 *, *, *);

49 } 
	tHUDCMD
;

51 
HUDCMD
 
	ghudöfo_cmds
[] = {

52 { "gs", "GS", 
HUDCMD_PASSIVE
, 
hud_gíîÆ°©us
 },

53 { "we", "WE", 
HUDCMD_PASSIVE
, 
hud_wóp⁄s
 },

54 { "wl", "WL", 
HUDCMD_INFO
, 
hud_wóp⁄li°
 },

55 { "li", "LI", 
HUDCMD_PASSIVE
, 
hud_limb°©us
 },

56 { "am", "AM", 
HUDCMD_PASSIVE
, 
hud_ammo°©us
 },

57 { "sgi", "SGI", 
HUDCMD_PASSIVE
, 
hud_ãm∂©eöfo
 },

58 { "ﬂs", "OAS", 
HUDCMD_PASSIVE
, 
hud_ãm∂©órm‹
 },

59 { "as", "AS", 
HUDCMD_PASSIVE
, 
hud_¨m‹°©us
 },

60 { "c", "C", 
HUDCMD_ACTIVE
, 
hud_c⁄è˘s
 },

61 { "cb", "CB", 
HUDCMD_ACTIVE
, 
hud_buûdög_c⁄è˘s
 },

62 { "asc", "ASC", 
HUDCMD_ACTIVE
 | 
HUDCMD_HASARG
, 
hud_¨m‹sˇn
 },

63 { "wsc", "WSC", 
HUDCMD_ACTIVE
 | 
HUDCMD_HASARG
, 
hud_wópsˇn
 },

64 { "t", "T", 
HUDCMD_ACTIVE
 | 
HUDCMD_HASARG
, 
hud_è˘iˇl
 },

65 { "c⁄", "CON", 
HUDCMD_ACTIVE
, 
hud_c⁄dôi⁄s
 },

66 { 
NULL
, NULL, 0, NULL },

69 c⁄° 
num_def_wóp⁄s
;

70 
wóp⁄_°ru˘
 
MechWóp⁄s
[];

	@btech/macros.h

15 #i‚de‡
MACROS_H


16 
	#MACROS_H


	)

18 #ifde‡
nŸify


19 #unde‡
nŸify


21 #ifde‡
nŸify_ex˚±


22 #unde‡
nŸify_ex˚±


24 
	#nŸify
(
a
,
b
Ë
	`mecha_nŸify
◊,b)

	)

25 
	#nŸify_ex˚±
(
a
,
b
,
c
,
d
Ë
	`mecha_nŸify_ex˚±
◊,b,c,d)

	)

38 #i‚de‡
DOCHECK


39 
	#DOCHECK
(
a
,
b
Ëi‡◊Ë{ 
	`nŸify
(
∂ayî
, b); ; }

	)

40 
	#DOCHECKMA
(
a
,
b
Ëi‡◊Ë{ 
	`mech_nŸify
(
mech
, 
MECHALL
, b); ; }

	)

41 
	#DOCHECKMA0
(
a
,
b
Ëi‡◊Ë{ 
	`mech_nŸify
(
mech
, 
MECHALL
, b);  0; }

	)

42 
	#DOCHECKMP
(
a
,
b
Ëi‡◊Ë{ 
	`mech_nŸify
(
mech
, 
MECHPILOT
, b); ; }

	)

43 
	#DOCHECKMP0
(
a
,
b
Ëi‡◊Ë{ 
	`mech_nŸify
(
mech
, 
MECHPILOT
, b);  0; }

	)

44 
	#DOCHECKMP1
(
a
,
b
Ëi‡◊Ë{ 
	`mech_nŸify
(
mech
, 
MECHPILOT
, b);  1; }

	)

45 
	#DOCHECK0
(
a
,
b
Ëi‡◊Ë{ 
	`nŸify
(
∂ayî
, b);  0; }

	)

46 
	#DOCHECK1
(
a
,
b
Ëi‡◊Ë{ 
	`nŸify
(
∂ayî
, b);  -1; }

	)

47 
	#DOCHECKN
(
a
,
b
Ëi‡◊Ë{ 
	`nŸify
(
∂ayî
, b);  
NULL
; }

	)

48 
	#FUNCHECK
(
a
,
b
) \

49 i‡(
a
Ë{ 
	`ß„_çrötf_°r
(
buff
, 
bufc
, 
b
); ; }

	)

53 
	#In_Ch¨a˘î
(
a
Ë0

	)

54 
	#Ansim≠
(
a
Ë1

	)

55 
	#Tech
(
a
Ë1

	)

56 
	#Tem∂©e
(
a
Ë1

	)

63 
	#Numbî
(
a
,
b
Ë(◊Ë+ (
	`øndom
() >> ( \

64 ((
b
Ë- (
a
)) > 16777216 ? 0 : \

65 ((
b
Ë- (
a
)) > 65536 ? 8 : \

66 ((
b
Ë- (
a
)) > 4096 ? 16 : 20 \

67 )Ë% ((
b
)-(
a
)+1))

	)

69 
	#skùws
(
«me
Ë«mê&& *«mê&& 
	`mux_is•a˚
(*«me)Ë«me++

	)

70 
	#ªadöt
(
to
,
‰om
) \

71 (!
‰om
 || !*‰om || (!(
to
 = 
	`©oi
(‰om)Ë&& 
	`°rcmp
(‰om, "0")))

	)

73 
	#Ródnum
(
tov¨
,
‰omv¨
) \

74 (!(
tov¨
 = 
	`©oi
(
‰omv¨
)Ë&& 
	`°rcmp
(‰omv¨, "0"))

	)

76 
	#SëBô
(
vÆ
,
bô
Ë(vÆ |bô)

	)

77 
	#UnSëBô
(
vÆ
,
bô
Ë(vÆ &~(bô))

	)

78 
	#EvÆBô
(
vÆ
,
bô
,
°©e
) \

79 dÿ{i‡(
°©e
Ë
	`SëBô
(
vÆ
,
bô
); 
	`UnSëBô
(vÆ,bô);} 0)

	)

80 
	#ToggÀBô
(
vÆ
,
bô
) \

81 dÿ{ i‡(!(
vÆ
 & 
bô
)Ë
	`SëBô
(vÆ,bô);
	`UnSëBô
(vÆ,bô); } 0)

	)

83 
	#WizPo
(
p
,
fun
Ë(
	`fun
(
	`Ow√r
’)Ë&& 
	`Inhîôs
’))

	)

85 
	#Wiz
(
p
Ë
	`WizPo
’,
Wiz¨d
)

	)

86 
	#WizR
(
p
Ë
	`WizPo
’,
WizRoy
)

	)

87 
	#WizP
(
p
Ë
	`WizPo
’,
Buûdî
)

	)

89 
	#hush_ãÀp‹t
(
p
,
t
Ë
	`move_vü_ãÀp‹t
’,t,1,7)

	)

90 
	#loud_ãÀp‹t
(
p
,
t
Ë
	`move_vü_ãÀp‹t
’,t,1,0)

	)

94 
	#VÆidLuckPœyî
(
mech
Ë((
	`In_Ch¨a˘î
(mech->
mynum
Ë&& In_Ch¨a˘î(
	`Loˇti⁄
(mech->mynum))Ë? 
	`MechPûŸ
(mechË: -1)

	)

95 
	#NRﬁl
(
mech
Ë
	`luck_dõ_mod
(
	`VÆidLuckPœyî
(mech), -1)

	)

96 
	#PRﬁl
(
mech
Ë
	`luck_dõ_mod
(
	`VÆidLuckPœyî
(mech), 1)

	)

98 
	#NRﬁl2
(
mech
,
mech2
) \

99 ((!
mech2
 || 
mech
 =mech2Ë? 
	`NRﬁl
(mechË: 
	`luck_dõ_mod_ba£
(-1, 
	`∂ayî_luck
(
	`VÆidLuckPœyî
(mech)Ë-Öœyî_luck(VÆidLuckPœyî(mech2))))

	)

101 
	#PRﬁl2
(
mech
,
mech2
) \

102 ((!
mech2
 || 
mech
 =mech2Ë? 
	`PRﬁl
(mechË: 
	`luck_dõ_mod_ba£
(1, 
	`∂ayî_luck
(
	`VÆidLuckPœyî
(mech)Ë-Öœyî_luck(VÆidLuckPœyî(mech2))))

	)

105 
	#NPRﬁl
(
∂ayî
) \

106 
	`luck_dõ_mod_ba£
(-1, 
	`∂ayî_luck
(
∂ayî
))

	)

109 
	#ˇn_∑ss_lock
(
guy
,
lockobj
,
lock«me
Ë
	`could_doô
(guy,lockobj,lock«me)

	)

	@btech/map.coding.h

15 #i‚de‡
MAP_CODING_H


16 
	#MAP_CODING_H


	)

18 
	#LASTCHAR
 128

	)

19 
	#ELEVATIONS
 10

	)

20 
	#ENTRIES
 256

	)

22 
	~"p.m≠.codög.h
"

	@btech/map.los.h

12 #i‚de‡
_MAP_LOS_H


13 
	#_MAP_LOS_H


	)

15 
	#MAX_SENSORS
 2

	)

16 
	#NUMSENSORS
(
mech
Ë2

	)

18 
	#MAPLOS_MAXX
 70

	)

19 
	#MAPLOS_MAXY
 45

	)

21 
	#MAPLOS_FLAG_SLITE
 1

	)

23 
	#MAPLOSHEX_NOLOS
 0

	)

24 
	#MAPLOSHEX_SEEN
 1

	)

25 
	#MAPLOSHEX_SEETERRAIN
 2

	)

26 
	#MAPLOSHEX_SEEELEV
 4

	)

27 
	#MAPLOSHEX_LIT
 8

	)

28 
	#MAPLOSHEX_SEE
 (
MAPLOSHEX_SEETERRAIN
 | 
MAPLOSHEX_SEEELEV
)

	)

30 
	#LOSM≠_GëFœg
(
losm≠
, 
x
, 
y
) \

31 ((
losm≠
)->
m≠
[
	`LOSM≠_Hex2Index
÷osm≠, 
x
, 
y
)])

	)

33 
	shexlosm≠_öfo
 {

34 
	m°¨tx
;

35 
	m°¨ty
;

36 
	mxsize
;

37 
	mysize
;

38 
	mÊags
;

39 
	mm≠
[
MAPLOS_MAXX
 * 
MAPLOS_MAXY
];

40 } 
	thexlosm≠_öfo
;

43 
hexlosm≠_öfo
 *
CÆcuœãLOSM≠
(
MAP
 *, 
MECH
 *, , , , );

44 
LOSM≠_Hex2Index
(
hexlosm≠_öfo
 *, , );

	@btech/maps.h

15 #i‚de‡
_MAPS_H


16 
	#_MAPS_H


	)

18 
	~"btc⁄fig.h
"

19 
	~"mech.h
"

21 #i‚de‡
ECMD


22 
	#ECMD
(
a
Ë
	`a
 (
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

	)

31 
	#MAX_MECHS_PER_MAP
 250

	)

34 
	#MAP_UP
 0

	)

35 
	#MAP_DOWN
 1

	)

36 
	#MAP_RIGHT
 2

	)

37 
	#MAP_LEFT
 3

	)

40 
	#MAPX
 1000

	)

41 
	#MAPY
 1000

	)

42 
	#MAP_NAME_SIZE
 30

	)

43 
	#NUM_MAP_LINKS
 4

	)

44 
	#DEFAULT_MAP_WIDTH
 21

	)

45 
	#DEFAULT_MAP_HEIGHT
 11

	)

46 
	#MAP_DISPLAY_WIDTH
 21

	)

47 
	#MAP_DISPLAY_HEIGHT
 14

	)

48 
	#MAX_ELEV
 9

	)

49 
	#GRASSLAND
 ' '

	)

50 
	#HEAVY_FOREST
 '"'

	)

51 
	#LIGHT_FOREST
 '`'

	)

52 
	#WATER
 '~'

	)

53 
	#HIGHWATER
 '?'

	)

54 
	#ROUGH
 '%'

	)

55 
	#MOUNTAINS
 '^'

	)

56 
	#ROAD
 '#'

	)

57 
	#BUILDING
 '@'

	)

58 
	#FIRE
 '&'

	)

59 
	#TFIRE
 '>'

	)

60 
	#SMOKE
 ':'

	)

61 
	#WALL
 '='

	)

63 
	#BRIDGE
 '/'

	)

64 
	#SNOW
 '+'

	)

65 
	#ICE
 '-'

	)

67 
	#UNKNOWN_TERRAIN
 '$'

	)

69 
	#MAPFLAG_MAPO
 1

	)

70 
	#MAPFLAG_SPEC
 2

	)

71 
	#MAPFLAG_VACUUM
 4

	)

72 
	#MAPFLAG_FIRES
 8

	)

73 
	#MAPFLAG_UNDERGROUND
 16

	)

74 
	#MAPFLAG_DARK
 32

	)

75 
	#MAPFLAG_BRIDGESCS
 64

	)

76 
	#MAPFLAG_NOBRIDGIFY
 128

	)

78 
	#TYPE_FIRE
 0

	)

79 
	#TYPE_SMOKE
 1

	)

80 
	#TYPE_DEC
 2

	)

81 
	#TYPE_LAST_DEC
 2

	)

82 
	#TYPE_MINE
 3

	)

83 
	#TYPE_BUILD
 4

	)

84 
	#TYPE_LEAVE
 5

	)

85 
	#TYPE_ENTRANCE
 6

	)

87 
	#TYPE_LINKED
 7

	)

88 
	#TYPE_BITS
 8

	)

89 
	#TYPE_B_LZ
 9

	)

90 
	#NUM_MAPOBJTYPES
 10

	)

92 
	#BUILDFLAG_CS
 1

	)

93 
	#BUILDFLAG_CSI
 2

	)

94 
	#BUILDFLAG_DSS
 4

	)

95 
	#BUILDFLAG_NOB
 8

	)

96 
	#BUILDFLAG_HID
 16

	)

98 
	#M≠IsCS
(
m≠
Ë(m≠->
buûdÊag
 & 
BUILDFLAG_CSI
)

	)

99 
	#BuûdIsCS
(
m≠
Ë(m≠->
buûdÊag
 & 
BUILDFLAG_CS
)

	)

100 
	#BuûdIsHiddí
(
m≠
Ë(m≠->
buûdÊag
 & (
BUILDFLAG_DSS
|
BUILDFLAG_HID
))

	)

101 
	#BuûdIsSa„
(
m≠
Ë(m≠->
buûdÊag
 & 
BUILDFLAG_NOB
)

	)

102 
	#BuûdIsInvis
(
m≠
Ë(m≠->
buûdÊag
 & 
BUILDFLAG_HID
)

	)

104 
	#M≠UndîS≥cülRuÀs
(
m≠
Ë((m≠)->
Êags
 & 
MAPFLAG_SPEC
)

	)

105 
	#M≠GøvôyMod
(
m≠
Ë(m≠)->
gøv


	)

106 
	#M≠Gøvôy
 
M≠GøvôyMod


	)

107 
	#M≠IsVacuum
(
m≠
Ë((m≠)->
Êags
 & 
MAPFLAG_VACUUM
)

	)

108 
	#M≠Tem≥øtuª
(
m≠
Ë(m≠)->
ãmp


	)

109 
	#M≠Cloudba£
(
m≠
Ë(m≠)->
˛oudba£


	)

110 
	#M≠IsUndîground
(
m≠
Ë((m≠)->
Êags
 & 
MAPFLAG_UNDERGROUND
)

	)

111 
	#M≠IsD¨k
(
m≠
Ë((m≠)->
Êags
 & 
MAPFLAG_DARK
)

	)

112 
	#M≠BridgesCS
(
m≠
Ë((m≠)->
Êags
 & 
MAPFLAG_BRIDGESCS
)

	)

113 
	#M≠NoBridgify
(
m≠
Ë((m≠)->
Êags
 & 
MAPFLAG_NOBRIDGIFY
)

	)

115 
	sm≠obj_°ru˘
 {

116 
x
, 
y
;

117 
dbªf
 
obj
;

118 
ty≥
;

119 
d©ac
;

120 
d©as
;

121 
d©ai
;

122 
m≠obj_°ru˘
 *
√xt
;

123 } 
	tm≠objt
;

125 
	#MECHMAPFLAG_MOVED
 1

	)

127 
	#MECHLOSFLAG_SEEN
 0x0001

	)

128 
	#MECHLOSFLAG_SEESP
 0x0002

	)

129 
	#MECHLOSFLAG_SEESS
 0x0004

	)

130 
	#MECHLOSFLAG_SEEC2
 0x0008

	)

131 
	#MECHLOSFLAG_MNTN
 0x0010

	)

133 
	#MECHLOSFLAG_WOOD
 0x0020

	)

134 
	#MECHLOSFLAG_WOOD2
 0x0040

	)

135 
	#MECHLOSFLAG_WOOD3
 0x0080

	)

136 
	#MECHLOSFLAG_WOOD4
 0x0100

	)

137 
	#MECHLOSBYTES_WOOD
 4

	)

138 
	#MECHLOSMAX_WOOD
 16

	)

140 
	#MECHLOSFLAG_WATER
 0x0200

	)

141 
	#MECHLOSFLAG_WATER2
 0x0400

	)

142 
	#MECHLOSFLAG_WATER3
 0x0800

	)

143 
	#MECHLOSBYTES_WATER
 3

	)

144 
	#MECHLOSMAX_WATER
 8

	)

146 
	#MECHLOSFLAG_PARTIAL
 0x1000

	)

148 
	#MECHLOSFLAG_FIRE
 0x2000

	)

149 
	#MECHLOSFLAG_SMOKE
 0x4000

	)

150 
	#MECHLOSFLAG_BLOCK
 0x8000

	)

154 
dbªf
 
	mmynum
;

155 **
	mm≠
;

156 
	mm≠«me
[
MAP_NAME_SIZE
 + 1];

158 
	mm≠_width
;

159 
	mm≠_height
;

161 
	mãmp
;

163 
	mgøv
;

165 
	m˛oudba£
;

166 
	munu£d_ch¨
;

167 
	mm≠vis
;

170 
	mmaxvis
;

172 
	mm≠light
;

173 
	mwöddú
, 
	mwöd•ìd
;

175 
byã
 
	mÊags
;

177 
m≠objt
 *
	mm≠obj
[
NUM_MAPOBJTYPES
];

178 
	mcf
, 
	mcfmax
;

179 
dbªf
 
	m⁄m≠
;

180 
	mbuûdÊag
;

182 
	mfú°_‰ì
;

183 
dbªf
 *
	mmechsOnM≠
;

184 **
	mLOSöfo
;

188 *
	mmechÊags
;

189 
	mmoves
;

190 
	mmovemod
;

191 
	m£ns‹Êags
;

192 } 
	tMAP
;

195 
	#NAVIGATE_LINES
 13

	)

197 
	~"p.m≠.bôs.h
"

198 
	~"p.m≠.h
"

199 
	~"p.m≠.obj.h
"

200 
	~"p.m≠.dy«mic.h
"

202 
√w‰ìm≠
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

203 
m≠_upd©e
(
dbªf
 
obj
, *
d©a
);

205 
	#£t_buûdÊag
(
a
,
b
Ë
	`sûly_©r_£t
(◊), 
A_BUILDFLAG
, 
	`çrötf
("%d", (b)))

	)

206 
	#gë_buûdÊag
(
a
Ë
	`©oi
(
	`sûly_©r_gë
(◊), 
A_BUILDFLAG
))

	)

207 
	#£t_buûdcf
(
a
,
b
Ë
	`sûly_©r_£t
(◊), 
A_BUILDCF
, 
	`çrötf
("%d %d", (b), (b)))

	)

	@btech/mech.avail.h

16 #i‚de‡
MECH_AVAIL_H


17 
	#MECH_AVAIL_H


	)

20 
	mFAC_FS
, 
	mFAC_DC
, 
	mFAC_LC
, 
	mFAC_CC
, 
	mFAC_FWL
, 
	mFAC_MERC
, 
	mFAC_MISC
, 
	mFAC_FC
,

21 
	mNUM_FACS


24 *
	gside_«mes
[] = {

33 
NULL


36 *
	gside_«mes_sh‹t
[] = {

37 "fs", "dc", "lc", "cc", "fwl", "mîc", "misc", "fc", 
NULL


40 
	smech_ørôy
 {

41 c⁄° *
	m«me
;

42 
	mFS
;

43 
	mDC
;

44 
	mLC
;

45 
	mCC
;

46 
	mFWL
;

47 
	mMERC
;

48 
	mMISC
;

49 
	mt⁄s
;

50 } 
	gmech_avaûabûôy
[] =

231 
NULL
, 0, 0, 0, 0, 0, 0, 0, 0}

234 
	#NUM_MECHA
 ((
mech_avaûabûôy
)/(
mech_ørôy
)-1)

	)

236 
mech_ørôy
 
	g´ro_avaûabûôy
[] =

313 {
NULL
, 0, 0, 0, 0, 0, 0, 0,

317 
	#NUM_AEROS
 ((
´ro_avaûabûôy
)/(
mech_ørôy
)-1)

	)

	@btech/mech.combat.h

14 #i‚de‡
MECH_COMBAT_H


15 
	#MECH_COMBAT_H


	)

17 
	#Clu°îsize
(
wópödx
Ë(((
MechWóp⁄s
[wópödx].
•ecül
 & (
IDF
 | 
MRM
 | 
ROCKET
)Ë&& (MechWóp⁄s[wópödx].
damage
 =1))? 5 : 1)

	)

19 
	#Sw≠
(
vÆ1
,
vÆ2
Ë{ 
πmp
 = vÆ1 ; vÆ1 = vÆ2 ; vÆ2 =Ñtmp; }

	)

	@btech/mech.custom.h

15 #i‚de‡
MECH_CUSTOM_H


16 
	#MECH_CUSTOM_H


	)

18 
	scu°om_°ru˘
 {

19 
dbªf
 
	mmynum
;

20 
	m°©e
;

21 
dbªf
 
	mu£r
;

22 
dbªf
 
	msubmô
;

23 
	mÆlow
;

24 
MECH
 
	m√wmech
;

26 } 
	tCUSTOM
;

28 
	#STATE_MAIN
 0

	)

29 
	#STATE_LIMB
 -1

	)

30 
	#STATE_ARMOR
 -2

	)

32 
	#ALTER_CRIT
 0

	)

33 
	#ALTER_ARMOR
 1

	)

34 
	#DISCARD_CHANGES
 2

	)

35 
	#APPLY_FOR_APPROVAL
 3

	)

36 
	#DO_IT
 4

	)

38 
	#ADD_WEAPON
 0

	)

39 
	#ADD_AMMO
 1

	)

40 
	#ADD_SPECIAL
 2

	)

41 
	#REMOVE
 3

	)

42 
	#ADD_NWEAPON
 4

	)

43 
	#ADD_NAMMO
 5

	)

44 
	#ADD_CWEAPON
 6

	)

45 
	#ADD_CAMMO
 7

	)

46 
	#ADD_NSPECIAL
 8

	)

47 
	#TOGGLE_REAR
 9

	)

48 
	#TOGGLE_TC
 10

	)

49 
	#TOGGLE_AMMO
 11

	)

50 
	#TOGGLE_HALFAMMO
 12

	)

51 
	#TOGGLE_OS
 13

	)

53 
	#FIRST_UNUSED_BIT
 256

	)

55 
√w‰ìcu°om
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

57 
ECMD
(
cu°om_back
);

58 
ECMD
(
cu°om_edô
);

59 
ECMD
(
cu°om_föish
);

60 
ECMD
(
cu°om_hñp
);

61 
ECMD
(
cu°om_look
);

63 
ECMD
(
cu°om_wóp⁄•ecs
);

64 
ECMD
(
cu°om_¸ô°©us
);

65 
ECMD
(
cu°om_°©us
);

	@btech/mech.ecm.h

17 #i‚de‡
MECH_ECM_H


18 
	#MECH_ECM_H


	)

21 
ˇu£_ecm
(
MECH
 * 
‰om
, MECH * 
to
);

22 
íd_ecm_check
(
MECH
 * 
mech
);

24 
	#ECM_NOTIFY_DISTURBED
 0

	)

25 
	#ECM_NOTIFY_UNDISTURBED
 1

	)

26 
	#ECM_NOTIFY_COUNTERED
 2

	)

27 
	#ECM_NOTIFY_UNCOUNTERED
 3

	)

	@btech/mech.events.h

18 #i‚de‡
MECH_EVENTS_H


19 
	#MECH_EVENTS_H


	)

21 
	~"mech.h
"

22 
	~"muxevít.h
"

23 
	~"p.evít.h
"

26 
	#EVENT_MOVE
 1

	)

28 
	#EVENT_DHIT
 2

	)

29 
	#EVENT_STARTUP
 3

	)

31 
	#EVENT_LOCK
 4

	)

33 
	#EVENT_STAND
 5

	)

35 
	#EVENT_JUMP
 6

	)

37 
	#EVENT_RECYCLE
 7

	)

39 
	#EVENT_JUMPSTABIL
 8

	)

42 
	#EVENT_RECOVERY
 9

	)

44 
	#EVENT_SCHANGE
 10

	)

46 
	#EVENT_DECORATION
 11

	)

48 
	#EVENT_SPOT_LOCK
 12

	)

49 
	#EVENT_PLOS
 13

	)

50 
	#EVENT_SPOT_CHECK
 14

	)

51 
	#EVENT_TAKEOFF
 15

	)

52 
	#EVENT_FALL
 16

	)

53 
	#EVENT_BREGEN
 17

	)

54 
	#EVENT_BREBUILD
 18

	)

55 
	#EVENT_DUMP
 19

	)

57 
	#EVENT_MASC_FAIL
 20

	)

58 
	#EVENT_MASC_REGEN
 21

	)

59 
	#EVENT_AMMOWARN
 22

	)

61 
	#FIRST_AUTO_EVENT
 23

	)

62 
	#EVENT_AUTOGOTO
 23

	)

63 
	#EVENT_AUTOLEAVE
 24

	)

64 
	#EVENT_AUTOCOM
 25

	)

65 
	#EVENT_AUTOGUN
 26

	)

66 
	#EVENT_AUTOGS
 27

	)

67 
	#EVENT_AUTOFOLLOW
 28

	)

68 
	#EVENT_AUTOENTERBASE
 29

	)

69 
	#EVENT_AUTO_REPLY
 30

	)

70 
	#LAST_AUTO_EVENT
 30

	)

72 
	#EVENT_MRECOVERY
 31

	)

73 
	#EVENT_BLINDREC
 32

	)

74 
	#EVENT_BURN
 33

	)

75 
	#EVENT_SS
 34

	)

77 
	#EVENT_HIDE
 35

	)

78 
	#EVENT_OOD
 36

	)

79 
	#EVENT_NUKEMECH
 37

	)

80 
	#EVENT_LATERAL
 38

	)

81 
	#EVENT_EXPLODE
 39

	)

82 
	#EVENT_DIG
 40

	)

84 
	#FIRST_TECH_EVENT
 41

	)

86 
	#EVENT_REPAIR_REPL
 
FIRST_TECH_EVENT


	)

87 
	#EVENT_REPAIR_REPLG
 (
FIRST_TECH_EVENT
+1Ë

	)

88 
	#EVENT_REPAIR_REAT
 (
FIRST_TECH_EVENT
+2Ë

	)

89 
	#EVENT_REPAIR_RELO
 (
FIRST_TECH_EVENT
+3Ë

	)

90 
	#EVENT_REPAIR_FIX
 (
FIRST_TECH_EVENT
+4Ë

	)

91 
	#EVENT_REPAIR_FIXI
 (
FIRST_TECH_EVENT
+5Ë

	)

92 
	#EVENT_REPAIR_SCRL
 (
FIRST_TECH_EVENT
+6Ë

	)

93 
	#EVENT_REPAIR_SCRP
 (
FIRST_TECH_EVENT
+7Ë

	)

94 
	#EVENT_REPAIR_SCRG
 (
FIRST_TECH_EVENT
+8Ë

	)

95 
	#EVENT_REPAIR_REPAG
 (
FIRST_TECH_EVENT
+9Ë

	)

96 
	#EVENT_REPAIR_REPAP
 (
FIRST_TECH_EVENT
+10Ë

	)

97 
	#EVENT_REPAIR_MOB
 (
FIRST_TECH_EVENT
+11Ë

	)

98 
	#EVENT_REPAIR_UMOB
 (
FIRST_TECH_EVENT
+12Ë

	)

99 
	#EVENT_REPAIR_RESE
 (
FIRST_TECH_EVENT
+13Ë

	)

100 
	#EVENT_REPAIR_REPSUIT
 (
FIRST_TECH_EVENT
+14Ë

	)

101 
	#EVENT_REPAIR_REPENHCRIT
 (
FIRST_TECH_EVENT
+15Ë

	)

103 
	#LAST_TECH_EVENT
 
EVENT_REPAIR_REPENHCRIT


	)

105 
	#EVENT_STANDFAIL
 60

	)

106 
	#EVENT_SLITECHANGING
 61

	)

107 
	#EVENT_HEATCUTOFFCHANGING
 62

	)

108 
	#EVENT_VEHICLEBURN
 63

	)

109 
	#EVENT_UNSTUN_CREW
 64

	)

110 
	#EVENT_UNJAM_TURRET
 65

	)

111 
	#EVENT_UNJAM_AMMO
 66

	)

112 
	#EVENT_STEALTH_ARMOR
 67

	)

113 
	#EVENT_NSS
 68

	)

114 
	#EVENT_TAG_RECYCLE
 69

	)

115 
	#EVENT_REMOVE_PODS
 70

	)

116 
	#EVENT_VEHICLE_EXTINGUISH
 71

	)

117 
	#EVENT_ENTER_HANGAR
 72

	)

118 
	#EVENT_CHANGING_HULLDOWN
 73

	)

123 
	#EVENT_SCHARGE_FAIL
 75

	)

124 
	#EVENT_SCHARGE_REGEN
 76

	)

126 
	#EVENT_CHECK_STAGGER
 77

	)

127 
	#EVENT_MOVEMODE
 78

	)

128 
	#EVENT_SIDESLIP
 79

	)

130 
	#ETEMPL
(
a
Ë
	`a
 (
EVENT
 *
e
)

	)

132 
	~"p.´ro.move.h
"

133 
	~"p.mech.move.h
"

134 
	~"p.mech.evíts.h
"

	@btech/mech.h

18 
	~"c⁄fig.h
"

20 #i‚de‡
MECH_H


21 
	#MECH_H


	)

23 
	~"exã∫s.h
"

24 
	~"db.h
"

25 
	~"©ås.h
"

26 
	~"powîs.h
"

27 
	~"mech.°©.h
"

28 
	~"muxevít.h
"

29 
	~"p.evít.h
"

31 
	~"comsys.h
"

33 
	~"ma¸os.h
"

34 
	~"Êﬂtsim.h
"

35 
	~"btc⁄fig.h
"

36 
	~"mym©h.h
"

38 
¨c_ovîride
;

39 
dbªf
 
pûŸ_ovîride
;

41 
	#NUM_ITEMS
 1024

	)

42 
	#NUM_ITEMS_M
 512

	)

43 
	#NUM_BAYS
 4

	)

44 
	#NUM_TURRETS
 3

	)

45 
	#C3I_NETWORK_SIZE
 5

	)

46 
	#C3_NETWORK_SIZE
 11

	)

47 
	#BRANDCOUNT
 5

	)

49 
	#LEFTSIDE
 1

	)

50 
	#RIGHTSIDE
 2

	)

51 
	#FRONT
 3

	)

52 
	#BACK
 4

	)

54 
	#STAND
 1

	)

55 
	#FALL
 0

	)

57 
	#TURN
 30

	)

58 
	#KPH_PER_MP
 10.75

	)

59 
	#MP_PER_KPH
 0.0930233

	)

60 
	#MP_PER_UPDATE_PER_KPH
 0.003100777

	)

61 
	#SCALEMAP
 322.5

	)

62 
	#HEXLEVEL
 5

	)

63 
	#ZSCALE
 64.5

	)

64 
	#XSCALE
 0.1547

	)

65 
	#YSCALE2
 9.61482e-6

	)

66 
	#MP1
 10.75

	)

67 
	#MP2
 21.50

	)

68 
	#MP3
 32.25

	)

69 
	#MP4
 43.00

	)

70 
	#MP5
 53.75

	)

71 
	#MP6
 64.50

	)

72 
	#MP9
 96.75

	)

73 
	#DELTAFACING
 1440.0

	)

75 
	#DEFAULT_FREQS
 5

	)

76 
	#FREQS
 16

	)

78 
	#FREQ_DIGITAL
 1

	)

79 
	#FREQ_MUTE
 2

	)

80 
	#FREQ_RELAY
 4

	)

81 
	#FREQ_INFO
 8

	)

82 
	#FREQ_SCAN
 16

	)

83 
	#FREQ_REST
 32

	)

85 
	#RADIO_RELAY
 1

	)

86 
	#RADIO_INFO
 2

	)

87 
	#RADIO_SCAN
 4

	)

88 
	#RADIO_NODIGITAL
 8

	)

90 
	#CHTITLELEN
 15

	)

92 
	#NOT_FOUND
 -1

	)

93 
	#NUM_CRITICALS
 12

	)

95 
	#ARMOR
 1

	)

96 
	#INTERNAL
 2

	)

97 
	#REAR
 3

	)

99 
	#NOARC
 0

	)

100 
	#FORWARDARC
 1

	)

101 
	#LSIDEARC
 2

	)

102 
	#RSIDEARC
 4

	)

103 
	#REARARC
 8

	)

104 
	#TURRETARC
 16

	)

116 
	#NUM_WEAPONS
 192

	)

117 
	#NUM_BOMBS
 9

	)

119 
	#EMPTY
 0

	)

120 
	#WEAPON_BASE_INDEX
 1

	)

121 
	#AMMO_BASE_INDEX
 (
WEAPON_BASE_INDEX
 + 
NUM_WEAPONS
Ë

	)

122 
	#BOMB_BASE_INDEX
 (
AMMO_BASE_INDEX
 + 
NUM_WEAPONS
Ë

	)

123 
	#SPECIAL_BASE_INDEX
 (
BOMB_BASE_INDEX
 + 
NUM_BOMBS
Ë

	)

124 
	#OSPECIAL_BASE_INDEX
 220

	)

125 
	#CARGO_BASE_INDEX
 512

	)

127 
	#SPECIALCOST_SIZE
 (
CARGO_BASE_INDEX
 - 
SPECIAL_BASE_INDEX
)

	)

128 
	#AMMOCOST_SIZE
 
NUM_WEAPONS


	)

129 
	#WEAPCOST_SIZE
 
NUM_WEAPONS


	)

130 
	#CARGOCOST_SIZE
 (
NUM_ITEMS
 - 
NUM_ITEMS_M
)

	)

131 
	#BOMBCOST_SIZE
 
NUM_BOMBS


	)

133 
	#IsAmmo
(
a
Ë(◊Ë>
AMMO_BASE_INDEX
 && (aË< 
BOMB_BASE_INDEX
)

	)

134 
	#IsBomb
(
a
Ë(◊Ë>
BOMB_BASE_INDEX
 && (aË< 
SPECIAL_BASE_INDEX
)

	)

135 
	#IsS≥cül
(
a
Ë(◊Ë>
SPECIAL_BASE_INDEX
 && (aË< 
CARGO_BASE_INDEX
)

	)

136 
	#IsC¨go
(
a
Ë(◊Ë>
CARGO_BASE_INDEX
)

	)

137 
	#IsA˘u©‹
(
a
Ë(
	`IsS≥cül
◊Ë&&á <
	`I2S≥cül
(
HAND_OR_FOOT_ACTUATOR
))

	)

138 
	#IsWóp⁄
(
a
Ë(◊Ë>
WEAPON_BASE_INDEX
 && (aË< 
AMMO_BASE_INDEX
)

	)

139 
	#IsAπûÀry
(
a
Ë(
MechWóp⁄s
[a].
ty≥
==
TARTILLERY
)

	)

140 
	#IsMissûe
(
a
Ë(
MechWóp⁄s
[a].
ty≥
==
TMISSILE
)

	)

141 
	#IsBÆli°ic
(
a
Ë(
MechWóp⁄s
[a].
ty≥
==
TAMMO
)

	)

142 
	#IsE√rgy
(
a
Ë(
MechWóp⁄s
[a].
ty≥
==
TBEAM
)

	)

143 
	#GunR™geWôhCheck
(
mech
,
£c
,
a
Ë(
	`Se˘i⁄Undîw©î
(mech,£cË> 0 ? 
	`GunW©îR™ge
◊Ë: 
	`IsAπûÀry
◊)?(
ARTILLERY_MAPSHEET_SIZE
 * 
MechWóp⁄s
[a].
l⁄gønge
):(MechWóp⁄s[a].l⁄gønge))

	)

144 
	#EGunR™geWôhCheck
(
mech
,
£c
,
a
Ë((
	`Se˘i⁄Undîw©î
(mech,£cË> 0Ë? 
	`EGunW©îR™ge
◊Ë: (
bãchc⁄f
.
bãch_î™ge
 && (
MechWóp⁄s
[a].
medønge
 * 2Ë> 
	`GunR™ge
◊)Ë? (MechWóp⁄s[a].medøngê* 2Ë: GunR™ge◊))

	)

145 
	#GunR™ge
(
a
Ë(
	`IsAπûÀry
◊)?(
ARTILLERY_MAPSHEET_SIZE
 * 
MechWóp⁄s
[a].
l⁄gønge
):(MechWóp⁄s[a].l⁄gønge))

	)

146 
	#EGunR™ge
(
a
Ë((
bãchc⁄f
.
bãch_î™ge
 && (
MechWóp⁄s
[a].
medønge
 * 2Ë> 
	`GunR™ge
◊)Ë? (MechWóp⁄s[a].medøngê* 2Ë: GunR™ge◊))

	)

147 
	#GunW©îR™ge
(
a
Ë(
MechWóp⁄s
[a].
l⁄gønge_w©î
 > 0 ? MechWóp⁄s[a].l⁄gønge_w©î : MechWóp⁄s[a].
medønge_w©î
 > 0 ? MechWóp⁄s[a].medønge_w©î : MechWóp⁄s[a].
sh‹å™ge_w©î
 > 0 ? MechWóp⁄s[a].sh‹å™ge_w©î : 0)

	)

148 
	#EGunW©îR™ge
(
a
Ë((
bãchc⁄f
.
bãch_î™ge
 && ((
MechWóp⁄s
[a].
medønge_w©î
 * 2Ë> 
	`GunW©îR™ge
◊)Ë&& (MechWóp⁄s[a].
l⁄gønge_w©î
 > 0)Ë? (MechWóp⁄s[a].medønge_w©î * 2Ë: GunW©îR™ge◊))

	)

149 
	#Se˘i⁄Undîw©î
(
mech
,
£c
Ë(
	`MechZ
(mechË>0 ? 0 : (MechZ(mechË< -1Ë|| (
	`FÆÀn
(mech)Ë? 1 : ((£¯=
LLEG
Ë|| (£¯=
RLEG
)Ë|| (
	`MechIsQuad
(mechË&& ((£¯=
LARM
Ë|| (£¯=
RARM
))Ë? 1 : 0)

	)

151 
	#Ammo2Wóp⁄I
(
a
Ë(◊Ë- 
AMMO_BASE_INDEX
)

	)

152 
	#Ammo2Wóp⁄
(
a
Ë
	`Ammo2Wóp⁄I
◊)

	)

153 
	#Ammo2I
(
a
Ë
	`Ammo2Wóp⁄
◊)

	)

154 
	#Bomb2I
(
a
Ë(◊Ë- 
BOMB_BASE_INDEX
)

	)

155 
	#S≥cül2I
(
a
Ë(◊Ë- 
SPECIAL_BASE_INDEX
)

	)

156 
	#C¨go2I
(
a
Ë(◊Ë- 
CARGO_BASE_INDEX
)

	)

157 
	#Wóp⁄2I
(
a
Ë(◊Ë- 
WEAPON_BASE_INDEX
)

	)

158 
	#I2Bomb
(
a
Ë(◊Ë+ 
BOMB_BASE_INDEX
)

	)

159 
	#I2Wóp⁄
(
a
Ë(◊Ë+ 
WEAPON_BASE_INDEX
)

	)

160 
	#I2Ammo
(
a
Ë(◊Ë+ 
AMMO_BASE_INDEX
)

	)

161 
	#I2S≥cül
(
a
Ë(◊Ë+ 
SPECIAL_BASE_INDEX
)

	)

162 
	#I2C¨go
(
a
Ë(◊Ë+ 
CARGO_BASE_INDEX
)

	)

163 
	#S≥cül
 
I2S≥cül


	)

164 
	#C¨go
 
I2C¨go


	)

167 
	#SHOULDER_OR_HIP
 0

	)

168 
	#UPPER_ACTUATOR
 1

	)

169 
	#LOWER_ACTUATOR
 2

	)

170 
	#HAND_OR_FOOT_ACTUATOR
 3

	)

171 
	#LIFE_SUPPORT
 4

	)

172 
	#SENSORS
 5

	)

173 
	#COCKPIT
 6

	)

174 
	#ENGINE
 7

	)

175 
	#GYRO
 8

	)

176 
	#HEAT_SINK
 9

	)

177 
	#JUMP_JET
 10

	)

178 
	#CASE
 11

	)

179 
	#FERRO_FIBROUS
 12

	)

180 
	#ENDO_STEEL
 13

	)

181 
	#TRIPLE_STRENGTH_MYOMER
 14

	)

182 
	#TARGETING_COMPUTER
 15

	)

183 
	#MASC
 16

	)

184 
	#C3_MASTER
 17

	)

185 
	#C3_SLAVE
 18

	)

186 
	#BEAGLE_PROBE
 19

	)

187 
	#ARTEMIS_IV
 20

	)

188 
	#ECM
 21

	)

189 
	#AXE
 22

	)

190 
	#SWORD
 23

	)

191 
	#MACE
 24

	)

192 
	#CLAW
 25

	)

193 
	#DS_AERODOOR
 26

	)

194 
	#DS_MECHDOOR
 27

	)

195 
	#FUELTANK
 28

	)

196 
	#TAG
 29

	)

197 
	#DS_TANKDOOR
 30

	)

198 
	#DS_CARGODOOR
 31

	)

199 
	#LAMEQUIP
 32

	)

200 
	#CASE_II
 33

	)

201 
	#STEALTH_ARMOR
 34

	)

202 
	#NULL_SIGNATURE_SYSTEM
 35

	)

203 
	#C3I
 36

	)

204 
	#ANGELECM
 37

	)

205 
	#HVY_FERRO_FIBROUS
 38

	)

206 
	#LT_FERRO_FIBROUS
 39

	)

207 
	#BLOODHOUND_PROBE
 40

	)

208 
	#PURIFIER_ARMOR
 41

	)

209 
	#KAGE_STEALTH_UNIT
 42

	)

210 
	#ACHILEUS_STEALTH_UNIT
 43

	)

211 
	#INFILTRATOR_STEALTH_UNIT
 44

	)

212 
	#INFILTRATORII_STEALTH_UNIT
 45

	)

213 
	#SUPERCHARGER
 46

	)

215 
	#LBX2_AMMO
 0

	)

216 
	#LBX5_AMMO
 1

	)

217 
	#LBX10_AMMO
 2

	)

218 
	#LBX20_AMMO
 3

	)

219 
	#LRM_AMMO
 4

	)

220 
	#SRM_AMMO
 5

	)

221 
	#SSRM_AMMO
 6

	)

222 
	#NARC_LRM_AMMO
 7

	)

223 
	#NARC_SRM_AMMO
 8

	)

224 
	#NARC_SSRM_AMMO
 9

	)

225 
	#ARTEMIS_LRM_AMMO
 10

	)

226 
	#ARTEMIS_SRM_AMMO
 11

	)

227 
	#ARTEMIS_SSRM_AMMO
 12

	)

229 
	#PETROLEUM
 13

	)

230 
	#PHOSPHORUS
 14

	)

231 
	#HYDROGEN
 15

	)

232 
	#GOLD
 16

	)

233 
	#NATURAL_EXTRACTS
 17

	)

234 
	#MARIJUANA
 18

	)

235 
	#SULFUR
 19

	)

236 
	#SODIUM
 20

	)

237 
	#PLUTONIUM
 21

	)

238 
	#ORE
 22

	)

239 
	#METAL
 23

	)

240 
	#PLASTICS
 24

	)

241 
	#MEDICAL_SUPPLIES
 25

	)

242 
	#COMPUTERS
 26

	)

243 
	#EXPLOSIVES
 27

	)

245 
	#ES_INTERNAL
 28

	)

246 
	#FF_ARMOR
 29

	)

247 
	#XL_ENGINE
 30

	)

248 
	#DOUBLE_HEAT_SINK
 31

	)

249 
	#IC_ENGINE
 32

	)

251 
	#S_ELECTRONIC
 33

	)

252 
	#S_INTERNAL
 34

	)

253 
	#S_ARMOR
 35

	)

254 
	#S_ACTUATOR
 36

	)

255 
	#S_AERO_FUEL
 37

	)

256 
	#S_DS_FUEL
 38

	)

257 
	#S_VTOL_FUEL
 39

	)

259 
	#SWARM_LRM_AMMO
 40

	)

260 
	#SWARM1_LRM_AMMO
 41

	)

261 
	#INFERNO_SRM_AMMO
 42

	)

263 
	#XXL_ENGINE
 43

	)

264 
	#COMP_ENGINE
 44

	)

266 
	#HD_ARMOR
 45

	)

267 
	#RE_INTERNAL
 46

	)

268 
	#CO_INTERNAL
 47

	)

269 
	#MRM_AMMO
 48

	)

270 
	#LIGHT_ENGINE
 49

	)

271 
	#CASEII
 50

	)

272 
	#STH_ARMOR
 51

	)

273 
	#NULLSIGSYS
 52

	)

274 
	#SILICON
 53

	)

275 
	#HVY_FF_ARMOR
 54

	)

276 
	#LT_FF_ARMOR
 55

	)

278 
	#INARC_EXPLO_AMMO
 56

	)

279 
	#INARC_HAYWIRE_AMMO
 57

	)

280 
	#INARC_ECM_AMMO
 58

	)

281 
	#INARC_NEMESIS_AMMO
 59

	)

283 
	#AC2_AP_AMMO
 60

	)

284 
	#AC5_AP_AMMO
 61

	)

285 
	#AC10_AP_AMMO
 62

	)

286 
	#AC20_AP_AMMO
 63

	)

287 
	#LAC2_AP_AMMO
 64

	)

288 
	#LAC5_AP_AMMO
 65

	)

289 
	#AC2_FLECHETTE_AMMO
 66

	)

290 
	#AC5_FLECHETTE_AMMO
 67

	)

291 
	#AC10_FLECHETTE_AMMO
 68

	)

292 
	#AC20_FLECHETTE_AMMO
 69

	)

293 
	#LAC2_FLECHETTE_AMMO
 70

	)

294 
	#LAC5_FLECHETTE_AMMO
 71

	)

295 
	#AC2_INCENDIARY_AMMO
 72

	)

296 
	#AC5_INCENDIARY_AMMO
 73

	)

297 
	#AC10_INCENDIARY_AMMO
 74

	)

298 
	#AC20_INCENDIARY_AMMO
 75

	)

299 
	#LAC2_INCENDIARY_AMMO
 76

	)

300 
	#LAC5_INCENDIARY_AMMO
 77

	)

301 
	#AC2_PRECISION_AMMO
 78

	)

302 
	#AC5_PRECISION_AMMO
 79

	)

303 
	#AC10_PRECISION_AMMO
 80

	)

304 
	#AC20_PRECISION_AMMO
 81

	)

305 
	#LAC2_PRECISION_AMMO
 82

	)

306 
	#LAC5_PRECISION_AMMO
 83

	)

307 
	#LR_DFM_AMMO
 84

	)

308 
	#SR_DFM_AMMO
 85

	)

309 
	#SLRM_AMMO
 86

	)

310 
	#ELRM_AMMO
 87

	)

311 
	#BSUIT_SENSOR
 88

	)

312 
	#BSUIT_LIFESUPPORT
 89

	)

313 
	#BSUIT_ELECTRONIC
 90

	)

314 
	#CARGO_OIL
 91

	)

315 
	#CARGO_WATER
 92

	)

316 
	#CARGO_EARTH
 93

	)

317 
	#CARGO_OXYGEN
 94

	)

318 
	#CARGO_NITROGEN
 95

	)

319 
	#CARGO_NICKEL
 96

	)

320 
	#CARGO_STEEL
 97

	)

321 
	#CARGO_IRON
 98

	)

322 
	#CARGO_BRASS
 99

	)

323 
	#CARGO_PLATINUM
 100

	)

324 
	#CARGO_COPPER
 101

	)

325 
	#CARGO_ALUMINUM
 102

	)

326 
	#CARGO_CONSUMER_GOOD
 103

	)

327 
	#CARGO_MACHINERY
 104

	)

328 
	#CARGO_SLAVES
 105

	)

329 
	#CARGO_TIMBIQUI_DARK
 106

	)

330 
	#CARGO_COCAINE
 107

	)

331 
	#CARGO_HEROINE
 108

	)

332 
	#CARGO_MARBLE
 109

	)

333 
	#CARGO_GLASS
 110

	)

334 
	#CARGO_DIAMOND
 111

	)

335 
	#CARGO_COAL
 112

	)

336 
	#CARGO_FOOD
 113

	)

337 
	#CARGO_ZINC
 114

	)

338 
	#CARGO_FABRIC
 115

	)

339 
	#CARGO_CLOTHING
 116

	)

340 
	#CARGO_WOOD
 117

	)

341 
	#CARGO_PULP
 118

	)

342 
	#CARGO_LUMBER
 119

	)

343 
	#CARGO_RUBBER
 120

	)

344 
	#CARGO_SEEDS
 121

	)

345 
	#CARGO_FERTILIZER
 122

	)

346 
	#CARGO_SALT
 123

	)

347 
	#CARGO_LITHIUM
 124

	)

348 
	#CARGO_HELIUM
 125

	)

349 
	#CARGO_LARIUM
 126

	)

350 
	#CARGO_URANIUM
 127

	)

351 
	#CARGO_IRIDIUM
 128

	)

352 
	#CARGO_TITANIUM
 129

	)

353 
	#CARGO_CONCRETE
 130

	)

354 
	#CARGO_FERROCRETE
 131

	)

355 
	#CARGO_BUILDING_SUPPLIES
 132

	)

356 
	#CARGO_KEVLAR
 133

	)

357 
	#CARGO_WASTE
 134

	)

358 
	#CARGO_LIVESTOCK
 135

	)

359 
	#CARGO_PAPER
 136

	)

360 
	#XL_GYRO
 137

	)

361 
	#HD_GYRO
 138

	)

362 
	#COMP_GYRO
 139

	)

363 
	#COMPACT_HEAT_SINK
 140

	)

364 
	#TON_SENSORS_FIRST
 141

	)

365 
	#TON_SENSORS_LAST
 (
TON_SENSORS_FIRST
 + 9)

	)

367 
	#TON_MYOMER_FIRST
 (
TON_SENSORS_LAST
 + 1)

	)

368 
	#TON_MYOMER_LAST
 (
TON_MYOMER_FIRST
 + 9)

	)

370 
	#TON_TRIPLEMYOMER_FIRST
 (
TON_MYOMER_LAST
 + 1)

	)

371 
	#TON_TRIPLEMYOMER_LAST
 (
TON_TRIPLEMYOMER_FIRST
 + 9)

	)

373 
	#TON_INTERNAL_FIRST
 (
TON_TRIPLEMYOMER_LAST
 + 1)

	)

374 
	#TON_INTERNAL_LAST
 (
TON_INTERNAL_FIRST
 + 9)

	)

376 
	#TON_ESINTERNAL_FIRST
 (
TON_INTERNAL_LAST
 + 1)

	)

377 
	#TON_ESINTERNAL_LAST
 (
TON_ESINTERNAL_FIRST
 + 9)

	)

379 
	#TON_JUMPJET_FIRST
 (
TON_ESINTERNAL_LAST
 + 1)

	)

380 
	#TON_JUMPJET_LAST
 (
TON_JUMPJET_FIRST
 + 9)

	)

382 
	#TON_ARMUPPER_FIRST
 (
TON_JUMPJET_LAST
 + 1)

	)

383 
	#TON_ARMUPPER_LAST
 (
TON_ARMUPPER_FIRST
 + 9)

	)

385 
	#TON_ARMLOWER_FIRST
 (
TON_ARMUPPER_LAST
 + 1)

	)

386 
	#TON_ARMLOWER_LAST
 (
TON_ARMLOWER_FIRST
 + 9)

	)

388 
	#TON_ARMHAND_FIRST
 (
TON_ARMLOWER_LAST
 + 1)

	)

389 
	#TON_ARMHAND_LAST
 (
TON_ARMHAND_FIRST
 + 9)

	)

391 
	#TON_LEGUPPER_FIRST
 (
TON_ARMHAND_LAST
 + 1)

	)

392 
	#TON_LEGUPPER_LAST
 (
TON_LEGUPPER_FIRST
 + 9)

	)

394 
	#TON_LEGLOWER_FIRST
 (
TON_LEGUPPER_LAST
 + 1)

	)

395 
	#TON_LEGLOWER_LAST
 (
TON_LEGLOWER_FIRST
 + 9)

	)

397 
	#TON_LEGFOOT_FIRST
 (
TON_LEGLOWER_LAST
 + 1)

	)

398 
	#TON_LEGFOOT_LAST
 (
TON_LEGFOOT_FIRST
 + 9)

	)

400 
	#TON_ENGINE_FIRST
 (
TON_LEGFOOT_LAST
 + 1)

	)

401 
	#TON_ENGINE_LAST
 (
TON_ENGINE_FIRST
 + 19)

	)

403 
	#TON_ENGINE_XL_FIRST
 (
TON_ENGINE_LAST
 + 1)

	)

404 
	#TON_ENGINE_XL_LAST
 (
TON_ENGINE_XL_FIRST
 + 19)

	)

406 
	#TON_ENGINE_ICE_FIRST
 (
TON_ENGINE_XL_LAST
 + 1)

	)

407 
	#TON_ENGINE_ICE_LAST
 (
TON_ENGINE_ICE_FIRST
 + 19)

	)

410 
	#TON_ENGINE_LIGHT_FIRST
 (
TON_ENGINE_ICE_LAST
 + 1)

	)

411 
	#TON_ENGINE_LIGHT_LAST
 (
TON_ENGINE_LIGHT_FIRST
 + 19)

	)

413 
	#TON_COINTERNAL_FIRST
 (
TON_ENGINE_LIGHT_LAST
 + 1)

	)

414 
	#TON_COINTERNAL_LAST
 (
TON_COINTERNAL_FIRST
 + 9)

	)

417 
	#TON_REINTERNAL_FIRST
 (
TON_COINTERNAL_LAST
 + 1)

	)

418 
	#TON_REINTERNAL_LAST
 (
TON_REINTERNAL_FIRST
 + 9)

	)

420 
	#TON_GYRO_FIRST
 (
TON_REINTERNAL_LAST
 + 1)

	)

421 
	#TON_GYRO_LAST
 (
TON_GYRO_FIRST
 + 3)

	)

423 
	#TON_XLGYRO_FIRST
 (
TON_GYRO_LAST
 + 1)

	)

424 
	#TON_XLGYRO_LAST
 (
TON_XLGYRO_FIRST
 + 3)

	)

426 
	#TON_HDGYRO_FIRST
 (
TON_XLGYRO_LAST
 + 1)

	)

427 
	#TON_HDGYRO_LAST
 (
TON_HDGYRO_FIRST
 + 3)

	)

429 
	#TON_CGYRO_FIRST
 (
TON_HDGYRO_LAST
 + 1)

	)

430 
	#TON_CGYRO_LAST
 (
TON_CGYRO_FIRST
 + 3)

	)

432 
	#TON_ENGINE_XXL_FIRST
 (
TON_CGYRO_LAST
 + 1)

	)

433 
	#TON_ENGINE_XXL_LAST
 (
TON_ENGINE_XXL_FIRST
 + 19)

	)

435 
	#TON_ENGINE_COMP_FIRST
 (
TON_ENGINE_XXL_LAST
 + 1)

	)

436 
	#TON_ENGINE_COMP_LAST
 (
TON_ENGINE_COMP_FIRST
 + 19)

	)

440 
	#TBEAM
 0

	)

441 
	#TMISSILE
 1

	)

442 
	#TARTILLERY
 2

	)

443 
	#TAMMO
 3

	)

444 
	#THAND
 4

	)

448 
	#TIC_NUM_DESTROYED
 -2

	)

449 
	#TIC_NUM_RELOADING
 -3

	)

450 
	#TIC_NUM_RECYCLING
 -4

	)

451 
	#TIC_NUM_PHYSICAL
 -5

	)

455 
	#MAX_WEAPS_SECTION
 12

	)

457 
	swóp⁄_°ru˘
 {

458 *
	m«me
;

459 
	mvπ
;

460 
	mty≥
;

461 
	mhót
;

462 
	mdamage
;

463 
	mmö
;

464 
	msh‹å™ge
;

465 
	mmedønge
;

466 
	ml⁄gønge
;

467 
	mmö_w©î
;

468 
	msh‹å™ge_w©î
;

469 
	mmedønge_w©î
;

470 
	ml⁄gønge_w©î
;

471 
	m¸ôiˇls
;

472 
	mamm›ît⁄
;

473 
	mweight
;

474 
	mex∂osi⁄damage
;

475 
	m•ecül
;

476 
	mb©éevÆue
;

480 
	#NONE
 0x00000000

	)

481 
	#PULSE
 0x00000001

	)

482 
	#LBX
 0x00000002

	)

483 
	#ULTRA
 0x00000004

	)

484 
	#STREAK
 0x00000008

	)

485 
	#GAUSS
 0x00000010

	)

486 
	#NARC
 0x00000020

	)

487 
	#IDF
 0x00000040

	)

488 
	#DAR
 0x00000080

	)

489 
	#HYPER
 0x00000100

	)

490 
	#A_POD
 0x00000200

	)

491 
	#CLAT
 0x00000400

	)

492 
	#NOSPA
 0x00000800

	)

493 
	#PC_HEAT
 0x00001000

	)

494 
	#PC_IMPA
 0x00002000

	)

495 
	#PC_SHAR
 0x00004000

	)

496 
	#AMS
 0x00008000

	)

497 
	#NOBOOM
 0x00010000

	)

498 
	#CASELESS
 0x00020000

	)

499 
	#DFM
 0x00040000

	)

500 
	#ELRM
 0x00080000

	)

501 
	#MRM
 0x00100000

	)

502 
	#CHEAT
 0x00200000

	)

503 
	#HVYW
 0x00400000

	)

504 
	#RFAC
 0x00800000

	)

505 
	#GMG
 0x01000000

	)

506 
	#INARC
 0x02000000

	)

507 
	#RAC
 0x04000000

	)

508 
	#HVYGAUSS
 0x08000000

	)

509 
	#ROCKET
 0x10000000

	)

511 
	#PCOMBAT
 (
PC_HEAT
|
PC_IMPA
|
PC_SHAR
)

	)

513 
	#MAX_ROLL
 11

	)

514 
	smissûe_hô_èbÀ_°ru˘
 {

515 *
	m«me
;

516 
	mkey
;

517 
	mnum_missûes
[
MAX_ROLL
];

525 
	#LARM
 0

	)

526 
	#RARM
 1

	)

527 
	#LTORSO
 2

	)

528 
	#RTORSO
 3

	)

529 
	#CTORSO
 4

	)

530 
	#LLEG
 5

	)

531 
	#RLEG
 6

	)

532 
	#HEAD
 7

	)

533 
	#NUM_SECTIONS
 8

	)

536 
	#LSIDE
 0

	)

537 
	#RSIDE
 1

	)

538 
	#FSIDE
 2

	)

539 
	#BSIDE
 3

	)

540 
	#TURRET
 4

	)

541 
	#ROTOR
 5

	)

542 
	#NUM_VEH_SECTIONS
 6

	)

545 
	#AERO_NOSE
 0

	)

546 
	#AERO_LWING
 1

	)

547 
	#AERO_RWING
 2

	)

548 
	#AERO_FUSEL
 3

	)

549 
	#AERO_COCKPIT
 4

	)

550 
	#AERO_ENGINE
 5

	)

551 
	#NUM_AERO_SECTIONS
 6

	)

553 
	#NUM_BSUIT_MEMBERS
 8

	)

555 
	#DS_RWING
 0

	)

556 
	#DS_LWING
 1

	)

557 
	#DS_LRWING
 2

	)

558 
	#DS_RRWING
 3

	)

559 
	#DS_AFT
 4

	)

560 
	#DS_NOSE
 5

	)

562 
	#NUM_DS_SECTIONS
 6

	)

563 
	#SphîoidDS
(
a
Ë(
	`MechTy≥
◊)==
CLASS_SPHEROID_DS
)

	)

564 
	#SphîoidToRór
(
mech
,
a
) \

565 i‡(
	`MechTy≥
(
mech
Ë=
CLASS_SPHEROID_DS
) \

566 (
a
Ë(◊Ë=
DS_LWING
 ? 
DS_LRWING
 : 
DS_RRWING
)

	)

569 
	#NUM_TICS
 4

	)

570 
	#MAX_WEAPONS_PER_MECH
 96

	)

571 
	#SINGLE_TICLONG_SIZE
 32

	)

572 
	#TICLONGS
 (
MAX_WEAPONS_PER_MECH
 / 
SINGLE_TICLONG_SIZE
)

	)

575 
	s¸ôiˇl_¶Ÿ
 {

576 
	mbønd
;

577 
	md©a
;

578 
	mty≥
;

579 
	mfúemode
;

580 
	mammomode
;

581 
	mwópDamageFœgs
;

582 
	mdesúedAmmoLoc
;

586 
	#DESTROYED_MODE
 0x00000001

	)

587 
	#DISABLED_MODE
 0x00000002

	)

588 
	#BROKEN_MODE
 0x00000004

	)

589 
	#DAMAGED_MODE
 0x00000008

	)

590 
	#ON_TC
 0x00000010

	)

591 
	#REAR_MOUNT
 0x00000020

	)

592 
	#HOTLOAD_MODE
 0x00000040

	)

593 
	#HALFTON_MODE
 0x00000080

	)

594 
	#OS_MODE
 0x00000100

	)

595 
	#OS_USED
 0x00000200

	)

596 
	#ULTRA_MODE
 0x00000400

	)

597 
	#RFAC_MODE
 0x00000800

	)

598 
	#GATTLING_MODE
 0x00001000

	)

599 
	#RAC_TWOSHOT_MODE
 0x00002000

	)

600 
	#RAC_FOURSHOT_MODE
 0x00004000

	)

601 
	#RAC_SIXSHOT_MODE
 0x00008000

	)

602 
	#HEAT_MODE
 0x00010000

	)

603 
	#WILL_JETTISON_MODE
 0x00020000

	)

604 
	#IS_JETTISONED_MODE
 0x00040000

	)

605 
	#OMNI_BASE_MODE
 0x00080000

	)

606 
	#ROCKET_FIRED
 0x00100000

	)

608 
	#RAC_MODES
 (
RAC_TWOSHOT_MODE
|
RAC_FOURSHOT_MODE
|
RAC_SIXSHOT_MODE
)

	)

609 
	#FIRE_MODES
 (
HOTLOAD_MODE
|
ULTRA_MODE
|
RFAC_MODE
|
GATTLING_MODE
|
RAC_MODES
|
HEAT_MODE
)

	)

612 
	#LBX_MODE
 0x00000001

	)

613 
	#ARTEMIS_MODE
 0x00000002

	)

614 
	#NARC_MODE
 0x00000004

	)

615 
	#CLUSTER_MODE
 0x00000008

	)

616 
	#MINE_MODE
 0x00000010

	)

617 
	#SMOKE_MODE
 0x00000020

	)

618 
	#INFERNO_MODE
 0x00000040

	)

619 
	#SWARM_MODE
 0x00000080

	)

620 
	#SWARM1_MODE
 0x00000100

	)

621 
	#INARC_EXPLO_MODE
 0x00000200

	)

622 
	#INARC_HAYWIRE_MODE
 0x00000400

	)

623 
	#INARC_ECM_MODE
 0x00000800

	)

624 
	#INARC_NEMESIS_MODE
 0x00001000

	)

625 
	#AC_AP_MODE
 0x00002000

	)

626 
	#AC_FLECHETTE_MODE
 0x00004000

	)

627 
	#AC_INCENDIARY_MODE
 0x00008000

	)

628 
	#AC_PRECISION_MODE
 0x00010000

	)

630 
	#ARTILLERY_MODES
 (
CLUSTER_MODE
|
MINE_MODE
|
SMOKE_MODE
)

	)

631 
	#INARC_MODES
 (
INARC_EXPLO_MODE
|
INARC_HAYWIRE_MODE
|
INARC_ECM_MODE
|
INARC_NEMESIS_MODE
)

	)

632 
	#MISSILE_MODES
 (
ARTEMIS_MODE
|
NARC_MODE
|
INFERNO_MODE
|
SWARM_MODE
|
SWARM1_MODE
)

	)

633 
	#AC_MODES
 (
AC_AP_MODE
|
AC_FLECHETTE_MODE
|
AC_INCENDIARY_MODE
|
AC_PRECISION_MODE
)

	)

634 
	#AMMO_MODES
 (
LBX_MODE
|
AC_MODES
|
MISSILE_MODES
|
INARC_MODES
|
ARTILLERY_MODES
)

	)

637 
	#WEAP_DAM_MODERATE
 0x00000001

	)

638 
	#WEAP_DAM_EN_FOCUS
 0x00000002

	)

639 
	#WEAP_DAM_EN_CRYSTAL
 0x00000004

	)

640 
	#WEAP_DAM_BALL_BARREL
 0x00000008

	)

641 
	#WEAP_DAM_BALL_AMMO
 0x00000010

	)

642 
	#WEAP_DAM_MSL_RANGING
 0x00000020

	)

643 
	#WEAP_DAM_MSL_AMMO
 0x00000040

	)

646 
	s£˘i⁄_°ru˘
 {

647 
	m¨m‹
;

648 
	möã∫Æ
;

649 
	mª¨
;

650 
	m¨m‹_‹ig
;

651 
	möã∫Æ_‹ig
;

652 
	mª¨_‹ig
;

653 
	mba£tohô
;

654 
	mc⁄fig
;

655 
	mªcy˛e
;

656 
	m•ecüls
;

657 
¸ôiˇl_¶Ÿ
 
	m¸ôiˇls
[
NUM_CRITICALS
];

661 
	#CASE_TECH
 0x01

	)

662 
	#SECTION_DESTROYED
 0x02

	)

663 
	#SECTION_BREACHED
 0x04

	)

664 
	#SECTION_FLOODED
 0x08

	)

665 
	#AXED
 0x10

	)

666 
	#STABILIZERS_DESTROYED
 0x20

	)

667 
	#CASEII_TECH
 0x40

	)

670 
	#NARC_ATTACHED
 0x00000001

	)

671 
	#INARC_HOMING_ATTACHED
 0x00000002

	)

672 
	#INARC_HAYWIRE_ATTACHED
 0x00000004

	)

673 
	#INARC_ECM_ATTACHED
 0x00000008

	)

674 
	#INARC_NEMESIS_ATTACHED
 0x00000010

	)

675 
	#CARRYING_CLUB
 0x00000020

	)

678 
	#CLASS_MECH
 0

	)

679 
	#CLASS_VEH_GROUND
 1

	)

680 
	#CLASS_VEH_NAVAL
 3

	)

683 
	#CLASS_VTOL
 2

	)

684 
	#CLASS_SPHEROID_DS
 4

	)

685 
	#CLASS_AERO
 5

	)

686 
	#CLASS_MW
 6

	)

687 
	#CLASS_DS
 7

	)

688 
	#CLASS_BSUIT
 8

	)

689 
	#CLASS_LAST
 8

	)

691 
	#Dr›Shù
(
a
Ë(◊)==
CLASS_DS
 || (a)==
CLASS_SPHEROID_DS
)

	)

692 
	#IsDS
(
m
Ë(
	`Dr›Shù
(
	`MechTy≥
(m)))

	)

695 
	#MOVE_BIPED
 0

	)

696 
	#MOVE_QUAD
 8

	)

697 
	#MOVE_TRACK
 1

	)

698 
	#MOVE_WHEEL
 2

	)

699 
	#MOVE_HOVER
 3

	)

700 
	#MOVE_HULL
 5

	)

701 
	#MOVE_FOIL
 6

	)

702 
	#MOVE_SUB
 9

	)

705 
	#MOVE_VTOL
 4

	)

706 
	#MOVE_FLY
 7

	)

708 
	#MOVE_NONE
 10

	)

710 
	#MOVENEMENT_LAST
 10

	)

713 
	#MECHPREF_PKILL
 0x01

	)

714 
	#MECHPREF_SLWARN
 0x02

	)

715 
	#MECHPREF_AUTOFALL
 0x04

	)

716 
	#MECHPREF_NOARMORWARN
 0x08

	)

717 
	#MECHPREF_NOAMMOWARN
 0x10

	)

718 
	#MECHPREF_STANDANYWAY
 0x20

	)

719 
	#MECHPREF_AUTOCON_SD
 0x40

	)

720 
	#MECHPREF_NOFRIENDLYFIRE
 0x80

	)

723 
	mmech_«me
[31];

724 
	mmech_ty≥
[15];

725 
	mty≥
;

726 
	mmove
;

727 
	mèc_ønge
;

728 
	mÃs_ønge
;

729 
	msˇn_ønge
;

730 
	mnumsöks
;

731 
	mcompuãr
;

732 
	mødio
;

733 
	mødioöfo
;

735 
	msi
;

736 
	msi_‹ig
;

738 
	mødio_ønge
;

740 
£˘i⁄_°ru˘
 
	m£˘i⁄s
[
NUM_SECTIONS
];

741 
	mfuñ
;

742 
	mfuñ_‹ig
;

744 
	mt⁄s
;

745 
	mwÆk•ìd
;

746 
	mrun•ìd
;

747 
	mmax•ìd
;

749 
	mmechbv
;

750 
	mˇrgo•a˚
;

751 
	mmechbv_œ°
;

752 
	mèrgcomp
;

753 
	munu£d_ch¨
[3];

754 
	mˇrmaxt⁄
;

755 } 
	tmech_ud
;

758 
	mjum±›
;

759 
	maim
;

760 
	mba£tohô
;

761 
	mpûŸskûlba£
;

762 
	mígöehót
;

763 
	mmasc_vÆue
;

764 
	maim_ty≥
;

766 
	m£ns‹
[2];

767 
byã
 
	mfúe_adju°mít
;

768 
	mvis_mod
;

771 
	mch¨gëimî
;

772 
	mch¨gedi°
;

773 
	m°aggî°amp
;

775 
	mmech_¥efs
;

776 
	mjum∂ígth
;

777 
	mgoögx
, 
	mgoögy
;

778 
	mdesúedÁcög
;

779 
	m™gÀ
;

780 
	mjumphódög
;

781 
	mèrgx
, 
	mèrgy
, 
	mèrgz
;

782 
	mtuºëÁcög
;

783 
	mtu∫damage
;

784 
	mœãøl
;

785 
	mnum_£í
;

786 
	mlx
, 
	mly
;

789 
dbªf
 
	mchgèrgë
;

790 
dbªf
 
	mdÁèrgë
;

791 
dbªf
 
	mèrgë
;

792 
dbªf
 
	msw¨mög
;

793 
dbªf
 
	mˇºyög
;

794 
dbªf
 
	m•Ÿãr
;

796 
	mhót
;

797 
	mwóphót
;

798 
	m∂us_hót
;

799 
	mmöus_hót
;

801 
	m°¨tfx
, 
	m°¨tfy
;

802 
	m°¨tfz
, 
	mídfz
;

803 
	mvîtiˇl•ìd
;

804 
	m•ìd
;

805 
	mdesúed_•ìd
;

806 
	mjump•ìd
;

808 
	m¸ô°©us
;

809 
	m°©us
;

810 
	m°©us2
;

811 
	m•ecüls
;

812 
	m•ecüls2
;

813 
	m•ecüls°©us
;

814 
	mènk¸ô°©us
;

816 
	mœ°_wóp⁄_ªcy˛e
;

821 
	mˇrgo_weight
;

824 
	mœ°∫du
;

825 
	m∫d
;

827 
	mœ°_ds_msg
;

828 
	mboom_°¨t
;

830 
	mmaxfuñ
;

831 
	mœ°u£d
;

832 
	mcoco⁄
;

833 
	mcommc⁄v
;

834 
	mcommc⁄v_œ°
;

835 
	m⁄umsöks
;

836 
	mdißbÀd_hs
;

837 
	maut›ûŸ_num
;

838 
	mhótboom_œ°
;

839 
	ms•ö
;

840 
	mˇn_£e
;

841 
	mrow
;

842 
	mrcw
;

843 
	mr•d
;

844 
	mî©
;

845 
	m≥r
;

846 
	mwxf
;

847 
	mœ°_°¨tup
;

848 
	mmaxsuôs
;

849 
	möÁ¡ry_•ecüls
;

850 
	msch¨ge_vÆue
;

851 
	m°aggîDamage
;

852 
	mœ°SèggîNŸify
;

853 
	munu£d
[5];

854 } 
	tmech_rd
;

857 
	mpûŸ°©us
;

858 
	mãºaö
;

859 
	mñev
;

860 
	mhexes_wÆked
;

861 
	mÁcög
;

862 
	mx
, 
	my
, 
	mz
;

863 
	mœ°_x
, 
	mœ°_y
;

864 
	mfx
, 
	mfy
, 
	mfz
;

865 
	mãam
;

866 
	munußbÀ_¨cs
;

867 
	m°Æl
;

868 
dbªf
 
	mpûŸ
;

869 
dbªf
 
	mbay
[
NUM_BAYS
];

870 
dbªf
 
	mtuºë
[
NUM_TURRETS
];

871 } 
	tmech_pd
;

874 
	mC3Ch™TôÀ
[
CHTITLELEN
 + 1];

875 
dbªf
 
	mC3iNëw‹k
[
C3I_NETWORK_SIZE
];

876 
	mwC3iNëw‹kSize
;

877 
dbªf
 
	mC3Nëw‹k
[
C3_NETWORK_SIZE
];

878 
	mwC3Nëw‹kSize
;

879 
	mwTŸÆC3Ma°îs
;

880 
	mwW‹kögC3Ma°îs
;

881 
	mC3FªqMode
;

882 
dbªf
 
	mègT¨gë
;

883 
dbªf
 
	mèggedBy
;

884 } 
	tmech_sd
;

887 
	mID
[2];

888 
	mbrõf
;

889 
	mch™tôÀ
[
FREQS
][
CHTITLELEN
 + 1];

890 
dbªf
 
	mmynum
;

891 
	mm≠numbî
;

892 
dbªf
 
	mm≠ödex
;

893 
	mtic
[
NUM_TICS
][
TICLONGS
];

894 
	m‰eq
[
FREQS
];

895 
	m‰eqmodes
[
FREQS
];

896 
mech_ud
 
	mud
;

897 
mech_pd
 
	mpd
;

898 
mech_rd
 
	mrd
;

899 
mech_sd
 
	msd
;

901 } 
	tMECH
;

903 
	s•Ÿ_d©a
 {

904 
	mèrFX
;

905 
	mèrFY
;

906 
	mmechFX
;

907 
	mmechFY
;

908 
MECH
 *
	mèrgë
;

911 
	sª∑ú_d©a
 {

912 
	mdñè
;

913 
	mtime
;

914 
	mèrgë
;

915 
	mcode
;

920 
	#LANDED
 0x01

	)

921 
	#TORSO_RIGHT
 0x02

	)

922 
	#TORSO_LEFT
 0x04

	)

923 
	#STARTED
 0x08

	)

924 
	#PARTIAL_COVER
 0x10

	)

925 
	#DESTROYED
 0x20

	)

926 
	#JUMPING
 0x40

	)

927 
	#FALLEN
 0x80

	)

928 
	#DFA_ATTACK
 0x100

	)

930 
	#PERFORMING_ACTION
 0x200

	)

931 
	#FLIPPED_ARMS
 0x400

	)

932 
	#AMS_ENABLED
 0x800

	)

935 
	#UNCONSCIOUS
 0x2000

	)

936 
	#TOWED
 0x4000

	)

937 
	#LOCK_TARGET
 0x8000

	)

938 
	#LOCK_BUILDING
 0x10000

	)

939 
	#LOCK_HEX
 0x20000

	)

940 
	#LOCK_HEX_IGN
 0x40000

	)

941 
	#LOCK_HEX_CLR
 0x80000

	)

942 
	#MASC_ENABLED
 0x100000

	)

943 
	#BLINDED
 0x200000

	)

944 
	#COMBAT_SAFE
 0x400000

	)

945 
	#AUTOCON_WHEN_SHUTDOWN
 0x800000

	)

946 
	#FIRED
 0x1000000

	)

947 
	#SCHARGE_ENABLED
 0x2000000

	)

948 
	#HULLDOWN
 0x4000000

	)

949 
	#UNDERSPECIAL
 0x8000000

	)

950 
	#UNDERGRAVITY
 0x10000000

	)

951 
	#UNDERTEMPERATURE
 0x20000000

	)

952 
	#UNDERVACUUM
 0x40000000

	)

954 
	#CONDITIONS
 (
UNDERSPECIAL
 | 
UNDERGRAVITY
 | 
UNDERTEMPERATURE
 | 
UNDERVACUUM
)

	)

955 
	#LOCK_MODES
 (
LOCK_TARGET
|
LOCK_BUILDING
|
LOCK_HEX
|
LOCK_HEX_IGN
|
LOCK_HEX_CLR
)

	)

960 
	#ECM_ENABLED
 0x00000001

	)

961 
	#ECCM_ENABLED
 0x00000002

	)

962 
	#ECM_DISTURBANCE
 0x00000004

	)

963 
	#ECM_PROTECTED
 0x00000008

	)

964 
	#ECM_COUNTERED
 0x00000010

	)

967 
	#SLITE_ON
 0x00000020

	)

968 
	#STH_ARMOR_ON
 0x00000040

	)

969 
	#NULLSIGSYS_ON
 0x00000080

	)

970 
	#ANGEL_ECM_ENABLED
 0x00000100

	)

971 
	#ANGEL_ECCM_ENABLED
 0x00000200

	)

972 
	#ANGEL_ECM_PROTECTED
 0x00000400

	)

973 
	#ANGEL_ECM_DISTURBED
 0x00000800

	)

974 
	#PER_ECM_ENABLED
 0x00001000

	)

975 
	#PER_ECCM_ENABLED
 0x00002000

	)

976 
	#AUTOTURN_TURRET
 0x00004000

	)

977 
	#SPRINTING
 0x00010000

	)

978 
	#EVADING
 0x00020000

	)

979 
	#DODGING
 0x00040000

	)

980 
	#ATTACKEMIT_MECH
 0x00080000

	)

983 
	#MOVE_MODES
 (
SPRINTING
|
EVADING
|
DODGING
)

	)

984 
	#MOVE_MODES_LOCK
 (
SPRINTING
|
EVADING
)

	)

987 
	#MODE_EVADE
 0x1

	)

988 
	#MODE_SPRINT
 0x2

	)

989 
	#MODE_ON
 0x4

	)

990 
	#MODE_OFF
 0x8

	)

991 
	#MODE_DODGE
 0x10

	)

992 
	#MODE_DG_USED
 0x20

	)

993 
	#MODE_MODEFAIL
 0x40

	)

996 
	#CHECK_WEAPS
 0x1

	)

997 
	#CHECK_PHYS
 0x2

	)

998 
	#CHECK_BOTH
 (
CHECK_WEAPS
|
CHECK_PHYS
)

	)

1001 
	#MechLockFúe
(
mech
) \

1002 ((
	`MechSètus
(
mech
Ë& 
LOCK_TARGET
) && \

1003 !(
	`MechSètus
(
mech
Ë& (
LOCK_BUILDING
|
LOCK_HEX
|
LOCK_HEX_IGN
|
LOCK_HEX_CLR
)))

	)

1006 
	#Blöded
(
a
Ë(
	`MechSètus
◊Ë& 
BLINDED
)

	)

1007 
	#Sèπed
(
a
Ë(
	`MechSètus
◊Ë& 
STARTED
)

	)

1008 
	#Unc⁄
(
a
Ë(
	`MechSètus
◊Ë& 
UNCONSCIOUS
)

	)

1011 
	#GYRO_DESTROYED
 0x00000001

	)

1012 
	#SENSORS_DAMAGED
 0x00000002

	)

1013 
	#TAG_DESTROYED
 0x00000004

	)

1014 
	#HIDDEN
 0x00000008

	)

1015 
	#GYRO_DAMAGED
 0x00000010

	)

1016 
	#HIP_DAMAGED
 0x00000020

	)

1017 
	#LIFE_SUPPORT_DESTROYED
 0x00000040

	)

1018 
	#ANGEL_ECM_DESTROYED
 0x00000080

	)

1019 
	#C3I_DESTROYED
 0x00000100

	)

1020 
	#NSS_DESTROYED
 0x00000200

	)

1021 
	#SLITE_DEST
 0x00000400

	)

1022 
	#SLITE_LIT
 0x00000800

	)

1023 
	#LOAD_OK
 0x00001000

	)

1024 
	#OWEIGHT_OK
 0x00002000

	)

1025 
	#SPEED_OK
 0x00004000

	)

1026 
	#HEATCUTOFF
 0x00008000

	)

1027 
	#TOWABLE
 0x00010000

	)

1028 
	#HIP_DESTROYED
 0x00020000

	)

1029 
	#TC_DESTROYED
 0x00040000

	)

1030 
	#C3_DESTROYED
 0x00080000

	)

1031 
	#ECM_DESTROYED
 0x00100000

	)

1032 
	#BEAGLE_DESTROYED
 0x00200000

	)

1033 
	#JELLIED
 0x00400000

	)

1034 
	#PC_INITIALIZED
 0x00800000

	)

1035 
	#SPINNING
 0x01000000

	)

1036 
	#CLAIRVOYANT
 0x02000000

	)

1037 
	#INVISIBLE
 0x04000000

	)

1038 
	#CHEAD
 0x08000000

	)

1039 
	#OBSERVATORIC
 0x10000000

	)

1040 
	#BLOODHOUND_DESTROYED
 0x20000000

	)

1045 
	#TURRET_LOCKED
 0x01

	)

1046 
	#TURRET_JAMMED
 0x02

	)

1047 
	#DUG_IN
 0x04

	)

1048 
	#DIGGING_IN
 0x08

	)

1049 
	#CREW_STUNNED
 0x10

	)

1050 
	#TAIL_ROTOR_DESTROYED
 0x20

	)

1053 
	#TRIPLE_MYOMER_TECH
 0x01

	)

1054 
	#CL_ANTI_MISSILE_TECH
 0x02

	)

1055 
	#IS_ANTI_MISSILE_TECH
 0x04

	)

1056 
	#DOUBLE_HEAT_TECH
 0x08

	)

1057 
	#MASC_TECH
 0x10

	)

1058 
	#CLAN_TECH
 0x20

	)

1059 
	#FLIPABLE_ARMS
 0x40

	)

1060 
	#C3_MASTER_TECH
 0x80

	)

1061 
	#C3_SLAVE_TECH
 0x100

	)

1062 
	#ARTEMIS_IV_TECH
 0x200

	)

1063 
	#ECM_TECH
 0x400

	)

1064 
	#BEAGLE_PROBE_TECH
 0x800

	)

1065 
	#SALVAGE_TECH
 0x1000

	)

1066 
	#CARGO_TECH
 0x2000

	)

1067 
	#SLITE_TECH
 0x4000

	)

1068 
	#LOADER_TECH
 0x8000

	)

1069 
	#AA_TECH
 0x10000

	)

1070 
	#NS_TECH
 0x20000

	)

1071 
	#SS_ABILITY
 0x40000

	)

1072 
	#FF_TECH
 0x80000

	)

1073 
	#ES_TECH
 0x100000

	)

1074 
	#XL_TECH
 0x200000

	)

1075 
	#ICE_TECH
 0x400000

	)

1076 
	#LIFTER_TECH
 0x800000

	)

1077 
	#LE_TECH
 0x1000000

	)

1078 
	#XXL_TECH
 0x2000000

	)

1079 
	#CE_TECH
 0x4000000

	)

1080 
	#REINFI_TECH
 0x8000000

	)

1081 
	#COMPI_TECH
 0x10000000

	)

1082 
	#HARDA_TECH
 0x20000000

	)

1083 
	#CRITPROOF_TECH
 0x40000000

	)

1087 
	#STEALTH_ARMOR_TECH
 0x01

	)

1088 
	#HVY_FF_ARMOR_TECH
 0x02

	)

1089 
	#LASER_REF_ARMOR_TECH
 0x04

	)

1090 
	#REACTIVE_ARMOR_TECH
 0x08

	)

1091 
	#NULLSIGSYS_TECH
 0x10

	)

1092 
	#C3I_TECH
 0x20

	)

1093 
	#SUPERCHARGER_TECH
 0x40

	)

1094 
	#IMPROVED_JJ_TECH
 0x80

	)

1095 
	#MECHANICAL_JJ_TECH
 0x100

	)

1096 
	#COMPACT_HS_TECH
 0x200

	)

1097 
	#LASER_HS_TECH
 0x400

	)

1098 
	#BLOODHOUND_PROBE_TECH
 0x800

	)

1099 
	#ANGEL_ECM_TECH
 0x1000

	)

1100 
	#WATCHDOG_TECH
 0x2000

	)

1101 
	#LT_FF_ARMOR_TECH
 0x4000

	)

1102 
	#TAG_TECH
 0x8000

	)

1103 
	#OMNIMECH_TECH
 0x10000

	)

1104 
	#ARTEMISV_TECH
 0x20000

	)

1105 
	#CARRIER_TECH
 0x40000

	)

1106 
	#XLGYRO_TECH
 0x80000

	)

1107 
	#HDGYRO_TECH
 0x100000

	)

1108 
	#CGYRO_TECH
 0x200000

	)

1109 
	#CAMO_TECH
 0x400000

	)

1112 
	#INF_SWARM_TECH
 0x01

	)

1113 
	#INF_MOUNT_TECH
 0x02

	)

1114 
	#INF_ANTILEG_TECH
 0x04

	)

1115 
	#CS_PURIFIER_STEALTH_TECH
 0x08

	)

1116 
	#DC_KAGE_STEALTH_TECH
 0x10

	)

1117 
	#FWL_ACHILEUS_STEALTH_TECH
 0x20

	)

1118 
	#FC_INFILTRATOR_STEALTH_TECH
 0x40

	)

1119 
	#FC_INFILTRATORII_STEALTH_TECH
 0x80

	)

1120 
	#MUST_JETTISON_TECH
 0x100

	)

1121 
	#CAN_JETTISON_TECH
 0x200

	)

1123 
	#STEALTH_TECH
 (
CS_PURIFIER_STEALTH_TECH
|
DC_KAGE_STEALTH_TECH
|
FWL_ACHILEUS_STEALTH_TECH
|
FC_INFILTRATOR_STEALTH_TECH
|
FC_INFILTRATORII_STEALTH_TECH
)

	)

1126 
	#TARGCOMP_NORMAL
 0

	)

1127 
	#TARGCOMP_SHORT
 1

	)

1128 
	#TARGCOMP_LONG
 2

	)

1129 
	#TARGCOMP_MULTI
 3

	)

1130 
	#TARGCOMP_AA
 4

	)

1221 
	#MECH_STARTED
 0x1

	)

1222 
	#MECH_PILOT
 0x2

	)

1223 
	#MECH_PILOT_CON
 0x4

	)

1224 
	#MECH_MAP
 0x8

	)

1225 
	#MECH_CONSISTENT
 0x10

	)

1226 
	#MECH_PILOTONLY
 0x20

	)

1227 
	#MECH_USUAL
 (
MECH_CONSISTENT
|
MECH_MAP
|
MECH_PILOT_CON
|
MECH_PILOT
|
MECH_STARTED
)

	)

1228 
	#MECH_USUALS
 (
MECH_CONSISTENT
|
MECH_MAP
|
MECH_PILOT_CON
|
MECH_PILOT
)

	)

1229 
	#MECH_USUALSP
 (
MECH_CONSISTENT
|
MECH_MAP
|
MECH_PILOT_CON
)

	)

1230 
	#MECH_USUALSM
 (
MECH_CONSISTENT
|
MECH_PILOT_CON
|
MECH_PILOT
)

	)

1231 
	#MECH_USUALM
 (
MECH_CONSISTENT
|
MECH_PILOT_CON
|
MECH_PILOT
|
MECH_STARTED
)

	)

1232 
	#MECH_USUALO
 (
MECH_CONSISTENT
|
MECH_MAP
|
MECH_PILOT_CON
|
MECH_PILOT
|
MECH_STARTED
|
MECH_PILOTONLY
)

	)

1233 
	#MECH_USUALSO
 (
MECH_CONSISTENT
|
MECH_MAP
|
MECH_PILOT_CON
|
MECH_PILOT
|
MECH_PILOTONLY
)

	)

1234 
	#MECH_USUALSPO
 (
MECH_CONSISTENT
|
MECH_MAP
|
MECH_PILOT_CON
|
MECH_PILOTONLY
)

	)

1235 
	#MECH_USUALSMO
 (
MECH_CONSISTENT
|
MECH_PILOT_CON
|
MECH_PILOT
|
MECH_PILOTONLY
)

	)

1236 
	#MECH_USUALMO
 (
MECH_CONSISTENT
|
MECH_PILOT_CON
|
MECH_PILOT
|
MECH_STARTED
|
MECH_PILOTONLY
)

	)

1238 
wóp⁄_°ru˘
 
MechWóp⁄s
[];

1239 
missûe_hô_èbÀ_°ru˘
 
MissûeHôTabÀ
[];

1241 
	#TELE_ALL
 1

	)

1242 
	#TELE_SLAVE
 2

	)

1243 
	#TELE_LOUD
 4

	)

1244 
	#TELE_XP
 8

	)

1246 
	#MINE_STEP
 1

	)

1247 
	#MINE_LAND
 2

	)

1248 
	#MINE_FALL
 3

	)

1249 
	#MINE_DROP
 4

	)

1251 *
FödObje˘sD©a
(
dbªf
 
key
);

1253 #i‚de‡
ECMD


1254 
	#ECMD
(
a
Ë
	`a
 (
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

	)

1257 
	#de°roy_obje˘
(
obj
Ë
	`de°roy_thög
(obj)

	)

1258 
	#¸óã_obje˘
(
«me
Ë
	`¸óã_obj
(
GOD
, 
TYPE_THING
,Çame, 1)

	)

1260 
	#A_MECHREF
 
A_MECHTYPE


	)

1261 
	#MECH_PATH
 
bãchc⁄f
.
mech_db


	)

1262 
	#MAP_PATH
 
bãchc⁄f
.
m≠_db


	)

1264 
	#WSDUMP_MASK_ER
 "%-24†%2d %2d %2d %2d %2d %3d %3d %2d"

	)

1265 
	#WSDUMP_MASK_NOER
 "%-24†%2d %2d %2d %2d %2d %3d %2d"

	)

1266 
	#WSDUMP_MASKS_ER
 "%%cgWóp⁄ Namê Hóà Damagê R™ge: Mö Sh‹àMed L⁄g ExàVRT"

	)

1267 
	#WSDUMP_MASKS_NOER
 "%%cgWóp⁄ Namê Hóà Damagê R™ge: Mö Sh‹à Med L⁄g VRT"

	)

1269 
	#WDUMP_MASK
 "%-24†%2d %2d %2d %2d %2d %3d %2d %2d %d"

	)

1270 
	#WDUMP_MASKS
 "%%cgWóp⁄ Namê Hóà Damagê R™ge: Mö Sh‹àMed L⁄g VRT C ApT"

	)

1271 
	~"btma¸os.h
"

1272 
	~"p.glue.hcode.h
"

1273 
	~"m≠.codög.h
"

1274 
	~"glue.h
"

1275 
	~"m≠s.h
"

1281 
x
;

1282 
y
;

1283 } 
	tlo°ø˚_öfo
;

	@btech/mech.ice.h

17 #i‚de‡
MECH_ICE_H


18 
	#MECH_ICE_H


	)

21 
dr›_thru_i˚
(
MECH
 * 
mech
);

22 
bªak_thru_i˚
(
MECH
 * 
mech
);

23 
possibly_dr›_thru_i˚
(
MECH
 * 
mech
);

24 
possibly_blow_bridge
(
MECH
 * 
mech
, 
wópödx
, 
x
, 
y
);

25 
possibly_blow_i˚
(
MECH
 * 
mech
, 
wópödx
, 
x
, 
y
);

	@btech/mech.lostracer.h

3 
	#StdEnumTricks
(
eNumTy≥
) \

4 
ölöe
 
›î©‹
++(
eNumTy≥
& 
eVÆ
) \

6 
eVÆ
 = 
	`eEnumTy≥
(eVal+1); \

9 
ölöe
 
›î©‹
++(
eEnumTy≥
& 
eVÆ
, ) \

11 
eVÆ
 = 
	`eEnumTy≥
(eVal+1); \

13 
ölöe
 
›î©‹
--(
eEnumTy≥
& 
eVÆ
, ) \

15 
eVÆ
 = 
	`eEnumTy≥
(eVal-1); \

17 
ölöe
 
tCIDLib
::
TVoid
 
›î©‹
--(
eEnumTy≥
& 
eVÆ
, ) \

19 
eVÆ
 = 
	`eEnumTy≥
(eVal-1); \

21 
ölöe
 
eEnumTy≥
 
	`eEnumMax
(eEnumType) \

23  
eEnumTy≥
##
_Max
; \

25 
ölöe
 
eEnumTy≥
 
	`eEnumMö
(eEnumType) \

27  
eEnumTy≥
##
_Mö
; \

28 }

	)

	@btech/mech.notify.h

17 #i‚de‡
MECH_NOTIFY_H


18 
	#MECH_NOTIFY_H


	)

20 
	~"mech.h
"

21 
	~"db.h
"

23 
	#MECHPILOT
 0

	)

24 
	#MECHSTARTED
 1

	)

25 
	#MECHALL
 2

	)

27 
	#cch
(
c
Ë
	`ccheck
(
∂ayî
, 
mech
, (c))

	)

28 
	#ccheck
(
a
,
b
,
c
Ëi‡(!
	`comm⁄_checks
(◊), (b), (c))Ë

	)

30 
	~"p.mech.nŸify.h
"

	@btech/mech.partnames.h

17 #i‚de‡
MECH_PARTNAMES_H


18 
	#MECH_PARTNAMES_H


	)

21 *
	msh‹ty
;

22 *
	ml⁄gy
;

23 *
	mvl⁄gy
;

24 
	mödex
;

25 } 
	tPN
;

27 
PN
 **
sh‹t_s‹ãd
;

28 
PN
 **
l⁄g_s‹ãd
;

29 
PN
 **
vl⁄g_s‹ãd
;

30 
obje˘_cou¡
;

32 
	#PACKED_PART
(
id
, 
bønd
Ë(
NUM_ITEMS
 * bønd + id)

	)

33 
	#UNPACK_PART
(
‰om
,
id
,
bønd
) \

34 
id
 = 
‰om
 % 
NUM_ITEMS
; 
bønd
 = from / 
	)
NUM_ITEMS

36 *
gë_∑πs_sh‹t_«me
(, );

37 *
gë_∑πs_l⁄g_«me
(, );

38 *
gë_∑πs_vl⁄g_«me
(, );

40 
	~"p.mech.∑π«mes.h
"

	@btech/mech.physical.h

13 #i‚de‡
MECH_PHYSICAL_H


14 
	#MECH_PHYSICAL_H


	)

17 
	#PA_PUNCH
 1

	)

18 
	#PA_CLUB
 2

	)

19 
	#PA_KICK
 3

	)

20 
	#PA_AXE
 4

	)

21 
	#PA_SWORD
 5

	)

22 
	#PA_MACE
 6

	)

24 
	#P_LEFT
 1

	)

25 
	#P_RIGHT
 2

	)

	@btech/mech.sensor.h

17 #i‚de‡
MECH_SENSOR_H


18 
	#MECH_SENSOR_H


	)

27 *
	m£ns‹«me
;

28 *
	mm©chÀâî
;

31 
	mfuŒvisi⁄
;

34 
	mmaxvis
;

37 
	mmaxvv¨
;

43 (*
	m£ech™˚_func
Ë(
	mMECH
 *, 
	mMAP
 *, , , , );

47 (*
	mˇn£e_func
Ë(
	mMECH
 *, MECH *, 
	mMAP
 *, , );

50 (*
	mtohôb⁄us_func
Ë(
MECH
 * 
	mmech
, MECH * 
	mèrgë
, 
	mMAP
 *, , );

53 
	mmö_light
;

54 
	mmax_light
;

56 
	mªquúed_•ecül
;

57 
	m•ecüls_£t
;

59 
	m©åibuãCheck
;

61 *
	mønge_desc
;

62 *
	mblock_desc
;

63 *
	m•ecül_desc
;

64 } 
	tSís‹Såu˘
;

66 
	#ESEEFUNC
(
a
Ë
	`a
 (
MECH
 *, 
MAP
 *, , , , );

	)

67 
	#SEEFUNC
(
a
,
b
) \

68 
	`a
 (
MECH
 *
t
, 
MAP
 *
m≠
, 
num
, 
r
, 
c
, 
l
Ë{  (Ë(
b
); }

	)

69 
ESEEFUNC
(
vi¶ight_£e
);

70 
ESEEFUNC
(
lôómp_£e
);

71 
ESEEFUNC
(
ö‰¨ed_£e
);

72 
ESEEFUNC
(
ñe˘rom_£e
);

73 
ESEEFUNC
(
£ismic_£e
);

74 
ESEEFUNC
(
ød¨_£e
);

75 
ESEEFUNC
(
b≠_£e
);

76 
ESEEFUNC
(
blood_£e
);

78 
	#ECSEEFUNC
(
a
Ë
	`a
 (
MECH
 *, MECH *, 
MAP
 *, , );

	)

79 
	#CSEEFUNC
(
a
,
b
) \

80 
	`a
 (
MECH
 *
m
, MECH *
t
, 
MAP
 *
m≠
, 
r
, 
f
Ë{  (Ë(
b
); }

	)

81 
ECSEEFUNC
(
vi¶ight_c£e
);

82 
ECSEEFUNC
(
lôómp_c£e
);

83 
ECSEEFUNC
(
ö‰¨ed_c£e
);

84 
ECSEEFUNC
(
ñe˘rom_c£e
);

85 
ECSEEFUNC
(
£ismic_c£e
);

86 
ECSEEFUNC
(
ød¨_c£e
);

87 
ECSEEFUNC
(
b≠_c£e
);

88 
ECSEEFUNC
(
blood_c£e
);

90 
	#ETOHITFUNC
(
a
Ë
	`a
 (
MECH
 *, MECH *, 
MAP
 *, , );

	)

91 
	#TOHITFUNC
(
a
,
b
) \

92 
	`a
 (
MECH
 *
m
, MECH *
t
, 
MAP
 *
m≠
, 
f
, 
l
Ë{  (Ë(
b
); }

	)

94 
ETOHITFUNC
(
vi¶ight_tohô
);

95 
ETOHITFUNC
(
lôómp_tohô
);

96 
ETOHITFUNC
(
ö‰¨ed_tohô
);

97 
ETOHITFUNC
(
ñe˘rom_tohô
);

98 
ETOHITFUNC
(
£ismic_tohô
);

99 
ETOHITFUNC
(
ød¨_tohô
);

100 
ETOHITFUNC
(
b≠_tohô
);

101 
ETOHITFUNC
(
blood_tohô
);

103 
	#SENSOR_VIS
 0

	)

104 
	#SENSOR_LA
 1

	)

105 
	#SENSOR_IR
 2

	)

106 
	#SENSOR_EM
 3

	)

107 
	#SENSOR_SE
 4

	)

108 
	#SENSOR_RA
 5

	)

109 
	#SENSOR_BAP
 6

	)

110 
	#SENSOR_BHAP
 7

	)

112 
	#SENSOR_ATTR_NONE
 0

	)

113 
	#SENSOR_ATTR_SEISMIC
 1

	)

115 #ifde‡
_MECH_SENSOR_C


116 
Sís‹Såu˘
 
	g£ns‹s
[] = {

117 {"Vi¶ight", "V", 0, 60, 0, 
vi¶ight_£e
, 
vi¶ight_c£e
,

118 
vi¶ight_tohô
,

119 -1, -1, 0, 1, 
SENSOR_ATTR_NONE
,

123 {"Light-am∂ifiˇti⁄", "L", 0, 60, 0, 
lôómp_£e
, 
lôómp_c£e
,

124 
lôómp_tohô
,

125 0, 1, 0 - 
NS_TECH
, 1, 
SENSOR_ATTR_NONE
,

129 {"In‰¨ed", "I", 1, 15, 0, 
ö‰¨ed_£e
, 
ö‰¨ed_c£e
,

130 
ö‰¨ed_tohô
,

131 -1, -1, 0 - 
NS_TECH
, 1, 
SENSOR_ATTR_NONE
,

135 {"EÀ˘romag√tic", "E", 1, 24, 8, 
ñe˘rom_£e
, 
ñe˘rom_c£e
,

136 
ñe˘rom_tohô
,

137 -1, -1, 0 - 
NS_TECH
, 1, 
SENSOR_ATTR_NONE
,

141 {"Seismic", "S", 1, 8, 4, 
£ismic_£e
, 
£ismic_c£e
, 
£ismic_tohô
, -1,

143 0 - 
NS_TECH
, 1, 
SENSOR_ATTR_SEISMIC
,

147 {"Rad¨", "R", 1, 180, 0, 
ød¨_£e
, 
ød¨_c£e
, 
ød¨_tohô
, -1, -1,

148 
AA_TECH
, 1, 
SENSOR_ATTR_NONE
,

153 {"BógÀ A˘iveProbe", "B", 1, 6, 0, 
b≠_£e
, 
b≠_c£e
, 
b≠_tohô
, -1,

154 -1, 
BEAGLE_PROBE_TECH
, 1, 
SENSOR_ATTR_NONE
, "<=6",

159 {"Bloodhound A˘iveProbe", "H", 1, 8, 0, 
blood_£e
, 
blood_c£e
,

160 
blood_tohô
, -1,

161 -1, 
BLOODHOUND_PROBE_TECH
, 2, 
SENSOR_ATTR_NONE
, "<=8",

166 
	#NUM_SENSORS
 ( (
£ns‹s
Ë/ (£ns‹s[0]))

	)

168 
Sís‹Såu˘
 
£ns‹s
[];

	@btech/mech.stat.h

17 #i‚de‡
MECH_STAT_H


18 
	#MECH_STAT_H


	)

21 
	mrﬁls
[11];

22 
	mhôrﬁls
[11];

23 
	m¸ôrﬁls
[11];

24 
	mtŸrﬁls
;

25 
	mtŸhrﬁls
;

26 
	mtŸ¸ﬁls
;

27 } 
	t°©_ty≥
;

29 #i‚de‡
MECH_STAT_C


30 
°©_ty≥
 
rﬁl°©
;

	@btech/mech.tech.damages.h

17 #i‚de‡
MECH_TECH_DAMAGES_H


18 
	#MECH_TECH_DAMAGES_H


	)

25 
	edamage_ty≥
 {

26 
	mREATTACH
, 
	mREPAIRP
, 
	mREPAIRP_T
, 
	mENHCRIT_MISC
, 
	mENHCRIT_FOCUS
,

27 
	mENHCRIT_CRYSTAL
, 
	mENHCRIT_BARREL
, 
	mENHCRIT_AMMOB
, 
	mENHCRIT_RANGING
,

28 
	mENHCRIT_AMMOM
, 
	mREPAIRG
, 
	mRELOAD
, 
	mFIXARMOR
, 
	mFIXARMOR_R
,

29 
	mFIXINTERNAL
, 
	mDETACH
, 
	mSCRAPP
, 
	mSCRAPG
, 
	mUNLOAD
, 
	mRESEAL
, 
	mREPLACESUIT
,

30 
	mNUM_DAMAGE_TYPES


34 
	#MAX_DAMAGES
 (3 * 
NUM_SECTIONS
 + 2 * NUM_SECTIONS * 
NUM_CRITICALS
)

	)

	@btech/mech.tech.h

17 
	~"c⁄fig.h
"

19 #i‚de‡
MECH_TECH_H


20 
	#MECH_TECH_H


	)

22 
	~"mech.evíts.h
"

25 
	#MAX_TECHTIME
 600

	)

27 
	#TECH_TICK
 60

	)

28 
	#TECH_UNIT
 "möuã"

	)

30 
	#TECH_TICK
 1

	)

31 
	#TECH_UNIT
 "£c⁄d"

	)

35 
	#PARTTYPE_DIFFICULTY
(
a
Ë(1)

	)

36 
	#WEAPTYPE_DIFFICULTY
(
a
Ë((Ë(
	`sqπ
(
MechWóp⁄s
[
	`Wóp⁄2I
◊)].
¸ôiˇls
)*1.5-1.1))

	)

37 
	#REPAIR_DIFFICULTY
 0

	)

38 
	#REPLACE_DIFFICULTY
 1

	)

39 
	#RELOAD_DIFFICULTY
 1

	)

40 
	#FIXARMOR_DIFFICULTY
 1

	)

41 
	#FIXINTERNAL_DIFFICULTY
 2

	)

42 
	#REATTACH_DIFFICULTY
 3

	)

43 
	#REMOVEG_DIFFICULTY
 1

	)

44 
	#REMOVEP_DIFFICULTY
 0

	)

45 
	#REMOVES_DIFFICULTY
 2

	)

46 
	#RESEAL_DIFFICULTY
 0

	)

47 
	#REPLACESUIT_DIFFICULTY
 3

	)

48 
	#ENHCRIT_DIFFICULTY
 0

	)

51 
	#MOUNT_BOMB_TIME
 5

	)

52 
	#UMOUNT_BOMB_TIME
 5

	)

53 
	#REPLACEGUN_TIME
 60

	)

54 
	#REPLACEPART_TIME
 45

	)

55 
	#REPAIRGUN_TIME
 20

	)

56 
	#REPAIRENHCRIT_TIME
 15

	)

57 
	#REPAIRPART_TIME
 15

	)

58 
	#RELOAD_TIME
 10

	)

59 
	#FIXARMOR_TIME
 3

	)

60 
	#FIXINTERNAL_TIME
 9

	)

61 
	#REATTACH_TIME
 240

	)

62 
	#REMOVEP_TIME
 40

	)

63 
	#REMOVEG_TIME
 40

	)

64 
	#REMOVES_TIME
 120

	)

65 
	#RESEAL_TIME
 60

	)

66 
	#REPLACESUIT_TIME
 120

	)

68 
	#TECHCOMMANDH
(
a
) \

69 
	`a
 (
dbªf
 
∂ayî
, * 
d©a
, * 
buf„r
)

	)

70 
	#TECHCOMMANDB
 \

71 
MECH
 *
mech
 = (MECH *Ë
d©a
; \

72 
loc
, 
∑π
, 
t
, 
fuŒ
, 
now
, 
‰om
, 
to
, 
ch™ge
, 
mod
=2, 
isds
=0; \

73 *
c
;

	)

76 
	#TECHCOMMANDC
 \

77 
	`DOCHECK
(!(
	`Tech
(
∂ayî
)),"Insufficient clearanceÅoáccessÅhe command."); \

78 
	`DOCHECK
(!
mech
, "Error has occured inÅechcommand ;Ölease contactá wiz"); \

79 
isds
 = 
	`Dr›Shù
(
	`MechTy≥
(
mech
)); \

80 
	`DOCHECK
(
	`Sèπög
(
mech
Ë&& !
	`Wiz
(
∂ayî
), "The mech's starting up! Please stopÅhe sequence first."); \

81 
	`DOCHECK
(
	`Sèπed
(
mech
Ë&& !
	`Wiz
(
∂ayî
), "The mech's started up ;Ölease shut it down first."); \

82 
	`DOCHECK
(!
isds
 && !
	`MechSèŒ
(
mech
Ë&& !
	`Wiz
(
∂ayî
), "Thê'mech i¢'àöáÑïaú sèŒ!");

	)

84 
	#TECHCOMMANDD
 \

85 
	`DOCHECK
(!(
	`Tech
(
∂ayî
)),"Insufficient clearanceÅoáccessÅhe command."); \

86 
	`DOCHECK
(!
mech
, "Error has occured inÅechcommand ;Ölease contactá wiz"); \

87 
isds
 = 
	`Dr›Shù
(
	`MechTy≥
(
mech
)); \

88 
	`DOCHECK
(
	`Sèπög
(
mech
Ë&& !
	`Wiz
(
∂ayî
), "The mech's starting up! Please stopÅhe sequence first."); \

89 
	`DOCHECK
(
	`Sèπed
(
mech
Ë&& !
	`Wiz
(
∂ayî
), "The mech's started up ;Ölease shut it down first."); \

90 
	`DOCHECK
(
bãchc⁄f
.
bãch_limôedª∑ús
 && !
isds
 && !
	`MechSèŒ
(
mech
Ë&& !
	`Wiz
(
∂ayî
), "Thê'mech i¢'àöáÑïaú sèŒ!");

	)

92 
	#ETECHCOMMAND
(
a
) \

93 
	`a
 (
dbªf
 
∂ayî
, *
d©a
, *
buf„r
)

	)

95 
	#LOCMAX
 16

	)

96 
	#POSMAX
 16

	)

97 
	#EXTMAX
 256

	)

98 
	#PLAYERPOS
 (
LOCMAX
*
POSMAX
*
EXTMAX
)

	)

100 
	#TECHEVENT
(
a
) \

101 
	`a
 (
EVENT
 *
e
) \

102 { 
MECH
 *
mech
 = (MECH *Ë
e
->
d©a
; \

103 
órg
 = (Ë(
e
->
d©a2
Ë% 
PLAYERPOS
;

	)

105 
	#ETECHEVENT
(
a
) \

106 
	`a
 (
EVENT
 *
e
)

	)

108 
	#START
(
a
Ë
	`nŸify
(
∂ayî
,á)

	)

109 
	#FIXEVENT
(
time
,
d1
,
d2
,
fu
,
ty≥
) \

110 
	`muxevít_add
(
	`MAX
(1, 
time
), 0, 
ty≥
, 
fu
, (*Ë
d1
, (*Ë((
d2
Ë+ 
∂ayî
 * 
PLAYERPOS
))

	)

111 
	#REPAIREVENT
(
time
,
d1
,
d2
,
fu
,
ty≥
) \

112 
	`FIXEVENT
((
time
)*
TECH_TICK
,
d1
,
d2
,
fu
,
ty≥
)

	)

113 
	#STARTREPAIR
(
time
,
d1
,
d2
,
fu
,
ty≥
) \

114 
	`FIXEVENT
(
	`ãch_addãchtime
(
∂ayî
, (
time
 * 
mod
Ë/ 2),
d1
,
d2
,
fu
,
ty≥
)

	)

115 
	#STARTIREPAIR
(
time
,
d1
,
d2
,
fu
,
ty≥
,
amou¡
) \

116 
	`FIXEVENT
((
	`ãch_addãchtime
(
∂ayî
, (
time
 * 
mod
Ë/ 2Ë- (
amou¡
 > 0 ? 
TECH_TICK
 * (timê* (amou¡ - 1Ë/ (amou¡)Ë: 0)), 
d1
, 
d2
, 
fu
, 
ty≥
)

	)

117 
	#FAKEREPAIR
(
time
,
ty≥
,
d1
,
d2
) \

118 
	`FIXEVENT
(
	`ãch_addãchtime
(
∂ayî
, (
time
 * 
mod
Ë/ 2),
d1
,
d2
,
vîy_Áke_func
,
ty≥
)

	)

121 
	#DOTECH_LOCPOS
(
diff
,
Êunkfunc
,
succfunc
,
ªsour˚func
,
time
,
d1
,
d2
,
fu
,
ty≥
,
msg
,
isgun
)\

122 i‡(
	`ªsour˚func
(
∂ayî
,
mech
,
loc
,
∑π
)>=0Ë{ 
	`START
(
msg
); \

123 i‡((!
isgun
 && 
	`ãch_rﬁl
(
∂ayî
, 
mech
, 
diff
) < 0) || \

124 (
isgun
 && 
	`ãch_wóp⁄_rﬁl
(
∂ayî
, 
mech
, 
diff
Ë< 0)Ë{ 
mod
 = 3; \

125 i‡(
	`Êunkfunc
(
∂ayî
,
mech
,
loc
,
∑π
)<0Ë{ 
	`FAKEREPAIR
(
time
,
ty≥
,
d1
,
d2
); ;}} \

127 { i‡(
	`succfunc
(
∂ayî
,
mech
,
loc
,
∑π
)<0) ; } \

128 
	`STARTREPAIR
(
time
,
d1
,
d2
,
fu
,
ty≥
); }

	)

131 
	#DOTECH_LOCPOS_VAL
(
diff
,
Êunkfunc
,
succfunc
,
ªsour˚func
,
amo
,
time
,
d1
,
d2
,
fu
,
ty≥
,
msg
)\

132 i‡(
	`ªsour˚func
(
∂ayî
,
mech
,
loc
,
∑π
,
amo
)<0) ; \

133 
	`START
(
msg
); \

134 i‡(
	`ãch_rﬁl
(
∂ayî
, 
mech
, 
diff
Ë< 0Ë{ 
mod
 = 3; \

135 i‡(
	`Êunkfunc
(
∂ayî
,
mech
,
loc
,
∑π
,
amo
)<0Ë{
	`FAKEREPAIR
(
time
,
ty≥
,
d1
,
d2
);;}}\

137 { i‡(
	`succfunc
(
∂ayî
,
mech
,
loc
,
∑π
,
amo
)<0) ; } \

138 
	`STARTREPAIR
(
time
,
d1
,
d2
,
fu
,
ty≥
)

	)

142 
	#DOTECH_LOC_VAL_S
(
diff
,
Êunkfunc
,
succfunc
,
ªsour˚func
,
amo
,
time
,
ty≥
,
d1
,
d2
,
msg
) \

143 i‡(
	`ªsour˚func
(
∂ayî
,
mech
,
loc
,
amo
)<0) ; \

144 
	`START
(
msg
); \

145 i‡(
	`ãch_rﬁl
(
∂ayî
, 
mech
, 
diff
Ë< 0Ë{ 
mod
 = 3; \

146 i‡(
	`Êunkfunc
(
∂ayî
,
mech
,
loc
,
amo
)<0Ë{ 
	`FAKEREPAIR
(
time
,
ty≥
,
d1
,
d2
); ; }} \

148 { i‡(
	`succfunc
(
∂ayî
,
mech
,
loc
,
amo
)<0Ë; }

	)

150 
	#DOTECH_LOC_VAL
(
diff
,
Êunkfunc
,
succfunc
,
ªsour˚func
,
amo
,
time
,
d1
,
d2
,
fu
,
ty≥
,
msg
) \

151 i‡(
	`ªsour˚func
(
∂ayî
,
mech
,
loc
,
amo
)<0) ; \

152 
	`START
(
msg
); \

153 i‡(
	`ãch_rﬁl
(
∂ayî
, 
mech
, 
diff
Ë< 0Ë{ 
mod
 = 3; \

154 i‡(
	`Êunkfunc
(
∂ayî
,
mech
,
loc
,
amo
)<0Ë{ 
	`FAKEREPAIR
(
time
,
ty≥
,
d1
,
d2
); ; }} \

156 { i‡(
	`succfunc
(
∂ayî
,
mech
,
loc
,
amo
)<0) ; } \

157 
	`STARTREPAIR
(
time
,
d1
,
d2
,
fu
,
ty≥
)

	)

160 
	#DOTECH_LOC
(
diff
,
Êunkfunc
,
succfunc
,
ªsour˚func
,
time
,
d1
,
d2
,
fu
,
ty≥
,
msg
) \

161 i‡(
	`ªsour˚func
(
∂ayî
,
mech
,
loc
)<0) ; \

162 
	`START
(
msg
); \

163 i‡(
	`ãch_rﬁl
(
∂ayî
, 
mech
, 
diff
Ë< 0Ë{ 
mod
 = 3; \

164 i‡(
	`Êunkfunc
(
∂ayî
,
mech
,
loc
)<0Ë{ 
	`FAKEREPAIR
(
time
,
ty≥
,
d1
,
d2
);; }} \

166 { i‡(
	`succfunc
(
∂ayî
,
mech
,
loc
)<0) ; } \

167 
	`STARTREPAIR
(
time
,
d1
,
d2
,
fu
,
ty≥
)

	)

169 
	#TFUNC_LOCPOS_VAL
(
«me
) \

170 
	`«me
 (
dbªf
 
∂ayî
,
MECH
 *
mech
,
loc
,
∑π
, * 
vÆ
)

	)

171 
	#TFUNC_LOC_VAL
(
«me
) \

172 
	`«me
 (
dbªf
 
∂ayî
, 
MECH
 *
mech
, 
loc
, * 
vÆ
)

	)

173 
	#TFUNC_LOCPOS
(
«me
) \

174 
	`«me
 (
dbªf
 
∂ayî
, 
MECH
 *
mech
, 
loc
, 
∑π
)

	)

175 
	#TFUNC_LOC
(
«me
) \

176 
	`«me
 (
dbªf
 
∂ayî
, 
MECH
 *
mech
, 
loc
)

	)

177 
	#TFUNC_LOC_RESEAL
(
«me
Ë
	`«me
 (
dbªf
 
∂ayî
, 
MECH
 *
mech
, 
loc
)

	)

178 
	#NFUNC
(
a
Ë®{  0; }

	)

182 
ETECHCOMMAND
(
ãch_ªmovegun
);

183 
ETECHCOMMAND
(
ãch_ªmovï¨t
);

184 
ETECHCOMMAND
(
ãch_ªmove£˘i⁄
);

185 
ETECHCOMMAND
(
ãch_ª∂a˚gun
);

186 
ETECHCOMMAND
(
ãch_ª∑úgun
);

187 
ETECHCOMMAND
(
ãch_fixíh¸ô
);

188 
ETECHCOMMAND
(
ãch_ª∂a˚∑π
);

189 
ETECHCOMMAND
(
ãch_ª∑ú∑π
);

190 
ETECHCOMMAND
(
ãch_toggÀty≥
);

191 
ETECHCOMMAND
(
ãch_ªlﬂd
);

192 
ETECHCOMMAND
(
ãch_u∆ﬂd
);

193 
ETECHCOMMAND
(
ãch_fix¨m‹
);

194 
ETECHCOMMAND
(
ãch_fixöã∫Æ
);

195 
ETECHCOMMAND
(
ãch_ª©èch
);

196 
ETECHCOMMAND
(
ãch_check°©us
);

197 
ETECHCOMMAND
(
ãch_ª£Æ
);

198 
ETECHCOMMAND
(
ãch_ª∂a˚suô
);

199 
ECMD
(
show_mechs_damage
);

200 
ECMD
(
ãch_fix
);

202 
	#PACK_LOCPOS
(
loc
,
pos
Ë(÷ocË+ (pos)*
LOCMAX
)

	)

203 
	#PACK_LOCPOS_E
(
loc
,
pos
,
exåa
Ë(÷ocË+ (pos)*
LOCMAX
 + (exåa)*LOCMAX*
POSMAX
)

	)

205 
	#UNPACK_LOCPOS
(
v¨
,
loc
,
pos
Ëlo¯(v¨ % 
LOCMAX
);po†(v¨ / LOCMAXË% 
POSMAX


	)

206 
	#UNPACK_LOCPOS_E
(
v¨
,
loc
,
pos
,
exåa
Ë
	`UNPACK_LOCPOS
(v¨,loc,pos);exå®v¨ / (
LOCMAX
 * 
POSMAX
)

	)

208 
	#GøbP¨tsM
(
m
,
a
,
b
,
c
Ë
	`ec⁄_ch™ge_ôems
(
	`IsDS
(mË? 
	`AîoBay
(m,0Ë: 
	`Loˇti⁄
(m->
mynum
),a,b,0-c)

	)

209 
	#P¨tAvaûM
(
m
,
a
,
b
,
c
Ë(
	`ec⁄_föd_ôems
(
	`IsDS
(mË? 
	`AîoBay
(m,0Ë: 
	`Loˇti⁄
(m->
mynum
),a,b)>=c)

	)

210 
	#AddP¨tsM
(
m
,
l
,
a
,
b
,
c
Ë
	`ec⁄_ch™ge_ôems
(
	`IsDS
(mË? 
	`AîoBay
(m,0Ë: 
	`Loˇti⁄
(m->
mynum
), 
	`Æüs_∑π
(m,á,ÜË, b, c)

	)

211 
	#AVCHECKM
(
m
,
a
,
b
,
c
Ë
	`DOCHECK1
(!
	`P¨tAvaûM
(m,a,b,c), 
	`çrötf
("NŸÉnough %s†ö st‹e! YouÇìdÅÿhavê©Àa° %d.",
	`∑π_«me
◊,b),c));

	)

213 
ETECHEVENT
(
muxevít_tickmech_ª©èch
);

214 
ETECHEVENT
(
muxevít_tickmech_ª£Æ
);

215 
ETECHEVENT
(
muxevít_tickmech_ªlﬂd
);

216 
ETECHEVENT
(
muxevít_tickmech_ªmovegun
);

217 
ETECHEVENT
(
muxevít_tickmech_ªmovï¨t
);

218 
ETECHEVENT
(
muxevít_tickmech_ªmove£˘i⁄
);

219 
ETECHEVENT
(
muxevít_tickmech_ª∑ú¨m‹
);

220 
ETECHEVENT
(
muxevít_tickmech_ª∑úgun
);

221 
ETECHEVENT
(
muxevít_tickmech_ª∑úíh¸ô
);

222 
ETECHEVENT
(
muxevít_tickmech_ª∑úöã∫Æ
);

223 
ETECHEVENT
(
muxevít_tickmech_ª∑ú∑π
);

224 
ETECHEVENT
(
muxevít_tickmech_ª∂a˚gun
);

225 
ETECHEVENT
(
muxevít_tickmech_mou¡bomb
);

226 
ETECHEVENT
(
muxevít_tickmech_umou¡bomb
);

227 
ETECHEVENT
(
muxevít_tickmech_ª∂a˚suô
);

228 
ETECHEVENT
(
vîy_Áke_func
);

230 
lﬂdª∑ús
(
FILE
 * 
f
);

231 
ßvîïaús
(
FILE
 * 
f
);

232 
vÆid_ammo_mode
(
MECH
 * 
mech
, 
loc
, 
∑π
, 
Àt
);

	@btech/mech.tic.h

17 #i‚de‡
MECH_TIC_H


18 
	#MECH_TIC_H


	)

21 
˛óπic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
addtic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
dñtic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
fúëic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
li°tic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
mech_˛óπic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
mech_addtic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
mech_dñtic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
mech_fúëic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
mech_li°tic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
hót_cutoff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/mechrep.h

16 
	~"mech.h
"

18 #i‚de‡
_MECHREP_H


19 
	#_MECHREP_H


	)

22 
	smechªp_d©a
 {

23 
dbªf
 
	mmynum
;

24 
dbªf
 
	mcuºít_èrgë
;

28 
ECMD
(
mechªp_Radd•ecül
);

29 
ECMD
(
mechªp_Raddãch
);

30 
ECMD
(
mechªp_Raddö·ech
);

31 
ECMD
(
mechªp_Raddwóp
);

32 
ECMD
(
mechªp_Rdñãch
);

33 
ECMD
(
mechªp_Rdñö·ech
);

34 
ECMD
(
mechªp_Rdi•œy£˘i⁄
);

35 
ECMD
(
mechªp_Rlﬂd√w
);

36 
ECMD
(
mechªp_Rlﬂd√w2
);

37 
ECMD
(
mechªp_Rªlﬂd
);

38 
ECMD
(
mechªp_Rª∑ú
);

39 
ECMD
(
mechªp_Rª£t¸ôs
);

40 
ECMD
(
mechªp_Rª°‹e
);

41 
ECMD
(
mechªp_Rßvëemp
);

42 
ECMD
(
mechªp_Rßvëemp2
);

43 
ECMD
(
mechªp_R£èrm‹
);

44 
ECMD
(
mechªp_R£thótsöks
);

45 
ECMD
(
mechªp_R£tjump•ìd
);

46 
ECMD
(
mechªp_R£ér§™ge
);

47 
ECMD
(
mechªp_R£tmove
);

48 
ECMD
(
mechªp_R£åadio
);

49 
ECMD
(
mechªp_R£åadi‹™ge
);

50 
ECMD
(
mechªp_R£tsˇƒ™ge
);

51 
ECMD
(
mechªp_R£t•ìd
);

52 
ECMD
(
mechªp_R£âa¸™ge
);

53 
ECMD
(
mechªp_R£â¨gë
);

54 
ECMD
(
mechªp_R£âech
);

55 
ECMD
(
mechªp_R£â⁄s
);

56 
ECMD
(
mechªp_R£ây≥
);

57 
ECMD
(
mechªp_Rshowãch
);

60 
√w‰ìmechªp
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

	@btech/mine.h

17 #i‚de‡
MINE_H


18 
	#MINE_H


	)

20 
	#MINE_LOW
 1

	)

21 
	#MINE_HIGH
 5

	)

22 
	#MINE_STANDARD
 1

	)

23 
	#MINE_INFERNO
 2

	)

24 
	#MINE_COMMAND
 3

	)

25 
	#MINE_VIBRA
 4

	)

26 
	#MINE_TRIGGER
 5

	)

28 
	#MINE_STRIGGER
 6

	)

29 
	#VIBRO
(
a
Ë◊ =
MINE_VIBRA
 ||á =
MINE_TRIGGER
 ||á =
MINE_STRIGGER
)

	)

	@btech/mux_tree.h

15 #i‚de‡
MUX_TREE_H


16 
	#MUX_TREE_H


	)

18 
	~"åì.h
"

20 
	tmuxkey_t
;

21 
	tdty≥_t
;

22 
	tdsize_t
;

24 
	#NodeKey
(
n
Ën->
key


	)

25 
	#NodeD©a
(
n
Ën->
d©a


	)

26 
	#NodeSize
(
n
Ën->
size


	)

27 
	#NodeTy≥
(
n
Ën->
ty≥


	)

29 
	srbtc_node_ty≥
 {

30 
muxkey_t
 
	mkey
;

31 
dty≥_t
 
	mty≥
;

32 
dsize_t
 
	msize
;

33 *
	md©a
;

34 } 
	tNode
;

36 
åì
 *
	tTªe
;

38 
	~"p.mux_åì.h
"

40 
Node
 *
FödNode
(
Tªe
 
åì
, 
muxkey_t
 
key
);

	@btech/muxevent.h

15 #i‚de‡
MUXEVENT_H


16 
	#MUXEVENT_H


	)

24 
	#LOOKAHEAD_STACK_SIZE
 70

	)

29 
	#FLAG_FREE_DATA
 1

	)

30 
	#FLAG_FREE_DATA2
 2

	)

31 
	#FLAG_ZOMBIE
 4

	)

37 
	#FLAG_IMPORTANT
 16

	)

50 
	smy_evít_ty≥
 {

51 
	mÊags
;

52 (*
	mfun˘i⁄
Ë(
	mmy_evít_ty≥
 *);

53 *
	md©a
;

54 *
	md©a2
;

55 
	mtick
;

56 
	mty≥
;

57 #ifde‡
EVENT_DEBUG


58 
	mtick_scheduÀd
;

59 
	mcou¡_0_scheduÀd_©
;

60 
	mcou¡_1_scheduÀd_©
;

61 
	mcou¡_0_scheduÀd_to
;

62 
	mcou¡_1_scheduÀd_to
;

64 
my_evít_ty≥
 *
	m√xt
;

65 
my_evít_ty≥
 *
	m√xt_ö_maö
;

66 
my_evít_ty≥
 *
	m¥ev_ö_maö
;

67 
my_evít_ty≥
 *
	m¥ev_ö_ty≥
;

68 
my_evít_ty≥
 *
	m√xt_ö_ty≥
;

69 } 
	tEVENT
;

72 
muxevít_tick
;

73 
evíts_scheduÀd
;

74 
evíts_execuãd
;

75 
evíts_zombõs
;

77 
	~"p.evít.h
"

82 
	#muxevít_add_sim∂e_¨g
(
time
,
func
,
d©a
Ë
	`muxevít_add
—ime,0,0,func,d©a, 
NULL
)

	)

83 
	#muxevít_add_sim∂e_nﬂrg
(
time
,
func
Ë
	`muxevít_add
—ime,0,0,func,
NULL
, NULL)

	)

90 
	#REMOVE_FROM_LIST
(
a
,
c
,
b
Ëi‡◊ =b )á = b->c; { 
EVENT
 *
t
; \

91 
t
=
a
;t->
c
 !
b
;tÒ->c);Å->¯b->c; }

	)

92 
	#REMOVE_FROM_BIDIR_LIST
(
a
,
c
,
d
,
b
) if (b->c) b->c->d = b->d; \

93 i‡(
b
->
d
Ëb->d->
c
 = b->c; i‡(
a
==bË{á=b->d; i‡◊Ëa->c=
NULL
; }

	)

95 
	#ADD_TO_LIST_HEAD
(
a
,
c
,
b
Ëb->¯®;á = 
	)
b

96 
	#ADD_TO_BIDIR_LIST_HEAD
(
a
,
c
,
d
,
b
) b->d=a ; if (a)á->c = b ;á=b ; \

97 
b
->
c
=
NULL


	)

103 #ifde‡
DEBUG


104 
	#debug
(
a
...Ë
	`¥ötf
(##a)

	)

106 
	#debug
(
a
...)

	)

109 
muxevít_add
(
time
, 
Êags
, 
ty≥
, (*
func
Ë(
EVENT
 *),

110 *
d©a
, *
d©a2
);

111 
	`muxevít_gŸhru_ty≥_d©a
(
ty≥
, *
d©a
, (*
func
Ë(
EVENT
 *));

112 
	`evít_gŸhru_ty≥
(
ty≥
, (*
func
Ë(
EVENT
 *));

	@btech/mycool.h

15 #i‚de‡
MYCOOL_H


16 
	#MYCOOL_H


	)

18 
	#addmíu
(
°r
) \

19 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
°r
, 
CM_TWO
)

	)

20 
	#addmíu4
(
°r
) \

21 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
°r
, 
CM_FOUR
)

	)

22 
	#addlöe
() \

23 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, 
NULL
, 
CM_ONE
|
CM_LINE
)

	)

24 
	#addem±y
() \

25 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, " ", 
CM_ONE
)

	)

26 
	#addnuŒ
() \

27 
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, " ", 
CM_TWO
)

	)

29 
	#vsi
(
°r
Ë
	`Cª©eMíuE¡ry_VSim∂e
(&
c
, så)

	)

30 
	#sim
(
°r
,
Êag
Ë
	`Cª©eMíuE¡ry_Sim∂e
(&
c
, så, fœg)

	)

31 
	#˚¡
(
°r
Ë
	`sim
(°r,
CM_ONE
|
CM_CENTER
)

	)

	@btech/myfifo.h

15 #i‚de‡
MYFIFO_H


16 
	#MYFIFO_H


	)

18 
	smyfifo_íåy_°ru˘
 {

19 *
	md©a
;

20 
myfifo_íåy_°ru˘
 *
	m√xt
;

21 
myfifo_íåy_°ru˘
 *
	m¥ev
;

22 } 
	tmyfifo_e
;

24 
	smyfifo_°ru˘
 {

25 
myfifo_e
 *
	mfú°
;

26 
myfifo_e
 *
	mœ°
;

27 
	mcou¡
;

28 } 
	tmyfifo
;

31 
myfifo_Àngth
(
myfifo
 ** 
foo
);

32 *
myfifo_p›
(
myfifo
 ** 
foo
);

33 
myfifo_push
(
myfifo
 ** 
foo
, *
d©a
);

34 
myfifo_åav
(
myfifo
 ** 
foo
, (*
func
) ());

35 
myfifo_åav_r
(
myfifo
 ** 
foo
, (*
func
) ());

	@btech/mymath.h

15 #i‚de‡
MYMATH_H


16 
	#MYMATH_H


	)

18 
	~<m©h.h
>

20 #ifde‡
fcos


21 #unde‡
fcos


23 
	#fcos
 
cos


	)

24 #ifde‡
fsö


25 #unde‡
fsö


27 
	#fsö
 
sö


	)

28 #ifde‡
Áèn


29 #unde‡
Áèn


31 
	#Áèn
 
©™


	)

32 #ifde‡
MAX


33 #unde‡
MAX


35 #ifde‡
MIN


36 #unde‡
MIN


38 
	#TWOPIOVER360
 0.0174533

	)

	@btech/p.aero.bomb.h

12 #i‚de‡
_P_AERO_BOMB_H


13 
	#_P_AERO_BOMB_H


	)

16 
De°royBomb
(
MECH
 * 
mech
, 
loc
);

17 
BombWeight
(
i
);

18 *
bomb_«me
(
i
);

19 
bomb_li°
(
MECH
 * 
mech
, 
∂ayî
);

20 
ˇlc_de°
(
MECH
 * 
mech
, *
x
, *
y
);

21 
bomb_aim
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
);

22 
bomb_hô_hexes
(
MAP
 * 
m≠
, 
x
, 
y
, 
hônb
, 
is˛u°î
,

23 
aff_d
, 
aff_h
, *
tomsg
, *
Ÿmsg
, *
tomsg1
,

24 *
Ÿmsg1
);

25 
simuœã_Êight
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, *
x
, *
y
, 
t
);

26 
bomb_dr›
(
MECH
 * 
mech
, 
∂ayî
, 
bn
);

27 
mech_bomb
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.aero.move.h

12 #i‚de‡
_P_AERO_MOVE_H


13 
	#_P_AERO_MOVE_H


	)

16 
´ro_èkeoff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
DS_Bœ°NórbyMechsAndTªes
(
MECH
 * 
mech
, *
hômsg
, *
hômsg1
,

18 *
√¨hômsg
, *
√¨hômsg1
, *
åìhômsg
, 
damage
);

19 
´ro_œnd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
´ro_C⁄åﬁEf„˘
(
MECH
 * 
mech
);

21 
ds_BridgeHô
(
MECH
 * 
mech
);

22 
´ro_Upd©eHódög
(
MECH
 * 
mech
);

23 
my_sqπ
(
x
, 
y
);

24 
my_sqπm
(
x
, 
y
);

25 
´ro_Upd©eS≥ed
(
MECH
 * 
mech
);

26 
FuñCheck
(
MECH
 * 
mech
);

27 
´ro_upd©e
(
MECH
 * 
mech
);

28 
´ro_thru°
(
dbªf
 
∂ayî
, *
d©a
, *
¨g
);

29 
´ro_vhódög
(
dbªf
 
∂ayî
, *
d©a
, *
¨g
, 
Êag
);

30 
´ro_˛imb
(
dbªf
 
∂ayî
, *
d©a
, *
¨g
);

31 
´ro_dive
(
dbªf
 
∂ayî
, *
d©a
, *
¨g
);

32 
Im¥›îLZ
(
MECH
 * 
mech
, 
x
, 
y
);

33 
DS_L™dW¨nög
(
MECH
 * 
mech
, 
£rious
);

34 
´ro_checklz
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.ai.h

12 #i‚de‡
_P_AI_H


13 
	#_P_AI_H


	)

16 
£ndAIM
(
AUTO
 * 
a
, 
MECH
 * 
m
, *
msg
);

17 *
AI_Info
(
MECH
 * 
m
, 
AUTO
 * 
a
);

18 
gëE√mõs
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
ª£t
);

19 
gëFrõnds
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
ª£t
);

20 
ai_∑th_sc‹e
(
MECH
 * 
m
, 
MAP
 * 
m≠
, 
AUTO
 * 
a
, 
›ts
[][2], 
num_o
,

21 
gŸíemy
, 
dx
, 
dy
, 
dñx
, 
dñy
, *
æ
,

22 *
bd
, *
bsc‹e
);

23 
ai_max_•ìd
(
MECH
 * 
m
, 
AUTO
 * 
a
);

24 
ai_›p⁄íts
(
AUTO
 * 
a
, 
MECH
 * 
m
);

25 
ai_run_•ìd
(
MECH
 * 
mech
, 
AUTO
 * 
a
);

26 
ai_°›
(
MECH
 * 
mech
, 
AUTO
 * 
a
);

28 
ai_£t_•ìd
(
MECH
 * 
mech
, 
AUTO
 * 
a
, 
s
);

30 
ai_£t_•ìd
(
MECH
 * 
mech
, 
AUTO
 * 
a
, 
s
);

31 
ai_£t_hódög
(
MECH
 * 
mech
, 
AUTO
 * 
a
, 
dú
);

32 
ai_adju°_move
(
AUTO
 * 
a
, 
MECH
 * 
m
, *
ãxt
, 
hmod
, 
smod
,

33 
b_sc‹e
);

34 
ai_check_∑th
(
MECH
 * 
m
, 
AUTO
 * 
a
, 
dx
, 
dy
, 
dñx
,

35 
dñy
);

36 
ai_öô
(
AUTO
 * 
a
, 
MECH
 * 
m
);

37 
mech_¢ùe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.artillery.h

12 #i‚de‡
_P_ARTILLERY_H


13 
	#_P_ARTILLERY_H


	)

16 
¨tûÀry_round_Êight_time
(
fx
, 
fy
, 
tx
, 
ty
);

17 
¨tûÀry_shoŸ
(
MECH
 * 
mech
, 
èrgx
, 
èrgy
, 
wödex
,

18 
wmode
, 
ishô
);

19 
bœ°_hô_hexf
(
MAP
 * 
m≠
, 
dam
, 
sögÀhôsize
, 
hótdam
,

20 
fx
, 
fy
, 
tfx
, 
tfy
, *
tomsg
, *
Ÿmsg
,

21 
èbÀ
, 
ß„up
, 
ß„down
, 
isundîw©î
);

22 
bœ°_hô_hex
(
MAP
 * 
m≠
, 
dam
, 
sögÀhôsize
, 
hótdam
,

23 
fx
, 
fy
, 
tx
, 
ty
, *
tomsg
, *
Ÿmsg
, 
èbÀ
,

24 
ß„up
, 
ß„down
, 
isundîw©î
);

25 
bœ°_hô_hexesf
(
MAP
 * 
m≠
, 
dam
, 
sögÀhôsize
, 
hótdam
,

26 
fx
, 
fy
, 
·x
, 
·y
, *
tomsg
, *
Ÿmsg
,

27 *
tomsg1
, *
Ÿmsg1
, 
èbÀ
, 
ß„up
, 
ß„down
,

28 
isundîw©î
, 
d⁄eighb‹s
);

29 
bœ°_hô_hexes
(
MAP
 * 
m≠
, 
dam
, 
sögÀhôsize
, 
hótdam
,

30 
tx
, 
ty
, *
tomsg
, *
Ÿmsg
, *
tomsg1
, *
Ÿmsg1
,

31 
èbÀ
, 
ß„up
, 
ß„down
, 
isundîw©î
,

32 
d⁄eighb‹s
);

33 
¨tûÀry_FrõndlyAdju°mít
(
dbªf
 
mechnum
, 
MAP
 * 
m≠
, 
x
, 
y
);

	@btech/p.autogun.h

12 #i‚de‡
_P_AUTOGUN_H


13 
	#_P_AUTOGUN_H


	)

16 
auto_gun_£ns‹_evít
(
EVENT
 * 
e
);

17 
auto_gun_evít
(
EVENT
 * 
e
);

18 
SórchLightInR™ge
(
MECH
 * 
mech
, 
MAP
 *
m≠
);

19 
PªfVisSís
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
¶ôe
, MECH * 
èrgë
);

20 
AvîageW≤R™ge
(
MECH
 * 
mech
);

	@btech/p.autopilot.h

12 #i‚de‡
_P_AUTOPILOT_H


13 
	#_P_AUTOPILOT_H


	)

16 
gøduÆly_lﬂd
(
MECH
 * 
mech
, 
loc
, 
≥r˚¡
);

17 
aut›ûŸ_lﬂd_ˇrgo
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
≥r˚¡
);

18 
auto_com_evít
(
EVENT
 * 
e
);

19 
figuª_out_ønge_™d_bórög
(
MECH
 * 
mech
, 
tx
, 
ty
,

20 *
ønge
, *
bórög
);

21 
auto_gŸo_evít
(
EVENT
 * 
e
);

22 
auto_dumbgŸo_evít
(
EVENT
 * 
e
);

23 
auto_fﬁlow_evít
(
EVENT
 * 
e
);

24 
auto_dumbfﬁlow_evít
(
EVENT
 * 
e
);

25 
auto_Àave_evít
(
EVENT
 * 
e
);

26 
√waut›ûŸ
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

27 
auto_íãr_evít
(
EVENT
 * 
e
);

28 
auto_rﬂm_evít
(
EVENT
 *
e
);

29 
CÆAutoM≠ödex
(
MECH
 * 
mech
);

	@btech/p.autopilot_command.h

12 #i‚de‡
_P_AUTOPILOT_COMMAND_H


13 
	#_P_AUTOPILOT_COMMAND_H


	)

16 
auto_∑r£_comm™d_sub
(
AUTO
 * 
a
, 
MECH
 * 
mech
, *
buf„r
,

17 ***
g¨gs
, *
¨gc_n
);

18 
auto_ª∂y_evít
(
EVENT
 * 
e
);

19 
auto_ª∂y
(
MECH
 * 
mech
, *
buf
);

20 
auto_ª∂yA
(
MECH
 * 
mech
, *
buf
);

21 
auto_∑r£_comm™d
(
AUTO
 * 
a
, 
MECH
 * 
mech
, 
chn
, *
buf„r
);

	@btech/p.autopilot_commands.h

12 #i‚de‡
_P_AUTOPILOT_COMMANDS_H


13 
	#_P_AUTOPILOT_COMMANDS_H


	)

16 
auto_vÆid_¥oglöe
(
AUTO
 * 
a
, 
p
);

17 
auto_dñcomm™d
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
auto_jump
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
auto_addcomm™d
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
auto_li°comm™ds
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
AutoPûŸOn
(
AUTO
 * 
a
);

22 
St›AutoPûŸ
(
AUTO
 * 
a
);

23 
ai_£t_comtôÀ
(
AUTO
 * 
a
, 
MECH
 * 
mech
);

24 
auto_ígage
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
auto_di£ngage
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.bsuit.h

12 #i‚de‡
_P_BSUIT_H


13 
	#_P_BSUIT_H


	)

16 *
GëBSuôName
(
MECH
 * 
mech
);

17 *
GëLCa£BSuôName
(
MECH
 * 
mech
);

18 
SèπBSuôRecy˛e
(
MECH
 * 
mech
, 
time
);

19 
St›Sw¨mög
(
MECH
 * 
mech
, 
öã¡i⁄Æ
);

20 
Cou¡Sw¨mîs
(
MECH
 * 
mech
);

21 
MECH
 *
födSw¨mîs
(MECH * 
mech
);

22 
St›BSuôSw¨mîs
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
öã¡i⁄Æ
);

23 
IsMechSw¨med
(
MECH
 * 
mech
);

24 
IsMechMou¡ed
(
MECH
 * 
mech
);

25 
BSuôMúr‹Sw¨medT¨gë
(
MAP
 * 
m≠
, 
MECH
 * 
mech
);

26 
doBSuôComm⁄Checks
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
);

27 
Cou¡BSuôMembîs
(
MECH
 * 
mech
);

28 
FödBSuôT¨gë
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, MECH ** 
èrgë
,

29 *
buf„r
);

30 
doJëtis⁄Checks
(
MECH
 * 
mech
);

31 
bsuô_sw¨m
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
bsuô_©èckÀg
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

33 
bsuô_hide
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
Jëtis⁄Packs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.btech.h

12 #i‚de‡
_P_BTECH_H


13 
	#_P_BTECH_H


	)

16 
li°_fhash°©s
(
dbªf
 
∂ayî
);

17 
do_show
(
dbªf
 
∂ayî
, dbª‡
ˇu£
, 
key
, *
¨g1
, *
¨g2
);

	@btech/p.btechstats.h

12 
	~"c⁄fig.h
"

14 #i‚de‡
_P_BTECHSTATS_H


15 
	#_P_BTECHSTATS_H


	)

18 *
sûly_gë_u±ime_to_°rög
(
i
);

19 
li°_ch¨vÆue°uff
(
dbªf
 
∂ayî
, 
Êag
);

20 
ch¨_gëvÆuecode
(*
«me
);

21 
ch¨_rﬁlßvög
();

22 
ch¨_rﬁlunskûÀd
();

23 
ch¨_rﬁlskûÀd
();

24 
ch¨_rﬁld6
(
num
);

25 
ch¨_gëvÆue
(
dbªf
 
∂ayî
, *
«me
);

26 
ch¨_£tvÆue
(
dbªf
 
∂ayî
, *
«me
, 
vÆue
);

27 
ch¨_gëskû…¨gëbycode
(
dbªf
 
∂ayî
, 
code
, 
modifõr
);

28 
ch¨_gëskû…¨gë
(
dbªf
 
∂ayî
, *
«me
, 
modifõr
);

29 
ch¨_gëxpbycode
(
dbªf
 
∂ayî
, 
code
);

30 
ch¨_gaöxpbycode
(
dbªf
 
∂ayî
, 
code
, 
amou¡
);

31 
ch¨_gaöxp
(
dbªf
 
∂ayî
, *
skûl
, 
amou¡
);

32 
ch¨_gëskûlsuc˚ss
(
dbªf
 
∂ayî
, *
«me
, 
modifõr
, 
loud
);

33 
ch¨_gëskûlm¨gsucc
(
dbªf
 
∂ayî
, *
«me
, 
modifõr
);

34 
ch¨_gë›po£dskûl
(
dbªf
 
fú°
, *
skûl1
, dbª‡
£c⁄d
,

35 *
skûl2
);

36 
ch¨_gë©åßve
(
dbªf
 
∂ayî
, *
«me
);

37 
ch¨_gë©åßvesucc
(
dbªf
 
∂ayî
, *
«me
);

38 
z≠_u¬ec˚sßry_°©s
();

39 
öô_bãch°©s
();

40 
do_ch¨°©us
(
dbªf
 
∂ayî
, dbª‡
ˇu£
, 
key
, *
¨g1
);

41 
do_ch¨˛ór
(
dbªf
 
∂ayî
, dbª‡
ˇu£
, 
key
, *
¨g1
);

42 
dbªf
 
ch¨_lookuµœyî
(dbª‡
∂ayî
, dbª‡
ˇu£
, 
key
, *
¨g1
);

43 
öôülize_pc
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
);

44 
fix_pûŸdamage
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
);

45 
mw_ic_bth
(
MECH
 * 
mech
);

46 
h™dÀmwc⁄c
(
MECH
 * 
mech
, 
öôül
);

47 
hódhômwdamage
(
MECH
 * 
mech
, 
dam
);

48 
mwÀthÆdam
(
MECH
 * 
mech
, 
dam
);

49 
lowî_xp
(
dbªf
 
∂ayî
, 
¥omûœge
);

50 
AccumuœãTechXP
(
dbªf
 
pûŸ
, 
MECH
 * 
mech
, 
ªas⁄
);

51 
AccumuœãTechWóp⁄sXP
(
dbªf
 
pûŸ
, 
MECH
 * 
mech
, 
ªas⁄
);

52 
AccumuœãCommXP
(
dbªf
 
pûŸ
, 
MECH
 * 
mech
);

53 
AccumuœãPûXP
(
dbªf
 
pûŸ
, 
MECH
 * 
mech
, 
ªas⁄
, 
add™yway
);

54 
AccumuœãSpŸXP
(
dbªf
 
pûŸ
, 
MECH
 * 
©èckî
, MECH * 
wounded
);

55 
MadePî˚±i⁄Rﬁl
(
MECH
 * 
mech
, 
modifõr
);

56 
AccumuœãAπyXP
(
dbªf
 
pûŸ
, 
MECH
 * 
©èckî
, MECH * 
wounded
);

57 
AccumuœãCompuãrXP
(
dbªf
 
pûŸ
, 
MECH
 * 
mech
, 
ªas⁄
);

58 
HasBoﬁAdv™ège
(
dbªf
 
∂ayî
, c⁄° *
«me
);

59 
AccumuœãGunXP
(
dbªf
 
pûŸ
, 
MECH
 * 
©èckî
, MECH * 
wounded
,

60 
numOccuªn˚s
, 
mu…ùlõr
, 
wópödx
, 
bth
);

61 
AccumuœãGunXPﬁd
(
dbªf
 
pûŸ
, 
MECH
 * 
©èckî
, MECH * 
wounded
,

62 
numOccuªn˚s
, 
mu…ùlõr
, 
wópödx
, 
bth
);

63 
fun_btgëch¨vÆue
(*
buff
, **
bufc
, 
dbªf
 
∂ayî
, dbª‡
ˇu£
,

64 *
Árgs
[], 
nÁrgs
, *
ˇrgs
[], 
nˇrgs
);

65 
fun_bt£tch¨vÆue
(*
buff
, **
bufc
, 
dbªf
 
∂ayî
, dbª‡
ˇu£
,

66 *
Árgs
[], 
nÁrgs
, *
ˇrgs
[], 
nˇrgs
);

67 
fun_btch¨li°
(*
buff
, **
bufc
, 
dbªf
 
∂ayî
, dbª‡
ˇu£
,

68 *
Árgs
[], 
nÁrgs
, *
ˇrgs
[], 
nˇrgs
);

69 
debug_x±›
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

70 
debug_£tx∂evñ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

71 
bâhªshﬁd_func
(*
skû ame
);

72 
ch¨gí_°ru˘
 *
ªåõve_ch¨gí_°ru˘
(
dbªf
 
∂ayî
);

73 
lowe°_bô
(
num
);

74 
ªcursive_add
(
Àv
);

75 
ˇn_¥o˚ed
(
dbªf
 
∂ayî
, 
ch¨gí_°ru˘
 *
°
);

76 
ˇn_adv™˚_°©e
(
ch¨gí_°ru˘
 *
°
);

77 
ˇn_go_back_°©e
(
ch¨gí_°ru˘
 *
°
);

78 
ªˇlcuœã_skûÕoöts
(
ch¨gí_°ru˘
 *
°
);

79 
go_back_°©e
(
dbªf
 
∂ayî
, 
ch¨gí_°ru˘
 *
°
);

	@btech/p.btspath.h

12 #i‚de‡
_P_BTSPATH_H


13 
	#_P_BTSPATH_H


	)

16 
MechTûeCo°
(
fx
, 
fy
, 
tx
, 
ty
);

17 
HovîT™kTûeCo°
(
fx
, 
fy
, 
tx
, 
ty
);

18 
TøckedT™kTûeCo°
(
fx
, 
fy
, 
tx
, 
ty
);

	@btech/p.chargen.h

12 #i‚de‡
_P_CHARGEN_H


13 
	#_P_CHARGEN_H


	)

16 
lowe°_bô
(
num
);

17 
ªcursive_add
(
Àv
);

18 
ˇn_adv™˚_°©e
(
ch¨gí_°ru˘
 *
°
);

19 
ˇn_go_back_°©e
(
ch¨gí_°ru˘
 *
°
);

20 
ªˇlcuœã_skûÕoöts
(
ch¨gí_°ru˘
 *
°
);

	@btech/p.coolmenu.h

12 #i‚de‡
_P_COOLMENU_H


13 
	#_P_COOLMENU_H


	)

16 
numbî_of_íåõs
(
coﬁmíu
 * 
c
);

17 
cou¡_fﬁlowög_wôh
(
coﬁmíu
 * 
c
, 
num
);

18 
di•œy_löe
(**
c
, *
Àn
, 
coﬁmíu
 * 
m
);

19 
di•œy_°rög
(**
c
, *
Àn
, 
coﬁmíu
 * 
m
);

20 
di•œy_toggÀ_íd
(**
c
, 
coﬁmíu
 * 
m
);

21 *
°rögifõd_vÆue
(
v
);

22 
di•œy_numbî_íd
(**
c
, 
coﬁmíu
 * 
m
);

23 *
di•œy_íåy
(*
ch
, 
maxÀn
, 
coﬁmíu
 * 
c
);

24 
di•œy_íåõs
(
coﬁmíu
 * 
c
, 
wnum
, 
num
, *
ãxt
);

25 **
MakeCoﬁMíuText
(
coﬁmíu
 * 
c
);

26 
Cª©eMíuE¡ry_KûÀr
(
coﬁmíu
 ** 
c
, *
ãxt
, 
Êag
, 
id
,

27 
vÆue
, 
maxvÆue
);

28 
KûlCoﬁMíu
(
coﬁmíu
 * 
c
);

29 
ShowCoﬁMíu
(
dbªf
 
∂ayî
, 
coﬁmíu
 * 
c
);

30 
CoﬁMíu_FPWBô
(
numbî
, 
maxÀn
);

31 
coﬁmíu
 *
SñCﬁ_Míu
(
cﬁumns
, *
hódög
, **
°rögs
, 
ty≥
,

32 
max
);

33 
coﬁmíu
 *
SñCﬁ_FunSåögMíuK
(
cﬁumns
, *
hódög
,

34 *(*
fun
Ë(), 
œ°
);

35 
coﬁmíu
 *
SñCﬁ_FunSåögMíu
(
cﬁumns
, *
hódög
,

36 *(*
fun
) ());

	@btech/p.crit.h

12 #i‚de‡
_P_CRIT_H


13 
	#_P_CRIT_H


	)

16 
c‹ª˘_•ìd
(
MECH
 * 
mech
);

17 
ex∂ode_unô
(
MECH
 * 
wounded
, MECH * 
©èckî
);

18 
h™dÀWóp⁄Crô
(
MECH
 * 
©èckî
, MECH * 
wounded
, 
hôloc
,

19 
¸ôHô
, 
¸ôTy≥
, 
LOS
);

20 
H™dÀVTOLCrô
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
, 
hôloc
,

21 
num
);

22 
De°royMaöWóp⁄
(
MECH
 * 
mech
);

23 
JamMaöWóp⁄
(
MECH
 * 
mech
);

24 
pickR™domWóp⁄
(
MECH
 * 
objMech
, 
wLoc
, *
¸ôNum
,

25 
wIgn‹eJams
);

26 
limôS≥edToCrui£
(
MECH
 * 
objMech
);

27 
DoVehi˛eSèblizîCrô
(
MECH
 * 
objMech
, 
wLoc
);

28 
DoTuºëJamCrô
(
MECH
 * 
objMech
);

29 
DoWóp⁄JamCrô
(
MECH
 * 
objMech
, 
wLoc
);

30 
DoTuºëLockCrô
(
MECH
 * 
objMech
);

31 
DoWóp⁄De°royedCrô
(
MECH
 * 
objAâackî
, MECH * 
objMech
, 
wLoc
,

32 
LOS
);

33 
DoTuºëBlownOffCrô
(
MECH
 * 
objMech
, MECH * 
objAâackî
, 
LOS
);

34 
DoAmmunôi⁄Crô
(
MECH
 * 
objMech
, MECH * 
objAâackî
, 
wLoc
,

35 
LOS
);

36 
DoC¨goInÁ¡ryCrô
(
MECH
 * 
objMech
, 
wLoc
);

37 
DoVehi˛eEngöeHô
(
MECH
 * 
objMech
, MECH * 
objAâackî
);

38 
DoVehi˛eFuñT™kCrô
(
MECH
 * 
objMech
, MECH * 
objAâackî
);

39 
DoVehi˛eCªwStu¬edCrô
(
MECH
 * 
objMech
);

40 
DoVehi˛eDrivîCrô
(
MECH
 * 
objMech
);

41 
DoVehi˛eSís‹Crô
(
MECH
 * 
objMech
);

42 
DoVehi˛eComm™dîHô
(
MECH
 * 
objMech
);

43 
DoVehi˛eCªwKûÀdCrô
(
MECH
 * 
objMech
, MECH * 
objAâackî
);

44 
DoVTOLCoPûŸCrô
(
MECH
 * 
objMech
);

45 
DoVTOLPûŸHô
(
MECH
 * 
objMech
);

46 
DoVTOLRŸ‹DamagedCrô
(
MECH
 * 
objMech
);

47 
DoVTOLTaûRŸ‹DamagedCrô
(
MECH
 * 
objMech
);

48 
DoVTOLRŸ‹De°royedCrô
(
MECH
 * 
objMech
, MECH * 
objAâackî
, 
LOS
);

49 
SèπVTOLCøsh
(
MECH
 * 
objMech
);

50 
H™dÀAdvFaßVehi˛eCrô
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
,

51 
hôloc
, 
num
);

52 
H™dÀFaßVehi˛eCrô
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
,

53 
hôloc
, 
num
);

54 
H™dÀVehi˛eCrô
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
,

55 
hôloc
, 
num
);

56 
H™dÀMechCrô
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
, 
hôloc
,

57 
¸ôHô
, 
¸ôTy≥
, 
¸ôD©a
);

58 
H™dÀCrôiˇl
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
, 
hôloc
,

59 
num
);

60 
N‹mÆizeArmA˘u©‹Crôs
(
MECH
 * 
objMech
, 
wLoc
, 
wCrôTy≥
);

61 
N‹mÆizeLegA˘u©‹Crôs
(
MECH
 * 
objMech
, 
wLoc
, 
wCrôTy≥
);

62 
N‹mÆizeLocA˘u©‹Crôs
(
MECH
 * 
objMech
, 
wLoc
);

63 
N‹mÆizeAŒA˘u©‹Crôs
(
MECH
 * 
objMech
);

	@btech/p.debug.h

12 #i‚de‡
_P_DEBUG_H


13 
	#_P_DEBUG_H


	)

16 
debug_li°
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
debug_mem‹y
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
ShutDownM≠
(
dbªf
 
∂ayî
, dbª‡
m≠numbî
);

19 
debug_shutdown
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
debug_£tvπ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.ds.bay.h

12 #i‚de‡
_P_DS_BAY_H


13 
	#_P_DS_BAY_H


	)

16 
mech_¸óãbays
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
Föd_DS_Bay_Numbî
(
MECH
 * 
ds
, 
dú
);

18 
Föd_DS_Bay_Dú
(
MECH
 * 
ds
, 
num
);

19 
Föd_DS_Bay_In_MechHex
(
MECH
 * 
£î
, MECH * 
ds
, *
bayn
);

20 
mech_íãrbay
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
Lóve_DS
(
MAP
 * 
m≠
, 
MECH
 * 
mech
);

	@btech/p.ds.turret.h

12 #i‚de‡
_P_DS_TURRET_H


13 
	#_P_DS_TURRET_H


	)

16 
tuºë_addtic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
tuºë_dñtic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
tuºë_li°tic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
tuºë_˛óπic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
tuºë_fúëic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
tuºë_bórög
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
tuºë_ëa
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
tuºë_föd˚¡î
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
tuºë_fúewóp⁄
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
tuºë_£â¨gë
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
tuºë_Ãsm≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
tuºë_«vig©e
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
tuºë_ønge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
tuºë_sight
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
tuºë_ècm≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
tuºë_c⁄è˘s
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
tuºë_¸ô°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

33 
tuºë_ªp‹t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
tuºë_sˇn
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

35 
tuºë_°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

36 
tuºë_wóp⁄•ecs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

37 
√wtuºë
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

38 
tuºë_öôülize
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

39 
tuºë_deöôülize
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.econ.h

12 #i‚de‡
_P_ECON_H


13 
	#_P_ECON_H


	)

16 
ec⁄_ch™ge_ôems
(
dbªf
 
d
, 
id
, 
bønd
, 
num
);

17 
ec⁄_föd_ôems
(
dbªf
 
d
, 
id
, 
bønd
);

18 
ec⁄_£t_ôems
(
dbªf
 
d
, 
id
, 
bønd
, 
num
);

	@btech/p.econ_cmds.h

12 #i‚de‡
_P_ECON_CMDS_H


13 
	#_P_ECON_CMDS_H


	)

16 
SëC¨goWeight
(
MECH
 * 
mech
);

17 
lﬂdög_bay_whöe
(
dbªf
 
∂ayî
, dbª‡
ˇrgobay
, 
MECH
 * 
mech
);

18 
mech_Rfix°uff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
li°_m©chög
(
dbªf
 
∂ayî
, *
hódî
, dbª‡
loc
, *
buf
);

20 
mech_m™i„°
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
mech_°‹es
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
mech_Radd°uff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mech_Rªmove°uff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
mech_lﬂdˇrgo
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
mech_u∆ﬂdˇrgo
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
mech_Rª£t°uff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.eject.h

12 
	~"c⁄fig.h
"

14 #i‚de‡
_P_EJECT_H


15 
	#_P_EJECT_H


	)

18 
ãÀ_c⁄ã¡s
(
dbªf
 
‰om
, dbª‡
to
, 
Êag
);

19 
disˇrd_mw
(
MECH
 * 
mech
);

20 
íãr_mw_bay
(
MECH
 * 
mech
, 
dbªf
 
bay
);

21 
pickup_mw
(
MECH
 * 
mech
, MECH * 
èrgë
);

22 
mech_eje˘
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mech_di£mb¨k
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
mech_udi£mb¨k
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
mech_emb¨k
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
aut€je˘
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
tIsBSuô
);

	@btech/p.event.h

12 #i‚de‡
_P_EVENT_H


13 
	#_P_EVENT_H


	)

16 
muxevít_add
(
time
, 
Êags
, 
ty≥
, (*
func
Ë(
EVENT
 *),

17 *
d©a
, *
d©a2
);

18 
	`muxevít_run
();

19 
	`muxevít_run_by_ty≥
(
ty≥
);

20 
	`muxevít_œ°_ty≥
();

21 
	`muxevít_öôülize
();

22 
	`muxevít_ªmove_d©a
(*
d©a
);

23 
	`muxevít_ªmŸe_ty≥_d©a
(
ty≥
, *
d©a
);

24 
	`muxevít_ªmŸe_ty≥_d©a2
(
ty≥
, *
d©a
);

25 
	`muxevít_ªmŸe_ty≥_d©a_d©a
(
ty≥
, *
d©a
, *
d©a2
);

26 
	`muxevít_ty≥_d©a
(
ty≥
, *
d©a
);

27 
	`muxevít_gë_ty≥_d©a
(
ty≥
, *
d©a
, *
d©a2
);

28 
	`muxevít_cou¡_ty≥
(
ty≥
);

29 
	`muxevít_cou¡_ty≥_d©a
(
ty≥
, *
d©a
);

30 
	`muxevít_cou¡_ty≥_d©a2
(
ty≥
, *
d©a
);

31 
	`muxevít_cou¡_ty≥_d©a_d©a
(
ty≥
, *
d©a
, *
d©a2
);

32 
	`muxevít_cou¡_d©a
(
ty≥
, *
d©a
);

33 
	`muxevít_cou¡_d©a_d©a
(
ty≥
, *
d©a
, *
d©a2
);

34 
	`muxevít_gŸhru_ty≥_d©a
(
ty≥
, *
d©a
, (*
func
Ë(
EVENT
 *));

35 
	`muxevít_gŸhru_ty≥
(
ty≥
, (*
func
Ë(
EVENT
 *));

36 
	`muxevít_œ°_ty≥_d©a
(
ty≥
, *
d©a
);

37 
	`muxevít_fú°_ty≥_d©a
(
ty≥
, *
d©a
);

38 
	`muxevít_cou¡_ty≥_d©a_fú°ev
(
ty≥
, *
d©a
);

	@btech/p.event_test.h

12 #i‚de‡
_P_EVENT_TEST_H


13 
	#_P_EVENT_TEST_H


	)

15 
maö
();

	@btech/p.events.h

12 #i‚de‡
_P_EVENTS_H


13 
	#_P_EVENTS_H


	)

16 
muxevít_cou¡_öôülize
();

17 
debug_EvítTy≥s
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
¥îun_evít
(
EVENT
 * 
e
);

19 
po°run_evít
(
EVENT
 * 
e
);

	@btech/p.failures.h

12 #i‚de‡
_P_FAILURES_H


13 
	#_P_FAILURES_H


	)

16 
GëBøndIndex
(
ty≥
);

17 *
GëP¨tBøndName
(
ty≥
, 
Àvñ
);

18 
FaûuªRadioSètic
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

19 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

20 
FaûuªRadioSh‹t
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
, 
£˘i⁄
,

21 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

22 
FaûuªRadioR™ge
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
, 
£˘i⁄
,

23 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

24 
FaûuªCompuãrShutdown
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

25 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

26 
FaûuªCompuãrSˇ¬î
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

27 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

28 
FaûuªCompuãrT¨gë
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

29 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

30 
FaûuªWóp⁄Missûes
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

31 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

32 
FaûuªWóp⁄Dud
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
, 
£˘i⁄
,

33 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

34 
FaûuªWóp⁄Jammed
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

35 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

36 
FaûuªWóp⁄R™ge
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

37 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

38 
FaûuªWóp⁄Damage
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

39 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

40 
FaûuªWóp⁄Hót
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
, 
£˘i⁄
,

41 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

42 
FaûuªWóp⁄Spike
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
,

43 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
, *
modifõr
, *
ty≥
);

44 
CheckGíîicFaû
(
MECH
 * 
mech
, 
ty≥
, *
ªsu…
, *
mod
);

45 
CheckWóp⁄Faûed
(
MECH
 * 
mech
, 
wó≤um
, 
wó±y≥
, 
£˘i⁄
,

46 
¸ôiˇl
, *
modifõr
, *
ty≥
);

	@btech/p.glue.h

12 #i‚de‡
_P_GLUE_H


13 
	#_P_GLUE_H


	)

16 
H™dÀdComm™d_sub
(
dbªf
 
∂ayî
, dbª‡
loˇti⁄
, *
comm™d
);

17 
H™dÀdComm™d
(
dbªf
 
∂ayî
, dbª‡
loc
, *
comm™d
);

18 
mech_ªmove_‰om_Æl_m≠s
(
MECH
 * 
mech
);

19 
mech_ªmove_‰om_Æl_m≠s_ex˚±
(
MECH
 * 
mech
, 
num
);

20 
z≠_u¬ec˚sßry_hcode
();

21 
LﬂdS≥cülObje˘s
();

22 
Ch™geS≥cülObje˘s
(
i
);

23 
SaveS≥cülObje˘s
(
i
);

24 
Upd©eS≥cülObje˘s
();

25 *
NewS≥cülObje˘
(
id
, 
ty≥
);

26 
Cª©eNewS≥cülObje˘
(
dbªf
 
∂ayî
, dbª‡
key
);

27 
Di•o£S≥cülObje˘
(
dbªf
 
∂ayî
, dbª‡
key
);

28 
Dump_Mech
(
dbªf
 
∂ayî
, 
ty≥
, *
ty≥°r
);

29 
DumpMechs
(
dbªf
 
∂ayî
);

30 
DumpM≠s
(
dbªf
 
∂ayî
);

31 
WhichS≥cül
(
dbªf
 
key
);

32 
IsMech
(
dbªf
 
num
);

33 
IsAuto
(
dbªf
 
num
);

34 
IsM≠
(
dbªf
 
num
);

35 *
FödObje˘sD©a
(
dbªf
 
key
);

36 *
˚¡î_°rög
(*
c
, 
Àn
);

37 
InôS≥cülHash
(
which
);

38 
h™dÀ_xcode
(
dbªf
 
∂ayî
, dbª‡
obj
, 
‰om
, 
to
);

39 
öôülize_cﬁ‹ize
();

40 *
cﬁ‹ize
(
dbªf
 
∂ayî
, *
‰om
);

41 
mecha_nŸify
(
dbªf
 
∂ayî
, *
msg
);

42 
mecha_nŸify_ex˚±
(
dbªf
 
loc
, dbª‡
∂ayî
, dbª‡
ex˚±i⁄
,

43 *
msg
);

44 
li°_chash°©s
(
dbªf
 
∂ayî
);

45 
Re£tS≥cülObje˘s
();

46 
MAP
 *
gëM≠
(
dbªf
 
d
);

47 
MECH
 *
gëMech
(
dbªf
 
d
);

	@btech/p.glue.hcode.h

12 #i‚de‡
_P_GLUE_HCODE_H


13 
	#_P_GLUE_HCODE_H


	)

16 
bt_gë_©å
(*
tbuf
, 
obj
, *
«me
);

17 *
sûly_©r_gë
(
id
, 
Êag
);

18 
sûly_©r_£t
(
id
, 
Êag
, *
d©
);

19 
bt_£t_©å
(
dbªf
 
obj
, *
©åi
, *
vÆue
);

20 
KûlText
(**
m≠t
);

21 
ShowText
(**
m≠t
, 
dbªf
 
∂ayî
);

22 
FBOUNDED
(
mö
, 
vÆ
, 
max
);

23 
BOUNDED
(
mö
, 
vÆ
, 
max
);

24 
MAX
(
v1
, 
v2
);

25 
MIN
(
v1
, 
v2
);

26 
sûly_∑r£©åibuãs
(*
buf„r
, **
¨gs
, 
max
);

27 
mech_∑r£©åibuãs
(*
buf„r
, **
¨gs
, 
max¨gs
);

	@btech/p.glue.scode.h

12 #i‚de‡
_P_GLUE_SCODE_H


13 
	#_P_GLUE_SCODE_H


	)

15 
	~"fun˘i⁄s.h
"

18 *
mechIDfunc
(
mode
, 
MECH
 * 
mech
);

19 *
mechTy≥func
(
mode
, 
MECH
 * 
mech
, *
¨g
);

20 *
mechMovefunc
(
mode
, 
MECH
 * 
mech
, *
¨g
);

21 *
mechTechTimefunc
(
mode
, 
MECH
 * 
mech
);

22 
≠∂y_mechDamage
(
MECH
 * 
omech
, *
buf
);

23 *
mechDamagefunc
(
mode
, 
MECH
 * 
mech
, *
¨g
);

24 *
mechCítBórögfunc
(
mode
, 
MECH
 * 
mech
, *
¨g
);

25 *
mechCítDi°func
(
mode
, 
MECH
 * 
mech
, *
¨g
);

26 
£t_xcode°uff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
li°_xcode°uff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
li°_xcodevÆues
(
dbªf
 
∂ayî
);

30 
XFUNCTION
(
fun_bèdd∑πs
);

31 
XFUNCTION
(
fun_bèrm‹°©us
);

32 
XFUNCTION
(
fun_bt¸ô°©us
);

33 
XFUNCTION
(
fun_btdamagemech
);

34 
XFUNCTION
(
fun_btdamages
);

35 
XFUNCTION
(
fun_btdesig√x
);

36 
XFUNCTION
(
fun_btgëch¨vÆue
);

37 
XFUNCTION
(
fun_btgëxcodevÆue
);

38 
XFUNCTION
(
fun_béﬂdm≠
);

39 
XFUNCTION
(
fun_béﬂdmech
);

40 
XFUNCTION
(
fun_btmakemechs
);

41 
XFUNCTION
(
fun_btmakïûŸrﬁl
);

42 
XFUNCTION
(
fun_btm≠ñev
);

43 
XFUNCTION
(
fun_btm≠ãº
);

44 
XFUNCTION
(
fun_btmech‰eqs
);

45 
XFUNCTION
(
fun_bç¨tm©ch
);

46 
XFUNCTION
(
fun_bç¨äame
);

47 
XFUNCTION
(
fun_bt£èrm‹°©us
);

48 
XFUNCTION
(
fun_bt£tch¨vÆue
);

49 
XFUNCTION
(
fun_bt£txcodevÆue
);

50 
XFUNCTION
(
fun_bt°‹es
);

51 
XFUNCTION
(
fun_bâech°©us
);

52 
XFUNCTION
(
fun_bâhªshﬁd
);

53 
XFUNCTION
(
fun_btundîª∑ú
);

54 
XFUNCTION
(
fun_btwóp⁄°©us
);

55 
XFUNCTION
(
fun_bèdd°‹es
);

56 
XFUNCTION
(
fun_bèrm‹°©us_ªf
);

57 
XFUNCTION
(
fun_btch¨li°
);

58 
XFUNCTION
(
fun_bt¸ô¶Ÿ
);

59 
XFUNCTION
(
fun_bt¸ô¶Ÿ_ªf
);

60 
XFUNCTION
(
fun_bt¸ô°©us_ªf
);

61 
XFUNCTION
(
fun_bãngøã
);

62 
XFUNCTION
(
fun_bãngøã_ªf
);

63 
XFUNCTION
(
fun_btÁßba£co°_ªf
);

64 
XFUNCTION
(
fun_btgëbv
);

65 
XFUNCTION
(
fun_btgëbv_ªf
);

66 
XFUNCTION
(
fun_btgë∑πco°
);

67 
XFUNCTION
(
fun_btgëønge
);

68 
XFUNCTION
(
fun_btgëªÆmax•ìd
);

69 
XFUNCTION
(
fun_btgëª·ech_ªf
);

70 
XFUNCTION
(
fun_btgëweight
);

71 
XFUNCTION
(
fun_btgëxcodevÆue_ªf
);

72 
XFUNCTION
(
fun_bthexemô
);

73 
XFUNCTION
(
fun_bthexöblz
);

74 
XFUNCTION
(
fun_bthexlos
);

75 
XFUNCTION
(
fun_btid2db
);

76 
XFUNCTION
(
fun_béi°blz
);

77 
XFUNCTION
(
fun_béosm2m
);

78 
XFUNCTION
(
fun_btm≠emô
);

79 
XFUNCTION
(
fun_bäumªpjobs
);

80 
XFUNCTION
(
fun_bç¨ây≥
);

81 
XFUNCTION
(
fun_btgëweight
);

82 
XFUNCTION
(
fun_bçaylﬂd_ªf
);

83 
XFUNCTION
(
fun_båemove°‹es
);

84 
XFUNCTION
(
fun_bt£tmax•ìd
);

85 
XFUNCTION
(
fun_bt£ç¨tco°
);

86 
XFUNCTION
(
fun_bt£txy
);

87 
XFUNCTION
(
fun_btshow¸ô°©us_ªf
);

88 
XFUNCTION
(
fun_btshow°©us_ªf
);

89 
XFUNCTION
(
fun_btshoww•ecs_ªf
);

90 
XFUNCTION
(
fun_bâech_ªf
);

91 
XFUNCTION
(
fun_bâechli°
);

92 
XFUNCTION
(
fun_bâechli°_ªf
);

93 
XFUNCTION
(
fun_bâechtime
);

94 
XFUNCTION
(
fun_btunôfixabÀ
);

95 
XFUNCTION
(
fun_btwóp⁄°©us_ªf
);

96 
XFUNCTION
(
fun_btwóp°©
);

	@btech/p.luck.h

12 #i‚de‡
_P_LUCK_H


13 
	#_P_LUCK_H


	)

16 
∂ayî_luck
(
dbªf
 
∂ayî
);

17 
luck_dõ_mod_ba£
(
mod
, 
l
);

18 
luck_dõ_mod
(
dbªf
 
∂ayî
, 
mod
);

	@btech/p.map.bits.h

12 #i‚de‡
_P_MAP_BITS_H


13 
	#_P_MAP_BITS_H


	)

16 
m≠_lﬂd_bôs
(
FILE
 * 
f
, 
MAP
 * 
m≠
);

17 
m≠_ßve_bôs
(
FILE
 * 
f
, 
MAP
 * 
m≠
, 
m≠objt
 * 
obj
);

18 
£t_hex_íãøbÀ
(
MAP
 * 
m≠
, 
x
, 
y
);

19 
£t_hex_möe
(
MAP
 * 
m≠
, 
x
, 
y
);

20 
un£t_hex_íãøbÀ
(
MAP
 * 
m≠
, 
x
, 
y
);

21 
un£t_hex_möe
(
MAP
 * 
m≠
, 
x
, 
y
);

22 
is_möe_hex
(
MAP
 * 
m≠
, 
x
, 
y
);

23 
is_h™g¨_hex
(
MAP
 * 
m≠
, 
x
, 
y
);

24 
˛ór_hex_bôs
(
MAP
 * 
m≠
, 
bôs
);

25 
bô_size
(
MAP
 * 
m≠
);

	@btech/p.map.build.functions.h

3 #i‚de‡
_P_MAP_BUILD_FUNCTIONS_H


4 
	#_P_MAP_BUILD_FUNCTIONS_H


	)

8 
w©î_di°™˚
(
MAP
 * 
m≠
, 
x
, 
y
, 
dú
, 
max
);

9 
lﬂdM≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

10 
ßveM≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

11 
‰ìOldM≠
(
MAP
 * 
m≠
);

12 
vÆid©eExi°ögLayîs
(
MAP
 * 
m≠
, 
x
, 
y
);

13 
vÆid©eSnowDïth
(
MAP
 * 
m≠
, 
x
, 
y
);

14 
SëM≠HexD©a
(
MAP
 * 
m≠
, 
x
, 
y
, 
ãºaö
, 
ñev©i⁄
,

15 
œyîs
, 
œyîD©a
);

16 
CÀ¨TîøöLayîs
(
MAP
 * 
m≠
, 
x
, 
y
);

17 
AddTîøöLayî
(
MAP
 * 
m≠
, 
x
, 
y
, 
œyî
, 
œyîD©a
);

18 
GëHexTîøö
(
MAP
 * 
m≠
, 
x
, 
y
);

19 
GëHexEÀv©i⁄
(
MAP
 * 
m≠
, 
x
, 
y
);

20 
GëHexLayîs
(
MAP
 * 
m≠
, 
x
, 
y
);

21 
GëHexLayîD©a
(
MAP
 * 
m≠
, 
x
, 
y
);

22 
SëHexTîøö
(
MAP
 * 
m≠
, 
x
, 
y
, 
ãºaö
);

23 
SëHexEÀv©i⁄
(
MAP
 * 
m≠
, 
x
, 
y
, 
ñev©i⁄
);

24 
SëHexLayîs
(
MAP
 * 
m≠
, 
x
, 
y
, 
œyîs
);

25 
SëHexLayîD©a
(
MAP
 * 
m≠
, 
x
, 
y
, 
œyîD©a
);

	@btech/p.map.coding.h

12 #i‚de‡
_P_MAP_CODING_H


13 
	#_P_MAP_CODING_H


	)

16 
öô_m≠_codög
();

17 
Codög_GëIndex
(
ãºaö
, 
ñev©i⁄
);

18 
Codög_GëEÀv©i⁄
(
ödex
);

19 
Codög_GëTîøö
(
ödex
);

	@btech/p.map.conditions.h

12 #i‚de‡
_P_MAP_CONDITIONS_H


13 
	#_P_MAP_CONDITIONS_H


	)

16 
Æãr_c⁄dôi⁄s
(
MAP
 * 
m≠
);

17 
m≠_£tc⁄dôi⁄s
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
Upd©eC⁄dôi⁄s
(
MECH
 * 
mech
, 
MAP
 * 
m≠
);

19 
De°royP¨ts
(
MECH
 * 
©èckî
, MECH * 
wounded
, 
hôloc
, 
bªach
,

20 
IsDißbÀ
);

21 
BªachLoc
(
MECH
 * 
©èckî
, MECH * 
mech
, 
hôloc
);

22 
PossiblyBªach
(
MECH
 * 
©èckî
, MECH * 
mech
, 
hôloc
);

	@btech/p.map.dynamic.h

12 #i‚de‡
_P_MAP_DYNAMIC_H


13 
	#_P_MAP_DYNAMIC_H


	)

16 
lﬂd_m≠dy«mic
(
FILE
 * 
f
, 
MAP
 * 
m≠
);

17 
ßve_m≠dy«mic
(
FILE
 * 
f
, 
MAP
 * 
m≠
);

18 
mech_m≠_c⁄si°ícy_check
(
MECH
 * 
mech
);

19 
ñimö©e_em±õs
(
MAP
 * 
m≠
);

20 
ªmove_mech_‰om_m≠
(
MAP
 * 
m≠
, 
MECH
 * 
mech
);

21 
add_mech_to_m≠
(
MAP
 * 
√wm≠
, 
MECH
 * 
mech
);

22 
mech_size
(
MAP
 * 
m≠
);

	@btech/p.map.h

12 #i‚de‡
_P_MAP_H


13 
	#_P_MAP_H


	)

16 
debug_fixm≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
m≠_võw
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
m≠_addhex
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
m≠_m≠emô
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
w©î_di°™˚
(
MAP
 * 
m≠
, 
x
, 
y
, 
dú
, 
max
);

21 
m≠_lﬂd
(
MAP
 * 
m≠
, * 
m≠«me
);

22 
m≠_lﬂdm≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
m≠_ßvem≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
m≠_£tm≠size
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
m≠_˛órmechs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
m≠_upd©e
(
dbªf
 
obj
, *
d©a
);

27 
öôülize_m≠_em±y
(
MAP
 * 
√wm≠
, 
dbªf
 
key
);

28 
√w‰ìm≠
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

29 
m≠_sizefun
(*
d©a
, 
Êag
);

30 
m≠_li°mechs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
˛ór_hex
(
MECH
 * 
mech
, 
x
, 
y
, 
mó¡
);

32 
m≠_∑thföd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

33 
Upd©eMechsTîøö
(
MAP
 * 
m≠
, 
x
, 
y
, 
t
);

	@btech/p.map.obj.h

12 #i‚de‡
_P_MAP_OBJ_H


13 
	#_P_MAP_OBJ_H


	)

16 
m≠objt
 *
√xt_m≠obj
(m≠objà* 
m
);

17 
m≠objt
 *
fú°_m≠obj
(
MAP
 * 
m≠
, 
ty≥
);

18 
ßve_m≠objs
(
FILE
 * 
f
, 
MAP
 * 
m≠
);

19 
föd_íå™˚
(
MAP
 * 
m≠
, 
dú
, *
x
, *
y
);

20 *
°ru˘uª_«me
(
m≠objt
 * 
m≠o
);

21 
m≠objt
 *
föd_íå™˚_by_èrgë
(
MAP
 * 
m≠
, 
dbªf
 
èrgë
);

22 
m≠objt
 *
föd_íå™˚_by_xy
(
MAP
 * 
m≠
, 
x
, 
y
);

23 
m≠objt
 *
föd_m≠obj
(
MAP
 * 
m≠
, 
x
, 
y
, 
ty≥
);

24 
föd_dec‹©i⁄s
(
MAP
 * 
m≠
, 
x
, 
y
);

25 
dñ_m≠obj
(
MAP
 * 
m≠
, 
m≠objt
 * 
m≠ob
, 
ty≥
, 
z≠
);

26 
dñ_m≠obj°
(
MAP
 * 
m≠
, 
ty≥
);

27 
dñ_m≠objs
(
MAP
 * 
m≠
);

28 
m≠objt
 *
add_m≠obj
(
MAP
 * 
m≠
, m≠objà** 
to
, m≠objà* 
‰om
, 
Êag
);

29 
FödXEví
(
wöd
, 
x
);

30 
FödYEví
(
wöd
, 
y
);

31 
FödXOdd
(
wöd
, 
x
);

32 
FödYOdd
(
wöd
, 
y
);

33 
CheckF‹Fúe
(
MAP
 * 
m≠
, 
x
[], 
y
[]);

34 
CheckF‹Smoke
(
MAP
 * 
m≠
, 
x
[], 
y
[]);

35 
add_dec‹©i⁄
(
MAP
 * 
m≠
, 
x
, 
y
, 
ty≥
, 
d©a
,

36 
Êaggo
);

37 
lﬂd_m≠objs
(
FILE
 * 
f
, 
MAP
 * 
m≠
);

38 
li°_m≠objs
(
dbªf
 
∂ayî
, 
MAP
 * 
m≠
);

39 
m≠_addfúe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

40 
m≠_addsmoke
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

41 
m≠_add_block
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

42 
is_blocked_lz
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
x
, 
y
);

43 
m≠_£éöked
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

44 
m≠obj_dñ
(
MAP
 * 
m≠
, 
x
, 
y
, 
â
);

45 
m≠_dñobj
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

46 
∑r£_co‹d
(
MAP
 * 
m≠
, 
dú
, *
d©a
, *
x
, *
y
);

47 
add_íå™˚s
(
dbªf
 
loc
, 
MAP
 * 
m≠
, *
d©a
);

48 
add_löks
(
dbªf
 
loc
, 
MAP
 * 
m≠
, *
d©a
);

49 
ªcursivñy_upd©ñöks
(
dbªf
 
‰om
, dbª‡
loc
);

50 
m≠_upd©ñöks
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

51 
m≠_löked
(
dbªf
 
m≠obj
);

52 
gë_cf
(
dbªf
 
d
);

53 
possibly_°¨t_buûdög_ªgí
(
dbªf
 
obj
);

54 
hô_buûdög
(
MECH
 * 
mech
, 
x
, 
y
, 
wópödx
, 
damage
);

55 
fúe_hex
(
MECH
 * 
mech
, 
x
, 
y
, 
mó¡
);

56 
°ï∑bÀ_ba£_check
(
MECH
 * 
mech
, 
x
, 
y
);

57 
show_buûdög_ö_hex
(
MECH
 * 
mech
, 
x
, 
y
);

58 
obj_size
(
MAP
 * 
m≠
);

59 
m≠_undîlyög_ãºaö
(
MAP
 * 
m≠
, 
x
, 
y
);

60 
mech_undîlyög_ãºaö
(
MECH
 * 
mech
);

	@btech/p.map.weather.h

3 #i‚de‡
_P_MAP_WEATHER_H


4 
	#_P_MAP_WEATHER_H


	)

8 
vÆid©eWóthîC⁄dôi⁄s
(
curC⁄dôi⁄s
);

9 
ˇlcWóthîEf„˘s
(
MAP
 * 
m≠
);

10 
ˇlcWóthîGunEf„˘s
(
MAP
 * 
m≠
, 
wópödx
);

11 
ˇlcWóthîPûŸEf„˘s
(
MECH
 * 
mech
);

12 
£tWóthîHótEf„˘s
(
MAP
 * 
m≠
, 
MECH
 * 
mech
);

13 
mñtSnowAndI˚
(
MAP
 * 
m≠
, 
x
, 
y
, 
dïth
, 
emô
,

14 
makeSãam
);

15 
growSnow
(
MAP
 * 
m≠
, 
lowDïth
, 
highDïth
);

	@btech/p.mech.advanced.h

12 #i‚de‡
_P_MECH_ADVANCED_H


13 
	#_P_MECH_ADVANCED_H


	)

16 
mech_ecm
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
mech_eccm
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
mech_≥ªcm
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
mech_≥ªccm
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
mech_™gñecm
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
mech_™gñeccm
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
mech_¶ôe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mech_ams
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
mech_Êù¨ms
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
mech_Êamîhót
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
mech_u…ø
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
mech_øc
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
mech_øpidfúe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
mech_unjamammo
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
mech_g©éög
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
mech_ö¨c_ammo_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
mech_ex∂osive
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

33 
mech_lbx
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
mech_¨m‹põrcög
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

35 
mech_Êechëã
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

36 
mech_ö˚ndüry
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

37 
mech_¥ecisi⁄
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

38 
mech_¨ãmis
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

39 
mech_«rc
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

40 
mech_sw¨m
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

41 
mech_sw¨m1
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

42 
mech_ö„∫o
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

43 
mech_hŸlﬂd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

44 
mech_˛u°î
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

45 
mech_smoke
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

46 
mech_möe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

47 
mech_masc
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

48 
mech_sch¨ge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

49 
mech_ex∂ode
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

50 
mech_dig
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

51 
mech_fixtuºë
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

52 
mech_dißbÀwóp
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

53 
FödMaöWóp⁄
(
MECH
 * 
mech
, (*
ˇŒback
) (MECH *, , , ,

55 
	`mech_°ó…h¨m‹
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

56 
	`mech_nuŒsig
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

57 
	`show_«rc_pods
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

58 
	`ªmove_ö¨c_pods_mech
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

59 
	`ªmove_ö¨c_pods_ènk
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

60 
	`mech_auto_tuºë
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

61 
	`mech_u£bö
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

62 
	`mech_ß„ty
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

63 
	`mech_mech¥efs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.ammodump.h

4 #i‚de‡
_P_MECH_AMMODUMP_H


5 
	#_P_MECH_AMMODUMP_H


	)

7 
Dump_De¸ó£
(
MECH
 * 
mech
, 
loc
, 
pos
, *
hm
);

8 
mech_dump
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

9 
BlowDumpögAmmo
(
MECH
 * 
mech
, MECH * 
©èckî
, 
wHôLoc
);

10 
FödMaxAmmoDamage
(
wWópIdx
);

12 
	sobjDumpögAmmo
 {

13 
	mwDamage
;

14 
	mwLoˇti⁄
;

15 
	mwSlŸ
;

16 
	mwWópIdx
;

17 
	mwP¨tTy≥
;

	@btech/p.mech.avail.h

12 #i‚de‡
_P_MECH_AVAIL_H


13 
	#_P_MECH_AVAIL_H


	)

16 
debug_makemechs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
fun_btmakemechs
(*
buff
, **
bufc
, 
dbªf
 
∂ayî
, dbª‡
ˇu£
,

18 *
Árgs
[], 
nÁrgs
, *
ˇrgs
[], 
nˇrgs
);

	@btech/p.mech.bth.h

4 #i‚de‡
_P_MECH_BTH_H


5 
	#_P_MECH_BTH_H


	)

7 
FödN‹mÆBTH
(
MECH
 * 
mech
, 
MAP
 * 
mech_m≠
, 
£˘i⁄
, 
¸ôiˇl
,

8 
wópödx
, 
ønge
, 
MECH
 * 
èrgë
, 
ödúe˘Fúe
,

9 
dbªf
 * 
c3Ref
);

10 
FödAπûÀryBTH
(
MECH
 * 
mech
, 
£˘i⁄
, 
wópödx
, 
ödúe˘
,

11 
ønge
);

12 
FödBTHByR™ge
(
MECH
 * 
mech
, MECH * 
èrgë
, 
£˘i⁄
,

13 
wópödx
, 
‰™ge
, 
mode
, *
wBTH
);

14 
FödBTHByC3R™ge
(
MECH
 * 
mech
, MECH * 
èrgë
, 
£˘i⁄
,

15 
wópödx
, 
ªÆR™ge
, 
c3R™ge
, 
mode
, *
wBTH
);

16 
AâackMovemítMods
(
MECH
 * 
mech
);

17 
T¨gëMovemítMods
(
MECH
 * 
mech
, MECH * 
èrgë
, 
ønge
);

19 
	#RANGE_SHORT
 0

	)

20 
	#RANGE_MED
 1

	)

21 
	#RANGE_LONG
 2

	)

22 
	#RANGE_EXTREME
 3

	)

23 
	#RANGE_TOFAR
 4

	)

24 
	#RANGE_NOWATER
 5

	)

	@btech/p.mech.build.h

12 #i‚de‡
_P_MECH_BUILD_H


13 
	#_P_MECH_BUILD_H


	)

16 
CheckD©a
(
dbªf
 
∂ayî
, *
d©a
);

17 
FûlDeÁu…Crôiˇls
(
MECH
 * 
mech
, 
ödex
);

18 *
Sh‹tArm‹Se˘i⁄Såög
(
ty≥
, 
mty≥
, 
loc
);

19 
Arm‹Se˘i⁄FromSåög
(
ty≥
, 
mty≥
, *
°rög
);

20 
Wóp⁄IndexFromSåög
(*
°rög
);

21 
FödS≥cülIãmCodeFromSåög
(*
buf„r
);

	@btech/p.mech.c3.h

4 #i‚de‡
_P_MECH_C3_H


5 
	#_P_MECH_C3_H


	)

7 
gëC3Ma°îSize
(
MECH
 * 
mech
);

8 
isP¨tOfW‹kögC3Ma°î
(
MECH
 * 
mech
, 
£˘i⁄
, 
¶Ÿ
);

9 
cou¡W‹kögC3Ma°îsOnMech
(
MECH
 * 
mech
);

10 
cou¡TŸÆC3Ma°îsOnMech
(
MECH
 * 
mech
);

11 
cou¡MaxC3Unôs
(
MECH
 * 
mech
, 
dbªf
 * 
myTempNëw‹k
,

12 
ãmpNëw‹kSize
, 
MECH
 * 
èrgMech
);

13 
åimC3Nëw‹k
(
MECH
 * 
mech
, 
dbªf
 * 
myTempNëw‹k
, 
ãmpNëw‹kSize
);

14 
gëFªeC3Nëw‹kPos
(
MECH
 * 
mech
, MECH * 
mechToAdd
);

15 
ª∂iˇãC3Nëw‹k
(
MECH
 * 
mechSrc
, MECH * 
mechDe°
);

16 
addMechToC3Nëw‹k
(
MECH
 * 
mech
, MECH * 
mechToAdd
);

17 
˛órMechFromC3Nëw‹k
(
dbªf
 
ªfToCÀ¨
, 
MECH
 * 
mech
);

18 
˛órC3Nëw‹k
(
MECH
 * 
mech
, 
tCÀ¨FromOthîs
);

19 
vÆid©eC3Nëw‹k
(
MECH
 * 
mech
);

20 
mech_c3_joö_Àave
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
mech_c3_mesßge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
mech_c3_èrgës
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mech_c3_√tw‹k
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.c3.misc.h

6 #i‚de‡
_P_MECH_C3_MISC_H


7 
	#_P_MECH_C3_MISC_H


	)

9 
MECH
 *
gëMechInTempNëw‹k
(
wIdx
, 
dbªf
 * 
myNëw‹k
, 
√tw‹kSize
);

10 
MECH
 *
gëOthîMechInNëw‹k
(MECH * 
mech
, 
wIdx
, 
tCheckECM
,

11 
tCheckSèπed
, 
tCheckUnc⁄
, 
tIsC3
);

12 
buûdTempNëw‹k
(
MECH
 * 
mech
, 
dbªf
 * 
myNëw‹k
, *
√tw‹kSize
,

13 
tCheckECM
, 
tCheckSèπed
, 
tCheckUnc⁄
, 
tIsC3
);

14 
£ndNëw‹kMesßge
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, *
msg
, 
tIsC3
);

15 
showNëw‹kT¨gës
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
tIsC3
);

16 
showNëw‹kD©a
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
tIsC3
);

17 
mechSìnByNëw‹k
(
MECH
 * 
mech
, MECH * 
mechT¨gë
, 
isC3
);

18 
födC3R™ge
(
MECH
 * 
mech
, MECH * 
mechT¨gë
, 
ªÆR™ge
,

19 
dbªf
 * 
c3Ref
, 
tIsC3
);

20 
födC3R™geWôhNëw‹k
(
MECH
 * 
mech
, MECH * 
mechT¨gë
,

21 
ªÆR™ge
, 
dbªf
 * 
myNëw‹k
, 
√tw‹kSize
, dbª‡* 
c3Ref
);

22 
debugC3
(*
msg
);

	@btech/p.mech.c3i.h

6 #i‚de‡
_P_MECH_C3I_H


7 
	#_P_MECH_C3I_H


	)

9 
mech_c3i_joö_Àave
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

10 
mech_c3i_mesßge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

11 
mech_c3i_èrgës
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

12 
mech_c3i_√tw‹k
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

13 
gëFªeC3iNëw‹kPos
(
MECH
 * 
mech
, MECH * 
mechToAdd
);

14 
ª∂iˇãC3iNëw‹k
(
MECH
 * 
mechSrc
, MECH * 
mechDe°
);

15 
vÆid©eC3iNëw‹k
(
MECH
 * 
mech
);

16 
MECH
 *
gëOthîC3iMech
(MECH * 
mech
, 
wIdx
, 
tCheckECM
,

17 
tCheckSèπed
, 
tCheckUnc⁄
);

18 
˛órC3iNëw‹k
(
MECH
 * 
mech
, 
tCÀ¨FromOthîs
);

19 
˛órMechFromC3iNëw‹k
(
dbªf
 
ªfToCÀ¨
, 
MECH
 * 
mech
);

20 
addMechToC3iNëw‹k
(
MECH
 * 
mech
, MECH * 
mechToAdd
);

	@btech/p.mech.combat.h

12 #i‚de‡
_P_MECH_COMBAT_H


13 
	#_P_MECH_COMBAT_H


	)

16 
mech_èrgë
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
sixth_£n£_check
(
MECH
 * 
mech
, MECH * 
èrgë
);

18 
mech_£â¨gë
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
mech_fúewóp⁄
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
FúeWóp⁄Numbî
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
MAP
 * 
mech_m≠
,

21 
wó≤um
, 
¨gc
, **
¨gs
, 
sight
);

22 *
hex_èrgë_id
(
MECH
 * 
mech
);

23 
ˇnCÀ¨OrIgnôe
(
wópödx
);

24 
possibly_ignôe
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
wópödx
, 
ammoMode
,

25 
x
, 
y
, 
öã¡i⁄Æ
);

26 
possibly_˛ór
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
wópödx
, 
ammoMode
,

27 
damage
, 
x
, 
y
, 
öã¡i⁄Æ
);

28 
possibly_ignôe_‹_˛ór
(
MECH
 * 
mech
, 
wópödx
, 
ammoMode
,

29 
damage
, 
x
, 
y
, 
öã¡i⁄Æ
);

30 
hex_hô
(
MECH
 * 
mech
, 
x
, 
y
, 
wópödx
, 
ammoMode
,

31 
damage
, 
ishô
);

32 
wóp⁄_Áûuª_°uff
(
MECH
 * 
mech
, *
wó≤um
, *
wópödx
,

33 *
£˘i⁄
, *
¸ôiˇl
, *
ammoLoc
, *
ammoCrô
,

34 *
ammoLoc1
, *
ammoCrô1
, *
modifõr
, *
ty≥
, 
ønge
,

35 *
ønge_ok
, 
wG©éögShŸs
);

36 
FúeWóp⁄
(
MECH
 * 
mech
, 
MAP
 * 
mech_m≠
, MECH * 
èrgë
, 
LOS
,

37 
wópödx
, 
wó≤um
, 
£˘i⁄
, 
¸ôiˇl
, 
íemyX
,

38 
íemyY
, 
m≠x
, 
m≠y
, 
ønge
, 
ödúe˘Fúe
,

39 
sight
, 
ishex
);

40 
dëîmöeDamageFromHô
(
MECH
 * 
mech
, 
wSe˘i⁄
, 
wCrôSlŸ
,

41 
MECH
 * 
hôMech
, 
hôX
, 
hôY
, 
wópödx
,

42 
wG©éögShŸs
, 
wBa£WópDamage
, 
wAmmoMode
, 
ty≥
,

43 
modifõr
, 
isTempCÆc
);

44 
HôT¨gë
(
MECH
 * 
mech
, 
wópödx
, 
wSe˘i⁄
, 
wCrôSlŸ
,

45 
MECH
 * 
hôMech
, 
hôX
, 
hôY
, 
LOS
, 
ty≥
, 
modifõr
,

46 
ªÆlyhô
, 
bth
, 
wG©éögShŸs
, 
tIsSw¨mAâack
);

	@btech/p.mech.combat.misc.h

4 #i‚de‡
_P_MECH_COMBAT_MISC_H


5 
	#_P_MECH_COMBAT_MISC_H


	)

7 
de¸emít_ammunôi⁄
(
MECH
 * 
mech
, 
wópödx
, 
£˘i⁄
,

8 
¸ôiˇl
, 
ammoLoc
, 
ammoCrô
, 
ammoLoc1
, 
ammoCrô1
,

9 
wG©éögShŸs
);

10 
mech_ammow¨n_evít
(
EVENT
 * 
e
);

11 
ammo_ex≥dötuª_check
(
MECH
 * 
mech
, 
wópödx
, 
ns
);

12 
hót_ef„˘
(
MECH
 * 
mech
, MECH * 
ãmpMech
, 
hótdam
,

13 
‰omIn„∫o
);

14 
In„∫o_Hô
(
MECH
 * 
mech
, MECH * 
hôMech
, 
missûes
, 
LOS
);

15 
KûlMechC⁄ã¡sIfIC
(
dbªf
 
aRef
);

16 
De°royMech
(
MECH
 * 
èrgë
, MECH * 
mech
, 
bc
);

17 *
sh‹t_hexèrgë
(
MECH
 * 
mech
);

	@btech/p.mech.combat.missile.h

4 #i‚de‡
_P_MECH_COMBAT_MISSILE_H


5 
	#_P_MECH_COMBAT_MISSILE_H


	)

7 
Missûe_Hô
(
MECH
 * 
mech
, MECH * 
èrgë
, 
hôX
, 
hôY
,

8 
i§ór
, 
is¸ôiˇl
, 
wópödx
, 
fúeMode
, 
ammoMode
,

9 
num_missûes_hô
, 
damage
, 
ßlvo_size
, 
LOS
,

10 
bth
, 
tIsSw¨mAâack
);

11 
AMSMissûes
(
MECH
 * 
mech
, MECH * 
hôMech
, 
öcomög
, 
ty≥
,

12 
ammoLoc
, 
ammoCrô
, 
LOS
, 
missûesDidHô
);

13 
LoˇãAMSDe„n£s
(
MECH
 * 
èrgë
, *
AMSty≥
, *
ammoLoc
,

14 *
ammoCrô
);

15 
MissûeHôIndex
(
MECH
 * 
mech
, MECH * 
hôMech
, 
wópödx
,

16 
wSe˘i⁄
, 
wCrôSlŸ
);

17 
MissûeHôT¨gë
(
MECH
 * 
mech
, 
wópödx
, 
wSe˘i⁄
,

18 
wCrôSlŸ
, 
MECH
 * 
hôMech
, 
hôX
, 
hôY
, 
LOS
,

19 
ba£ToHô
, 
rﬁl
, 
öcomög
, 
tIsSw¨mAâack
);

20 
Sw¨mHôT¨gë
(
MECH
 * 
mech
, 
wópödx
, 
wSe˘i⁄
, 
wCrôSlŸ
,

21 
MECH
 * 
hôMech
, 
LOS
, 
ba£ToHô
, 
rﬁl
, 
öcomög
,

22 
fof
, 
tIsSw¨mAâack
);

	@btech/p.mech.consistency.h

12 
	~"c⁄fig.h
"

14 #i‚de‡
_P_MECH_CONSISTENCY_H


15 
	#_P_MECH_CONSISTENCY_H


	)

18 
su•_Á˘‹
(
MECH
 * 
mech
);

19 
ígöe_weight
(
MECH
 * 
mech
);

20 
mech_weight_sub_mech
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
öãø˘ive
);

21 
mech_weight_sub_veh
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
öãø˘ive
);

22 
mech_weight_sub
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
öãø˘ive
);

23 
mech_weight
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
vehi˛e_öt_check
(
MECH
 * 
mech
, 
noisy
);

25 
mech_öt_check
(
MECH
 * 
mech
, 
noisy
);

	@btech/p.mech.contacts.h

12 #i‚de‡
_P_MECH_CONTACTS_H


13 
	#_P_MECH_CONTACTS_H


	)

16 
show_brõf_Êags
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
);

17 
mech_brõf
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
mech_c⁄è˘s
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
gëWóp⁄Arc
(
MECH
 * 
mech
, 
¨c
);

20 *
gëSètusSåög
(
MECH
 * 
èrgë
, 
íemy
);

21 
gëSètusCh¨
(
MECH
 * 
mech
, MECH * 
mechT¨gë
, 
wCh¨Num
);

	@btech/p.mech.custom.h

12 #i‚de‡
_P_MECH_CUSTOM_H


13 
	#_P_MECH_CUSTOM_H


	)

16 
¸ô_weight
(
MECH
 * 
mech
, 
t
);

17 
gíî©e_ch™ge_li°
(
MECH
 * 
‰om
, MECH * 
to
);

18 
ToggÀAmmo
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
pos
);

19 
cu°om_edô
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
cu°om_föish
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
cu°om_back
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
cu°om_look
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
cu°om_hñp
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
cu°om_°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
cu°om_weight1
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
cu°om_weight2
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
cu°om_¸ô°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
cu°om_wóp⁄•ecs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
√w‰ìcu°om
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

30 
cu_a_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
cu_a_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
cu_a_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

33 
cu_a_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
cu_b_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

35 
cu_b_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

36 
cu_b_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

37 
cu_b_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

38 
cu_c_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

39 
cu_c_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

40 
cu_c_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

41 
cu_c_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

42 
cu_d_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

43 
cu_d_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

44 
cu_d_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

45 
cu_d_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

46 
cu_e_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

47 
cu_e_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

48 
cu_e_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

49 
cu_e_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

50 
cu_f_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

51 
cu_f_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

52 
cu_f_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

53 
cu_f_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

54 
cu_g_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

55 
cu_g_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

56 
cu_g_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

57 
cu_g_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

58 
cu_h_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

59 
cu_h_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

60 
cu_h_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

61 
cu_h_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

62 
cu_i_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

63 
cu_i_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

64 
cu_i_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

65 
cu_i_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

66 
cu_j_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

67 
cu_j_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

68 
cu_j_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

69 
cu_j_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

70 
cu_k_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

71 
cu_k_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

72 
cu_k_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

73 
cu_k_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

74 
cu_l_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

75 
cu_l_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

76 
cu_l_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

77 
cu_l_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

78 
cu_m_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

79 
cu_m_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

80 
cu_m_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

81 
cu_m_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

82 
cu_n_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

83 
cu_n_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

84 
cu_n_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

85 
cu_n_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

86 
cu_o_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

87 
cu_o_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

88 
cu_o_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

89 
cu_o_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

90 
cu_p_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

91 
cu_p_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

92 
cu_p_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

93 
cu_p_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

94 
cu_q_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

95 
cu_q_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

96 
cu_q_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

97 
cu_q_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

98 
cu_r_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

99 
cu_r_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

100 
cu_r_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

101 
cu_r_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

102 
cu_s_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

103 
cu_s_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

104 
cu_s_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

105 
cu_s_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

106 
cu_t_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

107 
cu_t_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

108 
cu_t_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

109 
cu_t_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

110 
cu_u_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

111 
cu_u_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

112 
cu_u_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

113 
cu_u_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

114 
cu_v_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

115 
cu_v_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

116 
cu_v_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

117 
cu_v_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

118 
cu_w_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

119 
cu_w_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

120 
cu_w_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

121 
cu_w_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

122 
cu_x_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

123 
cu_x_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

124 
cu_x_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

125 
cu_x_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

126 
cu_y_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

127 
cu_y_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

128 
cu_y_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

129 
cu_y_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

130 
cu_z_add
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

131 
cu_z_möus
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

132 
cu_z_toggÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

133 
cu_z_£t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.damage.h

4 #i‚de‡
_P_MECH_DAMAGE_H


5 
	#_P_MECH_DAMAGE_H


	)

7 
ˇu£_¨m‹damage
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
,

8 
©èckPûŸ
, 
i§ór
, 
is¸ôiˇl
, 
hôloc
, 
damage
,

9 *
¸ôs
, 
wWópIndx
, 
wAmmoMode
);

10 
ˇu£_öã∫Ædamage
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
,

11 
©èckPûŸ
, 
i§ór
, 
hôloc
, 
ötDamage
, 
wópödx
,

12 *
¸ôs
);

13 
DamageMech
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
, 
©èckPûŸ
,

14 
hôloc
, 
i§ór
, 
is¸ôiˇl
, 
damage
, 
ötDamage
,

15 
ˇu£
, 
bth
, 
wWópIndx
, 
wAmmoMode
, 
tIgn‹eSw¨mîs
);

16 
De°royWóp⁄
(
MECH
 * 
wounded
, 
hôloc
, 
ty≥
, 
°¨tCrô
,

17 
num¸ôs
, 
tŸÆ¸ôs
);

18 
Cou¡Wóp⁄sInLoc
(
MECH
 * 
mech
, 
loc
);

19 
FödWóp⁄Ty≥NumInLoc
(
MECH
 * 
mech
, 
loc
, 
num
);

20 
Lo£Wóp⁄
(
MECH
 * 
mech
, 
hôloc
);

21 
De°royHótSök
(
MECH
 * 
mech
, 
hôloc
);

22 
De°roySe˘i⁄
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
LOS
, 
hôloc
);

23 *
£èrm‹°©us_func
(
MECH
 * 
mech
, *
£˘°r
, *
ty≥°r
,

24 *
vÆue°r
);

25 
dodamage_func
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
tŸÆdam
, 
˛u°îsize
,

26 
dúe˘i⁄
, 
¸ôiˇl
, *
mechmsg
, *
mechbrﬂdˇ°
);

27 
mech_damage
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.ecm.h

12 #i‚de‡
_P_MECH_ECM_H


13 
	#_P_MECH_ECM_H


	)

16 
£ndECMNŸifiˇti⁄
(
MECH
 * 
objMech
, 
wMsgTy≥
);

17 
checkECM
(
MECH
 * 
objMech
);

	@btech/p.mech.enhanced.criticals.h

6 #i‚de‡
_P_MECH_ENHANCED_CRITICALS_H


7 
	#_P_MECH_ENHANCED_CRITICALS_H


	)

9 
gëWópD©a
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
, *
wWópIndex
,

10 *
wWópSize
, *
wFú°Crô
);

11 
gëCrôAddedBTH
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
,

12 
øngeBøckë
);

13 
gëCrôAddedHót
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
);

14 
gëCrôSubDamage
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
);

15 
ˇnWópEx∂odeFromDamage
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
,

16 
rﬁl
);

17 
ˇnWópJamFromDamage
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
, 
rﬁl
);

18 
isWópAmmoFìdLocked
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
);

19 
cou¡DamagedSlŸs
(
MECH
 * 
mech
, 
£˘i⁄
, 
wFú°Crô
,

20 
wWópSize
);

21 
cou¡DamagedSlŸsFromCrô
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
);

22 
shouldDe°royWóp⁄
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
,

23 
ö¸emítCou¡
);

24 
sc‹eEnh™˚dWóp⁄CrôiˇlHô
(
MECH
 * 
mech
, MECH * 
©èckî
, 
LOS
,

25 
£˘i⁄
, 
¸ôiˇl
);

26 
mech_wóp⁄°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
showWóp⁄DamageAndInfo
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
£˘i⁄
,

28 
¸ôiˇl
);

	@btech/p.mech.events.h

12 #i‚de‡
_P_MECH_EVENTS_H


13 
	#_P_MECH_EVENTS_H


	)

16 
mech_°™dÁû_evít
(
EVENT
 * 
e
);

17 
mech_ÁŒ_evít
(
EVENT
 * 
e
);

18 
mech_lock_evít
(
EVENT
 * 
e
);

19 
mech_°abûizög_evít
(
EVENT
 * 
e
);

20 
mech_jump_evít
(
EVENT
 * 
e
);

21 
mech_ªcovîy_evít
(
EVENT
 * 
e
);

22 
mech_ªcy˛e_evít
(
EVENT
 * 
e
);

23 
Prﬁ⁄gUnc⁄
(
MECH
 * 
mech
, 
Àn
);

24 
MaybeRecy˛e
(
MECH
 * 
mech
, 
wticks
);

25 
mech_œãøl_evít
(
EVENT
 * 
e
);

26 
mech_move_evít
(
EVENT
 * 
e
);

27 
mech_°™d_evít
(
EVENT
 * 
e
);

28 
mech_∂os_evít
(
EVENT
 * 
e
);

29 
´ro_move_evít
(
EVENT
 * 
e
);

30 
vîy_Áke_func
(
EVENT
 * 
e
);

31 
un°un_¸ew_evít
(
EVENT
 * 
e
);

32 
mech_unjam_ammo_evít
(
EVENT
 * 
objEvít
);

33 
check_°aggî_evít
(
EVENT
 * 
evít
);

34 
mech_movemode_evít
(
EVENT
 * 
e
);

35 
ˇlcSèggîBTHMod
(
MECH
 * 
mech
);

	@btech/p.mech.fire.h

6 
ö„∫o_bu∫
(
MECH
 * 
mech
, 
time
);

7 
vehi˛e_°¨t_bu∫
(
MECH
 * 
objMech
, MECH * 
objAâackî
);

8 
checkVehi˛eInFúe
(
MECH
 * 
objMech
, 
‰omHexFúe
);

9 
vehi˛e_extöquish_fúe_evít
(
EVENT
 * 
e
);

10 
vehi˛e_extöquish_fúe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

11 
w©î_extöguish_ö„∫o
(
MECH
 * 
mech
);

	@btech/p.mech.hitloc.h

12 #i‚de‡
_P_MECH_HITLOC_H


13 
	#_P_MECH_HITLOC_H


	)

16 
FödPunchLoˇti⁄
(
hôGroup
);

17 
FödKickLoˇti⁄
(
hôGroup
);

18 
gë_bsuô_hôloc
(
MECH
 * 
mech
);

19 
Tøns„rT¨gë
(
MECH
 * 
mech
, 
hôloc
);

20 
FödSw¨mHôLoˇti⁄
(*
is¸ôiˇl
, *
i§ór
);

21 
¸ôèbÀ
(
MECH
 * 
m
, 
loc
, 
åes
);

22 
FödHôLoˇti⁄
(
MECH
 * 
mech
, 
hôGroup
, *
is¸ôiˇl
,

23 *
i§ór
);

24 
FödFaßHôLoˇti⁄
(
MECH
 * 
mech
, 
hôGroup
, *
is¸ôiˇl
,

25 *
i§ór
);

26 
DoMŸiveSy°emHô
(
MECH
 * 
mech
, 
wRﬁlMod
);

27 
FödAdvFaßVehi˛eHôLoˇti⁄
(
MECH
 * 
mech
, 
hôGroup
,

28 *
is¸ôiˇl
, *
i§ór
);

29 
födNARCHôLoc
(
MECH
 * 
mech
, MECH * 
hôMech
, *
tIsRórHô
);

30 
FödT¨gëHôLoc
(
MECH
 * 
mech
, MECH * 
èrgë
, *
i§ór
,

31 *
is¸ôiˇl
);

32 
FödTCHôLoc
(
MECH
 * 
mech
, MECH * 
èrgë
, *
i§ór
, *
is¸ôiˇl
);

33 
FödAimHôLoc
(
MECH
 * 
mech
, MECH * 
èrgë
, *
i§ór
,

34 *
is¸ôiˇl
);

35 
FödAªaHôGroup
(
MECH
 * 
mech
, MECH * 
èrgë
);

	@btech/p.mech.ice.h

12 #i‚de‡
_P_MECH_ICE_H


13 
	#_P_MECH_ICE_H


	)

16 
dr›_thru_i˚
(
MECH
 * 
mech
);

17 
bªak_thru_i˚
(
MECH
 * 
mech
);

18 
possibly_dr›_thru_i˚
(
MECH
 * 
mech
);

19 
growabÀ
(
MAP
 * 
m≠
, 
x
, 
y
);

20 
mñèbÀ
(
MAP
 * 
m≠
, 
x
, 
y
);

21 
i˚_growth
(
dbªf
 
∂ayî
, 
MAP
 * 
m≠
, 
num
);

22 
i˚_mñt
(
dbªf
 
∂ayî
, 
MAP
 * 
m≠
, 
num
);

23 
m≠_addi˚
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
m≠_dñi˚
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
possibly_blow_i˚
(
MECH
 * 
mech
, 
wópödx
, 
x
, 
y
);

26 
possibly_blow_bridge
(
MECH
 * 
mech
, 
wópödx
, 
x
, 
y
);

	@btech/p.mech.lite.h

12 #i‚de‡
_P_MECH_LITE_H


13 
	#_P_MECH_LITE_H


	)

16 
ˇu£_lôe
(
MECH
 * 
mech
, MECH * 
ãmpMech
);

17 
íd_lôe_check
(
MECH
 * 
mech
);

	@btech/p.mech.los.h

12 #i‚de‡
_P_MECH_LOS_H


13 
	#_P_MECH_LOS_H


	)

16 
A˘uÆEÀv©i⁄
(
MAP
 * 
m≠
, 
x
, 
y
, 
MECH
 * 
mech
);

17 
CÆcuœãLOSFœg
(
MECH
 * 
mech
, MECH * 
èrgë
, 
MAP
 * 
m≠
, 
x
, 
y
,

18 
ff
, 
hexR™ge
);

19 
AddTîøöMod
(
MECH
 * 
mech
, MECH * 
èrgë
, 
MAP
 * 
m≠
, 
hexR™ge
,

20 
wAmmoMode
);

21 
InLöeOfSight_NB
(
MECH
 * 
mech
, MECH * 
èrgë
, 
x
, 
y
,

22 
hexR™ge
);

23 
InLöeOfSight
(
MECH
 * 
mech
, MECH * 
èrgë
, 
x
, 
y
,

24 
hexR™ge
);

25 
mech_lo£mô
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.lostracer.h

12 #i‚de‡
_P_MECH_LOSTRACER_H


13 
	#_P_MECH_LOSTRACER_H


	)

15 *
Tø˚LOS
(
MAP
 * 
m≠
, 
ax
, 
ay
, 
bx
, 
by
, *
ªsu…
);

	@btech/p.mech.maps.h

12 #i‚de‡
_P_MECH_MAPS_H


13 
	#_P_MECH_MAPS_H


	)

16 
mech_föd˚¡î
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 c⁄° *
GëTîøöName_ba£
(
t
);

18 c⁄° *
GëTîøöName
(
MAP
 * 
m≠
, 
x
, 
y
);

19 
mech_«vig©e
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
GëLRSMechCh¨
(
MECH
 * 
mech
, MECH * 
ãmpMech
);

21 
mech_Ãsm≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 *
TîøöCﬁ‹
(
ãºaö
, 
ñev
);

23 
TacM≠Tîr
(
MAP
 * 
mech_m≠
, 
x
, 
y
, *
ãº
, *
ñev
,

24 
isdown
);

25 **
MakeM≠Text
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
MAP
 * 
mech_m≠
, 
x
, 
y
,

26 
xw
, 
yw
, 
œbñs
, 
dohexlos
);

27 
mech_ècm≠
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
mech_íãrba£
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.mechref_ident.h

12 #i‚de‡
_P_MECH_MECHREF_IDENT_H


13 
	#_P_MECH_MECHREF_IDENT_H


	)

16 c⁄° *
föd_mech«me_by_mechªf
(c⁄° *
ªf
);

	@btech/p.mech.move.h

12 #i‚de‡
_P_MECH_MOVE_H


13 
	#_P_MECH_MOVE_H


	)

16 c⁄° *
L©îÆDesc
(
MECH
 * 
mech
);

17 
mech_œãøl
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
mech_boŸÀggî
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
mech_ëa
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
MechC¨goMaxS≥ed
(
MECH
 * 
mech
, 
m•ìd
);

21 
mech_dr›
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
mech_°™d
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mech_œnd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
mech_hódög
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
mech_tuºë
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
mech_rŸ©ë‹so
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
mech_•ìd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
mech_vîtiˇl
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
mech_thøsh
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
mech_jump
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
mech_huŒdown
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
mech_•röt
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

33 
mech_evade
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
mech_dodge
(
dbªf
 
∂ayî
, *
d©e
, *
buf„r
);

35 
Dr›GëEÀv©i⁄
(
MECH
 * 
mech
);

36 
Dr›SëEÀv©i⁄
(
MECH
 * 
mech
, 
w™tdr›
);

37 
L™dMech
(
MECH
 * 
mech
);

38 
MechFloodsLoc
(
MECH
 * 
mech
, 
loc
, 
Àv
);

39 
MechFloods
(
MECH
 * 
mech
);

40 
MechFÆls
(
MECH
 * 
mech
, 
Àvñs
, 
£emsg
);

41 
mechs_ö_hex
(
MAP
 * 
m≠
, 
x
, 
y
, 
‰õndly
, 
ãam
);

42 
ˇu£_damage
(
MECH
 * 
©t
, MECH * 
mech
, 
dam
, 
èbÀ
);

43 
domöo_•a˚_ö_hex
(
MAP
 * 
m≠
, 
MECH
 * 
me
, 
x
, 
y
, 
‰õndly
,

44 
mode
, 
˙t
);

45 
domöo_•a˚
(
MECH
 * 
mech
, 
mode
);

	@btech/p.mech.notify.h

12 #i‚de‡
_P_MECH_NOTIFY_H


13 
	#_P_MECH_NOTIFY_H


	)

16 c⁄° *
GëAmmoDesc_Modñ_Mode
(
modñ
, 
mode
);

17 
GëWóp⁄AmmoModeLëãr_Modñ_Mode
(
modñ
, 
mode
);

18 
GëWóp⁄FúeModeLëãr_Modñ_Mode
(
modñ
, 
mode
);

19 
GëWóp⁄AmmoModeLëãr
(
MECH
 * 
mech
, 
lo›
, 
¸ô
);

20 
GëWóp⁄FúeModeLëãr
(
MECH
 * 
mech
, 
lo›
, 
¸ô
);

21 c⁄° *
GëMoveTy≥ID
(
movëy≥
);

22 
Mech_ShowFœgs
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
•a˚s
, 
Àvñ
);

23 c⁄° *
GëArcID
(
MECH
 * 
mech
, 
¨c
);

24 c⁄° *
GëMechToMechID_ba£
(
MECH
 * 
£e
, MECH * 
mech
, 
i
);

25 c⁄° *
GëMechToMechID
(
MECH
 * 
£e
, MECH * 
mech
);

26 c⁄° *
GëMechID
(
MECH
 * 
mech
);

27 
mech_£t_ch™√l‰eq
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
mech_£t_ch™√…ôÀ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
mech_£t_ch™√lmode
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
mech_li°_‰eqs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
mech_£ndch™√l
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
S¸ambÀMesßge
(*
buffo
, 
ønge
, 
£ndønge
, 
ªcvº™ge
,

33 *
h™dÀ
, *
msg
, 
bth
, *
isxp
, 
undî_ecm
,

34 
digmode
);

35 
comm⁄_checks
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
Êag
);

36 
ªcursive_commlök
(
i
, 
dï
);

37 
n⁄ªcursive_commlök
(
i
);

38 
födCommLök
(
MAP
 * 
m≠
, 
MECH
 * 
‰om
, MECH * 
to
, 
‰eq
);

39 
£ndch™√l°uff
(
MECH
 * 
mech
, 
‰eq
, *
msg
);

40 
mech_ødio
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

41 
MechBrﬂdˇ°
(
MECH
 * 
mech
, MECH * 
èrgë
, 
MAP
 * 
mech_m≠
,

42 *
buf„r
);

43 
MechLOSBrﬂdˇ°
(
MECH
 * 
mech
, *
mesßge
);

44 
MechSìsHexF
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
x
, 
y
, 
ix
, 
iy
);

45 
MechSìsHex
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
x
, 
y
);

46 
HexLOSBrﬂdˇ°
(
MAP
 * 
mech_m≠
, 
x
, 
y
, *
mesßge
);

47 
MechLOSBrﬂdˇ°i
(
MECH
 * 
mech
, MECH * 
èrgë
, *
mesßge
);

48 
M≠Brﬂdˇ°
(
MAP
 * 
m≠
, *
mesßge
);

49 
MechFúeBrﬂdˇ°
(
MECH
 * 
mech
, MECH * 
èrgë
, 
x
, 
y
,

50 
MAP
 * 
mech_m≠
, *
wó≤ame
, 
IsHô
);

51 
mech_nŸify
(
MECH
 * 
mech
, 
ty≥
, *
buf„r
);

	@btech/p.mech.ood.h

12 #i‚de‡
_P_MECH_OOD_H


13 
	#_P_MECH_OOD_H


	)

16 
mech_ood_damage
(
MECH
 * 
wounded
, MECH * 
©èckî
, 
damage
);

17 
mech_ood_evít
(
EVENT
 * 
e
);

18 
öôüã_ood
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.partnames.h

12 #i‚de‡
_P_MECH_PARTNAMES_H


13 
	#_P_MECH_PARTNAMES_H


	)

16 
li°_phash°©s
(
dbªf
 
∂ayî
);

17 
öôülize_∑π«me_èbÀs
();

18 *
gë_∑πs_sh‹t_«me
(
i
, 
b
);

19 *
gë_∑πs_l⁄g_«me
(
i
, 
b
);

20 *
gë_∑πs_vl⁄g_«me
(
i
, 
b
);

21 
föd_m©chög_vl⁄g_∑π
(*
wc
, *
öd
, *
id
, *
bønd
);

22 
föd_m©chög_l⁄g_∑π
(*
wc
, *
i
, *
id
, *
bønd
);

23 
föd_m©chög_sh‹t_∑π
(*
wc
, *
öd
, *
id
, *
bønd
);

24 
Li°F‹ms
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 *
∑π«me_func
(
ödex
, 
size
);

	@btech/p.mech.physical.h

12 #i‚de‡
_P_MECH_PHYSICAL_H


13 
	#_P_MECH_PHYSICAL_H


	)

16 
mech_punch
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
mech_˛ub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
have_axe
(
MECH
 * 
mech
, 
loc
);

19 
have_sw‹d
(
MECH
 * 
mech
, 
loc
);

20 
have_ma˚
(
MECH
 * 
mech
, 
loc
);

21 
mech_axe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
mech_sw‹d
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mech_kick
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
mech_ch¨ge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 *
phys_f‹m
(
©
, 
Êag
);

26 
phys_suc˚ed
(
MECH
 * 
mech
, MECH * 
èrgë
, 
©
);

27 
phys_Áû
(
MECH
 * 
mech
, MECH * 
èrgë
, 
©
);

28 
PhysiˇlAâack
(
MECH
 * 
mech
, 
damageweight
, 
ba£ToHô
,

29 
AâackTy≥
, 
¨gc
, **
¨gs
, 
MAP
 * 
mech_m≠
, 
£˘
);

30 
PhysiˇlDamage
(
MECH
 * 
mech
, MECH * 
èrgë
, 
weightdmg
,

31 
AâackTy≥
, 
£˘
);

32 
DóthFromAbove
(
MECH
 * 
mech
, MECH * 
èrgë
);

33 
Ch¨geMech
(
MECH
 * 
mech
, MECH * 
èrgë
);

34 
checkGøbClubLoˇti⁄
(
MECH
 * 
mech
, 
£˘i⁄
, 
emô
);

35 
mech_gøb˛ub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.pickup.h

12 #i‚de‡
_P_MECH_PICKUP_H


13 
	#_P_MECH_PICKUP_H


	)

16 
mech_pickup
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
mech_©èchˇbÀs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
mech_dëachˇbÀs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
mech_dr›off
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.restrict.h

12 #i‚de‡
_P_MECH_RESTRICT_H


13 
	#_P_MECH_RESTRICT_H


	)

16 
˛ór_mech_‰om_LOS
(
MECH
 * 
mech
);

17 
mech_R£txy
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
mech_R£tm≠ödex
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

19 
mech_R£âóm
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
√w‰ìmech
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

	@btech/p.mech.scan.h

12 #i‚de‡
_P_MECH_SCAN_H


13 
	#_P_MECH_SCAN_H


	)

16 
mech_sˇn
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
mech_ªp‹t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
ShowTuºëFacög
(
dbªf
 
∂ayî
, 
•a˚s
, 
MECH
 * 
mech
);

19 
PrötRï‹t
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, MECH * 
ãmpMech
, 
ønge
);

20 
PrötE√mySètus
(
dbªf
 
∂ayî
, 
MECH
 * 
mymech
, MECH * 
mech
,

21 
ønge
, 
›t
);

22 
mech_bórög
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mech_ønge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
PrötE√myWóp⁄Sètus
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
);

25 
mech_sight
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
mech_võw
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.sensor.functions.h

12 #i‚de‡
_P_MECH_SENSOR_FUNCTIONS_H


13 
	#_P_MECH_SENSOR_FUNCTIONS_H


	)

16 
vi¶ight_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

17 
lôómp_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

18 
ö‰¨ed_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

19 
ñe˘rom_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

20 
£ismic_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

21 
ød¨_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

22 
b≠_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

23 
blood_£e
(
MECH
 * 
t
, 
num
, 
r
, 
c
, 
l
);

24 
vi¶ight_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

25 
lôómp_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

26 
ö‰¨ed_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

27 
ñe˘rom_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

28 
£ismic_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

29 
ød¨_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

30 
b≠_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

31 
blood_c£e
(
MECH
 * 
m
, MECH * 
t
, 
r
, 
f
);

32 
vi¶ight_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

33 
lôómp_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

34 
ö‰¨ed_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

35 
ñe˘rom_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

36 
£ismic_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

37 
b≠_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

38 
blood_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

39 
ød¨_tohô
(
MECH
 * 
m
, MECH * 
t
, 
f
, 
l
);

	@btech/p.mech.sensor.h

12 #i‚de‡
_P_MECH_SENSOR_H


13 
	#_P_MECH_SENSOR_H


	)

16 
Sís‹_ToHôB⁄us
(
MECH
 * 
mech
, MECH * 
èrgë
, 
Êag
, 
m≠light
,

17 
ønge
, 
wAmmoMode
);

18 
Sís‹_C™Sì
(
MECH
 * 
mech
, MECH * 
èrgë
, *
Êag
, 
¨c
,

19 
ønge
, 
m≠vis
, 
m≠light
, 
˛oudba£
);

20 
Sís‹_ArcBa£Ch™˚
(
ty≥
, 
¨c
);

21 
Sís‹_DrivîBa£Ch™˚
(
MECH
 * 
mech
);

22 
Sís‹_Sìs
(
MECH
 * 
mech
, MECH * 
èrgë
, 
f
, 
¨c
, 
ønge
,

23 
¢um
, 
ch™˚_divis‹
, 
m≠vis
, 
m≠light
);

24 
Sís‹_SìsNow
(
MECH
 * 
mech
, MECH * 
èrgë
, 
f
, 
¨c
, 
ønge
,

25 
m≠vis
, 
m≠light
);

26 *
my_dump_Êag
(
i
);

27 
Sís‹_DoWeSìNow
(
MECH
 * 
mech
, *
Ê
, 
ønge
, 
x
,

28 
y
, 
MECH
 * 
èrgë
, 
m≠vis
, 
m≠light
, 
˛oudba£
,

29 
£ó√w
, 
wlf
);

30 
upd©e_LOSöfo
(
dbªf
 
obj
, 
MAP
 * 
m≠
);

31 
add_£ns‹_öfo
(*
buf
, 
MECH
 * 
mech
, 
¢
, 
vîbo£
);

32 *
mechSís‹Info
(
mode
, 
MECH
 * 
mech
, *
¨g
);

33 
C™Ch™geTo
(
MECH
 * 
mech
, 
s
);

34 
£ns‹_light_avaûabûôy_check
(
MECH
 * 
mech
);

35 
mech_£ns‹
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

36 
possibly_£e_mech
(
MECH
 * 
mech
);

37 
S¸ambÀIn‰aAndLôeAmp
(
MECH
 * 
mech
, 
time
, 
ch™˚
,

38 *
ö‰amsg
, *
lôómpmsg
);

	@btech/p.mech.spot.h

4 #i‚de‡
_P_MECH_SPOT_H


5 
	#_P_MECH_SPOT_H


	)

7 
IsAπyMech
(
MECH
 * 
mech
);

8 
CÀ¨FúeAdju°míts
(
MAP
 * 
m≠
, 
dbªf
 
mech
);

9 
mech_•Ÿ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

10 
FúeSpŸ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
MAP
 * 
mech_m≠
, 
wóp⁄num
,

11 
wóp⁄ty≥
, 
sight
, 
£˘i⁄
, 
¸ôiˇl
);

	@btech/p.mech.startup.h

12 #i‚de‡
_P_MECH_STARTUP_H


13 
	#_P_MECH_STARTUP_H


	)

16 
mech_°¨tup
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

17 
mech_shutdown
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.stat.h

12 #i‚de‡
_P_MECH_STAT_H


13 
	#_P_MECH_STAT_H


	)

16 
öô_°©
();

17 
do_show_°©
(
dbªf
 
∂ayî
, dbª‡
ˇu£
, 
key
, *
¨g1
,

18 *
¨g2
);

	@btech/p.mech.status.h

12 
	~"c⁄fig.h
"

14 #i‚de‡
_P_MECH_STATUS_H


15 
	#_P_MECH_STATUS_H


	)

18 
Di•œyT¨gë
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
);

19 
show_miscbønds
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
);

20 
PrötGíîicSètus
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
own
, 
u£x
);

21 
PrötSh‹tInfo
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
);

22 
PrötInfoSètus
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
own
);

23 
mech_°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
mech_¸ô°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 *
∑π_«me
(
ty≥
, 
bønd
);

26 *
∑π_«me_l⁄g
(
ty≥
, 
bønd
);

27 *
pos_∑π_«me
(
MECH
 * 
mech
, 
ödex
, 
lo›
);

28 
mech_wóp⁄•ecs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 *
¸ô°©us_func
(
MECH
 * 
mech
, *
¨g
);

30 *
¨m‹°©us_func
(
MECH
 * 
mech
, *
¨g
);

31 *
wóp⁄°©us_func
(
MECH
 * 
mech
, *
¨g
);

32 *
¸ô¶Ÿ_func
(
MECH
 * 
mech
, *
buf_£˘i⁄
, *
buf_¸ônum
, *
buf_Êag
);

33 
CrôiˇlSètus
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
ödex
);

34 *
evÆu©e_ammo_amou¡
(
now
, 
max
);

35 
PrötWóp⁄Sètus
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
);

36 
Arm‹EvÆu©eSîious
(
MECH
 * 
mech
, 
loc
, 
Êag
, *
›t
);

37 *
PrötArm‹DamageCﬁ‹
(
MECH
 * 
mech
, 
loc
, 
Êag
);

38 *
PrötArm‹DamageSåög
(
MECH
 * 
mech
, 
loc
, 
Êag
);

39 *
Arm‹KeyInfo
(
dbªf
 
∂ayî
, 
keyn
, 
ow√r
);

40 *
show_¨m‹
(
MECH
 * 
mech
, 
loc
, 
Êag
);

41 
PrötArm‹Sètus
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
ow√r
);

42 
hasPhysiˇl
(
MECH
 * 
objMech
, 
wLoc
, 
wPhysTy≥
);

43 
ˇnU£Physiˇl
(
MECH
 * 
objMech
, 
wLoc
, 
wPhysTy≥
);

	@btech/p.mech.tag.h

7 
mech_èg
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

8 
isTAGDe°royed
(
MECH
 * 
mech
);

9 
°›TAG
(
MECH
 * 
mech
);

10 
checkTAG
(
MECH
 * 
mech
);

	@btech/p.mech.tech.commands.h

12 #i‚de‡
_P_MECH_TECH_COMMANDS_H


13 
	#_P_MECH_TECH_COMMANDS_H


	)

16 
Some⁄eRïaúög_s
(
MECH
 * 
mech
, 
loc
, 
∑π
, 
t
);

17 
Some⁄eRïaúög
(
MECH
 * 
mech
, 
loc
, 
∑π
);

18 
Some⁄eRïœcögSuô
(
MECH
 * 
mech
, 
loc
);

19 
Some⁄eFixögA
(
MECH
 * 
mech
, 
loc
);

20 
Some⁄eFixögI
(
MECH
 * 
mech
, 
loc
);

21 
Some⁄eFixög
(
MECH
 * 
mech
, 
loc
);

22 
Some⁄eAâachög
(
MECH
 * 
mech
, 
loc
);

23 
Some⁄eRe£Æög
(
MECH
 * 
mech
, 
loc
);

24 
Some⁄eS¸≠pögLoc
(
MECH
 * 
mech
, 
loc
);

25 
Some⁄eS¸≠pögP¨t
(
MECH
 * 
mech
, 
loc
, 
∑π
);

26 
C™S¸≠Loc
(
MECH
 * 
mech
, 
loc
);

27 
C™S¸≠P¨t
(
MECH
 * 
mech
, 
loc
, 
∑π
);

28 
VÆidGunPos
(
MECH
 * 
mech
, 
loc
, 
pos
);

29 
ãch_check°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
ãch_ªmovegun
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
ãch_ªmovï¨t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
InvÆid_S¸≠_P©h
(
MECH
 * 
mech
, 
loc
);

33 
ãch_ªmove£˘i⁄
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
ãch_ª∂a˚gun
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

35 
ãch_ª∑úgun
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

36 
ãch_fixíh¸ô
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

37 
ãch_ª∂a˚∑π
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

38 
ãch_ª∑ú∑π
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

39 
ãch_toggÀty≥
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

40 
ãch_ªlﬂd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

41 
ãch_u∆ﬂd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

42 
ãch_fix¨m‹
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

43 
ãch_fixöã∫Æ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

44 
InvÆid_Rïaú_P©h
(
MECH
 * 
mech
, 
loc
);

45 
unô_is_fixabÀ
(
MECH
 * 
mech
);

46 
ãch_ª©èch
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

47 
ãch_ª£Æ
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

48 
ãch_magic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

49 
ãch_ª∂a˚suô
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.tech.damages.h

12 #i‚de‡
_P_MECH_TECH_DAMAGES_H


13 
	#_P_MECH_TECH_DAMAGES_H


	)

16 
make_s¸≠_èbÀ
(
MECH
 * 
mech
);

17 
make_damage_èbÀ
(
MECH
 * 
mech
);

18 
is_undî_ª∑ú
(
MECH
 * 
mech
, 
i
);

19 *
damages_func
(
MECH
 * 
mech
);

20 
show_mechs_damage
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
ãch_fix
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.tech.do.h

12 #i‚de‡
_P_MECH_TECH_DO_H


13 
	#_P_MECH_TECH_DO_H


	)

16 
vÆid_ammo_mode
(
MECH
 * 
mech
, 
loc
, 
∑π
, 
Àt
);

17 
FödAmmoTy≥
(
MECH
 * 
mech
, 
loc
, 
∑π
);

18 
ª∂a˚_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

19 
ªlﬂd_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
, *
vÆ
);

20 
fix¨m‹_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, *
vÆ
);

21 
fixöã∫Æ_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, *
vÆ
);

22 
ª∑ú_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

23 
ª∑úíh¸ô_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

24 
ª©èch_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

25 
ª∂a˚suô_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

26 
ª£Æ_ec⁄
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

27 
ª∂a˚p_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

28 
ª∂a˚g_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

29 
ªlﬂd_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
, *
vÆ
);

30 
fixöã∫Æ_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, *
vÆ
);

31 
fix¨m‹_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, *
vÆ
);

32 
ª©èch_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

33 
ª∂a˚suô_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

34 
ª£Æ_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

35 
ª∑úg_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

36 
ª∑úíh¸ô_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

37 
ª∑úp_succ
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

38 
ª∂a˚p_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

39 
ª∑úp_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

40 
ª∂a˚g_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

41 
ª∑úg_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

42 
ª∑úíh¸ô_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
);

43 
ªlﬂd_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, 
∑π
, *
vÆ
);

44 
fix¨m‹_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, *
vÆ
);

45 
fixöã∫Æ_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
, *
vÆ
);

46 
ª©èch_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

47 
ª∂a˚suô_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

48 
ª£Æ_Áû
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
loc
);

	@btech/p.mech.tech.events.h

12 #i‚de‡
_P_MECH_TECH_EVENTS_H


13 
	#_P_MECH_TECH_EVENTS_H


	)

16 
muxevít_tickmech_ªmove£˘i⁄
(
EVENT
 * 
e
);

17 
muxevít_tickmech_ªmovegun
(
EVENT
 * 
e
);

18 
muxevít_tickmech_ªmovï¨t
(
EVENT
 * 
e
);

19 
muxevít_tickmech_ª∑ú¨m‹
(
EVENT
 * 
e
);

20 
muxevít_tickmech_ª∑úöã∫Æ
(
EVENT
 * 
e
);

21 
muxevít_tickmech_ª©èch
(
EVENT
 * 
e
);

22 
muxevít_tickmech_ª∂a˚suô
(
EVENT
 * 
e
);

23 
muxevít_tickmech_ª∂a˚gun
(
EVENT
 * 
e
);

24 
muxevít_tickmech_ª∑úgun
(
EVENT
 * 
e
);

25 
evít_mech_ª∑úíh¸ô
(
EVENT
 * 
e
);

26 
muxevít_tickmech_ª∑ú∑π
(
EVENT
 * 
e
);

27 
muxevít_tickmech_ªlﬂd
(
EVENT
 * 
e
);

28 
muxevít_tickmech_mou¡bomb
(
EVENT
 * 
e
);

29 
muxevít_tickmech_umou¡bomb
(
EVENT
 * 
e
);

30 
muxevít_tickmech_ª∂a˚suô
(
EVENT
 * 
e
);

	@btech/p.mech.tech.h

12 #i‚de‡
_P_MECH_TECH_H


13 
	#_P_MECH_TECH_H


	)

16 
game_œg
();

17 
game_œg_time
(
i
);

18 
ãch_rﬁl
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
diff
);

19 
ãch_wóp⁄_rﬁl
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
diff
);

20 
ãch_°©us
(
dbªf
 
∂ayî
, 
CLöórTimeAbsﬁuã
 
d©
);

21 
ãch_addãchtime
(
dbªf
 
∂ayî
, 
time
);

22 
ãch_∑r£∑π_adv™˚d
(
MECH
 * 
mech
, *
buf„r
, *
loc
, *
pos
,

23 *
exåa
, 
Ælowª¨
);

24 
ãch_∑r£∑π
(
MECH
 * 
mech
, *
buf„r
, *
loc
, *
pos
,

25 *
exåa
);

26 
ãch_∑r£gun
(
MECH
 * 
mech
, *
buf„r
, *
loc
, *
pos
,

27 *
bønd
);

28 
figuª_œã°_ãch_evít
(
MECH
 * 
mech
);

	@btech/p.mech.tech.repairs.h

12 #i‚de‡
_P_MECH_TECH_REPAIRS_H


13 
	#_P_MECH_TECH_REPAIRS_H


	)

16 
ãch_ª∑ús
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.tech.saverepair.h

12 #i‚de‡
_P_MECH_TECH_SAVEREPAIR_H


13 
	#_P_MECH_TECH_SAVEREPAIR_H


	)

16 
ßvîïaús
(
FILE
 * 
f
);

17 
lﬂdª∑ús
(
FILE
 * 
f
);

	@btech/p.mech.tic.h

12 #i‚de‡
_P_MECH_TIC_H


13 
	#_P_MECH_TIC_H


	)

16 
˛óπic_sub_func
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
, 
low
, 
high
);

17 
˛óπic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

18 
addtic_sub_func
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
, 
low
, 
high
);

19 
addtic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
dñtic_sub_func
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
, 
low
, 
high
);

21 
dñtic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
fúëic_sub_func
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
, 
low
, 
high
);

23 
fúëic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
li°tic_sub
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
mech_˛óπic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
mech_addtic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
mech_dñtic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
mech_fúëic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
mech_li°tic
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
hót_cutoff
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mech.update.h

12 #i‚de‡
_P_MECH_UPDATE_H


13 
	#_P_MECH_UPDATE_H


	)

16 
fõry_dóth
(
MECH
 * 
mech
);

17 
bridge_w_ñev©i⁄
(
MECH
 * 
mech
);

18 
bridge_£t_ñev©i⁄
(
MECH
 * 
mech
);

19 
DSOkToNŸify
(
MECH
 * 
mech
);

20 
cﬁlisi⁄_check
(
MECH
 * 
mech
, 
mode
, 
À
, 
…
);

21 
move_mech
(
MECH
 * 
mech
);

22 
CheckNavÆHeight
(
MECH
 * 
mech
, 
oz
);

23 
CheckVTOLHeight
(
MECH
 * 
mech
);

24 
Upd©eHódög
(
MECH
 * 
mech
);

25 
ãºaö_•ìd
(
MECH
 * 
mech
, 
ãmp•ìd
, 
max•ìd
,

26 
ãºaö
, 
ñev
);

27 
Upd©eS≥ed
(
MECH
 * 
mech
);

28 
OvîhótMods
(
MECH
 * 
mech
);

29 
ammo_ex∂osi⁄
(
MECH
 * 
©èckî
, MECH * 
mech
, 
ammﬁoc
,

30 
ammo¸ônum
, 
damage
);

31 
H™dÀOvîhót
(
MECH
 * 
mech
);

32 
Upd©eHót
(
MECH
 * 
mech
);

33 
ªcy˛e_wóp⁄ry
(
MECH
 * 
mech
);

34 
SkidMod
(
S≥ed
);

35 
NewHexE¡îed
(
MECH
 * 
mech
, 
MAP
 * 
mech_m≠
, 
dñèx
, 
dñèy
,

36 
œ°_z
);

37 
CheckDamage
(
MECH
 * 
wounded
);

38 
Upd©ePûŸSkûlRﬁls
(
MECH
 * 
mech
);

39 
upd©eAutŸu∫Tuºë
(
MECH
 * 
mech
);

40 
mech_upd©e
(
dbªf
 
key
, *
d©a
);

	@btech/p.mech.utils.h

12 
	~"c⁄fig.h
"

14 #i‚de‡
_P_MECH_UTILS_H


15 
	#_P_MECH_UTILS_H


	)

18 c⁄° *
mechty≥«me
(
MECH
 * 
foo
);

19 
MNumbî
(
MECH
 * 
mech
, 
low
, 
high
);

20 *
MechIDS
(
MECH
 * 
mech
, 
i¶owî
);

21 *
MyToUµî
(*
°rög
);

22 
CrôsInLoc
(
MECH
 * 
mech
, 
ödex
);

23 
Se˘HasBusyWóp
(
MECH
 * 
mech
, 
£˘
);

24 
MAP
 *
VÆidM≠
(
dbªf
 
∂ayî
, dbª‡
m≠
);

25 
dbªf
 
FödMechOnM≠
(
MAP
 *
m≠
, *
mechid
);

26 
dbªf
 
FödT¨gëDBREFFromM≠Numbî
(
MECH
 * 
mech
, *
m≠num
);

27 
FödComp⁄íts
(
magnôude
, 
degªes
, *
x
, *
y
);

28 
CheckEdgeOfM≠
(
MECH
 * 
mech
);

29 
FödBórög
(
x0
, 
y0
, 
x1
, 
y1
);

30 
InWóp⁄Arc
(
MECH
 * 
mech
, 
x
, 
y
);

31 *
FödGu¬îySkûlName
(
MECH
 * 
mech
, 
wópödx
);

32 *
FödPûŸögSkûlName
(
MECH
 * 
mech
);

33 
FödPûŸPûŸög
(
MECH
 * 
mech
);

34 
FödSPûŸPûŸög
(
MECH
 * 
mech
);

35 
FödPûŸSpŸtög
(
MECH
 * 
mech
);

36 
FödPûŸAπyGun
(
MECH
 * 
mech
);

37 
FödPûŸGu¬îy
(
MECH
 * 
mech
, 
wópödx
);

38 *
FödTechSkûlName
(
MECH
 * 
mech
);

39 
FödTechSkûl
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
);

40 
MadePûŸSkûlRﬁl
(
MECH
 * 
mech
, 
mods
);

41 
MechPûŸSkûlRﬁl_BTH
(
MECH
 *
mech
, 
mods
);

42 
MadePûŸSkûlRﬁl_Adv™˚d
(
MECH
 * 
mech
, 
mods
,

43 
suc˚edWhíFÆÀn
);

44 
FödXY
(
x0
, 
y0
, 
bórög
, 
ønge
, *
x1
,

45 *
y1
);

46 
FödR™ge
(
x0
, 
y0
, 
z0
, 
x1
, 
y1
,

47 
z1
);

48 
FödXYR™ge
(
x0
, 
y0
, 
x1
, 
y1
);

49 
FödHexR™ge
(
x0
, 
y0
, 
x1
, 
y1
);

50 
RólCo‹dToM≠Co‹d
(*
hex_x
, *
hex_y
, 
ˇπ_x
,

51 
ˇπ_y
);

52 
M≠Co‹dToRólCo‹d
(
hex_x
, 
hex_y
, *
ˇπ_x
,

53 *
ˇπ_y
);

54 
«vig©e_skëch_mechs
(
MECH
 *
mech
, 
MAP
 *
m≠
, 
x
, 
y
,

55 
buff
[
NAVIGATE_LINES
][
MBUF_SIZE
]);

56 
FödT¨gëXY
(
MECH
 * 
mech
, *
x
, *
y
, *
z
);

57 
FödWóp⁄s_Adv™˚d
(
MECH
 * 
mech
, 
ödex
, *
wó∑ºay
,

58 *
wópd©Øºay
, *
¸ôiˇl
, 
whöe
);

59 
FödAmmunôi⁄
(
MECH
 * 
mech
, *
wó∑ºay
,

60 *
ammﬂºay
, *
ammomax¨øy
,

61 *
modóºay
);

62 
FödLegHótSöks
(
MECH
 * 
mech
);

63 
FödWóp⁄NumbîOnMech_Adv™˚d
(
MECH
 * 
mech
, 
numbî
, *
£˘i⁄
,

64 *
¸ô
, 
sight
);

65 
FödWóp⁄NumbîOnMech
(
MECH
 * 
mech
, 
numbî
, *
£˘i⁄
,

66 *
¸ô
);

67 
FödWóp⁄FromIndex
(
MECH
 * 
mech
, 
wópödx
, *
£˘i⁄
,

68 *
¸ô
);

69 
FödWóp⁄Index
(
MECH
 * 
mech
, 
numbî
);

70 
födAmmoInSe˘i⁄
(
MECH
 * 
mech
, 
£˘i⁄
, 
ty≥
, 
nogof
,

71 
gof
);

72 
FödAmmoF‹Wóp⁄_sub
(
MECH
 * 
mech
, 
wópSe˘i⁄
, 
wópCrôiˇl
,

73 
wópödx
, 
°¨t
, *
£˘i⁄
, *
¸ôiˇl
, 
nogof
,

74 
gof
);

75 
FödAmmoF‹Wóp⁄
(
MECH
 * 
mech
, 
wópödx
, 
°¨t
, *
£˘i⁄
,

76 *
¸ôiˇl
);

77 
Cou¡AmmoF‹Wóp⁄
(
MECH
 * 
mech
, 
wópödx
);

78 
FödAπemisF‹Wóp⁄
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ôiˇl
);

79 
FödDe°ru˘iveAmmo
(
MECH
 * 
mech
, *
£˘i⁄
, *
¸ôiˇl
);

80 
FödRoundsF‹Wóp⁄
(
MECH
 * 
mech
, 
wópödx
);

81 c⁄° **
Pr›îSe˘i⁄SåögFromTy≥
(
ty≥
, 
mty≥
);

82 
Arm‹SåögFromIndex
(
ödex
, *
buf„r
, 
ty≥
, 
mty≥
);

83 
IsInWóp⁄Arc
(
MECH
 * 
mech
, 
x
, 
y
, 
£˘i⁄
,

84 
¸ôiˇl
);

85 
GëWóp⁄Crôs
(
MECH
 * 
mech
, 
wópödx
);

86 
li°m©ch
(**
foo
, *
m©
);

87 
do_sub_magic
(
MECH
 * 
mech
, 
loud
);

88 
do_magic
(
MECH
 * 
mech
);

89 
mech_RïaúP¨t
(
MECH
 * 
mech
, 
loc
, 
pos
);

90 
no_loˇti⁄s_de°royed
(
MECH
 * 
mech
);

91 
mech_ReAâach
(
MECH
 * 
mech
, 
loc
);

92 
mech_Rïœ˚Suô
(
MECH
 * 
mech
, 
loc
);

93 
mech_ReSól
(
MECH
 * 
mech
, 
loc
);

94 
mech_Dëach
(
MECH
 * 
mech
, 
loc
);

95 
mech_FûlP¨tAmmo
(
MECH
 * 
mech
, 
loc
, 
pos
);

96 
Ac˚±abÀDegªe
(
d
);

97 
M¨kF‹LOSUpd©e
(
MECH
 * 
mech
);

98 
mu…i_wóp_£l
(
MECH
 * 
mech
, 
dbªf
 
∂ayî
, *
buf„r
, 
bôbybô
,

99 (*
foo
Ë(
MECH
 *, 
dbªf
, , ));

100 
	`Rﬁl
();

101 
	`MyHexDi°
(
x1
, 
y1
, 
x2
, 
y2
, 
tc
);

102 
	`Cou¡De°royedLegs
(
MECH
 * 
objMech
);

103 
	`IsLegDe°royed
(
MECH
 * 
objMech
, 
wLoc
);

104 
	`IsMechLegLess
(
MECH
 * 
objMech
);

105 
	`FödFú°Wóp⁄Crô
(
MECH
 * 
objMech
, 
wLoc
, 
wSlŸ
,

106 
wSèπSlŸ
, 
wCrôTy≥
, 
wMaxCrôs
);

107 
	`checkAŒSe˘i⁄s
(
MECH
 * 
mech
, 
•ecülToFöd
);

108 
	`checkSe˘i⁄F‹S≥cül
(
MECH
 * 
mech
, 
•ecülToFöd
, 
wSec
);

110 
	`gëRemaöögI¡î«lPî˚¡
(
MECH
 * 
mech
);

111 
	`gëRemaöögArm‹Pî˚¡
(
MECH
 * 
mech
);

112 
	`FödObj
(
MECH
 * 
mech
, 
loc
, 
ty≥
);

113 
	`FödObjWôhDe°
(
MECH
 * 
mech
, 
loc
, 
ty≥
);

114 
MECH
 *
	`föd_mech_ö_hex
(MECH * 
mech
, 
MAP
 * 
mech_m≠
, 
x
, 
y
,

115 
√edlos
);

116 
	`FödAndCheckAmmo
(
MECH
 * 
mech
, 
wópödx
, 
£˘i⁄
, 
¸ôiˇl
,

117 *
ammoLoc
, *
ammoCrô
, *
ammoLoc1
, *
ammoCrô1
,

118 *
wG©éögShŸs
);

119 
	`Ch™√lEmôKûl
(
MECH
 * 
mech
, MECH * 
©èckî
);

120 
	`visô_√ighb‹_hexes
(
MAP
 *
m≠
, 
x
, 
y
,

121 (*
ˇŒback
)(
MAP
 *, , ));

122 
	`GëP¨tWeight
(
∑π
);

123 
	`GëP¨tCo°
(
p
);

124 
	`SëP¨tCo°
(
p
, 
co°
);

125 
	`CÆcFaßCo°
(
MECH
 * 
mech
);

126 
	`FödAvîageGu¬îy
(
MECH
 * 
mech
);

127 
	`CÆcuœãBV
(
MECH
 *
mech
, 
gun°©
, 
pû°©
);

128 
	`MechFuŒNoRecy˛e
(
MECH
 * 
mech
, 
num
);

129 
	`GëP¨tMod
(
MECH
 * 
mech
, 
t
);

130 
	`Pr›îArm‹
(
MECH
* 
mech
);

131 
	`Pr›îI¡î«l
(
MECH
 * 
mech
);

132 
	`Æüs_∑π
(
MECH
 * 
mech
, 
t
, 
loc
);

133 
	`Pr›îMyomî
(
MECH
 * 
mech
);

134 
	`HótFa˘‹
(
MECH
 * 
mech
);

135 
	`Wóp⁄IsN⁄fun˘i⁄Æ
(
MECH
 * 
mech
, 
£˘i⁄
, 
¸ô
, 
num¸ôs
);

	@btech/p.mechfile.h

12 #i‚de‡
_P_MECHFILE_H


13 
	#_P_MECHFILE_H


	)

16 
FILE
 *
my_›í_fûe
(*
«me
, *
mode
, *
›íway
);

17 
my_˛o£_fûe
(
FILE
 * 
f
, *
›íway
);

	@btech/p.mechrep.h

12 
	~"c⁄fig.h
"

14 #i‚de‡
_P_MECHREP_H


15 
	#_P_MECHREP_H


	)

18 
√w‰ìmechªp
(
dbªf
 
key
, **
d©a
, 
£À˘‹
);

19 
mechªp_Rª£t¸ôs
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

20 
mechªp_Rdi•œy£˘i⁄
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

21 
mechªp_R£åadio
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

22 
mechªp_R£â¨gë
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
mechªp_R£ây≥
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

24 
mechªp_R£t•ìd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

25 
mechªp_R£tjump•ìd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

26 
mechªp_R£thótsöks
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

27 
mechªp_R£ér§™ge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

28 
mechªp_R£âa¸™ge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

29 
mechªp_R£tsˇƒ™ge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

30 
mechªp_R£åadi‹™ge
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

31 
mechªp_R£â⁄s
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

32 
mechªp_R£tmove
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

33 
mechªp_Rlﬂd√w
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
˛ór_mech
(
MECH
 * 
mech
, 
Êag
);

35 *
mechªf_∑th
(*
id
);

36 
lﬂd_mechd©a2
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, *
id
);

37 
u«bÀ_to_föd_¥›î_ty≥
(
i
);

38 
lﬂd_mechd©a
(
MECH
 * 
mech
, *
id
);

39 
mech_lﬂd√w
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, *
id
);

40 
MECH
 *
lﬂd_ªfmech
(*
ª„ªn˚
);

41 
mechªp_Rª°‹e
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

42 
mechªp_Rßvëemp
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

43 
mechªp_Rßvëemp2
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

44 
mechªp_R£èrm‹
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

45 
mechªp_Raddwóp
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

46 
mechªp_Rªlﬂd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

47 
mechªp_Rª∑ú
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

48 
mechªp_Radd•ecül
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

49 *
ãch°©us_func
(
MECH
 * 
mech
);

50 
mechªp_Rshowãch
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

51 *
mechªp_gëãch°rög
(
MECH
 *
mech
);

52 
mechªp_Rdñãch
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

53 
mechªp_Raddãch
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

54 
mechªp_Rdñö·ech
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

55 
mechªp_Raddö·ech
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

56 
mechªp_£tˇrgo•a˚
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.mine.h

12 #i‚de‡
_P_MINE_H


13 
	#_P_MINE_H


	)

16 
add_möe
(
MAP
 * 
m≠
, 
x
, 
y
, 
dam
);

17 
make_möe_ex∂ode
(
MECH
 * 
mech
, 
MAP
 * 
m≠
, 
m≠objt
 * 
o
, 
x
, 
y
,

18 
ªas⁄
);

19 
possibÀ_möe_poof
(
MECH
 * 
mech
, 
ªas⁄
);

20 
possibly_ªmove_möes
(
MECH
 * 
mech
, 
x
, 
y
);

21 
ªˇlcuœã_möefõlds
(
MAP
 * 
m≠
);

22 
m≠_add_möe
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

23 
ex∂ode_möes
(
MECH
 * 
mech
, 
chn
);

24 
show_möes_ö_hex
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, 
ønge
, 
x
,

25 
y
);

	@btech/p.mux_tree.h

12 #i‚de‡
_P_MUX_TREE_H


13 
	#_P_MUX_TREE_H


	)

16 
Node
 *
FödNode
(
Tªe
 
åì
, 
muxkey_t
 
key
);

17 
ªcursivñy_ßve_li°
(*
d©a
);

18 
SaveTªe
(
FILE
 * 
f
, 
Tªe
 
åì
);

19 
ªcursivñy_ªad_li°
(
FILE
 * 
f
, *
d©a
);

20 
GoThruTªe
(
Tªe
 
åì
, (*
func
Ë(
Node
 *));

	@btech/p.pcombat.h

12 #i‚de‡
_P_PCOMBAT_H


13 
	#_P_PCOMBAT_H


	)

16 
pc_to_dam_c⁄vîsi⁄
(
MECH
 * 
èrgë
, 
wópödx
, 
dam
);

17 
dam_to_pc_c⁄vîsi⁄
(
MECH
 * 
èrgë
, 
wópödx
, 
dam
);

18 
¨m‹_ef„˘
(
MECH
 * 
wounded
, 
ˇu£
, 
hôloc
, 
ötDamage
,

19 
id
);

	@btech/p.scen.h

12 #i‚de‡
_P_SCEN_H


13 
	#_P_SCEN_H


	)

16 
dbªf
 
s˚n_m≠_ªf
(
SCEN
 * 
s
);

17 
dbªf
 
s˚n_wóthî_ªf
(
SCEN
 * 
s
);

18 
MAP
 *
s˚n_m≠
(
SCEN
 * 
s
);

19 
√w‰ìs˚n
(
dbªf
 
key
, **
d©a
, 
£l
);

20 
SCEN
 *
M≠_ö_VÆid_SO
(
MAP
 * 
m≠
);

21 
s˚n_£t_osucc
(
SSOBJ
 * 
o
, 
vÆ
);

22 
s˚n_åiggî_möe
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
x
, 
y
);

23 
s˚n_ba£_gíîic
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
m≠obj
 * 
o
, *
ty≥
,

24 
vÆ
, 
sside
);

25 
s˚n_£e_ba£
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
m≠obj
 * 
o
);

26 
s˚n_damage_ba£
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
m≠obj
 * 
o
);

27 
s˚n_de°roy_ba£
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
m≠obj
 * 
o
);

28 
s˚n_°¨t_oods
(
SCEN
 * 
s
);

29 
s˚n_upd©e_íemy
(*
now
, *
be°
, 
mode
, 
MECH
 * 
ds
,

30 
MECH
 * 
mech
);

31 
s˚n_upd©e_íemõs
(
SSIDE
 * 
si
, 
MAP
 * 
m≠
, 
de°
);

32 
s˚n_upd©e_gﬂl
(
SCEN
 * 
s
, 
SSIDE
 * 
si
, 
SSOBJ
 * 
ob
);

33 
s˚n_°¨t
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

34 
s˚n_ç‹t_∂ayîs
(
dbªf
 
‰om
, 
dóth
);

35 
s˚n_h™dÀ_mech_exåa˘i⁄
(
SCEN
 * 
s
, 
MAP
 * 
m≠
, 
MECH
 * 
mech
);

36 
s˚n_íd
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

37 
show_gﬂls_side
(
coﬁmíu
 * 
c
, 
SCEN
 * 
s
, 
SSIDE
 * 
si
);

38 
show_gﬂls
(
coﬁmíu
 * 
c
, 
SCEN
 * 
s
, *
side
);

39 
s˚n_°©us
(
dbªf
 
∂ayî
, *
d©a
, *
buf„r
);

	@btech/p.spath.h

12 #i‚de‡
_P_SPATH_H


13 
	#_P_SPATH_H


	)

	@btech/p.template.h

12 
	~"c⁄fig.h
"

14 #i‚de‡
_P_TEMPLATE_H


15 
	#_P_TEMPLATE_H


	)

18 
cou¡_•ecül_ôems
();

19 
com∑ª_¨øy
(*
li°
[], *
comm™d
);

20 *
⁄e_¨g
(*
¨gumít
, *
fú°_¨g
);

21 *
⁄e_¨g_dñim
(*
¨gumít
, *
fú°_¨g
);

22 *
BuûdBôSåög
(*
bôdescs
[], 
d©a
);

23 *
BuûdBôSåög2
(*
bôdescs
[], *
bôdescs2
[], 
d©a
,

24 
d©a2
);

25 *
BuûdBôSåög3
(*
bôdescs
[], *
bôdescs2
[],

26 *
bôdescs3
[], 
d©a
, 
d©a2
, 
d©a3
);

27 *
my_sh‹tf‹m
(*
buf
);

28 *
∑π_figuª_out_sh«me
(
i
);

29 *
∑π_figuª_out_«me
(
i
);

30 *
∑π_figuª_out_¢ame
(
i
);

31 
dump_loˇti⁄s
(
FILE
 * 
Â
, 
MECH
 * 
mech
, c⁄° *
locdesc
[]);

32 
gíîic_compuãr_mu…ùlõr
(
MECH
 * 
mech
);

33 
gíîic_ødio_ty≥
(
i
, 
isCœn
);

34 
gíîic_ødio_mu…ùlõr
(
MECH
 * 
mech
);

35 
compuãr_c⁄vîsi⁄
(
MECH
 * 
mech
);

36 
åy_to_föd_«me
(*
mechªf
, 
MECH
 * 
mech
);

37 
DeÁu…FuñByTy≥
(
MECH
 * 
mech
);

38 
ßve_ãm∂©e
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, *
ª„ªn˚
,

39 *
fûíame
);

40 *
ªad_desc
(
FILE
 * 
Â
, *
d©a
);

41 
föd_£˘i⁄
(*
cmd
, 
ty≥
, 
mty≥
);

42 
BuûdBôVe˘‹
(**
li°
, *
löe
);

43 
BuûdBôVe˘‹WôhDñim
(**
li°
, *
löe
);

44 
BuûdBôVe˘‹NoEº
(**
li°
, *
löe
);

45 
CheckS≥cülsLi°
(**
•ecüls
, **
•ecüls2
, *
löe
);

46 
Wóp⁄IFromSåög
(*
d©a
);

47 
AmmoIFromSåög
(*
d©a
);

48 
upd©e_•ecüls
(
MECH
 * 
mech
);

49 
upd©e_oweight
(
MECH
 * 
mech
, 
vÆue
);

50 
gë_weight
(
MECH
 * 
mech
);

51 
lﬂd_ãm∂©e
(
dbªf
 
∂ayî
, 
MECH
 * 
mech
, *
fûíame
);

52 
DumpMechS≥cülObje˘s
(
dbªf
 
∂ayî
);

53 
DumpWóp⁄s
(
dbªf
 
∂ayî
);

54 *
ãchli°_func
(
MECH
 * 
mech
);

55 *
∑ylﬂdli°_func
(
MECH
 * 
mech
);

	@btech/p.tree.h

12 #i‚de‡
_P_TREE_H


13 
	#_P_TREE_H


	)

15 
åì_öô
(
åì
 ** 
µr_åì
);

16 
åì_t
 
åì_§ch
(
åì
 ** 
µr_åì
, (*
pfi_com∑ª
Ë(*, *),Åªe_à
p_u£r
);

17 
	`åì_add
(
åì
 ** 
µr_åì
, (*
pfi_com∑ª
Ë(*, *), 
åì_t
 
p_u£r
,

18 (*
pfv_u¨
) (*));

19 
	`åì_dñëe
(
åì
 ** 
µr_p
, (*
pfi_com∑ª
Ë(*, *), 
åì_t
 
p_u£r
,

20 (*
pfv_u¨
) (*));

21 
	`åì_åav
(
åì
 ** 
µr_åì
, (*
pfi_u¨
) (*));

22 
	`åì_mung
(
åì
 ** 
µr_åì
, (*
pfv_u¨
) (*));

	@btech/pcombat.h

17 #i‚de‡
PCOMBAT_H


18 
	#PCOMBAT_H


	)

21 
pc_to_dam_c⁄vîsi⁄
(
MECH
 * 
èrgë
, 
wópödx
, 
dam
);

22 
dam_to_pc_c⁄vîsi⁄
(
MECH
 * 
èrgë
, 
wópödx
, 
dam
);

23 
¨m‹_ef„˘
(
MECH
 * 
wounded
, 
ˇu£
, 
hôloc
, 
ötDamage
,

24 
id
);

	@btech/scen.h

17 #i‚de‡
SCEN_H


18 
	#SCEN_H


	)

20 
ECMD
(
s˚n_°¨t
);

21 
ECMD
(
s˚n_íd
);

22 
ECMD
(
s˚n_°©us
);

25 
dbªf
 
	mmynum
;

26 
	m°©e
;

27 
CLöórTimeAbsﬁuã
 
	m°¨t_t
;

28 
CLöórTimeAbsﬁuã
 
	míd_t
;

29 } 
	tSCEN
;

32 
dbªf
 
	mmynum
;

33 
	m¶ë
[10];

34 } 
	tSSIDE
;

37 
dbªf
 
	mmynum
;

38 
	m°©e
;

39 } 
	tSSOBJ
;

42 
dbªf
 
	mmynum
;

43 } 
	tSSINS
;

46 
dbªf
 
	mmynum
;

47 } 
	tSSEXT
;

49 
s˚n_åiggî_möe
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
x
, 
y
);

51 
s˚n_£e_ba£
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
m≠objt
 * 
o
);

52 
s˚n_damage_ba£
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
m≠objt
 * 
o
);

53 
s˚n_de°roy_ba£
(
MAP
 * 
m≠
, 
MECH
 * 
mech
, 
m≠objt
 * 
o
);

54 
MAP
 *
s˚n_m≠
(
SCEN
 * 
s
);

57 
	#LOOP_THRU_SIDES
(
side
,
s˚n
,
i
) \

58 
	`DOLIST
(
i
, 
	`C⁄ã¡s
(
s˚n
->
mynum
)) \

59 i‡(
	`H¨dcode
(
i
)) \

60 i‡(
	`WhichS≥cül
(
i
Ë=
GTYPE_SSIDE
) \

61 i‡((
side
 = (
SSIDE
 *Ë
	`FödObje˘sD©a
(
i
)))

	)

63 
	#LOOP_THRU_OBJECTIVES
(
ob
,
side
,
i
) \

64 
	`DOLIST
(
i
, 
	`C⁄ã¡s
(
side
->
mynum
)) \

65 i‡(
	`H¨dcode
(
i
)) \

66 i‡(
	`WhichS≥cül
(
i
Ë=
GTYPE_SSOBJ
) \

67 i‡((
ob
 = (
SSOBJ
 *Ë
	`FödObje˘sD©a
(
i
)))

	)

69 
	#LOOP_THRU_INSERTIONS
(
ob
,
side
,
i
) \

70 
	`DOLIST
(
i
, 
	`C⁄ã¡s
(
side
->
mynum
)) \

71 i‡(
	`H¨dcode
(
i
)) \

72 i‡(
	`WhichS≥cül
(
i
Ë=
GTYPE_SSINS
) \

73 i‡((
ob
 = (
SSINS
 *Ë
	`FödObje˘sD©a
(
i
)))

	)

75 
	#LOOP_THRU_EXTRACTIONS
(
ob
,
side
,
i
) \

76 
	`DOLIST
(
i
, 
	`C⁄ã¡s
(
side
->
mynum
)) \

77 i‡(
	`H¨dcode
(
i
)) \

78 i‡(
	`WhichS≥cül
(
i
Ë=
GTYPE_SSEXT
) \

79 i‡((
ob
 = (
SSEXT
 *Ë
	`FödObje˘sD©a
(
i
)))

	)

81 
	#LOOP_MAP_MECHS
(
mech
,
m≠
,
i
) \

82 
i
 = 0 ; i < 
m≠
->
fú°_‰ì
 ; i++) \

83 i‡((
mech
 = 
°©ic_ˇ°
 <
MECH
 *> (
	`FödObje˘sD©a
(
m≠
->
mechsOnM≠
[
i
]))))

	)

85 
	#LOOP_DS_BAYS
(
d
, 
mech
, 
i
) \

86 
i
 = 0 ; i < 
NUM_BAYS
 ; i++) \

87 i‡((
d
 = 
	`AîoBay
(
mech
, 
i
)) > 0) \

88 i‡(
	`H¨dcode
(
d
)) \

89 i‡(
	`WhichS≥cül
(
d
Ë=
GTYPE_MAP
)

	)

91 
	#LOOP_MAP_MAPLINKS
(
m≠
, 
o
) \

92 
o
 = 
	`fú°_m≠obj
(
m≠
, 
TYPE_BUILD
Ë; o ; o = 
	`√xt_m≠obj
(o))

	)

94 
	#LOOP_MAP_MAPLINKS_REF
(
ob
,
m≠
, 
o
) \

95 
	`LOOP_MAP_MAPLINKS
(
m≠
,
o
) \

96 i‡((
ob
 = 
o
->
obj
) > 0) \

97 i‡(
	`H¨dcode
(
ob
)) \

98 i‡(
	`WhichS≥cül
(
ob
Ë=
GTYPE_MAP
)

	)

100 
	#s˚n_mech_ö_side
(
m
,
s
) \

101 (!
s
->
¶ë
[0] || !
	`°∫cmp
(s->¶ë, "", 
	`°æí
(s->¶ë)))

	)

	@btech/spath.h

9 #i‚de‡
SPATH_H


10 
	#SPATH_H


	)

12 
	#HEX_BASED


	)

13 #unde‡
APPROXIMATE_ASTAR


21 *
	mco‹ds
;

22 
	mco‹dcou¡
;

23 
	môî©i⁄s
;

24 
	msc‹e
;

25 } 
	tSPATHRESULT
;

27 
FªeP©h
(
SPATHRESULT
 * 
ªs
);

28 
SPATHRESULT
 *
CÆcuœãP©h
(
x1
, 
y1
, 
x2
, 
y2
, 
îΩî
);

31 #ifde‡
_SPATH_C


34 #ifde‡
HEX_BASED


35 
	#NBCOUNT
 6

	)

37 
	#NBCOUNT
 8

	)

40 
	sNODETYPE
 {

41 
	mx
, 
	my
;

42 
	mf
, 
	mh
, 
	mg
;

43 
	mNodeNum
;

44 
NODETYPE
 *
	mP¨ít
;

45 
NODETYPE
 *
	mChûd
[
NBCOUNT
];

46 
NODETYPE
 *
	m√xt
;

47 } 
	tNODE
;

50 
	#TûeNum
(
x
,
y
Ë((xË+ ((yË<< 16))

	)

57 
	sSTACKTYPE
 {

58 
NODE
 *
	mNode
;

59 
STACKTYPE
 *
	mNext
;

60 } 
	tMYSTACK
;

63 
	~"p.•©h.h
"

	@btech/tree.h

10 #i‚def 
_TREE_FLAG


11 
	#_TREE_FLAG


	)

14 #ifde‡
__STDC__


15 *
	tåì_t
;

17 #i‚de‡
__P


18 
	#__P
(
x
Ë
	)
x

21 *
	tåì_t
;

23 #i‚de‡
__P


24 
	#__P
(
x
Ë()

	)

29 
	såì_s
 {

30 
åì_s
 *
	måì_l
, *
	måì_r
;

31 
	måì_b
;

32 
åì_t
 
	måì_p
;

33 } 
	tåì
;

36 
åì_öô
 
__P
((
åì
 **));

37 * 
åì_§ch
 
__P
((
åì
 **, (*)(*, *), *));

38 
åì_add
 
	`__P
((
åì
 **, (*)(*, *), *, (*)(*)));

39 
åì_dñëe
 
	`__P
((
åì
 **, (*)(*, *), *, (*)(*)));

40 
åì_åav
 
	`__P
((
åì
 **, (*)(*)));

41 
åì_mung
 
	`__P
((
åì
 **, (*)(*)));

44 #unde‡
__P


	@btech/turret.h

17 #i‚de‡
TURRET_H


18 
	#TURRET_H


	)

20 
	~"mech.h
"

23 
dbªf
 
	mmynum
;

25 
	m¨cs
;

26 
	mtic
[
NUM_TICS
];

27 
dbªf
 
	m∑ª¡
;

28 
dbªf
 
	mgu¬î
;

29 
dbªf
 
	mèrgë
;

30 
	mèrgx
, 
	mèrgy
, 
	mèrgz
;

31 
	mlockmode
;

32 } 
	tTURRET_T
;

	@btech/vixie.h

20 #i‚def 
_VIXIE_FLAG


21 
	#_VIXIE_FLAG


	)

24 
	#MAXPROC
 256

	)

25 #ifde‡
DEBUG


26 
	#ENTER
(
¥oc
) do { \

27 
APC_PROCS
[
I_PROC
] = 
¥oc
; \

28 
	`¥ötf
("ENTER(%d:%s.%s)\n", \

29 
I_PROC
, 
DEBUG
, 
APC_PROCS
[I_PROC]); \

30 
I_PROC
++; \

31 } 0)

	)

32 
	#EXIT
(
vÆue
) do { \

33 
I_PROC
--; \

34 
	`¥ötf
("EXIT(%d:%s.%s)\n", \

35 
I_PROC
, 
DEBUG
, \

36 
APC_PROCS
[
I_PROC
]); \

37  
vÆue
; \

38 } 0)

	)

39 
	#EXITV
 do { \

40 
I_PROC
--; \

41 
	`¥ötf
("EXITV(%d:%s.%s)\n", \

42 
I_PROC
, 
DEBUG
, \

43 
APC_PROCS
[
I_PROC
]); \

45 } 0)

	)

47 
	#ENTER
(
¥oc
)

	)

48 
	#EXIT
(
vÆue
Ë 
	)
value

49 
	#EXITV
 

	)

51 #ifde‡
MAIN


52 
	gI_PROC
 = 0;

53 *
	gAPC_PROCS
[
MAXPROC
];

55 
I_PROC
;

56 *
APC_PROCS
[
MAXPROC
];

60 #i‚de‡
TRUE


61 
	#TRUE
 1

	)

62 
	#FALSE
 0

	)

	@btech/weapons.fasa.h

4 
	#VRT_CL_AC10
 30

	)

5 
	#VRT_CL_AC2
 30

	)

6 
	#VRT_CL_AC20
 30

	)

7 
	#VRT_CL_AC5
 30

	)

8 
	#VRT_CL_APOD
 30

	)

9 
	#VRT_CL_AMS
 10

	)

10 
	#VRT_CL_ARROWIV
 60

	)

11 
	#VRT_CL_GR
 30

	)

12 
	#VRT_CL_LBX10
 30

	)

13 
	#VRT_CL_LBX2
 30

	)

14 
	#VRT_CL_LBX20
 30

	)

15 
	#VRT_CL_LBX5
 30

	)

16 
	#VRT_CL_LRM10
 30

	)

17 
	#VRT_CL_LRM15
 30

	)

18 
	#VRT_CL_LRM20
 30

	)

19 
	#VRT_CL_LRM5
 30

	)

20 
	#VRT_CL_MG
 30

	)

21 
	#VRT_CL_NARC
 30

	)

22 
	#VRT_CL_SRM2
 30

	)

23 
	#VRT_CL_SRM4
 30

	)

24 
	#VRT_CL_SRM6
 30

	)

25 
	#VRT_CL_SSRM2
 30

	)

26 
	#VRT_CL_SSRM4
 30

	)

27 
	#VRT_CL_SSRM6
 30

	)

28 
	#VRT_CL_UAC10
 30

	)

29 
	#VRT_CL_UAC2
 30

	)

30 
	#VRT_CL_UAC20
 30

	)

31 
	#VRT_CL_UAC5
 30

	)

32 
	#VRT_IS_AC10
 30

	)

33 
	#VRT_IS_AC2
 30

	)

34 
	#VRT_IS_AC20
 30

	)

35 
	#VRT_IS_AC5
 30

	)

36 
	#VRT_IS_AMS
 10

	)

37 
	#VRT_IS_ARROWIV
 60

	)

38 
	#VRT_IS_GR
 30

	)

39 
	#VRT_IS_LBX10
 30

	)

40 
	#VRT_IS_LRM10
 30

	)

41 
	#VRT_IS_LRM15
 30

	)

42 
	#VRT_IS_LRM20
 30

	)

43 
	#VRT_IS_LRM5
 30

	)

44 
	#VRT_IS_LONGTOM
 60

	)

45 
	#VRT_IS_MG
 30

	)

46 
	#VRT_IS_NARC
 30

	)

47 
	#VRT_IS_SRM2
 30

	)

48 
	#VRT_IS_SRM4
 30

	)

49 
	#VRT_IS_SRM6
 30

	)

50 
	#VRT_IS_SNIPER
 60

	)

51 
	#VRT_IS_SSRM2
 30

	)

52 
	#VRT_IS_THUMPER
 60

	)

53 
	#VRT_IS_UAC5
 30

	)

54 
	#VRT_PC_BLAZER
 10

	)

55 
	#VRT_PC_CROSSBOW
 15

	)

56 
	#VRT_PC_FLRIFLE
 10

	)

57 
	#VRT_PC_FLAMER
 7

	)

58 
	#VRT_PC_GYROSLUG
 10

	)

59 
	#VRT_PC_HGGUN
 10

	)

60 
	#VRT_PC_ILRIFLE
 10

	)

61 
	#VRT_PC_LRIFLE
 10

	)

62 
	#VRT_PC_PLPISTOL
 10

	)

63 
	#VRT_PC_PLRIFLE
 10

	)

64 
	#VRT_PC_SMG
 5

	)

65 
	#VRT_PC_SHOTGUN
 15

	)

66 
	#VRT_PC_SPISTOL
 10

	)

67 
	#VRT_PC_SLPISTOL
 7

	)

68 
	#VRT_PC_ZHRIFLE
 10

	)

69 
	#VRT_IS_ELRM5
 30

	)

70 
	#VRT_IS_ELRM10
 30

	)

71 
	#VRT_IS_ELRM15
 30

	)

72 
	#VRT_IS_ELRM20
 30

	)

73 
	#VRT_IS_LR_DFM5
 30

	)

74 
	#VRT_IS_LR_DFM10
 30

	)

75 
	#VRT_IS_LR_DFM15
 30

	)

76 
	#VRT_IS_LR_DFM20
 30

	)

77 
	#VRT_IS_SR_DFM2
 30

	)

78 
	#VRT_IS_SR_DFM4
 30

	)

79 
	#VRT_IS_SR_DFM6
 30

	)

80 
	#VRT_IS_SSRM4
 30

	)

81 
	#VRT_IS_SSRM6
 30

	)

82 
	#VRT_IS_TBOLT5
 30

	)

83 
	#VRT_IS_TBOLT10
 30

	)

84 
	#VRT_IS_TBOLT15
 30

	)

85 
	#VRT_IS_TBOLT20
 30

	)

86 
	#VRT_IS_CAC2
 30

	)

87 
	#VRT_IS_CAC5
 30

	)

88 
	#VRT_IS_CAC10
 30

	)

89 
	#VRT_IS_CAC20
 30

	)

90 
	#VRT_IS_HAC2
 30

	)

91 
	#VRT_IS_HAC5
 30

	)

92 
	#VRT_IS_HAC10
 30

	)

93 
	#VRT_IS_LBX2
 30

	)

94 
	#VRT_IS_LBX5
 30

	)

95 
	#VRT_IS_LBX20
 30

	)

96 
	#VRT_IS_UAC2
 30

	)

97 
	#VRT_IS_UAC10
 30

	)

98 
	#VRT_IS_UAC20
 30

	)

99 
	#VRT_IS_MRM10
 30

	)

100 
	#VRT_IS_MRM20
 30

	)

101 
	#VRT_IS_MRM30
 30

	)

102 
	#VRT_IS_MRM40
 30

	)

103 
	#VRT_CL_ERLL
 30

	)

104 
	#VRT_CL_ERML
 30

	)

105 
	#VRT_CL_ERPPC
 30

	)

106 
	#VRT_CL_ERSL
 30

	)

107 
	#VRT_CL_FLAMER
 30

	)

108 
	#VRT_CL_LL
 30

	)

109 
	#VRT_CL_LPL
 30

	)

110 
	#VRT_CL_ML
 30

	)

111 
	#VRT_CL_MPL
 30

	)

112 
	#VRT_CL_PPC
 30

	)

113 
	#VRT_CL_SL
 30

	)

114 
	#VRT_CL_SPL
 30

	)

115 
	#VRT_IS_ERLL
 30

	)

116 
	#VRT_IS_ERPPC
 30

	)

117 
	#VRT_IS_FLAMER
 30

	)

118 
	#VRT_IS_LL
 30

	)

119 
	#VRT_IS_LPL
 30

	)

120 
	#VRT_IS_ML
 30

	)

121 
	#VRT_IS_MPL
 30

	)

122 
	#VRT_IS_PPC
 30

	)

123 
	#VRT_IS_SL
 30

	)

124 
	#VRT_IS_SPL
 30

	)

125 
	#VRT_PC_SWORD
 3

	)

126 
	#VRT_PC_VIBROBLADE
 3

	)

127 
	#VRT_IS_ERML
 30

	)

128 
	#VRT_IS_ERSL
 30

	)

129 
	#VRT_IS_LGR
 30

	)

130 
	#VRT_IS_XLPL
 30

	)

131 
	#VRT_IS_XMPL
 30

	)

132 
	#VRT_IS_XSPL
 30

	)

133 
	#VRT_IS_HFLAMER
 30

	)

134 
	#VRT_IS_HMG
 30

	)

135 
	#VRT_IS_LAC2
 30

	)

136 
	#VRT_IS_LAC5
 30

	)

137 
	#VRT_CL_ERLPL
 30

	)

138 
	#VRT_CL_ERMPL
 30

	)

139 
	#VRT_CL_ERSPL
 30

	)

140 
	#VRT_CL_SLRM5
 30

	)

141 
	#VRT_CL_SLRM10
 30

	)

142 
	#VRT_CL_SLRM15
 30

	)

143 
	#VRT_CL_SLRM20
 30

	)

144 
	#VRT_IS_APOD
 30

	)

145 
	#VRT_CL_HLL
 30

	)

146 
	#VRT_CL_HML
 30

	)

147 
	#VRT_CL_HSL
 30

	)

148 
	#VRT_IS_INARC
 30

	)

149 
	#VRT_IS_RAC2
 30

	)

150 
	#VRT_IS_RAC5
 30

	)

151 
	#VRT_IS_HGR
 30

	)

152 
	#VRT_IS_MGR
 30

	)

153 
	#VRT_CL_MICROPL
 30

	)

154 
	#VRT_IS_RL10
 30

	)

155 
	#VRT_IS_RL15
 30

	)

156 
	#VRT_IS_RL20
 30

	)

	@btech/weapons.h

10 
	~"wóp⁄s.vπ.h
"

12 
wóp⁄_°ru˘
 
	gMechWóp⁄s
[] = {

14 {"CL.AC/10", 
VRT_CL_AC10
, 
TAMMO
, 3, 10, 0, 5, 10, 15, 0, -1, -1, -1, 6,

15 10, 1100, -1, 
CLAT
 | 
RFAC
, 124},

16 {"CL.AC/2", 
VRT_CL_AC2
, 
TAMMO
, 1, 2, 4, 8, 16, 24, 0, -1, -1, -1, 1,

17 45, 500, -1, 
CLAT
 | 
RFAC
, 37},

18 {"CL.AC/20", 
VRT_CL_AC20
, 
TAMMO
, 7, 20, 0, 3, 6, 9, 0, -1, -1, -1, 9,

19 5, 1300, -1, 
CLAT
 | 
RFAC
, 178},

20 {"CL.AC/5", 
VRT_CL_AC5
, 
TAMMO
, 1, 5, 3, 6, 12, 18, 0, -1, -1, -1, 3,

21 20, 700, -1, 
CLAT
 | 
RFAC
, 70},

22 {"CL.A-Pod", 
VRT_CL_APOD
, 
TBEAM
, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 1, 0,

23 50, -1, 
CLAT
 | 
A_POD
, 1},

24 {"CL.A¡i-MissûeSy°em", 
VRT_CL_AMS
, 
TMISSILE
, 1, 2, 0, 1, 1, 1, 0,

25 -1, -1, -1, 1, 24, 50, -1, 
CLAT
 | 
AMS
, 63},

26 {"CL.AºowIVSy°em", 
VRT_CL_ARROWIV
, 
TARTILLERY
, 10, 20, 0, 0, 0, 6, 0,

27 -1, -1, -1, 12, 5, 1200, -1, 
IDF
 | 
DAR
 | 
CLAT
, 171},

28 {"CL.GaussRiÊe", 
VRT_CL_GR
, 
TAMMO
, 1, 15, 2, 7, 15, 22, 0, -1, -1, -1,

29 6, 8, 1200, 20, 
GAUSS
 | 
CLAT
, 321},

30 {"CL.LB10-XAC", 
VRT_CL_LBX10
, 
TAMMO
, 2, 10, 0, 6, 12, 18, 0, -1, -1,

31 -1, 5, 10, 1000, -1, 
LBX
 | 
CLAT
, 148},

32 {"CL.LB2-XAC", 
VRT_CL_LBX2
, 
TAMMO
, 1, 2, 4, 10, 20, 30, 0, -1, -1, -1,

33 3, 45, 500, -1, 
LBX
 | 
CLAT
, 47},

34 {"CL.LB20-XAC", 
VRT_CL_LBX20
, 
TAMMO
, 6, 20, 0, 4, 8, 12, 0, -1, -1, -1,

35 9, 5, 1200, -1, 
LBX
 | 
CLAT
, 237},

36 {"CL.LB5-XAC", 
VRT_CL_LBX5
, 
TAMMO
, 1, 5, 3, 8, 15, 24, 0, -1, -1, -1,

37 4, 20, 700, -1, 
LBX
 | 
CLAT
, 93},

38 {"CL.LRM-10", 
VRT_CL_LRM10
, 
TMISSILE
, 4, 1, 0, 7, 14, 21, 0, -1, -1,

39 -1, 1, 12, 250, -1, 
IDF
 | 
CLAT
, 109},

40 {"CL.LRM-15", 
VRT_CL_LRM15
, 
TMISSILE
, 5, 1, 0, 7, 14, 21, 0, -1, -1,

41 -1, 2, 8, 350, -1, 
IDF
 | 
CLAT
, 164},

42 {"CL.LRM-20", 
VRT_CL_LRM10
, 
TMISSILE
, 6, 1, 0, 7, 14, 21, 0, -1, -1,

43 -1, 4, 6, 500, -1, 
IDF
 | 
CLAT
, 220},

44 {"CL.LRM-5", 
VRT_CL_LRM5
, 
TMISSILE
, 2, 1, 0, 7, 14, 21, 0, -1, -1, -1,

45 1, 24, 100, -1, 
IDF
 | 
CLAT
, 55},

46 {"CL.MachöeGun", 
VRT_CL_MG
, 
TAMMO
, 0, 2, 0, 1, 2, 3, 0, -1, -1, -1, 1,

47 200, 25, -1, 
CLAT
 | 
GMG
, 5},

48 {"CL.N¨cBóc⁄", 
VRT_CL_NARC
, 
TMISSILE
, 1, 4, 0, 4, 8, 12, 0, -1, -1,

49 -1, 1, 6, 200, -1, 
NARC
 | 
CLAT
, 30},

50 {"CL.SRM-2", 
VRT_CL_SRM2
, 
TMISSILE
, 2, 2, 0, 3, 6, 9, 0, -1, -1, -1, 1,

51 50, 50, -1, 
CLAT
, 21},

52 {"CL.SRM-4", 
VRT_CL_SRM4
, 
TMISSILE
, 3, 2, 0, 3, 6, 9, 0, -1, -1, -1, 1,

53 25, 100, -1, 
CLAT
, 39},

54 {"CL.SRM-6", 
VRT_CL_SRM6
, 
TMISSILE
, 4, 2, 0, 3, 6, 9, 0, -1, -1, -1, 1,

55 15, 150, -1, 
CLAT
, 59},

56 {"CL.SåókSRM-2", 
VRT_CL_SSRM2
, 
TMISSILE
, 2, 2, 0, 4, 8, 12, 0, -1,

57 -1, -1, 1, 50, 100, -1, 
STREAK
 | 
CLAT
 | 
NOSPA
, 40},

58 {"CL.SåókSRM-4", 
VRT_CL_SSRM4
, 
TMISSILE
, 3, 2, 0, 4, 8, 12, 0, -1,

59 -1, -1, 1, 25, 200, -1, 
STREAK
 | 
CLAT
 | 
NOSPA
, 79},

60 {"CL.SåókSRM-6", 
VRT_CL_SSRM6
, 
TMISSILE
, 4, 2, 0, 4, 8, 12, 0, -1,

61 -1, -1, 2, 15, 300, -1, 
STREAK
 | 
CLAT
 | 
NOSPA
, 119},

62 {"CL.U…øAC/10", 
VRT_CL_UAC10
, 
TAMMO
, 3, 10, 0, 6, 12, 18, 0, -1, -1,

63 -1, 4, 10, 1000, -1, 
ULTRA
 | 
CLAT
, 211},

64 {"CL.U…øAC/2", 
VRT_CL_UAC2
, 
TAMMO
, 1, 2, 2, 9, 18, 27, 0, -1, -1, -1,

65 2, 45, 500, -1, 
ULTRA
 | 
CLAT
, 62},

66 {"CL.U…øAC/20", 
VRT_CL_UAC20
, 
TAMMO
, 7, 20, 0, 4, 8, 12, 0, -1, -1,

67 -1, 8, 5, 1200, -1, 
ULTRA
 | 
CLAT
, 337},

68 {"CL.U…øAC/5", 
VRT_CL_UAC5
, 
TAMMO
, 1, 5, 0, 7, 14, 21, 0, -1, -1, -1,

69 3, 20, 700, -1, 
ULTRA
 | 
CLAT
, 123},

70 {"IS.AC/10", 
VRT_IS_AC10
, 
TAMMO
, 3, 10, 0, 5, 10, 15, 0, -1, -1, -1, 7,

71 10, 1200, -1, 
RFAC
, 124},

72 {"IS.AC/2", 
VRT_IS_AC2
, 
TAMMO
, 1, 2, 4, 8, 16, 24, 0, -1, -1, -1, 1,

73 45, 600, -1, 
RFAC
, 37},

74 {"IS.AC/20", 
VRT_IS_AC20
, 
TAMMO
, 7, 20, 0, 3, 6, 9, 0, -1, -1, -1, 10,

75 5, 1400, -1, 
RFAC
, 178},

76 {"IS.AC/5", 
VRT_IS_AC5
, 
TAMMO
, 1, 5, 3, 6, 12, 18, 0, -1, -1, -1, 4,

77 20, 800, -1, 
RFAC
, 70},

78 {"IS.A¡i-MissûeSy°em", 
VRT_IS_AMS
, 
TMISSILE
, 1, 2, 0, 1, 1, 1, 0,

79 -1, -1, -1, 1, 12, 50, -1, 
AMS
, 32},

80 {"IS.AºowIVSy°em", 
VRT_IS_ARROWIV
, 
TARTILLERY
, 10, 20, 0, 0, 0, 5, 0,

81 -1, -1, -1, 15, 5, 1500, -1, 
IDF
 | 
DAR
, 171},

82 {"IS.GaussRiÊe", 
VRT_IS_GR
, 
TAMMO
, 1, 15, 2, 7, 15, 22, 0, -1, -1, -1,

83 7, 8, 1500, 20, 
GAUSS
, 321},

84 {"IS.LB10-XAC", 
VRT_IS_LBX10
, 
TAMMO
, 2, 10, 0, 6, 12, 18, 0, -1, -1,

85 -1, 6, 10, 1100, -1, 
LBX
, 148},

86 {"IS.LRM-10", 
VRT_IS_LRM10
, 
TMISSILE
, 4, 1, 6, 7, 14, 21, 0, -1, -1,

87 -1, 2, 12, 500, -1, 
IDF
, 90},

88 {"IS.LRM-15", 
VRT_IS_LRM15
, 
TMISSILE
, 5, 1, 6, 7, 14, 21, 0, -1, -1,

89 -1, 3, 8, 700, -1, 
IDF
, 136},

90 {"IS.LRM-20", 
VRT_IS_LRM20
, 
TMISSILE
, 6, 1, 6, 7, 14, 21, 0, -1, -1,

91 -1, 5, 6, 1000, -1, 
IDF
, 181},

92 {"IS.LRM-5", 
VRT_IS_LRM5
, 
TMISSILE
, 2, 1, 6, 7, 14, 21, 0, -1, -1, -1,

93 1, 24, 200, -1, 
IDF
, 45},

94 {"IS.L⁄gTom", 
VRT_IS_LONGTOM
, 
TARTILLERY
, 20, 20, 0, 0, 0, 20, 0, -1,

95 -1, -1, 30, 5, 3000, -1, 
IDF
 | 
DAR
, 171},

96 {"IS.MachöeGun", 
VRT_IS_MG
, 
TAMMO
, 0, 2, 0, 1, 2, 3, 0, -1, -1, -1, 1,

97 200, 50, -1, 
GMG
, 5},

98 {"IS.N¨cBóc⁄", 
VRT_IS_NARC
, 
TMISSILE
, 1, 4, 0, 3, 6, 9, 0, -1, -1,

99 -1, 2, 6, 300, -1, 
NARC
, 30},

100 {"IS.SRM-2", 
VRT_IS_SRM2
, 
TMISSILE
, 2, 2, 0, 3, 6, 9, 0, -1, -1, -1, 1,

101 50, 100, -1, 
NONE
, 21},

102 {"IS.SRM-4", 
VRT_IS_SRM4
, 
TMISSILE
, 3, 2, 0, 3, 6, 9, 0, -1, -1, -1, 1,

103 25, 200, -1, 
NONE
, 39},

104 {"IS.SRM-6", 
VRT_IS_SRM6
, 
TMISSILE
, 4, 2, 0, 3, 6, 9, 0, -1, -1, -1, 2,

105 15, 300, -1, 
NONE
, 59},

106 {"IS.Snùî", 
VRT_IS_SNIPER
, 
TARTILLERY
, 10, 10, 0, 0, 0, 12, 0, -1,

107 -1, -1, 20, 10, 2000, -1, 
IDF
 | 
DAR
, 86},

108 {"IS.SåókSRM-2", 
VRT_IS_SSRM2
, 
TMISSILE
, 2, 2, 0, 3, 6, 9, 0, -1, -1,

109 -1, 1, 50, 150, -1, 
STREAK
 | 
NOSPA
, 30},

110 {"IS.Thum≥r", 
VRT_IS_THUMPER
, 
TARTILLERY
, 6, 5, 0, 0, 0, 14, 0, -1,

111 -1, -1, 15, 20, 1500, -1, 
IDF
 | 
DAR
, 40},

112 {"IS.U…øAC/5", 
VRT_IS_UAC5
, 
TAMMO
, 1, 5, 2, 6, 13, 20, 0, -1, -1, -1,

113 5, 20, 900, -1, 
ULTRA
, 113},

114 {"PC.Bœzî", 
VRT_PC_BLAZER
, 
TAMMO
, 0, 32, 0, 24, 48, 72, 0, -1, -1,

115 -1, 1, 30, 0, -1, 
PC_HEAT
, 1},

116 {"PC.Crossbow", 
VRT_PC_BLAZER
, 
TAMMO
, 0, 9, 0, 9, 18, 27, 0, -1, -1,

117 -1, 1, 20, 0, -1, 
PC_IMPA
 | 
NOBOOM
, 1},

118 {"PC.Fedî©edL⁄gRiÊe", 
VRT_PC_FLRIFLE
, 
TAMMO
, 0, 9, 0, 22, 44, 66,

119 0, -1, -1, -1, 1, 50, 0, -1, 
PC_IMPA
, 1},

120 {"PC.FœmîPi°ﬁ", 
VRT_PC_FLAMER
, 
TAMMO
, 0, 7, 0, 4, 9, 13, 0, -1, -1,

121 -1, 1, 50, 0, -1, 
PC_HEAT
, 1},

122 {"PC.Gyro¶ugRiÊe", 
VRT_PC_GYROSLUG
, 
TAMMO
, 0, 14, 0, 30, 60, 90, 0,

123 -1, -1, -1, 1, 15, 0, -1, 
PC_IMPA
, 1},

124 {"PC.HóvyGyrojëGun", 
VRT_PC_HGGUN
, 
TAMMO
, 0, 27, 0, 35, 70, 105, 0,

125 -1, -1, -1, 1, 10, 0, -1, 
PC_IMPA
, 1},

126 {"PC.I¡ekLa£rRiÊe", 
VRT_PC_ILRIFLE
, 
TAMMO
, 0, 9, 0, 40, 80, 120, 0,

127 -1, -1, -1, 1, 45, 0, -1, 
PC_HEAT
 | 
NOBOOM
, 1},

128 {"PC.La£rRiÊe", 
VRT_PC_LRIFLE
, 
TAMMO
, 0, 17, 0, 24, 48, 72, 0, -1,

129 -1, -1, 1, 30, 0, -1, 
PC_HEAT
 | 
NOBOOM
, 1},

130 {"PC.Pul£La£rPi°ﬁ", 
VRT_PC_PLPISTOL
, 
TAMMO
, 0, 11, 0, 5, 10, 15, 0,

131 -1, -1, -1, 1, 50, 0, -1, 
PC_HEAT
 | 
NOBOOM
, 1},

132 {"PC.Pul£La£rRiÊe", 
VRT_PC_PLRIFLE
, 
TAMMO
, 0, 13, 0, 22, 44, 66, 0,

133 -1, -1, -1, 1, 30, 0, -1, 
PC_HEAT
 | 
NOBOOM
, 1},

134 {"PC.SMG", 
VRT_PC_SMG
, 
TAMMO
, 0, 10, 0, 7, 14, 20, 0, -1, -1, -1, 1,

135 50, 0, -1, 
PC_IMPA
, 1},

136 {"PC.ShŸgun", 
VRT_PC_SHOTGUN
, 
TAMMO
, 0, 12, 0, 6, 12, 18, 0, -1, -1,

137 -1, 1, 10, 0, -1, 
PC_IMPA
, 1},

138 {"PC.Sã∫¢achtPi°ﬁ", 
VRT_PC_SPISTOL
, 
TAMMO
, 0, 16, 0, 7, 14, 20, 0,

139 -1, -1, -1, 1, 50, 0, -1, 
PC_IMPA
, 1},

140 {"PC.SunbómLa£rPi°ﬁ", 
VRT_PC_SLPISTOL
, 
TAMMO
, 0, 18, 0, 8, 16, 24,

141 0, -1, -1, -1, 1, 50, 0, -1, 
PC_HEAT
 | 
NOBOOM
, 1},

142 {"PC.ZeusHóvyRiÊe", 
VRT_PC_ZHRIFLE
, 
TAMMO
, 0, 21, 0, 19, 38, 57, 0,

143 -1, -1, -1, 1, 30, 0, -1, 
PC_IMPA
, 1},

147 {"IS.ELRM-5", 
VRT_IS_ELRM5
, 
TMISSILE
, 3, 1, 10, 12, 24, 36, 0, -1, -1,

148 -1, 1, 18, 600, -1, 
IDF
 | 
ELRM
 | 
NOSPA
, 1000},

149 {"IS.ELRM-10", 
VRT_IS_ELRM10
, 
TMISSILE
, 6, 1, 10, 12, 24, 36, 0, -1,

150 -1, -1, 4, 9, 800, -1, 
IDF
 | 
ELRM
 | 
NOSPA
, 1000},

151 {"IS.ELRM-15", 
VRT_IS_ELRM15
, 
TMISSILE
, 8, 1, 10, 12, 24, 36, 0, -1,

152 -1, -1, 6, 6, 1200, -1, 
IDF
 | 
ELRM
 | 
NOSPA
, 1000},

153 {"IS.ELRM-20", 
VRT_IS_ELRM20
, 
TMISSILE
, 10, 1, 10, 12, 24, 36, 0, -1,

154 -1, -1, 8, 4, 1800, -1, 
IDF
 | 
ELRM
 | 
NOSPA
, 1000},

155 {"IS.LR_DFM-5", 
VRT_IS_LR_DFM5
, 
TMISSILE
, 2, 2, 4, 6, 12, 18, 0, -1,

156 -1, -1, 1, 24, 200, -1, 
IDF
 | 
DFM
 | 
NOSPA
, 1000},

157 {"IS.LR_DFM-10", 
VRT_IS_LR_DFM10
, 
TMISSILE
, 4, 2, 4, 6, 12, 18, 0, -1,

158 -1, -1, 2, 12, 500, -1, 
IDF
 | 
DFM
 | 
NOSPA
, 1000},

159 {"IS.LR_DFM-15", 
VRT_IS_LR_DFM15
, 
TMISSILE
, 5, 2, 4, 6, 12, 18, 0, -1,

160 -1, -1, 3, 8, 700, -1, 
IDF
 | 
DFM
 | 
NOSPA
, 1000},

161 {"IS.LR_DFM-20", 
VRT_IS_LR_DFM20
, 
TMISSILE
, 6, 2, 4, 6, 12, 18, 0, -1,

162 -1, -1, 5, 6, 1000, -1, 
IDF
 | 
DFM
 | 
NOSPA
, 1000},

163 {"IS.SR_DFM-2", 
VRT_IS_SR_DFM2
, 
TMISSILE
, 2, 3, 0, 2, 4, 6, 0, -1, -1,

164 -1, 1, 50, 100, -1, 
DFM
 | 
NOSPA
, 1000},

165 {"IS.SR_DFM-4", 
VRT_IS_SR_DFM4
, 
TMISSILE
, 3, 3, 0, 2, 4, 6, 0, -1, -1,

166 -1, 1, 25, 200, -1, 
DFM
 | 
NOSPA
, 1000},

167 {"IS.SR_DFM-6", 
VRT_IS_SR_DFM6
, 
TMISSILE
, 4, 3, 0, 2, 4, 6, 0, -1, -1,

168 -1, 2, 15, 300, -1, 
DFM
 | 
NOSPA
, 1000},

169 {"IS.SåókSRM-4", 
VRT_IS_SSRM4
, 
TMISSILE
, 3, 2, 0, 3, 6, 9, -1, -1,

170 -1, 9, 1, 25, 300, -1, 
STREAK
 | 
NOSPA
, 59},

171 {"IS.SåókSRM-6", 
VRT_IS_SSRM6
, 
TMISSILE
, 4, 2, 0, 3, 6, 9, -1, -1,

172 -1, 9, 2, 15, 450, -1, 
STREAK
 | 
NOSPA
, 89},

173 {"IS.Thundîbﬁt-5", 
VRT_IS_TBOLT5
, 
TMISSILE
, 3, 5, 5, 6, 12, 18, 0,

174 -1, -1, -1, 1, 12, 300, -1, 
IDF
 | 
NOSPA
, 1000},

175 {"IS.Thundîbﬁt-10", 
VRT_IS_TBOLT10
, 
TMISSILE
, 5, 10, 5, 6, 12, 18, 0,

176 -1, -1, -1, 2, 6, 600, -1, 
IDF
 | 
NOSPA
, 1000},

177 {"IS.Thundîbﬁt-15", 
VRT_IS_TBOLT15
, 
TMISSILE
, 7, 15, 5, 6, 12, 18, 0,

178 -1, -1, -1, 3, 4, 800, -1, 
IDF
 | 
NOSPA
, 1000},

179 {"IS.Thundîbﬁt-20", 
VRT_IS_TBOLT20
, 
TMISSILE
, 8, 20, 5, 6, 12, 18, 0,

180 -1, -1, -1, 5, 3, 1100, -1, 
IDF
 | 
NOSPA
, 1000},

181 {"IS.Ca£ÀssAC/2", 
VRT_IS_CAC2
, 
TAMMO
, 1, 2, 4, 8, 16, 24, 0, -1, -1,

182 -1, 1, 67, 600, -1, 
NOSPA
 | 
CASELESS
, 1000},

183 {"IS.Ca£ÀssAC/5", 
VRT_IS_CAC5
, 
TAMMO
, 1, 5, 3, 6, 12, 18, 0, -1, -1,

184 -1, 4, 30, 800, -1, 
NOSPA
 | 
CASELESS
, 1000},

185 {"IS.Ca£ÀssAC/10", 
VRT_IS_CAC10
, 
TAMMO
, 3, 10, 0, 5, 10, 15, 0, -1,

186 -1, -1, 6, 15, 1200, -1, 
NOSPA
 | 
CASELESS
, 1000},

187 {"IS.Ca£ÀssAC/20", 
VRT_IS_CAC20
, 
TAMMO
, 7, 20, 0, 3, 6, 9, 9, 0, -1,

188 -1, -1, 8, 1400, -1, 
NOSPA
 | 
CASELESS
, 1000},

189 {"IS.Hy≥rAC/2", 
VRT_IS_HAC2
, 
TAMMO
, 1, 2, 3, 10, 20, 35, 0, -1, -1,

190 -1, 4, 30, 800, -1, 
NOSPA
 | 
HYPER
, 1000},

191 {"IS.Hy≥rAC/5", 
VRT_IS_HAC5
, 
TAMMO
, 3, 5, 0, 8, 16, 28, 0, -1, -1, -1,

192 5, 15, 1200, -1, 
NOSPA
 | 
HYPER
, 1000},

193 {"IS.Hy≥rAC/10", 
VRT_IS_HAC10
, 
TAMMO
, 7, 10, 0, 6, 12, 20, 0, -1, -1,

194 -1, 6, 8, 1400, -1, 
NOSPA
 | 
HYPER
, 1000},

195 {"IS.LB2-XAC", 
VRT_IS_LBX2
, 
TAMMO
, 1, 2, 4, 9, 18, 27, 0, -1, -1, -1,

196 4, 45, 600, -1, 
LBX
, 42},

197 {"IS.LB5-XAC", 
VRT_IS_LBX5
, 
TAMMO
, 1, 5, 3, 7, 14, 21, 0, -1, -1, -1,

198 5, 20, 800, -1, 
LBX
, 83},

199 {"IS.LB20-XAC", 
VRT_IS_LBX20
, 
TAMMO
, 6, 20, 0, 4, 8, 12, 0, -1, -1, -1,

200 11, 5, 1400, -1, 
LBX
, 237},

201 {"IS.U…øAC/2", 
VRT_IS_UAC2
, 
TAMMO
, 1, 2, 4, 8, 17, 25, 0, -1, -1, -1,

202 3, 45, 700, -1, 
ULTRA
, 56},

203 {"IS.U…øAC/10", 
VRT_IS_UAC10
, 
TAMMO
, 4, 10, 0, 6, 12, 18, 0, -1, -1,

204 -1, 7, 10, 1300, -1, 
ULTRA
, 253},

205 {"IS.U…øAC/20", 
VRT_IS_UAC20
, 
TAMMO
, 8, 20, 0, 3, 7, 10, 0, -1, -1,

206 -1, 10, 5, 1500, -1, 
ULTRA
, 282},

210 {"IS.MRM-10", 
VRT_IS_MRM10
, 
TMISSILE
, 4, 1, 0, 3, 8, 15, 0, -1, -1, -1,

211 2, 24, 300, -1, 
MRM
, 56},

212 {"IS.MRM-20", 
VRT_IS_MRM20
, 
TMISSILE
, 6, 1, 0, 3, 8, 15, 0, -1, -1, -1,

213 3, 12, 700, -1, 
MRM
, 112},

214 {"IS.MRM-30", 
VRT_IS_MRM30
, 
TMISSILE
, 10, 1, 0, 3, 8, 15, 0, -1, -1,

215 -1, 5, 8, 1000, -1, 
MRM
, 168},

216 {"IS.MRM-40", 
VRT_IS_MRM40
, 
TMISSILE
, 12, 1, 0, 3, 8, 15, 0, -1, -1,

217 -1, 7, 6, 1200, -1, 
MRM
, 224},

221 {"CL.ERL¨geLa£r", 
VRT_CL_ERLL
, 
TBEAM
, 12, 10, 0, 8, 15, 25, 0, 5, 10,

222 15, 1, 0, 400, -1, 
CLAT
, 249},

223 {"CL.ERMediumLa£r", 
VRT_CL_ERML
, 
TBEAM
, 5, 7, 0, 5, 10, 15, 0, 3, 7,

224 10, 1, 0, 100, -1, 
CLAT
, 108},

225 {"CL.ERPPC", 
VRT_CL_ERPPC
, 
TBEAM
, 15, 15, 0, 7, 14, 23, 0, 4, 10, 16,

226 2, 0, 600, -1, 
CLAT
, 412},

227 {"CL.ERSmÆlLa£r", 
VRT_CL_ERSL
, 
TBEAM
, 2, 5, 0, 2, 4, 6, 0, 1, 2, 4,

228 1, 0, 50, -1, 
CLAT
, 31},

229 {"CL.Fœmî", 
VRT_CL_FLAMER
, 
TBEAM
, 3, 2, 0, 1, 2, 3, 0, -1, -1, -1, 1,

230 0, 50, -1, 
CLAT
 | 
CHEAT
, 6},

231 {"CL.L¨geLa£r", 
VRT_CL_LL
, 
TBEAM
, 8, 8, 0, 5, 10, 15, 0, 3, 6, 9, 1,

232 0, 400, -1, 
CLAT
, 124},

233 {"CL.L¨gePul£La£r", 
VRT_CL_LPL
, 
TBEAM
, 10, 10, 0, 6, 14, 20, 0, 4,

234 10, 14, 2, 0, 600, -1, 
PULSE
 | 
CLAT
, 265},

235 {"CL.MediumLa£r", 
VRT_CL_ML
, 
TBEAM
, 3, 5, 0, 3, 6, 9, 0, 2, 4, 6, 1,

236 0, 100, -1, 
CLAT
, 46},

237 {"CL.MediumPul£La£r", 
VRT_CL_MPL
, 
TBEAM
, 4, 7, 0, 4, 8, 12, 0, 3, 5,

238 8, 1, 0, 200, -1, 
PULSE
 | 
CLAT
, 111},

239 {"CL.PPC", 
VRT_CL_PPC
, 
TBEAM
, 10, 10, 3, 6, 12, 18, 3, 4, 7, 10, 2, 0,

240 600, -1, 
CLAT
, 176},

241 {"CL.SmÆlLa£r", 
VRT_CL_SL
, 
TBEAM
, 1, 3, 0, 1, 2, 3, 0, 1, 2, -1, 1,

242 0, 50, -1, 
CLAT
, 9},

243 {"CL.SmÆlPul£La£r", 
VRT_CL_SPL
, 
TBEAM
, 2, 3, 0, 2, 4, 6, 0, 1, 2, 4,

244 1, 0, 100, -1, 
PULSE
 | 
CLAT
, 24},

245 {"IS.ERL¨geLa£r", 
VRT_IS_ERLL
, 
TBEAM
, 12, 8, 0, 7, 14, 19, 0, 3, 5,

246 12, 2, 0, 500, -1, 
NONE
, 163},

247 {"IS.ERPPC", 
VRT_IS_ERPPC
, 
TBEAM
, 15, 10, 0, 7, 14, 23, 0, 4, 10, 16,

248 3, 0, 700, -1, 
NONE
, 229},

249 {"IS.Fœmî", 
VRT_IS_FLAMER
, 
TBEAM
, 3, 2, 0, 1, 2, 3, 0, -1, -1, -1, 1,

250 0, 100, -1, 
CHEAT
, 6},

251 {"IS.L¨geLa£r", 
VRT_IS_LL
, 
TBEAM
, 8, 8, 0, 5, 10, 15, 0, 3, 6, 9, 2,

252 0, 500, -1, 
NONE
, 124},

253 {"IS.L¨gePul£La£r", 
VRT_IS_LPL
, 
TBEAM
, 10, 9, 0, 3, 7, 10, 0, 2, 5,

254 7, 2, 0, 700, -1, 
PULSE
, 119},

255 {"IS.MediumLa£r", 
VRT_IS_ML
, 
TBEAM
, 3, 5, 0, 3, 6, 9, 0, 2, 4, 6, 1,

256 0, 100, -1, 
NONE
, 46},

257 {"IS.MediumPul£La£r", 
VRT_IS_MPL
, 
TBEAM
, 4, 6, 0, 2, 4, 6, 0, 2, 3,

258 4, 1, 0, 200, -1, 
PULSE
, 48},

259 {"IS.PPC", 
VRT_IS_PPC
, 
TBEAM
, 10, 10, 3, 6, 12, 18, 3, 4, 7, 10, 3, 0,

260 700, -1, 
NONE
, 176},

261 {"IS.SmÆlLa£r", 
VRT_IS_SL
, 
TBEAM
, 1, 3, 0, 1, 2, 3, 0, 1, 2, -1, 1,

262 0, 50, -1, 
NONE
, 9},

263 {"IS.SmÆlPul£La£r", 
VRT_IS_SPL
, 
TBEAM
, 2, 3, 0, 1, 2, 3, 0, 1, 2,

264 -1, 1, 0, 100, -1, 
PULSE
, 12},

268 {"PC.Sw‹d", 
VRT_PC_SWORD
, 
THAND
, 0, 5, 0, 1, 1, 1, 0, -1, -1, -1, 1,

269 0, 0, -1, 
PC_SHAR
, 1},

270 {"PC.Vibrobœde", 
VRT_PC_VIBROBLADE
, 
THAND
, 0, 7, 0, 1, 1, 1, 0, -1,

271 -1, -1, 1, 0, 0, -1, 
PC_SHAR
, 1},

275 {"IS.ERMediumLa£r", 
VRT_IS_ERML
, 
TBEAM
, 5, 5, 0, 4, 8, 12, 0, 3, 5, 8,

276 1, 0, 100, -1, 
NONE
, 62},

277 {"IS.ERSmÆlLa£r", 
VRT_IS_ERSL
, 
TBEAM
, 2, 3, 0, 2, 4, 5, 0, 1, 2, 3,

278 1, 0, 50, -1, 
NONE
, 17},

279 {"IS.LightGaussRiÊe", 
VRT_IS_LGR
, 
TAMMO
, 1, 8, 3, 8, 17, 25, 0, -1,

280 -1, -1, 5, 16, 1200, 16, 
GAUSS
, 159},

284 {"IS.X-L¨gePul£La£r", 
VRT_IS_XLPL
, 
TBEAM
, 14, 9, 0, 5, 10, 15, 0, 3,

285 6, 9, 2, 0, 700, -1, 
PULSE
, 178},

286 {"IS.X-MediumPul£La£r", 
VRT_IS_XMPL
, 
TBEAM
, 6, 6, 0, 3, 6, 9, 0, 2,

287 4, 6, 1, 0, 200, -1, 
PULSE
, 71},

288 {"IS.X-SmÆlPul£La£r", 
VRT_IS_XSPL
, 
TBEAM
, 3, 3, 0, 2, 4, 5, 0, -1,

289 -1, -1, 1, 0, 100, -1, 
PULSE
, 21},

290 {"IS.HóvyFœmî", 
VRT_IS_HFLAMER
, 
TBEAM
, 5, 4, 0, 2, 4, 6, 0, -1, -1,

291 -1, 1, 0, 100, -1, 
CHEAT
, 20},

292 {"IS.HóvyMachöeGun", 
VRT_IS_HMG
, 
TAMMO
, 0, 2, 0, 2, 4, 6, 0, -1, -1,

293 -1, 1, 100, 100, -1, 
GMG
, 6},

294 {"IS.LightAC/2", 
VRT_IS_LAC2
, 
TAMMO
, 1, 2, 0, 6, 12, 18, 0, -1, -1, -1,

295 1, 45, 400, -1, 
RFAC
, 30},

296 {"IS.LightAC/5", 
VRT_IS_LAC5
, 
TAMMO
, 1, 5, 0, 5, 10, 15, 0, -1, -1, -1,

297 1, 20, 400, -1, 
RFAC
, 62},

298 {"CL.ERL¨gePul£La£r", 
VRT_CL_ERLPL
, 
TBEAM
, 13, 10, 0, 7, 15, 23, 0,

299 4, 10, 16, 3, 0, 600, -1, 
PULSE
 | 
CLAT
, 271},

300 {"CL.ERMediumPul£La£r", 
VRT_CL_ERMPL
, 
TBEAM
, 6, 7, 0, 5, 9, 14, 0, 3,

301 6, 8, 2, 0, 200, -1, 
PULSE
 | 
CLAT
, 116},

302 {"CL.ERSmÆlPul£La£r", 
VRT_CL_ERSPL
, 
TBEAM
, 3, 5, 0, 2, 4, 6, 0, 2,

303 3, 4, 1, 0, 150, -1, 
PULSE
 | 
CLAT
, 36},

304 {"CL.SåókLRM-5", 
VRT_CL_SLRM5
, 
TMISSILE
, 2, 1, 6, 7, 14, 21, 0, -1,

305 -1, -1, 1, 24, 200, -1, 
STREAK
 | 
CLAT
 | 
NOSPA
, 87},

306 {"CL.SåókLRM-10", 
VRT_CL_SLRM10
, 
TMISSILE
, 4, 1, 6, 7, 14, 21, 0, -1,

307 -1, -1, 2, 12, 500, -1, 
STREAK
 | 
CLAT
 | 
NOSPA
, 173},

308 {"CL.SåókLRM-15", 
VRT_CL_SLRM15
, 
TMISSILE
, 5, 1, 6, 7, 14, 21, 0, -1,

309 -1, -1, 3, 8, 700, -1, 
STREAK
 | 
CLAT
 | 
NOSPA
, 260},

310 {"CL.SåókLRM-20", 
VRT_CL_SLRM20
, 
TMISSILE
, 6, 1, 6, 7, 14, 21, 0, -1,

311 -1, -1, 5, 6, 1000, -1, 
STREAK
 | 
CLAT
 | 
NOSPA
, 346},

312 {"IS.A-Pod", 
VRT_IS_APOD
, 
TBEAM
, 0, 0, 0, 1, 1, 1, 0, -1, -1, -1, 1, 0,

313 50, -1, 
A_POD
, 1},

314 {"CL.HóvyL¨geLa£r", 
VRT_CL_HLL
, 
TBEAM
, 18, 16, 0, 5, 10, 15, 0, 3,

315 6, 9, 3, 0, 400, -1, 
CLAT
 | 
HVYW
, 243},

316 {"CL.HóvyMediumLa£r", 
VRT_CL_HML
, 
TBEAM
, 7, 10, 0, 3, 6, 9, 0, 2, 4,

317 6, 2, 0, 100, -1, 
CLAT
 | 
HVYW
, 76},

318 {"CL.HóvySmÆlLa£r", 
VRT_CL_HSL
, 
TBEAM
, 3, 6, 0, 1, 2, 3, 0, 1, 2,

319 -1, 1, 0, 50, -1, 
CLAT
 | 
HVYW
, 15},

322 {"IS.iN¨cBóc⁄", 
VRT_IS_INARC
, 
TMISSILE
, 1, 6, 0, 4, 9, 15, 0, -1,

323 -1, -1, 3, 4, 500, -1, 
INARC
, 75},

324 {"IS.RŸ¨yAC/2", 
VRT_IS_RAC2
, 
TAMMO
, 1, 2, 0, 6, 12, 18, 0, -1, -1,

325 -1, 3, 45, 800, -1, 
RAC
, 118},

326 {"IS.RŸ¨yAC/5", 
VRT_IS_RAC5
, 
TAMMO
, 1, 5, 0, 5, 10, 15, 0, -1, -1,

327 -1, 6, 20, 1000, -1, 
RAC
, 247},

328 {"IS.HóvyGaussRiÊe", 
VRT_IS_HGR
, 
TAMMO
, 2, 25, 4, 6, 13, 20, 0, -1,

329 -1, -1, 11, 4, 1800, 25, 
GAUSS
 | 
HVYGAUSS
, 346},

330 {"IS.MagshŸGaussRiÊe", 
VRT_IS_MGR
, 
TAMMO
, 0, 2, 0, 3, 6, 9, 0, -1,

331 -1, -1, 1, 20, 50, 5, 
GAUSS
, 10},

333 {"CL.Mi¸oPul£La£r", 
VRT_CL_MICROPL
, 
TBEAM
, 1, 3, 0, 1, 2, 3, 0, 1,

334 2, 2, 1, 0, 50, -1, 
PULSE
 | 
CLAT
, 12},

336 {"IS.RL-10", 
VRT_IS_RL10
, 
TMISSILE
, 3, 1, 0, 5, 11, 18, 0, -1, -1, -1,

337 1, 0, 50, -1, 
ROCKET
 | 
IDF
, 18},

338 {"IS.RL-15", 
VRT_IS_RL15
, 
TMISSILE
, 4, 1, 0, 4, 9, 15, 0, -1, -1, -1,

339 2, 0, 100, -1, 
ROCKET
 | 
IDF
, 23},

340 {"IS.RL-20", 
VRT_IS_RL20
, 
TMISSILE
, 5, 1, 0, 3, 7, 12, 0, -1, -1, -1,

341 3, 0, 150, -1, 
ROCKET
 | 
IDF
, 24},

343 {
NULL
, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 
NONE
, 1}

347 
missûe_hô_èbÀ_°ru˘
 
	gMissûeHôTabÀ
[] = {

426 
	#NUM_DEF_WEAPONS
 ((((
MechWóp⁄s
))/ \

427 ((
wóp⁄_°ru˘
)))-1)

	)

	@btech/weapons.vrt.h

4 
	#VRT_CL_AC10
 25

	)

5 
	#VRT_CL_AC2
 12

	)

6 
	#VRT_CL_AC20
 30

	)

7 
	#VRT_CL_AC5
 20

	)

8 
	#VRT_CL_APOD
 30

	)

9 
	#VRT_CL_AMS
 10

	)

10 
	#VRT_CL_ARROWIV
 60

	)

11 
	#VRT_CL_GR
 30

	)

12 
	#VRT_CL_LBX10
 25

	)

13 
	#VRT_CL_LBX2
 15

	)

14 
	#VRT_CL_LBX20
 30

	)

15 
	#VRT_CL_LBX5
 20

	)

16 
	#VRT_CL_LRM10
 20

	)

17 
	#VRT_CL_LRM15
 25

	)

18 
	#VRT_CL_LRM20
 30

	)

19 
	#VRT_CL_LRM5
 15

	)

20 
	#VRT_CL_MG
 7

	)

21 
	#VRT_CL_NARC
 30

	)

22 
	#VRT_CL_SRM2
 15

	)

23 
	#VRT_CL_SRM4
 15

	)

24 
	#VRT_CL_SRM6
 15

	)

25 
	#VRT_CL_SSRM2
 15

	)

26 
	#VRT_CL_SSRM4
 15

	)

27 
	#VRT_CL_SSRM6
 15

	)

28 
	#VRT_CL_UAC10
 25

	)

29 
	#VRT_CL_UAC2
 12

	)

30 
	#VRT_CL_UAC20
 30

	)

31 
	#VRT_CL_UAC5
 20

	)

32 
	#VRT_IS_AC10
 25

	)

33 
	#VRT_IS_AC2
 12

	)

34 
	#VRT_IS_AC20
 30

	)

35 
	#VRT_IS_AC5
 20

	)

36 
	#VRT_IS_AMS
 10

	)

37 
	#VRT_IS_ARROWIV
 60

	)

38 
	#VRT_IS_GR
 30

	)

39 
	#VRT_IS_LBX10
 25

	)

40 
	#VRT_IS_LRM10
 20

	)

41 
	#VRT_IS_LRM15
 25

	)

42 
	#VRT_IS_LRM20
 30

	)

43 
	#VRT_IS_LRM5
 15

	)

44 
	#VRT_IS_LONGTOM
 60

	)

45 
	#VRT_IS_MG
 7

	)

46 
	#VRT_IS_NARC
 30

	)

47 
	#VRT_IS_SRM2
 15

	)

48 
	#VRT_IS_SRM4
 15

	)

49 
	#VRT_IS_SRM6
 15

	)

50 
	#VRT_IS_SNIPER
 60

	)

51 
	#VRT_IS_SSRM2
 15

	)

52 
	#VRT_IS_THUMPER
 60

	)

53 
	#VRT_IS_UAC5
 20

	)

54 
	#VRT_PC_BLAZER
 10

	)

55 
	#VRT_PC_CROSSBOW
 15

	)

56 
	#VRT_PC_FLRIFLE
 10

	)

57 
	#VRT_PC_FLAMER
 7

	)

58 
	#VRT_PC_GYROSLUG
 10

	)

59 
	#VRT_PC_HGGUN
 10

	)

60 
	#VRT_PC_ILRIFLE
 10

	)

61 
	#VRT_PC_LRIFLE
 10

	)

62 
	#VRT_PC_PLPISTOL
 10

	)

63 
	#VRT_PC_PLRIFLE
 10

	)

64 
	#VRT_PC_SMG
 5

	)

65 
	#VRT_PC_SHOTGUN
 15

	)

66 
	#VRT_PC_SPISTOL
 10

	)

67 
	#VRT_PC_SLPISTOL
 7

	)

68 
	#VRT_PC_ZHRIFLE
 10

	)

69 
	#VRT_IS_ELRM5
 30

	)

70 
	#VRT_IS_ELRM10
 30

	)

71 
	#VRT_IS_ELRM15
 30

	)

72 
	#VRT_IS_ELRM20
 30

	)

73 
	#VRT_IS_LR_DFM5
 15

	)

74 
	#VRT_IS_LR_DFM10
 20

	)

75 
	#VRT_IS_LR_DFM15
 25

	)

76 
	#VRT_IS_LR_DFM20
 30

	)

77 
	#VRT_IS_SR_DFM2
 15

	)

78 
	#VRT_IS_SR_DFM4
 15

	)

79 
	#VRT_IS_SR_DFM6
 15

	)

80 
	#VRT_IS_SSRM4
 15

	)

81 
	#VRT_IS_SSRM6
 15

	)

82 
	#VRT_IS_TBOLT5
 20

	)

83 
	#VRT_IS_TBOLT10
 20

	)

84 
	#VRT_IS_TBOLT15
 30

	)

85 
	#VRT_IS_TBOLT20
 30

	)

86 
	#VRT_IS_CAC2
 12

	)

87 
	#VRT_IS_CAC5
 20

	)

88 
	#VRT_IS_CAC10
 25

	)

89 
	#VRT_IS_CAC20
 30

	)

90 
	#VRT_IS_HAC2
 12

	)

91 
	#VRT_IS_HAC5
 20

	)

92 
	#VRT_IS_HAC10
 25

	)

93 
	#VRT_IS_LBX2
 15

	)

94 
	#VRT_IS_LBX5
 20

	)

95 
	#VRT_IS_LBX20
 30

	)

96 
	#VRT_IS_UAC2
 12

	)

97 
	#VRT_IS_UAC10
 25

	)

98 
	#VRT_IS_UAC20
 30

	)

99 
	#VRT_IS_MRM10
 20

	)

100 
	#VRT_IS_MRM20
 30

	)

101 
	#VRT_IS_MRM30
 30

	)

102 
	#VRT_IS_MRM40
 30

	)

103 
	#VRT_CL_ERLL
 20

	)

104 
	#VRT_CL_ERML
 15

	)

105 
	#VRT_CL_ERPPC
 25

	)

106 
	#VRT_CL_ERSL
 10

	)

107 
	#VRT_CL_FLAMER
 10

	)

108 
	#VRT_CL_LL
 25

	)

109 
	#VRT_CL_LPL
 23

	)

110 
	#VRT_CL_ML
 20

	)

111 
	#VRT_CL_MPL
 18

	)

112 
	#VRT_CL_PPC
 30

	)

113 
	#VRT_CL_SL
 15

	)

114 
	#VRT_CL_SPL
 13

	)

115 
	#VRT_IS_ERLL
 25

	)

116 
	#VRT_IS_ERPPC
 30

	)

117 
	#VRT_IS_FLAMER
 10

	)

118 
	#VRT_IS_LL
 25

	)

119 
	#VRT_IS_LPL
 25

	)

120 
	#VRT_IS_ML
 20

	)

121 
	#VRT_IS_MPL
 20

	)

122 
	#VRT_IS_PPC
 30

	)

123 
	#VRT_IS_SL
 15

	)

124 
	#VRT_IS_SPL
 15

	)

125 
	#VRT_PC_SWORD
 3

	)

126 
	#VRT_PC_VIBROBLADE
 3

	)

127 
	#VRT_IS_ERML
 20

	)

128 
	#VRT_IS_ERSL
 15

	)

129 
	#VRT_IS_LGR
 20

	)

130 
	#VRT_IS_XLPL
 27

	)

131 
	#VRT_IS_XMPL
 22

	)

132 
	#VRT_IS_XSPL
 17

	)

133 
	#VRT_IS_HFLAMER
 15

	)

134 
	#VRT_IS_HMG
 7

	)

135 
	#VRT_IS_LAC2
 12

	)

136 
	#VRT_IS_LAC5
 20

	)

137 
	#VRT_CL_ERLPL
 30

	)

138 
	#VRT_CL_ERMPL
 30

	)

139 
	#VRT_CL_ERSPL
 30

	)

140 
	#VRT_CL_SLRM5
 15

	)

141 
	#VRT_CL_SLRM10
 20

	)

142 
	#VRT_CL_SLRM15
 25

	)

143 
	#VRT_CL_SLRM20
 30

	)

144 
	#VRT_IS_APOD
 30

	)

145 
	#VRT_CL_HLL
 30

	)

146 
	#VRT_CL_HML
 25

	)

147 
	#VRT_CL_HSL
 20

	)

148 
	#VRT_IS_INARC
 30

	)

149 
	#VRT_IS_RAC2
 15

	)

150 
	#VRT_IS_RAC5
 22

	)

151 
	#VRT_IS_HGR
 30

	)

152 
	#VRT_IS_MGR
 12

	)

153 
	#VRT_CL_MICROPL
 15

	)

154 
	#VRT_IS_RL10
 30

	)

155 
	#VRT_IS_RL15
 30

	)

156 
	#VRT_IS_RL20
 30

	)

	@command.h

6 #i‚de‡
__COMMAND_H


7 
	#__COMMAND_H


	)

9 
	#CMD_NO_ARG
(
«me
Ë
	`«me
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, )

	)

10 
	#CMD_ONE_ARG
(
«me
Ë
	`«me
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, , *)

	)

11 
	#CMD_ONE_ARG_CMDARG
(
«me
Ë
	`«me
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, , *, *[], )

	)

12 
	#CMD_TWO_ARG
(
«me
Ë
	`«me
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, , , *, *)

	)

13 
	#CMD_TWO_ARG_CMDARG
(
«me
Ë
	`«me
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, , *, *, *[], )

	)

14 
	#CMD_TWO_ARG_ARGV
(
«me
Ë
	`«me
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, , *, *[], )

	)

15 
	#CMD_TWO_ARG_ARGV_CMDARG
(
«me
Ë
	`«me
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, , *, *[], , *[], )

	)

20 
CMD_TWO_ARG
(
do_˚mô
);

21 
CMD_TWO_ARG
(
do_chboŸ
);

22 
CMD_TWO_ARG
(
do_edôch™√l
);

23 
CMD_ONE_ARG
(
do_checkch™√l
);

24 
CMD_ONE_ARG
(
do_¸óãch™√l
);

25 
CMD_ONE_ARG
(
do_de°roych™√l
);

26 
CMD_TWO_ARG
(
do_edôu£r
);

27 
CMD_ONE_ARG
(
do_ch™li°
);

28 
CMD_TWO_ARG
(
do_ch›í
);

29 
CMD_ONE_ARG
(
do_ch™√lwho
);

30 
CMD_TWO_ARG
(
do_addcom
);

31 
CMD_ONE_ARG
(
do_Ælcom
);

32 
CMD_ONE_ARG
(
do_comli°
);

33 
CMD_TWO_ARG
(
do_comtôÀ
);

35 
CMD_ONE_ARG
(
do_dñcom
);

39 
CMD_TWO_ARG
(
do_maû
);

40 
CMD_TWO_ARG
(
do_mÆüs
);

41 
CMD_ONE_ARG
(
do_¥ïíd
);

42 
CMD_ONE_ARG
(
do_po°≥nd
);

44 
CMD_ONE_ARG_CMDARG
(
do_≠∂y_m¨ked
);

45 
CMD_TWO_ARG
(
do_admö
);

46 
CMD_TWO_ARG
(
do_Æüs
);

47 
CMD_TWO_ARG
(
do_©åibuã
);

48 
CMD_ONE_ARG
(
do_boŸ
);

49 
CMD_TWO_ARG
(
do_chown
);

50 
CMD_TWO_ARG
(
do_chow«Œ
);

51 
CMD_TWO_ARG
(
do_chz⁄e
);

52 
CMD_TWO_ARG
(
do_˛⁄e
);

53 
CMD_NO_ARG
(
do_commít
);

54 
CMD_TWO_ARG_ARGV
(
do_˝©å
);

55 
CMD_TWO_ARG
(
do_¸óã
);

56 
CMD_ONE_ARG
(
do_cut
);

57 
CMD_NO_ARG
(
do_dbck
);

58 
CMD_TWO_ARG
(
do_decomp
);

59 
CMD_ONE_ARG
(
do_de°roy
);

60 
CMD_TWO_ARG_ARGV
(
do_dig
);

61 
CMD_ONE_ARG
(
do_doög
);

62 
CMD_TWO_ARG_CMDARG
(
do_dﬁi°
);

63 
CMD_ONE_ARG
(
do_dr›
);

64 
CMD_NO_ARG
(
do_dump
);

65 
CMD_TWO_ARG_ARGV
(
do_edô
);

66 
CMD_ONE_ARG
(
do_íãr
);

67 
CMD_ONE_ARG
(
do_íå™˚s
);

68 
CMD_ONE_ARG
(
do_examöe
);

69 
CMD_ONE_ARG
(
do_föd
);

70 
CMD_TWO_ARG
(
do_fixdb
);

71 
CMD_TWO_ARG_CMDARG
(
do_f‹˚
);

72 
CMD_ONE_ARG_CMDARG
(
do_f‹˚_¥efixed
);

73 
CMD_TWO_ARG
(
do_f‹w¨dli°
);

74 
CMD_TWO_ARG
(
do_fun˘i⁄
);

75 
CMD_ONE_ARG
(
do_gë
);

76 
CMD_TWO_ARG
(
do_give
);

77 
CMD_ONE_ARG
(
do_globÆ
);

78 
CMD_ONE_ARG
(
do_hÆt
);

79 
CMD_ONE_ARG
(
do_hñp
);

80 
CMD_TWO_ARG_ARGV_CMDARG
(
do_if
);

81 
CMD_NO_ARG
(
do_övít‹y
);

82 
CMD_TWO_ARG
(
do_¥og
);

83 
CMD_ONE_ARG
(
do_quô¥og
);

84 
CMD_TWO_ARG
(
do_kûl
);

85 
CMD_ONE_ARG
(
do_œ°
);

86 
CMD_NO_ARG
(
do_Àave
);

87 
CMD_TWO_ARG
(
do_lök
);

88 
CMD_ONE_ARG
(
do_li°
);

89 
CMD_ONE_ARG
(
do_li°_fûe
);

90 
CMD_TWO_ARG
(
do_lock
);

91 
CMD_TWO_ARG
(
do_log
);

92 
CMD_ONE_ARG
(
do_look
);

93 
CMD_NO_ARG
(
do_m¨kÆl
);

94 
CMD_ONE_ARG
(
do_mŸd
);

95 
CMD_ONE_ARG
(
do_move
);

96 
CMD_TWO_ARG_ARGV
(
do_mv©å
);

97 
CMD_TWO_ARG
(
do_«me
);

98 
CMD_TWO_ARG
(
do_√w∑ssw‹d
);

99 
CMD_TWO_ARG
(
do_nŸify
);

100 
CMD_TWO_ARG_ARGV
(
do_›í
);

101 
CMD_TWO_ARG
(
do_∑ge
);

102 
CMD_TWO_ARG
(
do_∑ª¡
);

103 
CMD_TWO_ARG
(
do_∑ssw‹d
);

104 
CMD_TWO_ARG
(
do_p¸óã
);

105 
CMD_TWO_ARG
(
do_≥mô
);

106 
CMD_ONE_ARG
(
do_po‹
);

107 
CMD_TWO_ARG
(
do_powî
);

108 
CMD_ONE_ARG
(
do_ps
);

109 
CMD_ONE_ARG
(
do_queue
);

110 
CMD_TWO_ARG
(
do_quŸa
);

111 
CMD_NO_ARG
(
do_ªadˇche
);

112 
CMD_NO_ARG
(
do_ª°¨t
);

113 
CMD_NO_ARG
(
do_backup
);

114 
CMD_ONE_ARG
(
do_ßy
);

115 
CMD_NO_ARG
(
do_sc‹e
);

116 
CMD_ONE_ARG
(
do_£¨ch
);

117 
CMD_TWO_ARG
(
do_£t
);

118 
CMD_TWO_ARG
(
do_£èâr
);

119 
CMD_TWO_ARG
(
do_£tv©å
);

120 
CMD_ONE_ARG
(
do_shout
);

121 
CMD_ONE_ARG
(
do_shutdown
);

122 
CMD_ONE_ARG
(
do_°©s
);

123 
CMD_ONE_ARG
(
do_swìp
);

124 
CMD_TWO_ARG_ARGV_CMDARG
(
do_swôch
);

125 
CMD_TWO_ARG
(
do_ãÀp‹t
);

126 
CMD_ONE_ARG
(
do_thök
);

127 
CMD_NO_ARG
(
do_timecheck
);

128 
CMD_ONE_ARG
(
do_timew¨p
);

129 
CMD_TWO_ARG
(
do_tﬂd
);

130 
CMD_TWO_ARG_ARGV
(
do_åiggî
);

131 
CMD_ONE_ARG
(
do_u∆ock
);

132 
CMD_ONE_ARG
(
do_u∆ök
);

133 
CMD_ONE_ARG
(
do_u£
);

134 
CMD_NO_ARG
(
do_vîsi⁄
);

135 
CMD_NO_ARG
(
do_ªp‹t
);

136 
CMD_TWO_ARG_ARGV
(
do_vîb
);

137 
CMD_TWO_ARG_CMDARG
(
do_waô
);

138 
CMD_TWO_ARG_CMDARG
(
do_quîy
);

139 
CMD_ONE_ARG
(
do_wùe
);

140 
CMD_NO_ARG
(
do_db˛ón
);

141 
CMD_TWO_ARG
(
do_addcomm™d
);

142 
CMD_TWO_ARG
(
do_dñcomm™d
);

143 
CMD_ONE_ARG
(
do_li°comm™ds
);

144 
CMD_ONE_ARG
(
do_bªak
);

145 #ifde‡
REALITY_LVLS


146 
CMD_TWO_ARG
(
do_rxÀvñ
);

147 
CMD_TWO_ARG
(
do_txÀvñ
);

149 
CMD_TWO_ARG_ARGV
(
do_icmd
);

150 
CMD_ONE_ARG
(
do_hook
);

151 
CMD_TWO_ARG
(
do_Êag
);

152 
CMD_ONE_ARG
(
do_åaö
);

153 
CMD_TWO_ARG
(
do_m⁄ikî
);

157 *
	mcmd«me
;

158 
NAMETAB
 *
	mswôches
;

159 
	m≥rms
;

160 
	mexåa
;

161 
	mˇŒ£q
;

162 
	mhookmask
;

163 (*
	mh™dÀr
)(
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
, dbª‡
	mía˘‹
, );

164 } 
	tCMDENT_NO_ARG
;

168 *
	mcmd«me
;

169 
NAMETAB
 *
	mswôches
;

170 
	m≥rms
;

171 
	mexåa
;

172 
	mˇŒ£q
;

173 
	mhookmask
;

174 (*
	mh™dÀr
)(
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
, dbª‡
	mía˘‹
, , *);

175 } 
	tCMDENT_ONE_ARG
;

179 *
	mcmd«me
;

180 
NAMETAB
 *
	mswôches
;

181 
	m≥rms
;

182 
	mexåa
;

183 
	mˇŒ£q
;

184 
	mhookmask
;

185 (*
	mh™dÀr
)(
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
, dbª‡
	mía˘‹
, , *, *[], );

186 } 
	tCMDENT_ONE_ARG_CMDARG
;

190 *
	mcmd«me
;

191 
NAMETAB
 *
	mswôches
;

192 
	m≥rms
;

193 
	mexåa
;

194 
	mˇŒ£q
;

195 
	mhookmask
;

196 (*
	mh™dÀr
)(
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
, dbª‡
	mía˘‹
, , , *, *);

197 } 
	tCMDENT_TWO_ARG
;

201 *
	mcmd«me
;

202 
NAMETAB
 *
	mswôches
;

203 
	m≥rms
;

204 
	mexåa
;

205 
	mˇŒ£q
;

206 
	mhookmask
;

207 (*
	mh™dÀr
)(
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
, dbª‡
	mía˘‹
, , *, *, *[], );

208 } 
	tCMDENT_TWO_ARG_CMDARG
;

212 *
	mcmd«me
;

213 
NAMETAB
 *
	mswôches
;

214 
	m≥rms
;

215 
	mexåa
;

216 
	mˇŒ£q
;

217 
	mhookmask
;

218 (*
	mh™dÀr
)(
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
, dbª‡
	mía˘‹
, , *, *[], );

219 } 
	tCMDENT_TWO_ARG_ARGV
;

223 *
	mcmd«me
;

224 
NAMETAB
 *
	mswôches
;

225 
	m≥rms
;

226 
	mexåa
;

227 
	mˇŒ£q
;

228 
	mhookmask
;

229 (*
	mh™dÀr
)(
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
, dbª‡
	mía˘‹
, ,

231 } 
	tCMDENT_TWO_ARG_ARGV_CMDARG
;

233 
addedíåy
 
	tADDENT
;

234 
	saddedíåy


236 
dbªf
 
	mthög
;

237 
	m©r
;

238 *
	m«me
;

239 
addedíåy
 *
	m√xt
;

244 *
	mcmd«me
;

245 
NAMETAB
 *
	mswôches
;

246 
	m≥rms
;

247 
	mexåa
;

248 
	mˇŒ£q
;

249 
	mhookmask
;

252 (*
	mh™dÀr
)();

253 
ADDENT
 *
	maddít
;

255 } 
	tCMDENT
;

257 
comm™ds_no_¨g_add
(
CMDENT_NO_ARG
 
cmdít
[]);

258 
comm™ds_⁄e_¨g_add
(
CMDENT_ONE_ARG
 
cmdít
[]);

259 
comm™ds_⁄e_¨g_cmd¨g_add
(
CMDENT_ONE_ARG_CMDARG
 
cmdít
[]);

260 
comm™ds_two_¨g_add
(
CMDENT_TWO_ARG
 
cmdít
[]);

261 
comm™ds_two_¨g_cmd¨g_add
(
CMDENT_TWO_ARG_CMDARG
 
cmdít
[]);

262 
comm™ds_two_¨g_¨gv_add
(
CMDENT_TWO_ARG_ARGV
 
cmdít
[]);

263 
comm™ds_two_¨g_¨gv_cmd¨g_add
(
CMDENT_TWO_ARG_ARGV_CMDARG
 
cmdít
[]);

267 
	#CS_NO_ARGS
 0x0000

	)

268 
	#CS_ONE_ARG
 0x0001

	)

269 
	#CS_TWO_ARG
 0x0002

	)

270 
	#CS_NARG_MASK
 0x0003

	)

271 
	#CS_ARGV
 0x0004

	)

272 
	#CS_INTERP
 0x0010

	)

273 
	#CS_NOINTERP
 0x0020

	)

274 
	#CS_CAUSE
 0x0040

	)

275 
	#CS_UNPARSE
 0x0080

	)

276 
	#CS_CMDARG
 0x0100

	)

277 
	#CS_STRIP
 0x0200

	)

278 
	#CS_STRIP_AROUND
 0x0400

	)

279 
	#CS_ADDED
 0x0800

	)

280 
	#CS_LEADIN
 0x1000

	)

281 
	#CS_NOSQUISH
 0x4000

282 

	)

285 
	#CA_PUBLIC
 0x00000000

	)

286 
	#CA_GOD
 0x00000001

	)

287 
	#CA_WIZARD
 0x00000002

	)

288 
	#CA_BUILDER
 0x00000004

	)

289 
	#CA_IMMORTAL
 0x00000008

	)

290 
	#CA_STAFF
 0x00000010

	)

291 
	#CA_HEAD
 0x00000020

	)

293 
	#CA_ADMIN
 0x00000080

	)

294 
	#CA_ROBOT
 0x00000100

	)

295 
	#CA_ANNOUNCE
 0x00000200

	)

296 
	#CA_UNINS
 0x00000400

	)

297 
	#CA_MUSTBE_MASK
 (
CA_GOD
|
CA_WIZARD
|
CA_BUILDER
|
CA_IMMORTAL
|
CA_STAFF
|
CA_HEAD
|
CA_ADMIN
|
CA_ROBOT
|
CA_ANNOUNCE
|
CA_UNINS
)

	)

299 
	#CA_NO_HAVEN
 0x00001000

	)

300 
	#CA_NO_ROBOT
 0x00002000

	)

301 
	#CA_NO_SLAVE
 0x00004000

	)

302 
	#CA_NO_SUSPECT
 0x00008000

	)

303 
	#CA_NO_GUEST
 0x00010000

	)

304 
	#CA_NO_UNINS
 0x00020000

	)

305 
	#CA_CANTBE_MASK
 (
CA_NO_HAVEN
|
CA_NO_ROBOT
|
CA_NO_SLAVE
|
CA_NO_SUSPECT
|
CA_NO_GUEST
|
CA_NO_UNINS
)

	)

307 
	#CA_MARKER0
 0x00002000

	)

308 
	#CA_MARKER1
 0x00004000

	)

309 
	#CA_MARKER2
 0x00008000

	)

310 
	#CA_MARKER3
 0x00010000

	)

311 
	#CA_MARKER4
 0x00020000

	)

312 
	#CA_MARKER5
 0x00040000

	)

313 
	#CA_MARKER6
 0x00080000

	)

314 
	#CA_MARKER7
 0x00100000

	)

315 
	#CA_MARKER8
 0x00200000

	)

316 
	#CA_MARKER9
 0x00400000

	)

318 
	#CA_GBL_BUILD
 0x00800000

	)

319 
	#CA_GBL_INTERP
 0x01000000

	)

320 
	#CA_DISABLED
 0x02000000

	)

321 
	#CA_STATIC
 0x04000000

	)

322 
	#CA_NO_DECOMP
 0x08000000

	)

324 
	#CA_LOCATION
 0x10000000

	)

325 
	#CA_CONTENTS
 0x20000000

	)

326 
	#CA_PLAYER
 0x40000000

	)

327 
	#CF_DARK
 0x80000000

	)

329 
	#SW_MULTIPLE
 0x80000000

	)

330 
	#SW_GOT_UNIQUE
 0x40000000

	)

331 
	#SW_NOEVAL
 0x20000000

	)

	@comsys.h

6 #i‚de‡
__COMSYS_H__


7 
	#__COMSYS_H__


	)

9 
ch™íåy
 
	tCHANENT
;

10 
	sch™íåy


12 *
	mch™«me
;

13 
ch™√l
 *
	mch™
;

16 
	#NUM_COMSYS
 500

	)

18 
	#MAX_CHANNEL_LEN
 50

	)

19 
	#MAX_HEADER_LEN
 100

	)

20 
	#MAX_TITLE_LEN
 200

	)

21 
	#MAX_ALIAS_LEN
 5

	)

22 
	#ALIAS_SIZE
 (
MAX_ALIAS_LEN
+1)

	)

24 
	scomu£r


26 
dbªf
 
	mwho
;

27 
boﬁ
 
	mbU£rIsOn
;

28 *
	mtôÀ
;

29 
boﬁ
 
	mComTôÀSètus
;

30 
comu£r
 *
	m⁄_√xt
;

33 
	sch™√l


35 
	m«me
[
MAX_CHANNEL_LEN
+1];

36 
	mhódî
[
MAX_HEADER_LEN
+1];

37 
	mty≥
;

38 
	mãmp1
;

39 
	mãmp2
;

40 
	mch¨ge
;

41 
dbªf
 
	mch¨ge_who
;

42 
	mamou¡_cﬁ
;

43 
	mnum_u£rs
;

44 
	mmax_u£rs
;

45 
dbªf
 
	mch™_obj
;

46 
comu£r
 **
	mu£rs
;

47 
comu£r
 *
	m⁄_u£rs
;

48 
	mnum_mesßges
;

51 
	sègComsys


53 
dbªf
 
	mwho
;

55 
	mnumch™√ls
;

56 
	mmaxch™√ls
;

57 *
	mÆüs
;

58 **
	mch™√ls
;

60 
ègComsys
 *
	m√xt
;

61 } 
	tcomsys_t
;

63 
ßve_comsys
(*
fûíame
);

64 
lﬂd_comsys
(*
fûíame
);

65 
dñ_comsys
(
dbªf
 
who
);

66 
add_comsys
(
comsys_t
 *
c
);

67 
boﬁ
 
ã°_joö_ac˚ss
(
dbªf
 
∂ayî
, 
ch™√l
 *
ch™
);

68 
boﬁ
 
ã°_å™smô_ac˚ss
(
dbªf
 
∂ayî
, 
ch™√l
 *
ch™
);

69 
boﬁ
 
ã°_ª˚ive_ac˚ss
(
dbªf
 
∂ayî
, 
ch™√l
 *
ch™
);

70 
do_joöch™√l
(
dbªf
 
∂ayî
, 
ch™√l
 *
ch
);

71 
do_comdisc⁄√˘ch™√l
(
dbªf
 
∂ayî
, *
ch™√l
);

72 
lﬂd_ch™√ls
(
FILE
 *
Â
);

73 
purge_comsy°em
();

74 
ßve_ch™√ls
(
FILE
 *
Â
);

75 
de°roy_comsys
(
comsys_t
 *
c
);

76 
s‹t_com_Æü£s
(
comsys_t
 *
c
);

77 
lﬂd_comsy°em
(
FILE
 *
Â
);

78 
ßve_comsy°em
(
FILE
 *
Â
);

79 
	gSídCh™√lMesßge


81 
dbªf
 
	g∂ayî
,

82 
ch™√l
 *
	gch
,

83 *
	gmsgN‹mÆ
,

84 *
	gmsgNoComtôÀ


86 
do_comwho
(
dbªf
 
∂ayî
, 
ch™√l
 *
ch
);

87 
do_comœ°
(
dbªf
 
∂ayî
, 
ch™√l
 *
ch
, 
¨g
);

88 
do_Àavech™√l
(
dbªf
 
∂ayî
, 
ch™√l
 *
ch
);

89 
do_dñcomch™√l
(
dbªf
 
∂ayî
, *
ch™√l
, 
boﬁ
 
bQuõt
);

91 
do_˛ónupch™√ls
();

93 
do_ch™√ uke
(
dbªf
 
∂ayî
);

94 
s‹t_u£rs
(
ch™√l
 *
ch
);

95 
do_comdisc⁄√˘
(
dbªf
 
∂ayî
);

96 
do_comc⁄√˘
(
dbªf
 
∂ayî
);

97 
do_˛órcom
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, 
unu£d2
);

98 
do_chódî
(
dbªf
 
∂ayî
, *
ch™√l
, *
hódî
);

99 
	gdo_addcom


101 
dbªf
 
	gexecut‹
,

102 
dbªf
 
	gˇŒî
,

103 
dbªf
 
	gía˘‹
,

104 
	gkey
,

105 
	g«rgs
,

106 *
	g¨g1
,

107 *
	g¨g2


110 
comsys_t
 *
¸óã_√w_comsys
 ();

112 
ch™√l
 *
£À˘_ch™√l
(*channel);

113 
comu£r
 *
£À˘_u£r
(
ch™√l
 *
ch
, 
dbªf
 
∂ayî
);

115 *
gë_ch™√l_‰om_Æüs
();

117 
boﬁ
 
do_comsy°em
(
dbªf
 
who
, *
cmd
);

118 
do_ch™li°
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, 
key
, *
∑âîn
);

119 *
modS≥ech
(
dbªf
 
∂ayî
, *
mesßge
, 
boﬁ
 
bWhich
, *
comm™d
);

121 
	#CHANNEL_PLAYER_JOIN
 (0x00000001UL)

	)

122 
	#CHANNEL_PLAYER_TRANSMIT
 (0x00000002UL)

	)

123 
	#CHANNEL_PLAYER_RECEIVE
 (0x00000004UL)

	)

124 
	#CHANNEL_OBJECT_JOIN
 (0x00000010UL)

	)

125 
	#CHANNEL_OBJECT_TRANSMIT
 (0x00000020UL)

	)

126 
	#CHANNEL_OBJECT_RECEIVE
 (0x00000040UL)

	)

127 
	#CHANNEL_LOUD
 (0x00000100UL)

	)

128 
	#CHANNEL_PUBLIC
 (0x00000200UL)

	)

129 
	#CHANNEL_SPOOF
 (0x00000400UL)

	)

133 
	#UNDEAD
(
x
Ë(
	`Good_obj
(xË&& ((
	`Ty≥of
(xË!
TYPE_PLAYER
Ë|| 
	`C⁄√˘ed
(x)))

	)

	@config.h

6 #i‚de‡
CONFIG_H


7 
	#CONFIG_H


	)

11 
	#SIDE_EFFECT_FUNCTIONS


	)

13 
	#PLAYER_NAME_LIMIT
 22

	)

14 
	#NUM_ENV_VARS
 10

	)

15 
	#MAX_ARG
 100

	)

16 
	#MAX_GLOBAL_REGS
 36

	)

18 
	#OUTPUT_BLOCK_SIZE
 16384

	)

24 
	#MANDFLAGS
 (
V_LINK
|
V_PARENT
|
V_XFLAGS
|
V_ZONE
|
V_POWERS
|
V_3FLAGS
|
V_QUOTED
)

	)

25 
	#OFLAGS
 (
V_DATABASE
|
V_ATRKEY
|
V_ATRNAME
|
V_ATRMONEY
)

	)

27 
	#OUTPUT_VERSION
 1

	)

28 #ifde‡
MEMORY_BASED


29 
	#OUTPUT_FLAGS
 (
MANDFLAGS
)

	)

31 
	#OUTPUT_FLAGS
 (
MANDFLAGS
|
OFLAGS
)

	)

34 
	#UNLOAD_VERSION
 1

	)

35 
	#UNLOAD_FLAGS
 (
MANDFLAGS
)

	)

38 
	#NOT_TOKEN
 '!'

	)

39 
	#AND_TOKEN
 '&'

	)

40 
	#OR_TOKEN
 '|'

	)

41 
	#LOOKUP_TOKEN
 '*'

	)

42 
	#NUMBER_TOKEN
 '#'

	)

43 
	#INDIR_TOKEN
 '@'

	)

44 
	#CARRY_TOKEN
 '+'

	)

45 
	#IS_TOKEN
 '='

	)

46 
	#OWNER_TOKEN
 '$'

	)

49 
	#AMATCH_CMD
 '$'

	)

50 
	#AMATCH_LISTEN
 '^'

	)

53 
	#EXIT_DELIMITER
 ';'

	)

54 
	#ARG_DELIMITER
 '='

	)

55 
	#ARG_LIST_DELIM
 ','

	)

59 
	#NULL_DELIM_VAR
 "@@"

	)

63 
	#INDENT_STR
 " "

	)

66 
	#OBJECT_ENDOWMENT
(
co°
Ë(((co°)/
mudc⁄f
.
ßcÁ˘‹
Ë+ mudc⁄f.
ßˇdju°
)

	)

69 
	#OBJECT_DEPOSIT
(
≥¬õs
) \

70 (((
≥¬õs
Ë- 
mudc⁄f
.
ßˇdju°
)* mudc⁄f.
ßcÁ˘‹
)

	)

72 #ifde‡
WIN32


73 
	#DCL_CDECL
 
__cde˛


	)

74 
	#DCL_INLINE
 
__ölöe


	)

76 
__öt64
 
	tINT64
;

77 
	t__öt64
 
	tUINT64
;

78 
	#INT64_MAX_VALUE
 9223372036854775807
i64


	)

79 
	#INT64_MIN_VALUE
 (-9223372036854775807
i64
 - 1)

	)

80 
	#UINT64_MAX_VALUE
 0xffffffffffffffffu
i64


	)

82 
	#SIZEOF_PATHNAME
 (
_MAX_PATH
 + 1)

	)

83 
	#SOCKET_WRITE
(
s
,
b
,
n
,
f
Ë
	`£nd
(s,b,n,f)

	)

84 
	#SOCKET_READ
(
s
,
b
,
n
,
f
Ë
	`ªcv
(s,b,n,f)

	)

85 
	#SOCKET_CLOSE
(
s
Ë
	`˛o£sockë
(s)

	)

86 
	#IS_SOCKET_ERROR
(
cc
Ë((ccË=
SOCKET_ERROR
)

	)

87 
	#IS_INVALID_SOCKET
(
s
Ë((sË=
INVALID_SOCKET
)

	)

88 
	#SOCKET_LAST_ERROR
 (
	`WSAGëLa°Eº‹
())

	)

89 
	#SOCKET_EINTR
 (
WSAEINTR
)

	)

90 
	#SOCKET_EWOULDBLOCK
 (
WSAEWOULDBLOCK
)

	)

91 
	#SOCKET_EBADF
 (
WSAEBADF
)

	)

92 
	#p›í
 
_p›í


	)

93 
	#p˛o£
 
_p˛o£


	)

97 
	#DCL_CDECL


	)

98 
	#DCL_INLINE
 
ölöe


	)

99 
	#INVALID_HANDLE_VALUE
 (-1)

	)

100 #i‚de‡
O_BINARY


101 
	#O_BINARY
 0

	)

103 
	tHANDLE
;

105 
	tINT64
;

106 
	tUINT64
;

107 
	#INT64_MAX_VALUE
 9223372036854775807LL

	)

108 
	#INT64_MIN_VALUE
 (-9223372036854775807LL - 1)

	)

109 
	#UINT64_MAX_VALUE
 0xffffffffffffffffULL

	)

111 
	tSOCKET
;

112 #ifde‡
PATH_MAX


113 
	#SIZEOF_PATHNAME
 (
PATH_MAX
 + 1)

	)

115 
	#SIZEOF_PATHNAME
 (4095 + 1)

	)

117 
	#SOCKET_WRITE
(
s
,
b
,
n
,
f
Ë
	`wrôe
(s,b,n)

	)

118 
	#SOCKET_READ
(
s
,
b
,
n
,
f
Ë
	`ªad
(s,b,n)

	)

119 
	#SOCKET_CLOSE
(
s
Ë
	`˛o£
(s)

	)

120 
	#IS_SOCKET_ERROR
(
cc
Ë((ccË< 0)

	)

121 
	#IS_INVALID_SOCKET
(
s
Ë((sË< 0)

	)

122 
	#SOCKET_LAST_ERROR
 (
î∫o
)

	)

123 
	#SOCKET_EINTR
 (
EINTR
)

	)

124 
	#SOCKET_EWOULDBLOCK
 (
EWOULDBLOCK
)

	)

125 #ifde‡
EAGAIN


126 
	#SOCKET_EAGAIN
 (
EAGAIN
)

	)

128 
	#SOCKET_EBADF
 (
EBADF
)

	)

129 
	#INVALID_SOCKET
 (-1)

	)

130 
	#SD_BOTH
 (2)

	)

134 
	#isTRUE
(
x
Ë((xË!0)

	)

139 #i‡
SIZEOF_INT
 == 4

140 
	tINT32
;

141 
	tUINT32
;

142 #ifde‡
CAN_UNALIGN_INT


143 
	#UNALIGNED32


	)

145 #ñi‡
SIZEOF_LONG
 == 4

146 
	tINT32
;

147 
	tUINT32
;

148 #ifde‡
CAN_UNALIGN_LONG


149 
	#UNALIGNED32


	)

151 #ñi‡
SIZEOF_SHORT
 == 4

152 
	tINT32
;

153 
	tUINT32
;

154 #ifde‡
CAN_UNALIGN_SHORT


155 
	#UNALIGNED32


	)

158 
INT64
 
	tINT32
;

159 
UINT64
 
	tUINT32
;

160 #ifde‡
CAN_UNALIGN_LONGLONG


161 
	#UNALIGNED32


	)

164 
	#INT32_MIN_VALUE
 (-2147483647 - 1)

	)

165 
	#INT32_MAX_VALUE
 2147483647

	)

166 
	#UINT32_MAX_VALUE
 0xFFFFFFFFU

	)

171 #i‡
SIZEOF_INT
 == 2

172 
	tINT16
;

173 
	tUINT16
;

174 #ifde‡
CAN_UNALIGN_INT


175 
	#UNALIGNED16


	)

177 #ñi‡
SIZEOF_LONG
 == 2

178 
	tINT16
;

179 
	tUINT16
;

180 #ifde‡
CAN_UNALIGN_LONG


181 
	#UNALIGNED16


	)

183 #ñi‡
SIZEOF_SHORT
 == 2

184 
	tINT16
;

185 
	tUINT16
;

186 #ifde‡
CAN_UNALIGN_SHORT


187 
	#UNALIGNED16


	)

190 
INT32
 
	tINT16
;

191 
UINT32
 
	tUINT16
;

192 #ifde‡
UNALIGNED32


193 
	#UNALIGNED16


	)

196 
	#INT16_MIN_VALUE
 (-32768)

	)

197 
	#INT16_MAX_VALUE
 32767

	)

198 
	#UINT16_MAX_VALUE
 0xFFFFU

	)

200 sig√d 
	tINT8
;

201 
	tUINT8
;

203 #i‚de‡
HAVE_IN_ADDR_T


204 
UINT32
 
	tö_addr_t
;

207 #i‚de‡
SMALLEST_INT_GTE_NEG_QUOTIENT


208 
	#LARGEST_INT_LTE_NEG_QUOTIENT


	)

211 
boﬁ
 
As£πi⁄Faûed
(c⁄° *
Sour˚Fûe
, 
LöeNo
);

212 
	#mux_as£π
(
exp
Ë()–”xpË|| (
	`As£πi⁄Faûed
(
__FILE__
, 
__LINE__
), 0Ë)

	)

214 
OutOfMem‹y
(c⁄° *
Sour˚Fûe
, 
LöeNo
);

215 
	#ISOUTOFMEMORY
(
exp
Ë{i‡(!”xp)Ë{ 
	`OutOfMem‹y
(
__FILE__
, 
__LINE__
); }}

	)

221 #ifde‡
MEMORY_ACCOUNTING


222 *
MemAŒoˇã
(
size_t
 
n
, c⁄° *
f
, 
l
);

223 
MemFªe
(*
p
, c⁄° *
f
, 
l
);

224 *
MemRóŒoc
(*
p
, 
size_t
 
n
, c⁄° *
f
, 
l
);

225 
	#MEMALLOC
(
n
Ë
	`MemAŒoˇã
(“), 
__FILE__
, 
__LINE__
)

	)

226 
	#MEMFREE
(
p
Ë
	`MemFªe
(’), 
__FILE__
, 
__LINE__
)

	)

227 
	#MEMREALLOC
(
p
, 
n
Ë
	`MemRóŒoc
(’), (n), 
__FILE__
, 
__LINE__
)

	)

229 
	#MEMALLOC
(
n
Ë
	`mÆloc
(“))

	)

230 
	#MEMFREE
(
p
Ë
	`‰ì
(’))

	)

231 
	#MEMREALLOC
(
p
, 
n
Ë
	`ªÆloc
(’),“))

	)

237 #ifde‡
hpux


238 
	#HAVE_GETRUSAGE
 1

	)

239 
	~<sys/sysˇŒ.h
>

240 
	#gërußge
(
x
,
p
Ë
	`sysˇŒ
(
SYS_GETRUSAGE
,x,p)

	)

	@copyright.h

	@crypt/crypt-private.h

26 
_ufc_doô_r
 (
ufc_l⁄g
 
ôr
, 
¸y±_d©a
 *
__d©a
,

27 
ufc_l⁄g
 *
ªs
);

31 
__öô_des_r
 (
¸y±_d©a
 *
__d©a
);

32 
__öô_des
 ();

33 *
f¸y±
 (c⁄° *
key
, c⁄° *
ß…
);

35 
_ufc_£tup_ß…_r
 (c⁄° *
s
, 
¸y±_d©a
 *
__d©a
);

36 
_ufc_mk_keyèb_r
 (*
key
, 
¸y±_d©a
 *
__d©a
);

37 
_ufc_doföÆ≥rm_r
 (
ufc_l⁄g
 *
ªs
, 
¸y±_d©a
 *
__d©a
);

38 
_ufc_ouçut_c⁄vîsi⁄_r
 (
ufc_l⁄g
 
v1
, ufc_l⁄g 
v2
,

39 c⁄° *
ß…
,

40 
¸y±_d©a
 *
__d©a
);

	@crypt/crypt.h

25 #i‚de‡
_CRYPT_H


26 
	#_CRYPT_H
 1

	)

29 *
¸y±
(c⁄° *
__key
, c⁄° *
__ß…
);

32 
£tkey
(c⁄° *
__key
);

36 
í¸y±
 (*
__block
, 
__edÊag
);

40 
	s¸y±_d©a


42 
	mkeysched
[16 * 8];

43 
	msb0
[32768];

44 
	msb1
[32768];

45 
	msb2
[32768];

46 
	msb3
[32768];

48 
	m¸y±_3_buf
[14];

49 
	mcuºít_ß…
[2];

50 
	mcuºít_ß…bôs
;

51 
	mdúe˘i⁄
, 
	möôülized
;

54 *
__¸y±_r
(c⁄° *
__key
, c⁄° *
__ß…
, 
¸y±_d©a
 *
__d©a
);

55 *
¸y±_r
(c⁄° *
__key
, c⁄° *
__ß…
, 
¸y±_d©a
 *
__d©a
);

56 
__£tkey_r
(c⁄° *
__key
, 
¸y±_d©a
 *
__d©a
);

57 
£tkey_r
(c⁄° *
__key
, 
¸y±_d©a
 *
__d©a
);

58 
__í¸y±_r
(*
__block
, 
__edÊag
, 
¸y±_d©a
 *
__d©a
);

59 
í¸y±_r
(*
__block
, 
__edÊag
, 
¸y±_d©a
 *
__d©a
);

	@crypt/patchlevel.h

25 
	#PATCHLEVEL
 "UFC-¸y±,Ö©chÀvñ 1e, @(#Ì©chÀvñ.h 1.13 9/10/96"

	)

	@crypt/ufc-crypt.h

43 #ifde‡
¸ay


45 
	tufc_l⁄g
;

46 
	tl⁄g64
;

47 
	#_UFC_64_


	)

50 #i‡
deföed
 
c⁄vex
 || deföed 
__c⁄vexc__


52 
	tufc_l⁄g
;

53 
	tl⁄g64
;

54 
	#_UFC_64_


	)

57 #ifde‡
__sgi


58 #i‡
_MIPS_SZLONG
 == 64

59 
	tufc_l⁄g
;

60 
	tl⁄g64
;

61 
	#_UFC_64_


	)

63 
	tufc_l⁄g
;

64 
	tl⁄g32
;

65 
	#_UFC_32_


	)

73 #ifde‡
__Æpha


74 
	tufc_l⁄g
;

75 
	tl⁄g64
;

76 
	#_UFC_64_


	)

79 #i‡
deföed
 
__•¨c__
 && deföed 
__¨ch64__


80 
	tufc_l⁄g
;

81 
	tl⁄g64
;

82 
	#_UFC_64_


	)

89 #ifde‡
GCC3232


90 
	tufc_l⁄g
;

91 
	tl⁄g32
;

92 
	#_UFC_32_


	)

95 #ifde‡
GCC3264


96 
	tufc_l⁄g
;

97 
	tl⁄g64
;

98 
	#_UFC_64_


	)

101 #ifde‡
GCC6432


102 
	tufc_l⁄g
;

103 
	tl⁄g32
;

104 
	#_UFC_32_


	)

107 #ifde‡
GCC6464


108 
	tufc_l⁄g
;

109 
	tl⁄g64
;

110 
	#_UFC_64_


	)

117 #i‚de‡
_UFC_64_


118 #i‚de‡
_UFC_32_


119 
	#_UFC_32_


	)

120 
	tufc_l⁄g
;

121 
	tl⁄g32
;

	@db.h

6 #i‚de‡
__DB_H


7 
	#__DB_H


	)

9 #i‚de‡
MEMORY_BASED


10 
	#SYNC
 
	`ˇche_sync
()

	)

11 
	#CLOSE
 
	`ˇche_˛o£
()

	)

13 
	#SYNC


	)

14 
	#CLOSE


	)

17 
	~"©åˇche.h
"

18 
	~"Êags.h
"

19 
	~"timeutû.h
"

21 
	#ITER_PARENTS
(
t
,
p
,
l
) (l)=0, (p)=(t); \

22 (
	`Good_obj
(
p
) && \

23 ((
l
Ë< 
mudc⁄f
.
∑ª¡_√°_lim
)); \

24 (
p
)=
	`P¨ít
’), (
l
)++)

	)

26 
gë_©r
(*
«me
);

28 
©å
 
	tATTR
;

29 
	s©å


31 c⁄° *
	m«me
;

32 
	mnumbî
;

33 
	mÊags
;

36 #ifde‡
MEMORY_BASED


37 
©æi°
 
	tATRLIST
;

38 
	s©æi°


40 *
	md©a
;

41 
	msize
;

42 
	mnumbî
;

46 *
MakeC™⁄iˇlAâribuãName
(c⁄° *
pName
, *
≤Name
, 
boﬁ
 *
pbVÆid
);

47 *
MakeC™⁄iˇlAâribuãComm™d
(c⁄° *
pName
, *
≤Name
, 
boﬁ
 *
pbVÆid
);

49 
°ack
 
	tSTACK
;

50 
	s°ack


52 *
	md©a
;

53 
STACK
 *
	m√xt
;

56 
ATTR
 *
©r_num
(
™um
);

57 
ATTR
 *
©r_°r
(*
s
);

59 
ATTR
 
©å
[];

61 
ATTR
 **
™um_èbÀ
;

62 
	#™um_gë
(
x
Ë(
™um_èbÀ
[(x)])

	)

63 
	#™um_£t
(
x
,
v
Ë
™um_èbÀ
[(x)] = 
	)
v

64 
™um_exãnd
();

66 
	#ATR_INFO_CHAR
 '\1'

	)

69 
	#BOOLEXP_AND
 0

	)

70 
	#BOOLEXP_OR
 1

	)

71 
	#BOOLEXP_NOT
 2

	)

72 
	#BOOLEXP_CONST
 3

	)

73 
	#BOOLEXP_ATR
 4

	)

74 
	#BOOLEXP_INDIR
 5

	)

75 
	#BOOLEXP_CARRY
 6

	)

76 
	#BOOLEXP_IS
 7

	)

77 
	#BOOLEXP_OWNER
 8

	)

78 
	#BOOLEXP_EVAL
 9

	)

80 
boﬁexp
 
	tBOOLEXP
;

81 
	sboﬁexp


83 
boﬁexp_ty≥
 
	mty≥
;

84 
boﬁexp
 *
	msub1
;

85 
boﬁexp
 *
	msub2
;

86 
dbªf
 
	mthög
;

89 
	#TRUE_BOOLEXP
 ((
BOOLEXP
 *Ë0)

	)

93 
	#F_UNKNOWN
 0

	)

94 
	#F_MUX
 5

	)

96 
	#V_MASK
 0x000000f‡

	)

97 
	#V_ZONE
 0x00000100

	)

98 
	#V_LINK
 0x00000200

	)

99 
	#V_DATABASE
 0x00000400

	)

100 
	#V_ATRNAME
 0x00000800

	)

101 
	#V_ATRKEY
 0x00001000

	)

102 
	#V_PARENT
 0x00002000

	)

103 
	#V_ATRMONEY
 0x00008000

	)

104 
	#V_XFLAGS
 0x00010000

	)

105 
	#V_POWERS
 0x00020000

	)

106 
	#V_3FLAGS
 0x00040000

	)

107 
	#V_QUOTED
 0x00080000

	)

110 
	#DB_CHANNELS
 0x2

	)

111 
	#DB_SLOCK
 0x4

	)

112 
	#DB_MC
 0x8

	)

113 
	#DB_MPAR
 0x10

	)

114 
	#DB_CLASS
 0x20

	)

115 
	#DB_RANK
 0x40

	)

116 
	#DB_DROPLOCK
 0x80

	)

117 
	#DB_GIVELOCK
 0x100

	)

118 
	#DB_GETLOCK
 0x200

	)

119 
	#DB_THREEPOW
 0x400

	)

122 
	#NOTHING
 (-1Ë

	)

123 
	#AMBIGUOUS
 (-2Ë

	)

124 
	#HOME
 (-3Ë

	)

125 
	#NOPERM
 (-4Ë

	)

126 *
aszS≥cülDBRefNames
[1-
NOPERM
];

128 
obje˘
 
	tOBJ
;

129 
	sobje˘


131 
dbªf
 
	mloˇti⁄
;

134 
dbªf
 
	mc⁄ã¡s
;

136 
dbªf
 
	mexôs
;

138 
dbªf
 
	m√xt
;

141 
dbªf
 
	mlök
;

143 
dbªf
 
	m∑ª¡
;

144 
dbªf
 
	mow√r
;

147 
dbªf
 
	mz⁄e
;

149 
FLAGSET
 
	mfs
;

151 
POWER
 
	mpowîs
;

152 
POWER
 
	mpowîs2
;

154 
STACK
 *
	m°ackhód
;

156 
CLöórTimeDñè
 
	m˝u_time_u£d
;

160 
CLöórTimeAbsﬁuã
 
	mtThrŸéeExpúed
;

161 
	mthrŸéed_©åibuãs
;

162 
	mthrŸéed_maû
;

164 *
	mpuª«me
;

165 *
	mm⁄ikî
;

167 #ifde‡
MEMORY_BASED


168 
ATRLIST
 *
	mahód
;

169 
	m©_cou¡
;

171 *
	m«me
;

175 
OBJ
 *
db
;

177 
	#Loˇti⁄
(
t
Ë
db
[t].
loˇti⁄


	)

179 
	#Z⁄e
(
t
Ë
db
[t].
z⁄e


	)

181 
	#C⁄ã¡s
(
t
Ë
db
[t].
c⁄ã¡s


	)

182 
	#Exôs
(
t
Ë
db
[t].
exôs


	)

183 
	#Next
(
t
Ë
db
[t].
√xt


	)

184 
	#Lök
(
t
Ë
db
[t].
lök


	)

185 
	#Ow√r
(
t
Ë
db
[t].
ow√r


	)

186 
	#P¨ít
(
t
Ë
db
[t].
∑ª¡


	)

187 
	#Fœgs
(
t
Ë
db
[t].
fs
.
w‹d
[
FLAG_WORD1
]

	)

188 
	#Fœgs2
(
t
Ë
db
[t].
fs
.
w‹d
[
FLAG_WORD2
]

	)

189 
	#Fœgs3
(
t
Ë
db
[t].
fs
.
w‹d
[
FLAG_WORD3
]

	)

190 
	#Powîs
(
t
Ë
db
[t].
powîs


	)

191 
	#Powîs2
(
t
Ë
db
[t].
powîs2


	)

192 
	#Sèck
(
t
Ë
db
[t].
°ackhód


	)

193 
	#Home
(
t
Ë
	`Lök
—)

	)

194 
	#Dr›to
(
t
Ë
	`Loˇti⁄
—)

	)

195 
	#ThAârib
(
t
Ë
db
[t].
thrŸéed_©åibuãs


	)

196 
	#ThMaû
(
t
Ë
db
[t].
thrŸéed_maû


	)

198 
	#s_Loˇti⁄
(
t
,
n
Ë
db
[t].
loˇti⁄
 = (n)

	)

200 
	#s_Z⁄e
(
t
,
n
Ë
db
[t].
z⁄e
 = (n)

	)

202 
	#s_C⁄ã¡s
(
t
,
n
Ë
db
[t].
c⁄ã¡s
 = (n)

	)

203 
	#s_Exôs
(
t
,
n
Ë
db
[t].
exôs
 = (n)

	)

204 
	#s_Next
(
t
,
n
Ë
db
[t].
√xt
 = (n)

	)

205 
	#s_Lök
(
t
,
n
Ë
db
[t].
lök
 = (n)

	)

206 
	#s_Ow√r
(
t
,
n
Ë
db
[t].
ow√r
 = (n)

	)

207 
	#s_P¨ít
(
t
,
n
Ë
db
[t].
∑ª¡
 = (n)

	)

208 
	#s_Fœgs
(
t
,
f
,
n
Ë
db
[t].
fs
.
w‹d
[f] = (n)

	)

209 
	#s_Powîs
(
t
,
n
Ë
db
[t].
powîs
 = (n)

	)

210 
	#s_Powîs2
(
t
,
n
Ë
db
[t].
powîs2
 = (n)

	)

211 
	#s_Sèck
(
t
,
n
Ë
db
[t].
°ackhód
 = (n)

	)

212 
	#s_Home
(
t
,
n
Ë
	`s_Lök
—,n)

	)

213 
	#s_Dr›to
(
t
,
n
Ë
	`s_Loˇti⁄
—,n)

	)

214 
	#s_ThAârib
(
t
,
n
Ë
db
[t].
thrŸéed_©åibuãs
 = (n);

	)

215 
	#s_ThMaû
(
t
,
n
Ë
db
[t].
thrŸéed_maû
 = (n);

	)

217 
Pínõs
(
dbªf
);

218 
s_Pínõs
(
dbªf
, );

220 #i‚de‡
WIN32


221 
lﬂd_ª°¨t_db
();

224 
dbªf
 
gëªf
(
FILE
 *);

225 
puåef
(
FILE
 *, 
dbªf
);

226 
‰ì_boﬁexp
(
BOOLEXP
 *);

227 
dbªf
 
∑r£_dbªf
(const *);

228 
boﬁ
 
ThrŸéeMaû
(
dbªf
 
execut‹
);

229 
boﬁ
 
ThrŸéeAâribuãNames
(
dbªf
 
execut‹
);

230 
boﬁ
 
ThrŸéePœyîCª©e
();

231 
mk©å
(
dbªf
 
execut‹
, *);

232 
Æ_°‹e
();

233 
db_grow
(
dbªf
);

234 
db_‰ì
();

235 
db_make_möimÆ
();

236 
dbªf
 
db_ªad
(
FILE
 *, *, *, *);

237 
dbªf
 
db_wrôe
(
FILE
 *, , );

238 
de°roy_thög
(
dbªf
);

239 
de°roy_exô
(
dbªf
);

240 
put°rög
(
FILE
 *
f
, c⁄° *
s
);

241 *
gë°rög_nﬂŒoc
(
FILE
 *
f
, 
√w_°rögs
);

243 
	#DOLIST
(
thög
,
li°
) \

244 (
thög
)=(
li°
); \

245 ((
thög
)!=
NOTHING
Ë&& (
	`Next
(thing)!=(thing)); \

246 (
thög
)=
	`Next
—hög))

	)

247 
	#SAFE_DOLIST
(
thög
,
√xt
,
li°
) \

248 (
thög
)=(
li°
),(
√xt
)=(—hög)==
NOTHING
 ? NOTHING: 
	`Next
(thing)); \

249 (
thög
)!=
NOTHING
 && (
	`Next
(thing)!=(thing)); \

250 (
thög
)=(
√xt
), (√xt)=
	`Next
“ext))

	)

251 
	#DO_WHOLE_DB
(
thög
) \

252 (
thög
)=0; (thög)<
mud°©e
.
db_t›
; (thög)++)

	)

253 
	#DO_WHOLE_DB_BACKWARDS
(
thög
) \

254 (
thög
)=
mud°©e
.
db_t›
-1; (thög)>=0; (thög)--)

	)

	@externs.h

6 #i‚de‡
EXTERNS_H


7 
	#EXTERNS_H


	)

9 
	~"db.h
"

10 
	~"m©ch.h
"

11 
	~"mudc⁄f.h
"

12 
	~"svdønd.h
"

15 
CÀ™UpSœveSockë
();

16 
CÀ™UpSœvePro˚ss
();

19 
cf_log_nŸfound
(
dbªf
, *, const *, *);

20 
cf_modify_bôs
(*, *, *, 
UINT32
, 
dbªf
, *);

23 
loˇl_°¨tup
();

24 
loˇl_¥esync_d©aba£
();

25 
loˇl_¥esync_d©aba£_sig£gv
();

26 
loˇl_dump_d©aba£
();

27 
loˇl_dump_com∂ëe_sig«l
();

28 
loˇl_shutdown
();

29 
loˇl_dbck
();

30 
loˇl_c⁄√˘
(
dbªf
, , );

31 
loˇl_disc⁄√˘
(
dbªf
, );

32 
loˇl_d©a_¸óã
(
dbªf
);

33 
loˇl_d©a_˛⁄e
(
dbªf
, dbref);

34 
loˇl_d©a_‰ì
(
dbªf
);

36 
loˇl_h™dÀd_Êag
(
dbªf
 
èrgë
, dbª‡
∂ayî
, 
FLAG
 
Êag
, 
fÊags
, 
boﬁ
 
ª£t
);

37 
loˇl_h™dÀd_comm™d
(
dbªf
 
execut‹
, *
pComm™d
);

40 
lﬂd_maû
(
FILE
 *);

41 
dump_maû
(
FILE
 *);

42 
maû
 *
maû_„tch
(
dbªf
, );

45 
DCL_CDECL
 
øw_brﬂdˇ°
(, *, ...);

48 
nfy_que
(
dbªf
, , , );

49 
hÆt_que
(
dbªf
, dbref);

50 
waô_que
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, 
boﬁ
,

51 
CLöórTimeAbsﬁuã
&, 
dbªf
, , *, *[],, *[]);

53 #ifde‡
WIN32


54 
	~"¸y±/¸y±.h
"

56 "C" *
¸y±
(c⁄° *
ö±r
, c⁄° *
ökey
);

60 
tˇche_öô
();

61 *
∑r£_to
(**, , );

62 *
∑r£_¨gli°
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, *,

64 
gë_gídî
(
dbªf
);

65 
mux_exec
(*
buff
, **
bufc
, 
dbªf
 
execut‹
, dbª‡
ˇŒî
,

66 
dbªf
 
ía˘‹
, 
evÆ
, **
d°r
, *
ˇrgs
[],

67 
nˇrgs
);

68 
ßve_globÆ_ªgs
(const *, *[], []);

69 
ßve_™d_˛ór_globÆ_ªgs
(const *, *[], []);

70 
ª°‹e_globÆ_ªgs
(const *, *[], []);

71 **
PushPoöãrs
(
nNìded
);

72 
P›Poöãrs
(**
p
, 
nNìded
);

73 *
PushI¡egîs
(
nNìded
);

74 
P›I¡egîs
(*
pi
, 
nNìded
);

75 c⁄° sig√d 
mux_Regi°îSë
[256];

78 
	#nŸify
(
p
,
m
Ë
	`nŸify_check
’,p,m, 
MSG_PUP_ALWAYS
|
MSG_ME_ALL
|
MSG_F_DOWN
)

	)

79 
	#nŸify_ßypo£
(
p
,
m
Ë
	`nŸify_check
’,p,m, 
MSG_PUP_ALWAYS
|
MSG_ME_ALL
|
MSG_F_DOWN
|
MSG_SAYPOSE
)

	)

80 
	#nŸify_html
(
p
,
m
Ë
	`nŸify_check
’,p,m, 
MSG_PUP_ALWAYS
|
MSG_ME_ALL
|
MSG_F_DOWN
|
MSG_HTML
)

	)

81 
	#nŸify_quõt
(
p
,
m
Ë
	`nŸify_check
’,p,m, 
MSG_PUP_ALWAYS
|
MSG_ME
)

	)

82 
	#nŸify_wôh_ˇu£
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_PUP_ALWAYS
|
MSG_ME_ALL
|
MSG_F_DOWN
)

	)

83 
	#nŸify_wôh_ˇu£_ooc
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_PUP_ALWAYS
|
MSG_ME_ALL
|
MSG_F_DOWN
|
MSG_OOC
)

	)

84 
	#nŸify_wôh_ˇu£_html
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_PUP_ALWAYS
|
MSG_ME_ALL
|
MSG_F_DOWN
|
MSG_HTML
)

	)

85 
	#nŸify_quõt_wôh_ˇu£
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_PUP_ALWAYS
|
MSG_ME
)

	)

88 
	#nŸify_Æl
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_ME_ALL
|
MSG_NBR_EXITS
|
MSG_F_UP
|
MSG_F_CONTENTS
)

	)

89 
	#nŸify_Æl_‰om_öside
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_ME_ALL
|
MSG_NBR_EXITS_A
|
MSG_F_UP
|
MSG_F_CONTENTS
|
MSG_S_INSIDE
)

	)

90 
	#nŸify_Æl_‰om_öside_ßypo£
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_ME_ALL
|
MSG_NBR_EXITS_A
|
MSG_F_UP
|
MSG_F_CONTENTS
|
MSG_S_INSIDE
|
MSG_SAYPOSE
)

	)

91 
	#nŸify_Æl_‰om_öside_html
(
p
,
c
,
m
Ë
	`nŸify_check
’,c,m, 
MSG_ME_ALL
|
MSG_NBR_EXITS_A
|
MSG_F_UP
|
MSG_F_CONTENTS
|
MSG_S_INSIDE
|
MSG_HTML
)

	)

94 
nŸify_ex˚±
(
dbªf
, dbªf, dbªf, c⁄° *, 
key
);

95 
nŸify_ex˚±2
(
dbªf
, dbref, dbref, dbref, const *);

97 
nŸify_check
(
dbªf
, dbref, const *, );

99 
boﬁ
 
Hóªr
(
dbªf
);

100 
ªp‹t
();

102 
boﬁ
 
	g©r_m©ch


104 
dbªf
 
	gthög
,

105 
dbªf
 
	g∂ayî
,

106 
	gty≥
,

107 *
	g°r
,

108 *
	gøw_°r
,

109 
boﬁ
 
	gcheck_∑ª¡s


112 
boﬁ
 
	gli°_check


114 
dbªf
 
	gthög
,

115 
dbªf
 
	g∂ayî
,

116 
	gty≥
,

117 *
	g°r
,

118 *
	gøw_°r
,

119 
boﬁ
 
	gcheck_∑ª¡


121 
boﬁ
 
html_esˇ≥
(c⁄° *
§c
, *
de°
, **
de°p
);

123 
	#DUMP_I_NORMAL
 0

124 
	#DUMP_I_PANIC
 1

125 
	#DUMP_I_RESTART
 2

126 
	#DUMP_I_FLAT
 3

127 
	#DUMP_I_SIGNAL
 4

128 
	#NUM_DUMP_TYPES
 5

	)

129 
dump_d©aba£_öã∫Æ
();

132 
hñpödex_˛ón
();

133 
hñpödex_lﬂd
(
dbªf
);

134 
hñpödex_öô
();

135 
hñp_hñ≥r
(
dbªf
 
execut‹
, 
iHñpfûe
, *
t›ic_¨g
, *
buff
, **
bufc
);

138 
cf_¡ab_ac˚ss
(*, *, *, 
UINT32
, 
dbªf
, *);

141 #ifde‡
WIN32


142 
	#ENDLINE
 "\r\n"

	)

144 
	#ENDLINE
 "\n"

	)

146 
boﬁ
 
°¨t_log
(c⁄° *
¥im¨y
, c⁄° *
£c⁄d¨y
);

147 
íd_log
();

148 
log_≥º‹
(const *, const *,const *,

150 
log_ãxt
(const *);

151 
log_numbî
();

152 
DCL_CDECL
 
log_¥ötf
(c⁄° *
fmt
, ...);

153 
log_«me
(
dbªf
);

154 
log_«me_™d_loc
(
dbªf
);

155 
log_ty≥_™d_«me
(
dbªf
);

158 
look_ö
(
dbªf
,dbref, );

159 
show_vrml_uæ
(
dbªf
, dbref);

160 
size_t
 
decode_©å_Êags
(
aÊags
, *
buff
);

163 
move_obje˘
(
dbªf
, dbref);

164 
move_vü_gíîic
(
dbªf
, dbref, dbref, );

165 
boﬁ
 
move_vü_ãÀp‹t
(
dbªf
, dbref, dbref, );

166 
move_exô
(
dbªf
, dbªf, 
boﬁ
, const *, );

167 
do_íãr_öã∫Æ
(
dbªf
, dbªf, 
boﬁ
);

170 
dbªf
 
°¨t_home
();

171 
dbªf
 
deÁu…_home
();

172 
boﬁ
 
ˇn_£t_home
(
dbªf
, dbref, dbref);

173 
dbªf
 
√w_home
(dbref);

174 
dbªf
 
˛⁄e_home
(dbref, dbref);

175 
dive°_obje˘
(
dbªf
);

176 
dbªf
 
¸óã_obj
(dbref, , const *, );

177 
de°roy_obj
(
dbªf
);

178 
em±y_obj
(
dbªf
);

181 
dbªf
 
¸óã_∂ayî
(*
«me
, *
∑ss
, dbª‡
execut‹
, 
boﬁ
 
i§obŸ
, c⁄° **
pmsg
);

182 
AddToPublicCh™√l
(
dbªf
 
∂ayî
);

183 
boﬁ
 
add_∂ayî_«me
(
dbªf
, const *);

184 
boﬁ
 
dñëe_∂ayî_«me
(
dbªf
, const *);

185 
dbªf
 
lookup_∂ayî
(dbªf, *, 
boﬁ
);

186 
lﬂd_∂ayî_«mes
();

187 
bad«me_add
(*);

188 
bad«me_ªmove
(*);

189 
boﬁ
 
bad«me_check
(*);

190 
bad«me_li°
(
dbªf
, const *);

191 
Ch™gePassw‹d
(
dbªf
 
∂ayî
, c⁄° *
szPassw‹d
);

192 c⁄° *
mux_¸y±
(c⁄° *
szPassw‹d
, c⁄° *
szSÆt
, *
piTy≥
);

195 * 
DCL_CDECL
 
çrötf
(const *, ...);

196 
DCL_CDECL
 
ß„_çrötf_°r
(*, **, const *, ...);

197 
dbªf
 
ö£π_fú°
(dbref, dbref);

198 
dbªf
 
ªmove_fú°
(dbref, dbref);

199 
dbªf
 
ªvî£_li°
(dbref);

200 
boﬁ
 
membî
(
dbªf
, dbref);

201 
boﬁ
 
could_doô
(
dbªf
, dbref, );

202 
boﬁ
 
ˇn_£e
(
dbªf
, dbref, bool);

203 
add_quŸa
(
dbªf
, );

204 
boﬁ
 
ˇ≈ay„es
(
dbªf
, dbref, , );

205 
givëo
(
dbªf
,);

206 
boﬁ
 
∑yf‹
(
dbªf
,);

207 *
MakeC™⁄iˇlObje˘Name
(c⁄° *
pName
, *
≤Name
, 
boﬁ
 *
pbVÆid
);

208 *
MakeC™⁄iˇlExôName
(c⁄° *
pName
, *
≤Name
, 
boﬁ
 *
pbVÆid
);

209 
boﬁ
 
VÆid©ePœyîName
(c⁄° *
pName
);

210 
boﬁ
 
ok_∑ssw‹d
(c⁄° *
szPassw‹d
, c⁄° **
pmsg
);

211 
h™dÀ_órs
(
dbªf
, 
boﬁ
, bool);

212 
dbªf
 
m©ch_pos£s£d
(dbªf, dbªf, *, dbªf, 
boﬁ
);

213 
∑r£_ønge
(**, 
dbªf
 *, dbref *);

214 
boﬁ
 
∑r£_thög_¶ash
(
dbªf
, *, **, dbref *);

215 
boﬁ
 
gë_obj_™d_lock
(
dbªf
, *, dbª‡*, 
ATTR
 **, *, **);

216 
dbªf
 
whîe_is
(dbref);

217 
dbªf
 
whîe_room
(dbref);

218 
boﬁ
 
loˇèbÀ
(
dbªf
, dbref, dbref);

219 
boﬁ
 
√¨by
(
dbªf
, dbref);

220 
boﬁ
 
exô_visibÀ
(
dbªf
, dbref, );

221 
boﬁ
 
exô_di•œyabÀ
(
dbªf
, dbref, );

222 
did_ô
(
dbªf
, dbref, , const *, , const *, , *[], );

223 
boﬁ
 
bC™RódAâr
(
dbªf
 
execut‹
, dbª‡
èrgë
, 
ATTR
 *
èâr
, boﬁ 
bP¨ítCheck
);

224 
boﬁ
 
bC™SëAâr
(
dbªf
 
execut‹
, dbª‡
èrgë
, 
ATTR
 *
èâr
);

225 
boﬁ
 
bC™LockAâr
(
dbªf
 
execut‹
, dbª‡
èrgë
, 
ATTR
 *
èâr
);

228 
boﬁ
 
∑r£_©åib
(
dbªf
, *, dbª‡*, 
ATTR
 **);

229 
boﬁ
 
∑r£_©åib_wûd
(
dbªf
, *, dbref *, bool, bool, bool);

230 
edô_°rög
(*, **, *, *);

231 
dbªf
 
m©ch_c⁄åﬁÀd_h™dÀr
(dbª‡
∂ayî
, c⁄° *
«me
, 
boﬁ
 
bQuõt
);

232 
	#m©ch_c⁄åﬁÀd
(
∂ayî
,
«me
Ë
	`m©ch_c⁄åﬁÀd_h™dÀr
’œyî,Çame, 
Ál£
)

	)

233 
	#m©ch_c⁄åﬁÀd_quõt
(
∂ayî
,
«me
Ë
	`m©ch_c⁄åﬁÀd_h™dÀr
’œyî,Çame, 
åue
)

	)

234 
£t_modifõd
(
dbªf
 
thög
);

237 
boﬁ
 
evÆ_boﬁexp
(
dbªf
, dbªf, dbªf, 
BOOLEXP
 *);

238 
BOOLEXP
 *
∑r£_boﬁexp
(
dbªf
, c⁄° *, 
boﬁ
);

239 
boﬁ
 
evÆ_boﬁexp_©r
(
dbªf
, dbref, dbref, *);

242 
boﬁ
 
xœã
(*);

244 
	#IEEE_MAKE_NAN
 1

	)

245 
	#IEEE_MAKE_IND
 2

	)

246 
	#IEEE_MAKE_PINF
 3

	)

247 
	#IEEE_MAKE_NINF
 4

	)

249 
MakeS≥cülFlﬂt
(
iWhich
);

252 *
u≈¨£_boﬁexp
(
dbªf
, 
BOOLEXP
 *);

253 *
u≈¨£_boﬁexp_quõt
(
dbªf
, 
BOOLEXP
 *);

254 *
u≈¨£_boﬁexp_decompûe
(
dbªf
, 
BOOLEXP
 *);

255 *
u≈¨£_boﬁexp_fun˘i⁄
(
dbªf
, 
BOOLEXP
 *);

258 
chown_Æl
(
dbªf
 
‰om_∂ayî
, dbª‡
to_∂ayî
, dbª‡
a˘ög_∂ayî
, 
key
);

259 
ﬁi°_push
();

260 
ﬁi°_p›
();

261 
ﬁi°_add
(
dbªf
);

262 
dbªf
 
ﬁi°_fú°
();

263 
dbªf
 
ﬁi°_√xt
();

266 
boﬁ
 
wûd
(*, *, *[], );

267 
boﬁ
 
wûd_m©ch
(*, const *);

268 
boﬁ
 
quick_wûd
(const *, const *);

271 
boﬁ
 
check_ac˚ss
(
dbªf
 
∂ayî
, 
mask
);

272 
£t_¥efix_cmds
();

273 *
¥o˚ss_comm™d
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, 
boﬁ
,

276 
	#PrŸe˘
(
f
Ë(
cmdp
->
≥rms
 & f)

	)

278 
	#InvÆid_Objty≥
(
x
) \

279 ((
	`PrŸe˘
(
CA_LOCATION
Ë&& !
	`Has_loˇti⁄
(
x
)) || \

280 (
	`PrŸe˘
(
CA_CONTENTS
Ë&& !
	`Has_c⁄ã¡s
(
x
)) || \

281 (
	`PrŸe˘
(
CA_PLAYER
Ë&& !
	`isPœyî
(
x
)))

	)

284 
boﬁ
 
Commî
(
dbªf
);

285 
s_Pass
(
dbªf
, const *);

286 
s_Name
(
dbªf
, const *);

287 
s_M⁄ikî
(
dbªf
 
thög
, c⁄° *
s
);

288 c⁄° *
Name
(
dbªf
 
thög
);

289 c⁄° *
PuªName
(
dbªf
 
thög
);

290 c⁄° *
M⁄ikî
(
dbªf
 
thög
);

291 
fwdli°_lﬂd
(
FWDLIST
 *, 
dbªf
, *);

292 
fwdli°_£t
(
dbªf
, 
FWDLIST
 *);

293 
fwdli°_˛r
(
dbªf
);

294 
fwdli°_ªwrôe
(
FWDLIST
 *, *);

295 
FWDLIST
 *
fwdli°_gë
(
dbªf
);

296 
©r_push
();

297 
©r_p›
();

298 
©r_hód
(
dbªf
, **);

299 
©r_√xt
(**);

300 
öô_dbfûe
(*
game_dú_fûe
, *
game_∑g_fûe
, 
nCachePages
);

301 
©r_˝y
(
dbªf
 
de°
, dbª‡
sour˚
);

302 
©r_chown
(
dbªf
);

303 
©r_˛r
(
dbªf
, );

304 
©r_add_øw_LEN
(
dbªf
, , const *, );

305 
©r_add_øw
(
dbªf
, , const *);

306 
©r_add
(
dbªf
, , *, dbref, );

307 
©r_£t_Êags
(
dbªf
, , );

308 c⁄° *
©r_gë_øw_LEN
(
dbªf
, , 
size_t
 *);

309 c⁄° *
©r_gë_øw
(
dbªf
, );

310 *
©r_gë_LEN
(
dbªf
, , dbª‡*, *, 
size_t
 *);

311 *
©r_gë_ªÆ
(
dbªf
, , dbref *, *, const *, const );

312 
	#©r_gë
(
t
,
a
,
o
,
f
Ë
	`©r_gë_ªÆ
—,a,o,f, 
__FILE__
, 
__LINE__
)

	)

313 *
©r_pgë_LEN
(
dbªf
, , dbª‡*, *, 
size_t
 *);

314 *
©r_pgë_ªÆ
(
dbªf
, , dbref *, *, const *, const );

315 
	#©r_pgë
(
t
,
a
,
o
,
f
Ë
	`©r_pgë_ªÆ
—,a,o,f, 
__FILE__
, 
__LINE__
)

	)

316 *
©r_gë_°r_LEN
(*
s
, 
dbªf
, , dbª‡*, *, 
size_t
 *);

317 *
©r_gë_°r
(*, 
dbªf
, , dbref *, *);

318 *
©r_pgë_°r_LEN
(*, 
dbªf
, , dbª‡*, *, 
size_t
 *);

319 *
©r_pgë_°r
(*, 
dbªf
, , dbref *, *);

320 
boﬁ
 
©r_gë_öfo
(
dbªf
, , dbref *, *);

321 
boﬁ
 
©r_pgë_öfo
(
dbªf
, , dbref *, *);

322 
©r_‰ì
(
dbªf
);

323 
boﬁ
 
check_z⁄e_h™dÀr
(
dbªf
 
∂ayî
, dbª‡
thög
, boﬁ 
bPœyîCheck
);

324 
	#check_z⁄e
(
∂ayî
, 
thög
Ë
	`check_z⁄e_h™dÀr
’œyî,Åhög, 
Ál£
)

	)

325 
Rñó£AŒResour˚s
(
dbªf
 
obj
);

326 
boﬁ
 
fwdli°_ck
(
dbªf
 
∂ayî
, dbª‡
thög
, 
™um
, *
©ext
);

330 
	#ATTRIB_ACCESS
 1

	)

331 
	#ATTRIB_RENAME
 2

	)

332 
	#ATTRIB_DELETE
 4

	)

333 
	#ATTRIB_INFO
 8

	)

334 
	#BOOT_QUIET
 1

	)

335 
	#BOOT_PORT
 2

	)

336 
	#CEMIT_NOHEADER
 1

	)

337 
	#CHOWN_ONE
 1

	)

338 
	#CHOWN_ALL
 2

	)

340 
	#CHOWN_NOZONE
 8

	)

341 
	#CLIST_FULL
 1

	)

342 
	#CLIST_HEADERS
 2

	)

343 
	#CLONE_LOCATION
 0

	)

344 
	#CLONE_INHERIT
 1

	)

345 
	#CLONE_PRESERVE
 2

	)

346 
	#CLONE_INVENTORY
 4

	)

347 
	#CLONE_SET_COST
 8

	)

348 
	#CLONE_SET_LOC
 16

	)

349 
	#CLONE_SET_NAME
 32

	)

350 
	#CLONE_FROM_PARENT
 64

	)

351 
	#CBOOT_QUIET
 1

352 
	#COMTITLE_ON
 1

353 
	#COMTITLE_OFF
 2

354 
	#CRE_INVENTORY
 0

	)

355 
	#CRE_LOCATION
 1

	)

356 
	#CRE_SET_LOC
 2

	)

357 
	#CSET_PUBLIC
 0

	)

358 
	#CSET_PRIVATE
 1

	)

359 
	#CSET_LOUD
 2

	)

360 
	#CSET_QUIET
 3

	)

361 
	#CSET_LIST
 4

	)

362 
	#CSET_OBJECT
 5

	)

363 
	#CSET_SPOOF
 6

	)

364 
	#CSET_NOSPOOF
 7

	)

365 
	#CSET_HEADER
 8

	)

366 
	#CSET_LOG
 9

367 
	#DBCK_DEFAULT
 1

	)

368 
	#DBCK_FULL
 2

	)

369 
	#DECOMP_DBREF
 1

	)

371 
	#DEST_ONE
 1

	)

372 
	#DEST_OVERRIDE
 4

	)

373 
	#DEST_INSTANT
 8

	)

374 
	#DIG_TELEPORT
 1

	)

375 
	#DOLIST_SPACE
 0

	)

376 
	#DOLIST_DELIMIT
 1

	)

377 
	#DOLIST_NOTIFY
 2

	)

378 
	#DOING_MESSAGE
 0

	)

379 
	#DOING_HEADER
 1

	)

380 
	#DOING_POLL
 2

	)

381 
	#DOING_UNIQUE
 3

382 
	#DOING_MASK
 15

383 
	#DOING_QUIET
 16

384 
	#DROP_QUIET
 1

	)

385 
	#DUMP_STRUCT
 1

	)

386 
	#DUMP_TEXT
 2

	)

387 
	#DUMP_FLATFILE
 4

	)

388 
	#EXAM_DEFAULT
 0

	)

389 
	#EXAM_BRIEF
 1

	)

390 
	#EXAM_LONG
 2

	)

391 
	#EXAM_DEBUG
 4

	)

392 
	#EXAM_PARENT
 8

	)

395 
	#FIXDB_OWNER
 1

	)

396 
	#FIXDB_LOC
 2

	)

397 
	#FIXDB_CON
 4

	)

398 
	#FIXDB_EXITS
 8

	)

399 
	#FIXDB_NEXT
 16

	)

400 
	#FIXDB_PENNIES
 32

	)

401 
	#FIXDB_ZONE
 64

	)

402 
	#FIXDB_LINK
 128

	)

403 
	#FIXDB_PARENT
 256

	)

404 
	#FIXDB_NAME
 2048

	)

405 
	#FLAG_REMOVE
 1

406 
	#GET_QUIET
 1

	)

407 
	#GIVE_QUIET
 64

	)

408 
	#GLOB_ENABLE
 1

	)

409 
	#GLOB_DISABLE
 2

	)

411 
	#HALT_ALL
 1

	)

413 
	#HOOK_BEFORE
 1

	)

414 
	#HOOK_AFTER
 2

	)

415 
	#HOOK_PERMIT
 4

	)

416 
	#HOOK_IGNORE
 8

	)

417 
	#HOOK_IGSWITCH
 16

	)

418 
	#HOOK_AFAIL
 32

	)

419 
	#HOOK_CLEAR
 64

	)

420 
	#HOOK_LIST
 128

	)

421 
	#ICMD_DISABLE
 0

	)

422 
	#ICMD_IGNORE
 1

	)

423 
	#ICMD_ON
 2

	)

424 
	#ICMD_OFF
 4

	)

425 
	#ICMD_CLEAR
 8

	)

426 
	#ICMD_CHECK
 16

	)

427 
	#ICMD_DROOM
 32

	)

428 
	#ICMD_IROOM
 64

	)

429 
	#ICMD_CROOM
 128

	)

430 
	#ICMD_LROOM
 256

	)

431 
	#ICMD_LALLROOM
 512

	)

432 
	#KILL_KILL
 1

	)

433 
	#KILL_SLAY
 2

	)

434 
	#LOOK_LOOK
 1

	)

435 
	#LOOK_OUTSIDE
 8

	)

436 
	#MAIL_STATS
 1

	)

437 
	#MAIL_DSTATS
 2

	)

438 
	#MAIL_FSTATS
 3

	)

439 
	#MAIL_DEBUG
 4

	)

440 
	#MAIL_NUKE
 5

	)

441 
	#MAIL_FOLDER
 6

	)

442 
	#MAIL_LIST
 7

	)

443 
	#MAIL_READ
 8

	)

444 
	#MAIL_CLEAR
 9

	)

445 
	#MAIL_UNCLEAR
 10

	)

446 
	#MAIL_PURGE
 11

	)

447 
	#MAIL_FILE
 12

	)

448 
	#MAIL_TAG
 13

	)

449 
	#MAIL_UNTAG
 14

	)

450 
	#MAIL_FORWARD
 15

	)

451 
	#MAIL_SEND
 16

	)

452 
	#MAIL_EDIT
 17

	)

453 
	#MAIL_URGENT
 18

	)

454 
	#MAIL_ALIAS
 19

	)

455 
	#MAIL_ALIST
 20

	)

456 
	#MAIL_PROOF
 21

	)

457 
	#MAIL_ABORT
 22

	)

458 
	#MAIL_QUICK
 23

	)

459 
	#MAIL_REVIEW
 24

	)

460 
	#MAIL_RETRACT
 25

	)

461 
	#MAIL_CC
 26

	)

462 
	#MAIL_SAFE
 27

	)

463 
	#MAIL_REPLY
 28

	)

464 
	#MAIL_REPLYALL
 29

	)

465 
	#MAIL_BCC
 30

466 
	#MAIL_QUOTE
 0x100

	)

468 
	#MALIAS_DESC
 1

	)

469 
	#MALIAS_CHOWN
 2

	)

470 
	#MALIAS_ADD
 3

	)

471 
	#MALIAS_REMOVE
 4

	)

472 
	#MALIAS_DELETE
 5

	)

473 
	#MALIAS_RENAME
 6

	)

474 
	#MALIAS_LIST
 8

	)

475 
	#MALIAS_STATUS
 9

	)

476 
	#MARK_SET
 0

	)

477 
	#MARK_CLEAR
 1

	)

478 
	#MOTD_ALL
 0

	)

479 
	#MOTD_WIZ
 1

	)

480 
	#MOTD_DOWN
 2

	)

481 
	#MOTD_FULL
 4

	)

482 
	#MOTD_LIST
 8

	)

483 
	#MOTD_BRIEF
 16

	)

484 
	#MOVE_QUIET
 1

	)

485 
	#NFY_NFY
 0

	)

486 
	#NFY_NFYALL
 1

	)

487 
	#NFY_DRAIN
 2

	)

488 
	#NFY_QUIET
 3

	)

489 
	#OPEN_LOCATION
 0

	)

490 
	#OPEN_INVENTORY
 1

	)

491 
	#PCRE_PLAYER
 1

	)

492 
	#PCRE_ROBOT
 2

	)

493 
	#PEMIT_PEMIT
 1

	)

494 
	#PEMIT_OEMIT
 2

	)

495 
	#PEMIT_WHISPER
 3

	)

496 
	#PEMIT_FSAY
 4

	)

497 
	#PEMIT_FEMIT
 5

	)

498 
	#PEMIT_FPOSE
 6

	)

499 
	#PEMIT_FPOSE_NS
 7

	)

500 
	#PEMIT_CONTENTS
 8

	)

501 
	#PEMIT_HERE
 16

	)

502 
	#PEMIT_ROOM
 32

	)

503 
	#PEMIT_LIST
 64

	)

504 
	#PEMIT_HTML
 128

	)

505 
	#PS_BRIEF
 0

	)

506 
	#PS_LONG
 1

	)

507 
	#PS_SUMM
 2

	)

508 
	#PS_ALL
 4

	)

509 
	#QUERY_SQL
 1

	)

510 
	#QUEUE_KICK
 1

	)

511 
	#QUEUE_WARP
 2

	)

512 
	#QUOTA_SET
 1

	)

513 
	#QUOTA_FIX
 2

	)

514 
	#QUOTA_TOT
 4

	)

515 
	#QUOTA_REM
 8

	)

516 
	#QUOTA_ALL
 16

	)

521 
	#SAY_SAY
 1

	)

522 
	#SAY_NOSPACE
 1

	)

523 
	#SAY_POSE
 2

	)

524 
	#SAY_POSE_NOSPC
 3

	)

525 
	#SAY_PREFIX
 4

	)

526 
	#SAY_EMIT
 5

	)

527 
	#SAY_NOEVAL
 8

528 
	#SHOUT_SHOUT
 1

	)

529 
	#SHOUT_WALLPOSE
 2

	)

530 
	#SHOUT_WALLEMIT
 3

	)

531 
	#SHOUT_WIZSHOUT
 4

	)

532 
	#SHOUT_WIZPOSE
 5

	)

533 
	#SHOUT_WIZEMIT
 6

	)

534 
	#SHOUT_ADMINSHOUT
 7

	)

537 
	#SAY_NOTAG
 32

	)

538 
	#SAY_HERE
 64

	)

539 
	#SAY_ROOM
 128

	)

540 
	#SAY_HTML
 256

	)

541 
	#SET_QUIET
 1

	)

542 
	#SHOUT_DEFAULT
 0

	)

543 
	#SHOUT_WIZARD
 1

	)

544 
	#SHOUT_ADMIN
 2

	)

545 
	#SHUTDN_NORMAL
 0

	)

546 
	#SHUTDN_PANIC
 1

	)

547 
	#SHUTDN_EXIT
 2

	)

548 
	#SHUTDN_COREDUMP
 4

	)

549 
	#SRCH_SEARCH
 1

	)

550 
	#SRCH_MARK
 2

	)

551 
	#SRCH_UNMARK
 3

	)

552 
	#STAT_PLAYER
 0

	)

553 
	#STAT_ALL
 1

	)

554 
	#STAT_ME
 2

	)

555 
	#SWITCH_DEFAULT
 0

	)

556 
	#SWITCH_ANY
 1

	)

557 
	#SWITCH_ONE
 2

	)

558 
	#SWEEP_ME
 1

	)

559 
	#SWEEP_HERE
 2

	)

560 
	#SWEEP_COMMANDS
 4

	)

561 
	#SWEEP_LISTEN
 8

	)

562 
	#SWEEP_PLAYER
 16

	)

563 
	#SWEEP_CONNECT
 32

	)

564 
	#SWEEP_EXITS
 64

	)

565 
	#SWEEP_SCAN
 128

	)

566 
	#SWEEP_VERBOSE
 256

	)

567 
	#TELEPORT_DEFAULT
 1

	)

568 
	#TELEPORT_QUIET
 2

	)

569 
	#TELEPORT_LIST
 4

	)

570 
	#TIMECHK_RESET
 1

	)

571 
	#TIMECHK_SCREEN
 2

	)

572 
	#TIMECHK_LOG
 4

	)

573 
	#TOAD_NO_CHOWN
 1

	)

574 
	#TRIG_QUIET
 1

	)

575 
	#TWARP_QUEUE
 1

	)

576 
	#TWARP_DUMP
 2

	)

577 
	#TWARP_CLEAN
 4

	)

578 
	#TWARP_IDLE
 8

	)

580 
	#TWARP_EVENTS
 32

	)

581 
	#WAIT_UNTIL
 1

582 

	)

585 
	#HUSH_ENTER
 1

	)

586 
	#HUSH_LEAVE
 2

	)

587 
	#HUSH_EXIT
 4

	)

591 
	#EV_FIGNORE
 0x00000000

	)

592 
	#EV_FMAND
 0x00000100

	)

593 
	#EV_FCHECK
 0x00000200

	)

594 
	#EV_STRIP_CURLY
 0x00000400

	)

595 
	#EV_EVAL
 0x00000800

	)

596 
	#EV_STRIP_TS
 0x00001000

	)

597 
	#EV_STRIP_LS
 0x00002000

	)

598 
	#EV_STRIP_ESC
 0x00004000

	)

599 
	#EV_STRIP_AROUND
 0x00008000

	)

600 
	#EV_TOP
 0x00010000

	)

601 
	#EV_NOTRACE
 0x00020000

	)

602 
	#EV_NO_COMPRESS
 0x00040000

	)

603 
	#EV_NO_LOCATION
 0x00080000

	)

604 
	#EV_NOFCHECK
 0x00100000

	)

608 
	#MSG_PUP_ALWAYS
 0x00000001UL

	)

609 
	#MSG_INV
 0x00000002UL

	)

610 
	#MSG_INV_L
 0x00000004UL

	)

611 
	#MSG_INV_EXITS
 0x00000008UL

	)

612 
	#MSG_NBR
 0x00000010UL

	)

613 
	#MSG_NBR_A
 0x00000020UL

	)

614 
	#MSG_NBR_EXITS
 0x00000040UL

	)

615 
	#MSG_NBR_EXITS_A
 0x00000080UL

	)

616 
	#MSG_LOC
 0x00000100UL

	)

617 
	#MSG_LOC_A
 0x00000200UL

	)

618 
	#MSG_FWDLIST
 0x00000400UL

	)

619 
	#MSG_ME
 0x00000800UL

	)

620 
	#MSG_S_INSIDE
 0x00001000UL

	)

621 
	#MSG_S_OUTSIDE
 0x00002000UL

	)

622 
	#MSG_HTML
 0x00004000UL

	)

623 
	#MSG_OOC
 0x00008000UL

	)

624 
	#MSG_SAYPOSE
 0x00010000UL

	)

626 
	#MSG_ME_ALL
 (
MSG_ME
|
MSG_INV_EXITS
|
MSG_FWDLIST
)

	)

627 
	#MSG_F_CONTENTS
 (
MSG_INV
)

	)

628 
	#MSG_F_UP
 (
MSG_NBR_A
|
MSG_LOC_A
)

	)

629 
	#MSG_F_DOWN
 (
MSG_INV_L
)

	)

633 
	#LK_IDESC
 0x0001

	)

634 
	#LK_OBEYTERSE
 0x0002

	)

635 
	#LK_SHOWATTR
 0x0004

	)

636 
	#LK_SHOWEXIT
 0x0008

	)

637 
	#LK_SHOWVRML
 0x0010

	)

648 
	#VE_LOC_XAM
 0x01

	)

649 
	#VE_LOC_DARK
 0x02

	)

650 
	#VE_LOC_LIGHT
 0x04

	)

652 
	#VE_BASE_DARK
 0x10

	)

657 
	#SA_EXIT
 1

	)

658 
	#SA_DFLT
 2

	)

660 
	#STARTLOG
(
key
,
p
,
s
) \

661 i‡((((
key
Ë& 
mudc⁄f
.
log_›ti⁄s
Ë!0Ë&& 
	`°¨t_log
(
p
, 
s
)Ë{

	)

662 
	#ENDLOG
 \

663 
	`íd_log
(); }

	)

664 
	#LOG_SIMPLE
(
key
,
p
,
s
,
m
) \

665 
	`STARTLOG
(
key
,
p
,
s
) \

666 
	`log_ãxt
(
m
); \

667 
ENDLOG


	)

669 c⁄° *
NOMATCH_MESSAGE
;

670 c⁄° *
AMBIGUOUS_MESSAGE
;

671 c⁄° *
NOPERM_MESSAGE
;

672 c⁄° *
FUNC_FAIL_MESSAGE
;

673 c⁄° *
FUNC_NOMATCH_MESSAGE
;

674 c⁄° *
OUT_OF_RANGE
;

675 c⁄° *
FUNC_NOT_FOUND
;

676 c⁄° *
FUNC_AMBIGUOUS
;

677 c⁄° *
FUNC_NOPERM_MESSAGE
;

679 
	#ß„_nŸhög
(
b
,
p
Ë
	`ß„_c›y_buf
(
FUNC_FAIL_MESSAGE
,3,(b),’))

	)

680 
	#ß„_n›îm
(
b
,
p
Ë
	`ß„_c›y_buf
(
FUNC_NOPERM_MESSAGE
,21,(b),’))

	)

681 
	#ß„_nom©ch
(
b
,
p
Ë
	`ß„_c›y_buf
(
FUNC_NOMATCH_MESSAGE
,12,(b),’))

	)

682 
	#ß„_ønge
(
b
,
p
Ë
	`ß„_c›y_buf
(
OUT_OF_RANGE
,16,(b),’))

	)

683 
	#ß„_ambiguous
(
b
,
p
Ë
	`ß„_c›y_buf
(
FUNC_AMBIGUOUS
,13,(b),’))

	)

684 
	#ß„_nŸfound
(
b
,
p
Ë
	`ß„_c›y_buf
(
FUNC_NOT_FOUND
,13,(b),’))

	)

686 
Rïœ˚Fûe
(*
ﬁd_«me
, *
√w_«me
);

687 
RemoveFûe
(*
«me
);

688 
de°roy_∂ayî
(
dbªf
 
agít
, dbª‡
vi˘im
);

689 
do_≥mô_li°


691 
dbªf
 
∂ayî
,

692 
key
,

693 
boﬁ
 
bDoC⁄ã¡s
,

694 
≥mô_Êags
,

695 *
li°
,

696 
chPo£Ty≥
,

697 *
mesßge


699 
do_≥mô_sögÀ


701 
dbªf
 
∂ayî
,

702 
key
,

703 
boﬁ
 
bDoC⁄ã¡s
,

704 
≥mô_Êags
,

705 *
ªcùõ¡
,

706 
chPo£Ty≥
,

707 *
mesßge


709 
do_ßy
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, 
key
,

710 *
mesßge
);

712 
boŸ_off
(
dbªf
 
∂ayî
, c⁄° *
mesßge
);

713 
do_maû_˛ór
(
dbªf
 
∂ayî
, *
msgli°
);

714 
do_maû_purge
(
dbªf
 
∂ayî
);

715 
mÆüs_˛ónup
(
dbªf
 
∂ayî
);

716 
cou¡_maû
(
dbªf
 
∂ayî
, 
fﬁdî
, *
rcou¡
, *
ucou¡
, *
ccou¡
);

717 
check_maû_expú©i⁄
();

718 
check_maû
(
dbªf
 
∂ayî
, 
fﬁdî
, 
boﬁ
 
sûít
);

719 c⁄° *
maû_„tch_mesßge
(
dbªf
 
∂ayî
, 
num
);

720 
maû_„tch_‰om
(
dbªf
 
∂ayî
, 
num
);

721 
øw_nŸify_html
(
dbªf
 
∂ayî
, c⁄° *
msg
);

722 
do_lock
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, 
key
,

723 
«rgs
, *
«me
, *
keyãxt
);

724 
check_evíts
();

725 
li°_sy°em_ªsour˚s
(
dbªf
 
∂ayî
);

727 #i‡
deföed
(
WOD_REALMS
Ë|| deföed(
REALITY_LVLS
)

729 
	#ACTION_IS_STATIONARY
 0

	)

730 
	#ACTION_IS_MOVING
 1

	)

731 
	#ACTION_IS_TALKING
 2

	)

732 
	#NUMBER_OF_ACTIONS
 3

733 

	)

734 
	#REALM_DO_NORMALLY_SEEN
 1

	)

735 
	#REALM_DO_HIDDEN_FROM_YOU
 2

	)

736 
	#REALM_DO_SHOW_OBFDESC
 3

	)

737 
	#REALM_DO_SHOW_WRAITHDESC
 4

	)

738 
	#REALM_DO_SHOW_UMBRADESC
 5

	)

739 
	#REALM_DO_SHOW_MATRIXDESC
 6

	)

740 
	#REALM_DO_SHOW_FAEDESC
 7

	)

741 
	#REALM_DO_MASK
 7

	)

742 
	#REALM_DISABLE_ADESC
 0x00000008L

	)

743 
DoThögToThögVisibûôy
(
dbªf
 
lookî
, dbª‡
lookì
, 
a˘i⁄_°©e
);

748 
	mp‹t
;

749 
SOCKET
 
	msockë
;

750 } 
	tP‹tInfo
;

752 
	#MAX_LISTEN_PORTS
 10

	)

753 
P‹tInfo
 
aMaöGameP‹ts
[
MAX_LISTEN_PORTS
];

754 
nMaöGameP‹ts
;

756 #ifde‡
WIN32


757 
DWORD
 
∂©f‹m
;

759 
maxd
;

762 
ndes¸ùt‹s
;

764 
DebugTŸÆFûes
;

765 
DebugTŸÆSockës
;

767 #ifde‡
WIN32


768 
game_pid
;

769 
DebugTŸÆThªads
;

770 
DebugTŸÆSem≠h‹es
;

771 
HANDLE
 
hGamePro˚ss
;

772 
BOOL
 
	t__°dˇŒ
 
	tFCANCELIO
(
	tHANDLE
 
	thFûe
);

773 
BOOL
 
	t__°dˇŒ
 
	tFGETPROCESSTIMES
(
	tHANDLE
 
	thPro˚ss
,

774 
	tLPFILETIME
 
	tp·Cª©e
, LPFILETIME 
	tp·Exô
, LPFILETIME 
	tp·Kî√l
,

775 
	tLPFILETIME
 
	tp·U£r
);

776 
FCANCELIO
 *
ÂC™˚lIo
;

777 
FGETPROCESSTIMES
 *
ÂGëPro˚ssTimes
;

779 
pid_t
 
game_pid
;

782 
öô_timî
();

794 
	tFTASK
(*, );

798 
CLöórTimeAbsﬁuã
 
	m…aWhí
;

800 
	miPri‹ôy
;

801 
	mm_Tickë
;

802 
FTASK
 *
	mÂTask
;

803 *
	m¨g_void±r
;

804 
	m¨g_I¡egî
;

805 
	mm_iVisôedM¨k
;

806 } 
	tTASK_RECORD
, *
	tPTASK_RECORD
;

808 
	#PRIORITY_SYSTEM
 100

	)

809 
	#PRIORITY_PLAYER
 200

	)

810 
	#PRIORITY_OBJECT
 300

	)

811 
	#PRIORITY_SUSPEND
 400

	)

815 
	#PRIORITY_CF_DEQUEUE_ENABLED
 
PRIORITY_OBJECT


	)

816 
	#PRIORITY_CF_DEQUEUE_DISABLED
 (
PRIORITY_PLAYER
-1)

	)

818 
	tSCHCMP
(
	tPTASK_RECORD
, PTASK_RECORD);

819 
	tSCHLOOK
(
	tPTASK_RECORD
);

821 ˛as†
	cCTaskHóp


823 
	m¥iv©e
:

824 
m_nAŒoˇãd
;

825 
	mm_nCuºít
;

826 
PTASK_RECORD
 *
	mm_pHóp
;

828 
	mm_iVisôedM¨k
;

830 
boﬁ
 
Grow
();

831 
Si·Down
(, 
SCHCMP
 *);

832 
Si·Up
(, 
SCHCMP
 *);

833 
PTASK_RECORD
 
Remove
(, 
SCHCMP
 *);

834 
Upd©e
(
iNode
, 
SCHCMP
 *
pfCom∑ª
);

835 
S‹t
(
SCHCMP
 *
pfCom∑ª
);

836 
Remake
(
SCHCMP
 *
pfCom∑ª
);

838 
	mpublic
:

839 
CTaskHóp
();

840 ~
CTaskHóp
();

842 
In£π
(
PTASK_RECORD
, 
SCHCMP
 *);

843 
PTASK_RECORD
 
PìkAtT›mo°
();

844 
PTASK_RECORD
 
RemoveT›mo°
(
SCHCMP
 *);

845 
C™˚lTask
(
FTASK
 *
ÂTask
, *
¨g_void±r
, 
¨g_I¡egî
);

847 
	#IU_DONE
 0

	)

848 
	#IU_NEXT_TASK
 1

	)

849 
	#IU_REMOVE_TASK
 2

	)

850 
	#IU_UPDATE_TASK
 3

	)

851 
Tøvî£Un‹dîed
(
SCHLOOK
 *
pfLook
, 
SCHCMP
 *
pfCom∑ª
);

852 
Tøvî£Ordîed
(
SCHLOOK
 *
pfLook
, 
SCHCMP
 *
pfCom∑ª
);

855 ˛as†
	cCScheduÀr


857 
	m¥iv©e
:

858 
CTaskHóp
 
m_WhíHóp
;

859 
CTaskHóp
 
	mm_Pri‹ôyHóp
;

860 
	mm_Tickë
;

861 
	mm_möPri‹ôy
;

863 
	mpublic
:

864 
Tøvî£Un‹dîed
(
SCHLOOK
 *
pfLook
);

865 
Tøvî£Ordîed
(
SCHLOOK
 *
pfLook
);

866 
	$CScheduÀr
(Ë{ 
m_Tickë
 = 0; 
m_möPri‹ôy
 = 
PRIORITY_CF_DEQUEUE_ENABLED
; }

867 
	`De„rTask
(c⁄° 
CLöórTimeAbsﬁuã
& 
…Whí
, 
iPri‹ôy
, 
FTASK
 *
ÂTask
, *
¨g_void±r
, 
¨g_I¡egî
);

868 
	`De„rImmedüãTask
(
iPri‹ôy
, 
FTASK
 *
ÂTask
, *
¨g_void±r
, 
¨g_I¡egî
);

869 
boﬁ
 
	`WhíNext
(
CLöórTimeAbsﬁuã
 *);

870 
	`RunTasks
(
iCou¡
);

871 
	`RunAŒTasks
();

872 
	`RunTasks
(c⁄° 
CLöórTimeAbsﬁuã
& 
tNow
);

873 
	`RódyTasks
(c⁄° 
CLöórTimeAbsﬁuã
& 
tNow
);

874 
	`C™˚lTask
(
FTASK
 *
ÂTask
, *
¨g_void±r
, 
¨g_I¡egî
);

876 
	`SëMöPri‹ôy
(
¨g_möPri‹ôy
);

877 
	$GëMöPri‹ôy
(Ë{  
m_möPri‹ôy
; 
	}
}

880 
CScheduÀr
 
scheduÀr
;

882 
„tch_cmds
(
dbªf
 
èrgë
);

883 
„tch_C⁄√˘i⁄InfoFõlds
(
dbªf
 
èrgë
, 
™Fõlds
[4]);

884 
„tch_C⁄√˘i⁄InfoFõld
(
dbªf
 
èrgë
, 
iFõld
);

885 
	gput_C⁄√˘i⁄InfoFõlds


887 
dbªf
 
	gèrgë
,

888 
	g™Fõlds
[4],

889 
	gCLöórTimeAbsﬁuã
 &
	g…aLogout


902 
	#CIF_TOTALTIME
 0

	)

903 
	#CIF_LONGESTCONNECT
 1

	)

904 
	#CIF_LASTCONNECT
 2

	)

905 
	#CIF_NUMCONNECTS
 3

	)

906 
	#„tch_tŸÆtime
(
t
Ë(
	`„tch_C⁄√˘i⁄InfoFõld
(—), 
CIF_TOTALTIME
))

	)

907 
	#„tch_l⁄ge°c⁄√˘
(
t
Ë(
	`„tch_C⁄√˘i⁄InfoFõld
(—), 
CIF_LONGESTCONNECT
))

	)

908 
	#„tch_œ°c⁄√˘
(
t
Ë(
	`„tch_C⁄√˘i⁄InfoFõld
(—), 
CIF_LASTCONNECT
))

	)

909 
	#„tch_numc⁄√˘i⁄s
(
t
Ë(
	`„tch_C⁄√˘i⁄InfoFõld
(—), 
CIF_NUMCONNECTS
))

	)

910 
CLöórTimeAbsﬁuã
 
„tch_logouâime
(
dbªf
 
èrgë
);

914 
FLOAT_Inôülize
();

915 
mux_FPInô
();

916 
mux_FPSë
();

917 
mux_FPRe°‹e
();

918 
uÕ
();

919 
mux_°πod
(c⁄° *
s00
, **
£
);

920 *
mux_dtﬂ
(
d
, 
mode
, 
ndigôs
, *
de˝t
, *
sign
,

921 **
rve
);

	@file_c.h

6 
	~"c›yright.h
"

7 #i‚de‡
__FILE_C


8 
	#__FILE_C


	)

10 
	~"öãrÁ˚.h
"

14 
	#FC_CONN
 0

	)

15 
	#FC_CONN_SITE
 1

	)

16 
	#FC_CONN_DOWN
 2

	)

17 
	#FC_CONN_FULL
 3

	)

18 
	#FC_CONN_GUEST
 4

	)

19 
	#FC_CONN_REG
 5

	)

20 
	#FC_CREA_NEW
 6

	)

21 
	#FC_CREA_REG
 7

	)

22 
	#FC_MOTD
 8

	)

23 
	#FC_WIZMOTD
 9

	)

24 
	#FC_QUIT
 10

	)

25 
	#FC_LAST
 10

	)

29 
fˇche_øwdump
(
SOCKET
 
fd
, 
num
);

30 
fˇche_dump
(
DESC
 *
d
, 
num
);

31 
fˇche_£nd
(
dbªf
, );

32 
fˇche_lﬂd
(
dbªf
);

33 
fˇche_öô
();

	@flags.h

6 
	~"c›yright.h
"

8 #i‚de‡
__FLAGS_H


9 
	#__FLAGS_H


	)

11 
	#FLAG_WORD1
 0x0

12 
	#FLAG_WORD2
 0x1

13 
	#FLAG_WORD3
 0x2

14 

	)

16 
	#TYPE_ROOM
 0x0

	)

17 
	#TYPE_THING
 0x1

	)

18 
	#TYPE_EXIT
 0x2

	)

19 
	#TYPE_PLAYER
 0x3

	)

21 
	#TYPE_GARBAGE
 0x5

	)

22 
	#NOTYPE
 0x7

	)

23 
	#TYPE_MASK
 0x7

	)

26 
	#SEETHRU
 0x00000008

	)

27 
	#WIZARD
 0x00000010

	)

28 
	#LINK_OK
 0x00000020

	)

29 
	#DARK
 0x00000040

	)

30 
	#JUMP_OK
 0x00000080

	)

31 
	#STICKY
 0x00000100

	)

32 
	#DESTROY_OK
 0x00000200

	)

33 
	#HAVEN
 0x00000400

	)

34 
	#QUIET
 0x00000800

	)

35 
	#HALT
 0x00001000

	)

36 
	#TRACE
 0x00002000

	)

37 
	#GOING
 0x00004000

	)

38 
	#MONITOR
 0x00008000

	)

39 
	#MYOPIC
 0x00010000

	)

40 
	#PUPPET
 0x00020000

	)

41 
	#CHOWN_OK
 0x00040000

	)

42 
	#ENTER_OK
 0x00080000

	)

43 
	#VISUAL
 0x00100000

	)

44 
	#IMMORTAL
 0x00200000

	)

45 
	#HAS_STARTUP
 0x00400000

	)

46 
	#TM_OPAQUE
 0x00800000

	)

47 
	#VERBOSE
 0x01000000

	)

48 
	#INHERIT
 0x02000000

	)

49 
	#NOSPOOF
 0x04000000

	)

50 
	#ROBOT
 0x08000000

	)

51 
	#SAFE
 0x10000000

	)

52 
	#ROYALTY
 0x20000000

	)

53 
	#HEARTHRU
 0x40000000

	)

54 
	#TERSE
 0x80000000

	)

57 
	#KEY
 0x00000001

	)

58 
	#ABODE
 0x00000002

	)

59 
	#FLOATING
 0x00000004

	)

60 
	#UNFINDABLE
 0x00000008

	)

61 
	#PARENT_OK
 0x00000010

	)

62 
	#LIGHT
 0x00000020

	)

63 
	#HAS_LISTEN
 0x00000040

	)

64 
	#HAS_FWDLIST
 0x00000080

	)

65 
	#AUDITORIUM
 0x00000100

	)

66 
	#ANSI
 0x00000200

	)

67 
	#HEAD_FLAG
 0x00000400

	)

68 
	#FIXED
 0x00000800

	)

69 
	#UNINSPECTED
 0x00001000

	)

70 
	#NO_COMMAND
 0x00002000

	)

71 
	#CKEEPALIVE
 0x00004000

	)

72 
	#NOBLEED
 0x00008000

	)

73 
	#STAFF
 0x00010000

	)

74 
	#HAS_DAILY
 0x00020000

	)

75 
	#GAGGED
 0x00040000

	)

76 
	#OPEN_OK
 0x00080000

77 
	#VACATION
 0x01000000

	)

78 
	#PLAYER_MAILS
 0x02000000

	)

79 
	#HTML
 0x04000000

	)

80 
	#BLIND
 0x08000000

81 
	#SUSPECT
 0x10000000

	)

82 
	#NOACCENTS
 0x20000000

83 
	#CONNECTED
 0x40000000

	)

84 
	#SLAVE
 0x80000000

	)

88 #i‡
deföed
(
WOD_REALMS
Ë|| deföed(
REALITY_LVLS
)

89 
	#OBF
 0x00000001

90 
	#HSS
 0x00000002

91 
	#UMBRA
 0x00000004

92 
	#SHROUD
 0x00000008

93 
	#MATRIX
 0x00000010

94 
	#MEDIUM
 0x00000020

	)

95 
	#DEAD
 0x00000040

	)

96 
	#FAE
 0x00000080

97 
	#CHIMERA
 0x00000100

98 
	#PEERING
 0x00000200

101 

	)

102 
	#SITEMON
 0x00000400

103 
	#CMDCHECK
 0x00000800

104 
	#MARK_0
 0x00400000

105 
	#MARK_1
 0x00800000

	)

106 
	#MARK_2
 0x01000000

	)

107 
	#MARK_3
 0x02000000

	)

108 
	#MARK_4
 0x04000000

	)

109 
	#MARK_5
 0x08000000

	)

110 
	#MARK_6
 0x10000000

	)

111 
	#MARK_7
 0x20000000

	)

112 
	#MARK_8
 0x40000000

	)

113 
	#MARK_9
 0x80000000

	)

118 
	sÊag_bô_íåy


120 
	mÊagvÆue
;

121 
	mÊagÀâ
;

122 
	mÊagÊag
;

123 
	mli°≥rm
;

124 
boﬁ
 (*
h™dÀr
)(
dbªf
 
	mèrgë
, dbª‡
	m∂ayî
, 
FLAG
 
	mÊag
, 
	mfÊags
,

125 
boﬁ
 
	mª£t
);

126 } 
	tFLAGBITENT
;

128 
	sÊag_«me_íåy


130 *
	mpOrigName
;

131 
boﬁ
 
	mbPosôive
;

132 
FLAGBITENT
 *
	mfbe
;

133 *
	mÊag«me
;

134 } 
	tFLAGNAMEENT
;

140 
	sobje˘_íåy
 {

141 c⁄° *
	m«me
;

142 
	mÀâ
;

143 
	m≥rm
;

144 
	mÊags
;

145 } 
	tOBJENT
;

146 
OBJENT
 
obje˘_ty≥s
[8];

148 
	#OF_CONTENTS
 0x0001

	)

149 
	#OF_LOCATION
 0x0002

	)

150 
	#OF_EXITS
 0x0004

	)

151 
	#OF_HOME
 0x0008

	)

152 
	#OF_DROPTO
 0x0010

	)

153 
	#OF_OWNER
 0x0020

	)

154 
	#OF_SIBLINGS
 0x0040

	)

156 
	sÊag£t


158 
FLAG
 
	mw‹d
[3];

159 } 
	tFLAGSET
;

161 
öô_Êagèb
();

162 
di•œy_Êagèb
(
dbªf
);

163 
Êag_£t
(
dbªf
, dbref, *, );

164 *
Êag_des¸ùti⁄
(
dbªf
, dbref);

165 *
decode_Êags
(
dbªf
, 
FLAGSET
 *);

166 
boﬁ
 
has_Êag
(
dbªf
, dbref, *);

167 *
u≈¨£_obje˘
(
dbªf
, dbªf, 
boﬁ
);

168 *
u≈¨£_obje˘_num⁄ly
(
dbªf
);

169 
boﬁ
 
c⁄vît_Êags
(
dbªf
, *, 
FLAGSET
 *, 
FLAG
 *);

170 
decompûe_Êags
(
dbªf
, dbref, *);

171 *
MakeC™⁄iˇlFœgName


173 c⁄° *
pName
,

174 *
≤Name
,

175 
boﬁ
 *
pbVÆid


178 
	#GOD
 ((
dbªf
Ë1)

	)

226 
	#Ty≥of
(
x
Ë(
	`Fœgs
(xË& 
TYPE_MASK
)

	)

227 
	#God
(
x
Ë((xË=
GOD
)

	)

228 
	#RobŸ
(
x
Ë(
	`isPœyî
(xË&& ((
	`Fœgs
(xË& 
ROBOT
Ë!0))

	)

229 
	#OwnsOthîs
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_OWNER
Ë!0)

	)

230 
	#Has_loˇti⁄
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_LOCATION
Ë!0)

	)

231 
	#Has_c⁄ã¡s
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_CONTENTS
Ë!0)

	)

232 
	#Has_exôs
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_EXITS
Ë!0)

	)

233 
	#Has_siblögs
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_SIBLINGS
Ë!0)

	)

234 
	#Has_home
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_HOME
Ë!0)

	)

235 
	#Has_dr›to
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_DROPTO
Ë!0)

	)

236 
	#Home_ok
(
x
Ë((
obje˘_ty≥s
[
	`Ty≥of
(x)].
Êags
 & 
OF_HOME
Ë!0)

	)

237 
	#isPœyî
(
x
Ë(
	`Ty≥of
(xË=
TYPE_PLAYER
)

	)

238 
	#isRoom
(
x
Ë(
	`Ty≥of
(xË=
TYPE_ROOM
)

	)

239 
	#isExô
(
x
Ë(
	`Ty≥of
(xË=
TYPE_EXIT
)

	)

240 
	#isThög
(
x
Ë(
	`Ty≥of
(xË=
TYPE_THING
)

	)

241 
	#isG¨bage
(
x
Ë(
	`Ty≥of
(xË=
TYPE_GARBAGE
)

	)

243 
	#Good_dbªf
(
x
Ë(((xË>0Ë&& ((xË< 
mud°©e
.
db_t›
))

	)

244 
	#Good_obj
(
x
Ë(
	`Good_dbªf
(xË&& (
	`Ty≥of
(xË< 
TYPE_GARBAGE
))

	)

245 
	#Good_ow√r
(
x
Ë(
	`Good_obj
(xË&& 
	`OwnsOthîs
(x))

	)

247 
	#Sèff
(
x
Ë(
	`Wiz¨d
(xË|| 
	`RoyÆty
(xË|| ((
	`Fœgs2
(xË& 
STAFF
Ë!0))

	)

248 
	#RoyÆty
(
x
Ë((
	`Fœgs
(xË& 
ROYALTY
) || \

249 ((
	`Fœgs
(
	`Ow√r
(
x
)Ë& 
ROYALTY
Ë&& 
	`Inhîôs
(x)))

	)

250 
	#WizRoy
(
x
Ë(
	`RoyÆty
(xË|| 
	`Wiz¨d
(x))

	)

251 
	#Hód
(
x
Ë((
	`Fœgs2
(xË& 
HEAD_FLAG
Ë!0)

	)

252 
	#Fixed
(
x
Ë((
	`Fœgs2
(xË& 
FIXED
Ë!0)

	)

253 
	#Unö•e˘ed
(
x
Ë((
	`Fœgs2
(xË& 
UNINSPECTED
Ë!0)

	)

254 
	#Ansi
(
x
Ë((
	`Fœgs2
(xË& 
ANSI
Ë!0)

	)

255 
	#NoAc˚¡s
(
x
Ë((
	`Fœgs2
(xË& 
NOACCENTS
Ë!0)

	)

256 
	#No_Comm™d
(
x
Ë((
	`Fœgs2
(xË& 
NO_COMMAND
Ë!0)

	)

257 
	#NoBÀed
(
x
Ë((
	`Fœgs2
(xË& 
NOBLEED
Ë!0)

	)

258 
	#KìpAlive
(
x
Ë((
	`Fœgs2
(xË& 
CKEEPALIVE
Ë!0)

	)

260 
	#Tøn•¨ít
(
x
Ë((
	`Fœgs
(xË& 
SEETHRU
Ë!0)

	)

261 
	#Lök_ok
(
x
Ë(((
	`Fœgs
(xË& 
LINK_OK
Ë!0Ë&& 
	`Has_c⁄ã¡s
(x))

	)

262 
	#O≥n_ok
(
x
Ë(((
	`Fœgs2
(xË& 
OPEN_OK
Ë!0Ë&& 
	`Has_exôs
(x))

	)

263 
	#Wiz¨d
(
x
Ë((
	`Fœgs
(xË& 
WIZARD
) || \

264 ((
	`Fœgs
(
	`Ow√r
(
x
)Ë& 
WIZARD
Ë&& 
	`Inhîôs
(x)))

	)

265 
	#D¨k
(
x
Ë(((
	`Fœgs
(xË& 
DARK
Ë!0Ë&& (
	`Wiz¨d
(x) || \

266 !(
	`isPœyî
(
x
Ë|| (
	`Puµë
(xË&& 
	`Has_c⁄ã¡s
(x)))))

	)

267 
	#Jump_ok
(
x
Ë(((
	`Fœgs
(xË& 
JUMP_OK
Ë!0Ë&& 
	`Has_c⁄ã¡s
(x))

	)

268 
	#Sticky
(
x
Ë((
	`Fœgs
(xË& 
STICKY
Ë!0)

	)

269 
	#De°roy_ok
(
x
Ë((
	`Fœgs
(xË& 
DESTROY_OK
Ë!0)

	)

270 
	#Haví
(
x
Ë((
	`Fœgs
(xË& 
HAVEN
Ë!0)

	)

271 
	#Pœyî_haví
(
x
Ë((
	`Fœgs
(
	`Ow√r
(x)Ë& 
HAVEN
Ë!0)

	)

272 
	#Quõt
(
x
Ë((
	`Fœgs
(xË& 
QUIET
Ë!0)

	)

273 
	#HÆãd
(
x
Ë((
	`Fœgs
(xË& 
HALT
Ë!0)

	)

274 
	#Tø˚
(
x
Ë((
	`Fœgs
(xË& 
TRACE
Ë!0)

	)

275 
	#Goög
(
x
Ë((
	`Fœgs
(xË& 
GOING
Ë!0)

	)

276 
	#M⁄ô‹
(
x
Ë((
	`Fœgs
(xË& 
MONITOR
Ë!0)

	)

277 
	#My›ic
(
x
Ë((
	`Fœgs
(xË& 
MYOPIC
Ë!0)

	)

278 
	#Puµë
(
x
Ë((
	`Fœgs
(xË& 
PUPPET
Ë!0)

	)

279 
	#Chown_ok
(
x
Ë((
	`Fœgs
(xË& 
CHOWN_OK
Ë!0)

	)

280 
	#E¡î_ok
(
x
Ë(((
	`Fœgs
(xË& 
ENTER_OK
) != 0) && \

281 
	`Has_loˇti⁄
(
x
Ë&& 
	`Has_c⁄ã¡s
(x))

	)

282 
	#Imm‹èl
(
x
Ë((
	`Fœgs
(xË& 
IMMORTAL
) || \

283 ((
	`Fœgs
(
	`Ow√r
(
x
)Ë& 
IMMORTAL
Ë&& 
	`Inhîôs
(x)))

	)

284 
	#O∑que
(
x
Ë((
	`Fœgs
(xË& 
TM_OPAQUE
Ë!0)

	)

285 
	#Vîbo£
(
x
Ë((
	`Fœgs
(xË& 
VERBOSE
Ë!0)

	)

286 
	#Inhîôs
(
x
Ë(((
	`Fœgs
(xË& 
INHERIT
) != 0) || \

287 ((
	`Fœgs
(
	`Ow√r
(
x
)Ë& 
INHERIT
) != 0) || \

288 ((
x
Ë=
	`Ow√r
(x)))

	)

289 
	#No•oof
(
x
Ë((
	`Fœgs
(xË& 
NOSPOOF
Ë!0)

	)

290 
	#Sa„
(
x
,
p
Ë(
	`OwnsOthîs
(xË|| (
	`Fœgs
(xË& 
SAFE
) || \

291 (
mudc⁄f
.
ß„_unow√d
 && (
	`Ow√r
(
x
Ë!Ow√r(
p
))))

	)

292 
	#AudibÀ
(
x
Ë((
	`Fœgs
(xË& 
HEARTHRU
Ë!0)

	)

293 
	#Tî£
(
x
Ë((
	`Fœgs
(xË& 
TERSE
Ë!0)

	)

295 
	#Gagged
(
x
Ë((
	`Fœgs2
(xË& 
GAGGED
Ë!0)

	)

296 
	#Vaˇti⁄
(
x
Ë((
	`Fœgs2
(xË& 
VACATION
Ë!0)

	)

297 
	#Key
(
x
Ë((
	`Fœgs2
(xË& 
KEY
Ë!0)

	)

298 
	#Abode
(
x
Ë(((
	`Fœgs2
(xË& 
ABODE
Ë!0Ë&& 
	`Home_ok
(x))

	)

299 
	#Audô‹ium
(
x
Ë((
	`Fœgs2
(xË& 
AUDITORIUM
Ë!0)

	)

300 
	#Flﬂtög
(
x
Ë((
	`Fœgs2
(xË& 
FLOATING
Ë!0)

	)

301 
	#FödabÀ
(
x
Ë((
	`Fœgs2
(xË& 
UNFINDABLE
Ë=0)

	)

302 
	#Hideout
(
x
Ë((
	`Fœgs2
(xË& 
UNFINDABLE
Ë!0)

	)

303 
	#P¨ít_ok
(
x
Ë((
	`Fœgs2
(xË& 
PARENT_OK
Ë!0)

	)

304 
	#Light
(
x
Ë((
	`Fœgs2
(xË& 
LIGHT
Ë!0)

	)

305 
	#Su•e˘
(
x
Ë((
	`Fœgs2
(
	`Ow√r
(x)Ë& 
SUSPECT
Ë!0)

	)

306 
	#C⁄√˘ed
(
x
Ë(((
	`Fœgs2
(xË& 
CONNECTED
) != 0) && \

307 (
	`Ty≥of
(
x
Ë=
TYPE_PLAYER
))

	)

308 
	#Sœve
(
x
Ë((
	`Fœgs2
(
	`Ow√r
(x)Ë& 
SLAVE
Ë!0)

	)

309 
	#Hiddí
(
x
Ë((
	`Fœgs
(xË& 
DARK
Ë!0)

	)

310 
	#Blöd
(
x
Ë((
	`Fœgs2
(xË& 
BLIND
Ë!0)

	)

312 
	#H_Sèπup
(
x
Ë((
	`Fœgs
(xË& 
HAS_STARTUP
Ë!0)

	)

313 
	#H_Fwdli°
(
x
Ë((
	`Fœgs2
(xË& 
HAS_FWDLIST
Ë!0)

	)

314 
	#H_Li°í
(
x
Ë((
	`Fœgs2
(xË& 
HAS_LISTEN
Ë!0)

	)

316 
	#s_HÆãd
(
x
Ë
	`s_Fœgs
((x), 
FLAG_WORD1
, 
	`Fœgs
(xË| 
HALT
)

	)

317 
	#s_Goög
(
x
Ë
	`s_Fœgs
((x), 
FLAG_WORD1
, 
	`Fœgs
(xË| 
GOING
)

	)

318 
	#s_C⁄√˘ed
(
x
Ë
	`s_Fœgs
((x), 
FLAG_WORD2
, 
	`Fœgs2
(xË| 
CONNECTED
)

	)

319 
	#c_C⁄√˘ed
(
x
Ë
	`s_Fœgs
((x), 
FLAG_WORD2
, 
	`Fœgs2
(xË& ~
CONNECTED
)

	)

320 
	#SôeM⁄
(
x
Ë((
	`Fœgs3
(xË& 
SITEMON
Ë!0)

	)

321 
	#CmdCheck
(
x
Ë((
	`Fœgs3
(xË& 
CMDCHECK
Ë!0)

	)

322 #i‡
deföed
(
WOD_REALMS
Ë|| deföed(
REALITY_LVLS
)

323 
	#isObfusˇã
(
x
Ë((
	`Fœgs3
(xË& 
OBF
Ë!0)

	)

324 
	#isHeighã√dSí£s
(
x
Ë((
	`Fœgs3
(xË& 
HSS
Ë!0)

	)

325 
	#isUmbø
(
x
Ë((
	`Fœgs3
(xË& 
UMBRA
Ë!0)

	)

326 
	#isShroud
(
x
Ë((
	`Fœgs3
(xË& 
SHROUD
Ë!0)

	)

327 
	#isM©rix
(
x
Ë((
	`Fœgs3
(xË& 
MATRIX
Ë!0)

	)

328 
	#isMedium
(
x
Ë((
	`Fœgs3
(xË& 
MEDIUM
Ë!0)

	)

329 
	#isDód
(
x
Ë((
	`Fœgs3
(xË& 
DEAD
Ë!0)

	)

330 
	#isF´
(
x
Ë((
	`Fœgs3
(xË& 
FAE
Ë!0)

	)

331 
	#isChimîa
(
x
Ë((
	`Fœgs3
(xË& 
CHIMERA
Ë!0)

	)

332 
	#isPìrög
(
x
Ë((
	`Fœgs3
(xË& 
PEERING
Ë!0)

	)

335 
	#M¨kî0
(
x
Ë((
	`Fœgs3
(xË& 
MARK_0
Ë!0)

	)

336 
	#M¨kî1
(
x
Ë((
	`Fœgs3
(xË& 
MARK_1
Ë!0)

	)

337 
	#M¨kî2
(
x
Ë((
	`Fœgs3
(xË& 
MARK_2
Ë!0)

	)

338 
	#M¨kî3
(
x
Ë((
	`Fœgs3
(xË& 
MARK_3
Ë!0)

	)

339 
	#M¨kî4
(
x
Ë((
	`Fœgs3
(xË& 
MARK_4
Ë!0)

	)

340 
	#M¨kî5
(
x
Ë((
	`Fœgs3
(xË& 
MARK_5
Ë!0)

	)

341 
	#M¨kî6
(
x
Ë((
	`Fœgs3
(xË& 
MARK_6
Ë!0)

	)

342 
	#M¨kî7
(
x
Ë((
	`Fœgs3
(xË& 
MARK_7
Ë!0)

	)

343 
	#M¨kî8
(
x
Ë((
	`Fœgs3
(xË& 
MARK_8
Ë!0)

	)

344 
	#M¨kî9
(
x
Ë((
	`Fœgs3
(xË& 
MARK_9
Ë!0)

	)

347 
	#P¨íèbÀ
(
p
,
x
Ë(
	`C⁄åﬁs
(p,x) || \

348 (
	`P¨ít_ok
(
x
Ë&& 
	`could_doô
(
p
,x,
A_LPARENT
)))

	)

350 
	#ExamöabÀ
(
p
,
x
Ë(((
	`Fœgs
(xË& 
VISUAL
) != 0) || \

351 (
	`Sì_AŒ
(
p
)) || \

352 (
	`Ow√r
(
p
Ë=Ow√r(
x
)) || \

353 (
	`check_z⁄e
(
p
,
x
)))

	)

355 
	#My›icExam
(
p
,
x
Ë(((
	`Fœgs
(xË& 
VISUAL
) != 0) || \

356 (!
	`My›ic
(
p
Ë&& (
	`Sì_AŒ
(p) || \

357 (
	`Ow√r
(
p
Ë=Ow√r(
x
)) || \

358 (
	`check_z⁄e
(
p
,
x
)))))

	)

360 
	#C⁄åﬁs
(
p
,
x
Ë(
	`Good_obj
(x) && \

361 (!(
	`God
(
x
Ë&& !God(
p
))) && \

362 (
	`C⁄åﬁ_AŒ
(
p
) || \

363 ((
	`Ow√r
(
p
Ë=Ow√r(
x
)) && \

364 (
	`Inhîôs
(
p
Ë|| !Inhîôs(
x
))) || \

365 (
	`check_z⁄e
(
p
,
x
))))

	)

367 
	#M¨k
(
x
Ë(
mud°©e
.
m¨kbôs
->
chunk
[(x)>>3] |= \

368 
mudc⁄f
.
m¨kd©a
[(
x
)&7])

	)

369 
	#Unm¨k
(
x
Ë(
mud°©e
.
m¨kbôs
->
chunk
[(x)>>3] &= \

370 ~
mudc⁄f
.
m¨kd©a
[(
x
)&7])

	)

371 
	#M¨ked
(
x
Ë((
mud°©e
.
m¨kbôs
->
chunk
[(x)>>3] & \

372 
mudc⁄f
.
m¨kd©a
[(
x
)&7]Ë? 
åue
 : 
Ál£
)

	)

373 
	#M¨k_Æl
(
i
Ë{(i)=0; (i)<((
mud°©e
.
db_t›
+7)>>3); (i)++) \

374 
mud°©e
.
m¨kbôs
->
chunk
[
i
]=0xFFU;}

	)

375 
	#Unm¨k_Æl
(
i
Ë{(i)=0; (i)<((
mud°©e
.
db_t›
+7)>>3); (i)++) \

376 
mud°©e
.
m¨kbôs
->
chunk
[
i
]=0x0;}

	)

377 
	#Lök_exô
(
p
,
x
Ë((
	`Ty≥of
(xË=
TYPE_EXIT
) && \

378 ((
	`Loˇti⁄
(
x
Ë=
NOTHING
Ë|| 
	`C⁄åﬁs
(
p
,x)))

	)

379 
	#LökabÀ
(
p
,
x
Ë(
	`Good_obj
(xË&& 
	`Has_c⁄ã¡s
(x) && \

380 (((
	`Fœgs
(
x
Ë& 
LINK_OK
Ë!0Ë|| 
	`C⁄åﬁs
(
p
,x)))

	)

381 
	#Sì_©å
(
p
,
x
,
a
Ë(!(◊)->
Êags
 & 
AF_IS_LOCK
Ë&& 
	`bC™RódAâr
’,x,a,
Ál£
))

	)

382 
	#Sì_©å_ex∂icô
(
p
,
x
,
a
,
o
,
f
Ë(!(◊)->
Êags
 & (
AF_INTERNAL
|
AF_IS_LOCK
)) && \

383 (((
f
Ë& 
AF_VISUAL
Ë|| (
	`Ow√r
(
p
Ë=(
o
)) && \

384 !((
a
)->
Êags
 & (
AF_DARK
|
AF_MDARK
))))

	)

386 
	#Has_powî
(
p
,
x
Ë(
	`check_ac˚ss
(’),
powîs_«mëab
[x].
Êag
))

	)

387 
	#Html
(
x
Ë((
	`Fœgs2
(xË& 
HTML
Ë!0)

	)

388 
	#s_Html
(
x
Ë
	`s_Fœgs
((x), 
FLAG_WORD2
, 
	`Fœgs2
(xË| 
HTML
)

	)

	@functions.h

6 
	~"c›yright.h
"

8 #i‚de‡
__FUNCTIONS_H


9 
	#__FUNCTIONS_H


	)

11 
	sègFun


13 *
	m«me
;

14 (*
	mfun
)(*
	mbuff
, **
	mbufc
, 
dbªf
 
	mexecut‹
, dbª‡
	mˇŒî
,

15 
dbªf
 
	mía˘‹
, *
	mÁrgs
[], 
	mnÁrgs
, *
	mˇrgs
[],

16 
	mnˇrgs
);

17 
	mmaxArgsP¨£d
;

18 
	mmöArgs
;

19 
	mmaxArgs
;

20 
	mÊags
;

21 
	m≥rms
;

22 } 
	tFUN
;

24 
	sufun
 {

25 *
	m«me
;

26 
dbªf
 
	mobj
;

27 
	m©r
;

28 
	mÊags
;

29 
	m≥rms
;

30 
ufun
 *
	m√xt
;

31 } 
	tUFUN
;

33 
	#FN_NOEVAL
 2

34 
	#FN_PRIV
 4

35 
	#FN_PRES
 8

36 

	)

37 
	#FN_LIST
 1

39 

	)

40 
öô_fun˘ab
();

41 
li°_fun˘abÀ
(
dbªf
);

45 
	#¥öt_£p
(
ps
,
b
,
p
Ë
	`ß„_c›y_buf
(’s)->
°r
,’s)->
n
,(b),’))

	)

47 
	#MAX_SEP_LEN
 50

	)

50 
size_t
 
	mn
;

51 
	m°r
[
MAX_SEP_LEN
+1];

52 } 
	tSEP
;

54 
SEP
 
£pS∑˚
;

58 
	#DELIM_DFLT
 0x0000

59 
	#DELIM_EVAL
 0x0001

60 
	#DELIM_NULL
 0x0002

61 
	#DELIM_CRLF
 0x0004

62 
	#DELIM_STRING
 0x0008

63 
	#DELIM_INIT
 0x0010

64 

	)

65 
boﬁ
 
dñim_check


67 *
buff
, **
bufc
,

68 
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
,

69 *
Árgs
[], 
nÁrgs
,

70 *
ˇrgs
[], 
nˇrgs
,

71 
£p_¨g
, 
SEP
 *
£p
, 
dÊags


74 
li°2¨r
(*
¨r
[], 
maxÀn
, *
li°
, 
SEP
 *
p£p
);

75 *
åim_•a˚_£p
(*
°r
, 
SEP
 *
p£p
);

76 *
åim_•a˚_£p_LEN
(*
°r
, 
nSå
, 
SEP
 *
p£p
, *
nTrim
);

77 *
√xt_tokí
(*
°r
, 
SEP
 *
p£p
);

78 *
•lô_tokí
(**
•
, 
SEP
 *
p£p
);

82 
	#FUNCTION
(
x
) \

83 
	`x
(*
buff
, **
bufc
, 
dbªf
 
execut‹
, dbª‡
ˇŒî
, \

84 
dbªf
 
ía˘‹
, *
Árgs
[], 
nÁrgs
, *
ˇrgs
[], \

85 
nˇrgs
)

	)

89 
	#OPTIONAL_DELIM
(
iSï
, 
Sï
, 
dÊags
) \

90 
	`dñim_check
(
buff
, 
bufc
, 
execut‹
, 
ˇŒî
, 
ía˘‹
, \

91 
Árgs
, 
nÁrgs
, 
ˇrgs
, 
nˇrgs
, (
iSï
), &(
Sï
), (
dÊags
))

	)

93 
	#XFUNCTION
(
x
Ë
	`x
(*
buff
, **
bufc
, 
dbªf
 
execut‹
, \

94 
dbªf
 
ˇŒî
, dbª‡
ía˘‹
, *
Árgs
[], 
nÁrgs
, *
ˇrgs
[], \

95 
nˇrgs
)

	)

99 
fun˘i⁄_add
(
FUN
 *
Â
);

100 
fun˘i⁄s_add
(
FUN
 
fu∆i°
[]);

	@funmath.h

6 
	~"c›yright.h
"

8 #i‚de‡
__FUNMATH_H


9 
	#__FUNMATH_H


	)

11 
XFUNCTION
(
fun_add
);

12 
XFUNCTION
(
fun_œdd
);

13 
XFUNCTION
(
fun_üdd
);

14 
XFUNCTION
(
fun_sub
);

15 
XFUNCTION
(
fun_isub
);

16 
XFUNCTION
(
fun_mul
);

17 
XFUNCTION
(
fun_imul
);

18 
XFUNCTION
(
fun_gt
);

19 
XFUNCTION
(
fun_gã
);

20 
XFUNCTION
(
fun_…
);

21 
XFUNCTION
(
fun_…e
);

22 
XFUNCTION
(
fun_eq
);

23 
XFUNCTION
(
fun_√q
);

24 
XFUNCTION
(
fun_max
);

25 
XFUNCTION
(
fun_mö
);

26 
XFUNCTION
(
fun_sign
);

27 
XFUNCTION
(
fun_isign
);

28 
XFUNCTION
(
fun_shl
);

29 
XFUNCTION
(
fun_shr
);

30 
XFUNCTION
(
fun_öc
);

31 
XFUNCTION
(
fun_dec
);

32 
XFUNCTION
(
fun_åunc
);

33 
XFUNCTION
(
fun_fdiv
);

34 
XFUNCTION
(
fun_idiv
);

35 
XFUNCTION
(
fun_Êo‹div
);

36 
XFUNCTION
(
fun_mod
);

37 
XFUNCTION
(
fun_ªmaödî
);

38 
XFUNCTION
(
fun_abs
);

39 
XFUNCTION
(
fun_übs
);

40 
XFUNCTION
(
fun_di°2d
);

41 
XFUNCTION
(
fun_di°3d
);

42 
XFUNCTION
(
fun_vadd
);

43 
XFUNCTION
(
fun_vsub
);

44 
XFUNCTION
(
fun_vmul
);

45 
XFUNCTION
(
fun_vdŸ
);

46 
XFUNCTION
(
fun_v¸oss
);

47 
XFUNCTION
(
fun_vmag
);

48 
XFUNCTION
(
fun_vunô
);

49 
XFUNCTION
(
fun_Êo‹
);

50 
XFUNCTION
(
fun_˚û
);

51 
XFUNCTION
(
fun_round
);

52 
XFUNCTION
(
fun_pi
);

53 
XFUNCTION
(
fun_e
);

54 
XFUNCTION
(
fun_˘u
);

55 
XFUNCTION
(
fun_sö
);

56 
XFUNCTION
(
fun_cos
);

57 
XFUNCTION
(
fun_èn
);

58 
XFUNCTION
(
fun_asö
);

59 
XFUNCTION
(
fun_acos
);

60 
XFUNCTION
(
fun_©™
);

61 
XFUNCTION
(
fun_exp
);

62 
XFUNCTION
(
fun_powî
);

63 
XFUNCTION
(
fun_ 
);

64 
XFUNCTION
(
fun_log
);

65 
XFUNCTION
(
fun_sqπ
);

66 
XFUNCTION
(
fun_i¢um
);

67 
XFUNCTION
(
fun_i§©
);

68 
XFUNCTION
(
fun_isöt
);

69 
XFUNCTION
(
fun_™d
);

70 
XFUNCTION
(
fun_‹
);

71 
XFUNCTION
(
fun_™dboﬁ
);

72 
XFUNCTION
(
fun_‹boﬁ
);

73 
XFUNCTION
(
fun_ˇnd
);

74 
XFUNCTION
(
fun_c‹
);

75 
XFUNCTION
(
fun_ˇndboﬁ
);

76 
XFUNCTION
(
fun_c‹boﬁ
);

77 
XFUNCTION
(
fun_x‹
);

78 
XFUNCTION
(
fun_nŸ
);

79 
XFUNCTION
(
fun_t
);

80 
XFUNCTION
(
fun_•ñ um
);

81 
XFUNCTION
(
fun_rom™
);

82 
XFUNCTION
(
fun_œnd
);

83 
XFUNCTION
(
fun_l‹
);

84 
XFUNCTION
(
fun_b™d
);

85 
XFUNCTION
(
fun_b‹
);

86 
XFUNCTION
(
fun_b«nd
);

87 
XFUNCTION
(
fun_bx‹
);

88 
XFUNCTION
(
fun_¸c32
);

89 
XFUNCTION
(
fun_sha1
);

	@help.h

6 
	#TOPIC_NAME_LEN
 30

	)

10 
	mpos
;

11 
	mÀn
;

12 
	mt›ic
[
TOPIC_NAME_LEN
 + 1];

13 } 
	thñp_ödx
;

	@htab.h

6 
	~"c›yright.h
"

8 #i‚de‡
__HTAB_H


9 
	#__HTAB_H


	)

11 
	~"db.h
"

12 
	~"svdhash.h
"

14 
«me_èbÀ
 
	tNAMETAB
;

15 
	s«me_èbÀ


17 *
	m«me
;

18 
	mmöÀn
;

19 
	m≥rm
;

20 
	mÊag
;

25 
bque
 
	tBQUE
;

26 
	sbque


28 
CLöórTimeAbsﬁuã
 
	mwaôtime
;

29 
dbªf
 
	mexecut‹
;

30 
dbªf
 
	mˇŒî
;

31 
dbªf
 
	mía˘‹
;

32 
dbªf
 
	m£m
;

33 
	m©å
;

34 
	m«rgs
;

35 *
	mãxt
;

36 *
	mcomm
;

37 *
	mív
[
NUM_ENV_VARS
];

38 *
	ms¸
[
MAX_GLOBAL_REGS
];

39 
boﬁ
 
	mIsTimed
;

42 ˛as†
	cCBôFõld


44 
	mnBôsPî
;

45 
	mnShi·
;

46 
	mnMask
;

47 
	mnMaximum
;

48 
size_t
 
	mnI¡s
;

49 
UINT32
 *
	mpI¡s
;

50 
UINT32
 *
	mpMasks
;

52 
	mpublic
:

53 
CBôFõld
(
max
 = 0);

54 
Resize
(
max
);

55 ~
CBôFõld
();

56 
CÀ¨AŒ
();

57 
Së
(
i
);

58 
CÀ¨
(
i
);

59 
boﬁ
 
IsSë
(
i
);

62 
hashª£t
(
CHashTabÀ
 *);

63 *
hashfödLEN
(c⁄° *
pKey
, 
size_t
 
nKey
, 
CHashTabÀ
 *
hèb
);

64 
hashaddLEN
(c⁄° *
pKey
, 
size_t
 
nKey
, *
pD©a
,

65 
CHashTabÀ
 *
hèb
);

66 
hashdñëeLEN
(c⁄° *
Så
, 
size_t
 
nSå
, 
CHashTabÀ
 *
hèb
);

67 
hashÊush
(
CHashTabÀ
 *);

68 
boﬁ
 
hashª∂LEN
(c⁄° *
Så
, 
size_t
 
nSå
, *
hashd©a
,

69 
CHashTabÀ
 *
hèb
);

70 
hashª∂Æl
(c⁄° *, *, 
CHashTabÀ
 *);

71 *
hash_√xã¡ry
(
CHashTabÀ
 *
hèb
);

72 *
hash_fú°íåy
(
CHashTabÀ
 *
hèb
);

73 *
hash_fú°key
(
CHashTabÀ
 *
hèb
, *, **);

74 *
hash_√xtkey
(
CHashTabÀ
 *
hèb
, *, **);

76 
NAMETAB
 
powîs_«mëab
[];

78 
boﬁ
 
£¨ch_«mëab
(
dbªf
, 
NAMETAB
 *, *, *);

79 
NAMETAB
 *
föd_«mëab_ít
(
dbªf
, NAMETAB *, *);

80 
di•œy_«mëab
(
dbªf
, 
NAMETAB
 *, *, 
boﬁ
);

81 
öãΩ_«mëab
(
dbªf
, 
NAMETAB
 *, , const *, const *, const *);

82 
li°£t_«mëab
(
dbªf
, 
NAMETAB
 *, , *, 
boﬁ
);

	@interface.h

6 
	~"c›yright.h
"

8 #i‚de‡
__INTERFACE__H


9 
	#__INTERFACE__H


	)

11 
	~<sys/ty≥s.h
>

13 #i‚de‡
WIN32


14 
	~<√töë/ö.h
>

15 
	~<¨∑/öë.h
>

16 
	~<√tdb.h
>

17 #ifde‡
HAVE_SYS_SELECT_H


18 
	~<sys/£À˘.h
>

26 
	#R_QUIT
 1

	)

27 
	#R_TIMEOUT
 2

	)

28 
	#R_BOOT
 3

	)

29 
	#R_SOCKDIED
 4

	)

30 
	#R_GOING_DOWN
 5

	)

31 
	#R_BADLOGIN
 6

	)

32 
	#R_GAMEDOWN
 7

	)

33 
	#R_LOGOUT
 8

	)

34 
	#R_GAMEFULL
 9

	)

38 
	#CMD_QUIT
 1

	)

39 
	#CMD_WHO
 2

	)

40 
	#CMD_DOING
 3

	)

41 
	#CMD_PREFIX
 5

	)

42 
	#CMD_SUFFIX
 6

	)

43 
	#CMD_LOGOUT
 7

	)

44 
	#CMD_SESSION
 8

	)

45 
	#CMD_PUEBLOCLIENT
 9

	)

46 
	#CMD_INFO
 10

	)

48 
	#CMD_MASK
 0xff

	)

49 
	#CMD_NOxFIX
 0x100

	)

51 
NAMETAB
 
logout_cmdèbÀ
[];

53 
cmd_block
 
	tCBLK
;

54 
	scmd_block_hdr


56 
cmd_block
 *
	mnxt
;

57 } 
	tCBLKHDR
;

59 
	scmd_block


61 
CBLKHDR
 
	mhdr
;

62 
	mcmd
[
LBUF_SIZE
 - (
CBLKHDR
)];

63 } 
	tCBLK
;

65 
ãxt_block
 
	tTBLOCK
;

66 
	sãxt_block_hdr


68 
ãxt_block
 *
	mnxt
;

69 *
	m°¨t
;

70 *
	míd
;

71 
	mnch¨s
;

72 } 
	tTBLOCKHDR
;

74 
	sãxt_block


76 
TBLOCKHDR
 
	mhdr
;

77 
	md©a
[
OUTPUT_BLOCK_SIZE
 - (
TBLOCKHDR
)];

78 } 
	tTBLOCK
;

80 
¥og_d©a
 
	tPROG
;

81 
	s¥og_d©a
 {

82 
dbªf
 
	mwaô_ía˘‹
;

83 *
	mwaô_ªgs
[
MAX_GLOBAL_REGS
];

86 
	#HUDKEYLEN
 21

	)

88 
des¸ùt‹_d©a
 
	tDESC
;

89 
	sdes¸ùt‹_d©a


91 
CLöórTimeAbsﬁuã
 
	mc⁄√˘ed_©
;

92 
CLöórTimeAbsﬁuã
 
	mœ°_time
;

94 
SOCKET
 
	mdes¸ùt‹
;

95 #ifde‡
WIN32


97 
	#SIZEOF_OVERLAPPED_BUFFERS
 512

	)

98 
	möput_buf„r
[
SIZEOF_OVERLAPPED_BUFFERS
];

99 
	mouçut_buf„r
[
SIZEOF_OVERLAPPED_BUFFERS
];

100 
OVERLAPPED
 
	mInboundOvîœµed
;

101 
OVERLAPPED
 
	mOutboundOvîœµed
;

102 
boﬁ
 
	mbWrôePídög
;

103 
boﬁ
 
	mbC⁄√˘i⁄Dr›≥d
;

104 
boﬁ
 
	mbC⁄√˘i⁄Shutdown
;

105 
boﬁ
 
	mbCÆlPro˚ssOuçutL©î
;

108 
	mÊags
;

109 
	mªåõs_À·
;

110 
	mcomm™d_cou¡
;

111 
	mtimeout
;

112 
	mho°_öfo
;

113 
dbªf
 
	m∂ayî
;

114 *
	mouçut_¥efix
;

115 *
	mouçut_suffix
;

116 
	mouçut_size
;

117 
	mouçut_tŸ
;

118 
	mouçut_lo°
;

119 
TBLOCK
 *
	mouçut_hód
;

120 
TBLOCK
 *
	mouçut_èû
;

121 
	möput_size
;

122 
	möput_tŸ
;

123 
	möput_lo°
;

124 
CBLK
 *
	möput_hód
;

125 
CBLK
 *
	möput_èû
;

126 
CBLK
 *
	møw_öput
;

127 *
	møw_öput_©
;

128 
	mquŸa
;

129 
	mwaô_f‹_öput
;

130 
dbªf
 
	mwaô_ía˘‹
;

131 
PROG
 *
	m¥ogøm_d©a
;

132 
des¸ùt‹_d©a
 *
	mhash√xt
;

133 
des¸ùt‹_d©a
 *
	m√xt
;

134 
des¸ùt‹_d©a
 **
	m¥ev
;

136 
sockaddr_ö
 
	maddªss
;

138 
	maddr
[51];

139 
	mu£∫ame
[11];

140 
	mdoög
[
SIZEOF_DOING_STRING
];

141 
	mhudkey
[
HUDKEYLEN
];

145 
	#DS_CONNECTED
 0x0001

146 
	#DS_AUTODARK
 0x0002

147 
	#DS_PUEBLOCLIENT
 0x0004

148 

	)

149 
DESC
 *
des¸ùt‹_li°
;

153 
emîgícy_shutdown
();

154 
shutdownsock
(
DESC
 *, );

155 
SëupP‹ts
(*
≤P‹ts
, 
P‹tInfo
 
aP‹ts
[], 
I¡Aºay
 *
pü
);

156 #ifde‡
WIN32


157 
shovech¨s9x
(
nP‹ts
, 
P‹tInfo
 
aP‹ts
[]);

158 
shovech¨sNT
(
nP‹ts
, 
P‹tInfo
 
aP‹ts
[]);

159 
¥o˚ss_ouçut9x
(*, );

160 
¥o˚ss_ouçutNT
(*, );

161 
FTASK
 *
¥o˚ss_ouçut
;

163 
shovech¨s
(
nP‹ts
, 
P‹tInfo
 
aP‹ts
[]);

164 
¥o˚ss_ouçut
(*, );

165 
dump_ª°¨t_db
();

168 
BuûdSig«lNamesTabÀ
();

169 
£t_sig«ls
();

173 
make_uli°
(
dbªf
, *, **, 
boﬁ
);

174 
make_p‹t_uli°
(
dbªf
, *, **);

175 
„tch_£ssi⁄
(
dbªf
 
èrgë
);

176 
„tch_idÀ
(
dbªf
 
èrgë
);

177 
„tch_c⁄√˘
(
dbªf
 
èrgë
);

178 c⁄° *
time_f‹m©_1
(
Sec⁄ds
, 
size_t
 
maxWidth
);

179 c⁄° *
time_f‹m©_2
(
Sec⁄ds
);

180 
upd©e_quŸas
(
CLöórTimeAbsﬁuã
& 
tLa°
, c⁄° CLöórTimeAbsﬁuã& 
tCuºít
);

181 
øw_nŸify
(
dbªf
, const *);

182 
øw_nŸify_√wlöe
(
dbªf
);

183 
˛ór°rögs
(
DESC
 *);

184 
queue_wrôe_LEN
(
DESC
 *, const *, );

185 
queue_wrôe
(
DESC
 *, const *);

186 
queue_°rög
(
DESC
 *, const *);

187 
‰ìqs
(
DESC
 *);

188 
wñcome_u£r
(
DESC
 *);

189 
ßve_comm™d
(
DESC
 *, 
CBLK
 *);

190 
™noun˚_disc⁄√˘
(
dbªf
, 
DESC
 *, const *);

191 
boŸ_by_p‹t
(
SOCKET
 
p‹t
, 
boﬁ
 
bGod
, c⁄° *
mesßge
);

192 
föd_ﬁde°
(
dbªf
 
èrgë
, 
DESC
 *
dOlde°
[2]);

193 
check_idÀ
();

194 
Task_Pro˚ssComm™d
(*
¨g_void±r
, 
¨g_iI¡egî
);

195 
sôe_check
(
ö_addr
, 
SITE
 *);

196 
dbªf
 
föd_c⁄√˘ed_«me
(dbref, *);

200 
	#Æloc_desc
(
s
Ë(
DESC
 *)
	`poﬁ_Æloc
(
POOL_DESC
,s, 
__FILE__
, 
__LINE__
)

	)

201 
	#‰ì_desc
(
b
Ë
	`poﬁ_‰ì
(
POOL_DESC
,(*)(b), 
__FILE__
, 
__LINE__
)

	)

204 
ªc‹d_logö
(
dbªf
, 
boﬁ
, *, *, *, *);

205 
dbªf
 
c⁄√˘_∂ayî
(*, *, *, *, *);

207 
	#DESC_ITER_PLAYER
(
p
,
d
) \

208 
d
=(
DESC
 *)
	`hashfödLEN
(&(
p
), ’), &
mud°©e
.
desc_hèb
); d; d = d->
hash√xt
)

	)

209 
	#DESC_ITER_CONN
(
d
) \

210 
d
=
des¸ùt‹_li°
;(d);d=(d)->
√xt
) \

211 i‡((
d
)->
Êags
 & 
DS_CONNECTED
)

	)

212 
	#DESC_ITER_ALL
(
d
) \

213 
d
=
des¸ùt‹_li°
;(d);d=(d)->
√xt
)

	)

215 
	#DESC_SAFEITER_PLAYER
(
p
,
d
,
n
) \

216 
d
=(
DESC
 *)
	`hashfödLEN
(&(
p
), ’), &
mud°©e
.
desc_hèb
), \

217 
n
=((
d
!=
NULL
Ë? d->
hash√xt
 : NULL); \

218 
d
; \

219 
d
=
n
,n=(“!=
NULL
Ë?Ç->
hash√xt
 : NULL))

	)

220 
	#DESC_SAFEITER_ALL
(
d
,
n
) \

221 
d
=
des¸ùt‹_li°
,
n
=((d!=
NULL
Ë? d->
√xt
 : NULL); \

222 
d
; \

223 
d
=
n
,n=(“!=
NULL
Ë?Ç->
√xt
 : NULL))

	)

	@levels.h

3 
	~"c›yright.h
"

5 #i‚de‡
__LEVELS_H


6 
	#__LEVELS_H


	)

8 
	~"hèb.h
"

9 
	~"db.h
"

11 
	#IsRól
(
R
, 
T
Ë((RË=(TË|| (
	`RxLevñ
(RË& 
	`TxLevñ
(T)))

	)

13 
RLEVEL
 
RxLevñ
(
dbªf
);

14 
RLEVEL
 
TxLevñ
(
dbªf
);

15 
nŸify_ex˚±_æevñ
(
dbªf
, dbref, dbref, const *, );

16 
nŸify_ex˚±2_æevñ
(
dbªf
, dbref, dbref, dbref,const *);

17 
nŸify_ex˚±2_æevñ2
(
dbªf
, dbref, dbref, dbref,const *);

18 * 
rxÀvñ_des¸ùti⁄
(
dbªf
, dbref);

19 * 
txÀvñ_des¸ùti⁄
(
dbªf
, dbref);

20 
decompûe_æevñs
(
dbªf
, dbref, *);

21 
RLEVEL
 
föd_æevñ
(*);

22 
did_ô_æevñ
(
dbªf
, dbref, , const *, ,const *, , *[], );

	@mail.h

6 #i‚de‡
_MAIL_H


7 
	#_MAIL_H


	)

9 
	~"c›yright.h
"

12 
	#M_ISREAD
 0x0001

	)

13 
	#M_UNREAD
 0x0FFE

	)

14 
	#M_CLEARED
 0x0002

	)

15 
	#M_URGENT
 0x0004

	)

16 
	#M_MASS
 0x0008

	)

17 
	#M_SAFE
 0x0010

	)

19 
	#M_TAG
 0x0040

	)

20 
	#M_FORWARD
 0x0080

	)

22 
	#M_FMASK
 0xF0FF

	)

23 
	#M_ALL
 0x1000

	)

24 
	#M_MSUNREAD
 0x2000

	)

26 
	#M_REPLY
 0x4000

	)

28 
	#MAX_FOLDERS
 15

	)

29 
	#FOLDER_NAME_LEN
 
MBUF_SIZE


	)

30 
	#FﬁdîBô
(
f
Ë(256 * (f))

	)

32 
	#Urgít
(
m
Ë(m->
ªad
 & 
M_URGENT
)

	)

33 
	#Mass
(
m
Ë(m->
ªad
 & 
M_MASS
)

	)

34 
	#M_Sa„
(
m
Ë(m->
ªad
 & 
M_SAFE
)

	)

36 
	#F‹w¨d
(
m
Ë(m->
ªad
 & 
M_FORWARD
)

	)

37 
	#Tagged
(
m
Ë(m->
ªad
 & 
M_TAG
)

	)

38 
	#Fﬁdî
(
m
Ë((m->
ªad
 & ~
M_FMASK
Ë>> 8)

	)

39 
	#Ród
(
m
Ë(m->
ªad
 & 
M_ISREAD
)

	)

40 
	#CÀ¨ed
(
m
Ë(m->
ªad
 & 
M_CLEARED
)

	)

41 
	#Uƒód
(
m
Ë(!
	`Ród
(m))

	)

42 
	#AŒ
(
ms
Ë(ms.
Êags
 & 
M_ALL
)

	)

43 
	#ExpMaû
(
x
Ë(
	`Wiz¨d
(x))

	)

46 
	#MA_INC
 2

	)

48 
	#DASH_LINE
 \

49 "---------------------------------------------------------------------------"

	)

51 
	tmaû_Êag
;

53 
	smaû


55 
maû
 *
	m√xt
;

56 
maû
 *
	m¥ev
;

57 
dbªf
 
	mto
;

58 
dbªf
 
	m‰om
;

59 
	mnumbî
;

60 *
	mtime
;

61 *
	msubje˘
;

62 *
	mtﬁi°
;

63 
	mªad
;

66 
	smaû_£À˘‹


68 
	mlow
;

69 
	mhigh
;

70 
maû_Êag
 
	mÊags
;

71 
dbªf
 
	m∂ayî
;

72 
	mdays
;

73 
	mday_comp
;

76 
	smu£r


78 
dbªf
 
	mwho
;

79 *
	mfwd
;

80 *
	mvaˇti⁄
;

81 
dbªf
 *
	mafûãr
;

82 
	m°©us
;

85 
maû_body
 
	tMAILBODY
;

86 
	smaû_body


88 *
	mm_pMesßge
;

89 
	mm_nRefs
;

92 ˛as†
	cMaûLi°


94 
	m¥iv©e
:

95 
maû
 *
m_miHód
;

96 
maû
 *
	mm_mi
;

97 
dbªf
 
	mm_∂ayî
;

98 
boﬁ
 
	mm_bRemoved
;

100 
	mpublic
:

101 
MaûLi°
(
dbªf
 
∂ayî
);

102 
maû
 *
Fú°Iãm
();

103 
maû
 *
NextIãm
();

104 
boﬁ
 
IsEnd
();

105 
RemoveIãm
();

106 
RemoveAŒ
();

107 
AµídIãm
(
maû
 *
√wp
);

	@match.h

6 
	~"c›yright.h
"

8 #i‚de‡
M_MATCH_H


9 
	#M_MATCH_H


	)

11 
m©ch_°©e
 
	tMSTATE
;

12 
	sm©ch_°©e
 {

13 
	mc⁄fidí˚
;

14 
	mcou¡
;

15 
	m¥ef_ty≥
;

16 
boﬁ
 
	mcheck_keys
;

17 
dbªf
 
	mabsﬁuã_f‹m
;

18 
dbªf
 
	mm©ch
;

19 
dbªf
 
	m∂ayî
;

20 *
	m°rög
;

32 
öô_m©ch
(
dbªf
, const *, );

33 
öô_m©ch_check_keys
(
dbªf
, const *, );

34 
m©ch_∂ayî
();

35 
m©ch_absﬁuã
();

36 
m©ch_me
();

37 
m©ch_hîe
();

38 
m©ch_pos£ssi⁄
();

39 
m©ch_√ighb‹
();

40 
m©ch_exô
();

41 
m©ch_exô_wôh_∑ª¡s
();

42 
m©ch_ˇºõd_exô
();

43 
m©ch_ˇºõd_exô_wôh_∑ª¡s
();

44 
m©ch_ma°î_exô
();

45 
m©ch_evîythög
();

46 
dbªf
 
m©ch_ªsu…
();

47 
dbªf
 
œ°_m©ch_ªsu…
();

48 
dbªf
 
m©ch_°©us
(dbref, dbref);

49 
dbªf
 
noisy_m©ch_ªsu…
();

50 
ßve_m©ch_°©e
(
MSTATE
 *);

51 
ª°‹e_m©ch_°©e
(
MSTATE
 *);

52 
m©ch_z⁄e_exô
();

53 
dbªf
 
m©ch_thög
(dbª‡
∂ayî
, *
«me
);

54 
dbªf
 
m©ch_thög_quõt
(dbª‡
∂ayî
, *
«me
);

55 
ß„_m©ch_ªsu…
(
dbªf
 
ô
, *
buff
, **
bufc
);

57 
	#MAT_NO_EXITS
 1

	)

58 
	#MAT_EXIT_PARENTS
 2

	)

59 
	#MAT_NUMERIC
 4

	)

60 
	#MAT_HOME
 8

	)

	@mguests.h

6 #i‚de‡
__MGUESTS_H


7 
	#__MGUESTS_H


	)

9 
	~"c›yright.h
"

10 
	~"öãrÁ˚.h
"

14 ˛as†
	cCGue°s


16 
	m¥iv©e
:

17 
«me
[50];

18 
dbªf
 *
	mGue°s
;

19 
	mnMaxGue°s
;

20 
	mnGue°s
;

21 
SizeGue°s
();

22 
MakeGue°Ch¨
();

23 
De°royGue°Ch¨
(
dbªf
);

24 
WùeAârs
(
dbªf
 
gue°
);

25 
AddToGue°Ch™√l
(
dbªf
 
∂ayî
);

27 
	mpublic
:

28 
CGue°s
();

29 ~
CGue°s
();

31 
boﬁ
 
CheckGue°
(
dbªf
);

32 
Li°AŒ
(
dbªf
);

33 
SèπUp
();

34 c⁄° *
Cª©e
(
DESC
 *
d
);

35 
CÀ™Up
();

38 
CGue°s
 
Gue°
;

40 
	#GUEST_PASSWORD
 "Gue°"

	)

	@misc.h

6 
	~"c›yright.h
"

8 #i‚de‡
_MISC_H


9 
	#_MISC_H


	)

11 
	~"powîs.h
"

15 
£¨ch_ty≥
 
	tSEARCH
;

16 
	s£¨ch_ty≥
 {

17 
	ms_wiz¨d
;

18 
dbªf
 
	ms_ow√r
;

19 
dbªf
 
	ms_r°_ow√r
;

20 
	ms_r°_ty≥
;

21 
FLAGSET
 
	ms_f£t
;

22 
POWERSET
 
	ms_p£t
;

23 
dbªf
 
	ms_∑ª¡
;

24 
dbªf
 
	ms_z⁄e
;

25 *
	ms_r°_«me
;

26 *
	ms_r°_evÆ
;

27 
	mlow_bound
;

28 
	mhigh_bound
;

33 
°©s_ty≥
 
	tSTATS
;

34 
	s°©s_ty≥
 {

35 
	ms_tŸÆ
;

36 
	ms_rooms
;

37 
	ms_exôs
;

38 
	ms_thögs
;

39 
	ms_∂ayîs
;

40 
	ms_g¨bage
;

43 
boﬁ
 
£¨ch_£tup
(
dbªf
, *, 
SEARCH
 *);

44 
£¨ch_≥rf‹m
(
dbªf
 
execut‹
, dbª‡
ˇŒî
, dbª‡
ía˘‹
, 
SEARCH
 *);

45 
boﬁ
 
gë_°©s
(
dbªf
, dbªf, 
STATS
 *);

	@mudconf.h

6 #i‚de‡
__CONF_H


7 
	#__CONF_H


	)

9 
	~"Æloc.h
"

10 
	~"hèb.h
"

11 
	~"°rögutû.h
"

13 #i‚de‡
WIN32


14 
	~<√töë/ö.h
>

17 
	#WIDTHOF_DOING_STRING
 45

	)

18 
	#SIZEOF_DOING_STRING
 (2*
WIDTHOF_DOING_STRING
)

	)

22 
	sèg_öt_¨øy


24 
	mn
;

25 *
	mpi
;

26 } 
	tI¡Aºay
;

30 c⁄° *
	mComm™dName
;

31 
CHashTabÀ
 *
	mht
;

32 *
	mpBa£Fûíame
;

33 
boﬁ
 
	mbEvÆ
;

34 } 
	tHELP_DESC
;

36 
c⁄fd©a
 
	tCONFDATA
;

37 
	sc⁄fd©a


39 
boﬁ
 
	mÆlow_gue°_‰om_ªgi°îed_sôe
;

40 
boﬁ
 
	mautoz⁄e
;

41 
boﬁ
 
	mˇche_«mes
;

42 
boﬁ
 
	m˛⁄e_c›y_co°
;

43 
boﬁ
 
	mcom¥ess_db
;

44 
boﬁ
 
	md¨k_¶ì≥rs
;

45 
boﬁ
 
	mde°roy_goög_now
;

46 
boﬁ
 
	mevÆ_comtôÀ
;

47 
boﬁ
 
	mex_Êags
;

48 
boﬁ
 
	mexam_public
;

49 
boﬁ
 
	mÁsci°_ç‹t
;

50 
boﬁ
 
	mf‹k_dump
;

51 
boﬁ
 
	mhave_comsys
;

52 
boﬁ
 
	mhave_maûî
;

53 
boﬁ
 
	mhave_z⁄es
;

54 
boﬁ
 
	midÀ_wiz_d¨k
;

55 
boﬁ
 
	mödít_desc
;

56 
boﬁ
 
	mm©ch_möe
;

57 
boﬁ
 
	mm©ch_möe_∂
;

58 
boﬁ
 
	m«me_•a˚s
;

59 
boﬁ
 
	m∑ønoid_Æloc
;

60 
boﬁ
 
	m≥mô_™y
;

61 
boﬁ
 
	m≥mô_∂ayîs
;

62 
boﬁ
 
	m∂ayî_li°í
;

63 
boﬁ
 
	mpub_Êags
;

64 
boﬁ
 
	mquõt_look
;

65 
boﬁ
 
	mquõt_whi•î
;

66 
boﬁ
 
	mquŸas
;

67 
boﬁ
 
	mªad_ªm_desc
;

68 
boﬁ
 
	mªad_ªm_«me
;

69 
boﬁ
 
	mª£t_∂ayîs
;

70 
boﬁ
 
	mrobŸ_•ók
;

71 
boﬁ
 
	mrun_°¨tup
;

72 
boﬁ
 
	mß„_unow√d
;

73 
boﬁ
 
	mß„_wùe
;

74 
boﬁ
 
	mß„r_∑ssw‹ds
;

75 
boﬁ
 
	m£e_own_d¨k
;

76 
boﬁ
 
	m•a˚_com¥ess
;

77 
boﬁ
 
	mswìp_d¨k
;

78 
boﬁ
 
	mswôch_df_Æl
;

79 
boﬁ
 
	mãr£_c⁄ã¡s
;

80 
boﬁ
 
	mãr£_exôs
;

81 
boﬁ
 
	mãr£_look
;

82 
boﬁ
 
	mãr£_movemsg
;

83 
boﬁ
 
	måa˚_t›down
;

84 
boﬁ
 
	mu£_ho°«me
;

85 
boﬁ
 
	mu£_hâp
;

86 
dbªf
 
	mdeÁu…_home
;

87 
dbªf
 
	mglobÆ_îr‹_obj
;

88 
dbªf
 
	mgue°_ch¨
;

89 
dbªf
 
	mgue°_nukî
;

90 
dbªf
 
	mhook_obj
;

91 
dbªf
 
	mma°î_room
;

92 
dbªf
 
	m°¨t_home
;

93 
dbªf
 
	m°¨t_room
;

94 
dbªf
 
	mtﬂd_ªcùõ¡
;

95 
	ma˘ive_q_chunk
;

96 
	mˇche_∑ges
;

97 
	mcheck_öãrvÆ
;

98 
	mcheck_off£t
;

99 
	mcmd_quŸa_ö¸
;

100 
	mcmd_quŸa_max
;

101 
	mc⁄n_timeout
;

102 
	mc⁄åﬁ_Êags
;

103 
	m¸óãmax
;

104 
	m¸óãmö
;

105 
	mdigco°
;

106 
	mdump_öãrvÆ
;

107 
	mdump_off£t
;

108 
	mevíts_daûy_hour
;

109 
	mexô_quŸa
;

110 
	mfunc_övk_lim
;

111 
	mfunc_√°_lim
;

112 
	mhook_cmd
;

113 
	midÀ_öãrvÆ
;

114 
	midÀ_timeout
;

115 
	möô_size
;

116 
	mkûlgu¨™ãe
;

117 
	mkûlmax
;

118 
	mkûlmö
;

119 
	mlökco°
;

120 
	mlock_√°_lim
;

121 
	mlog_öfo
;

122 
	mlog_›ti⁄s
;

123 
	mmachöeco°
;

124 
	mmaû_expú©i⁄
;

125 
	mmaû_≥r_hour
;

126 
	mmax_∂ayîs
;

127 
	mmö_gue°s
;

128 
	mnSèckLimô
;

129 #ifde‡
REALITY_LVLS


130 
	mno_Àvñs
;

131 
	sæevñ_def
 {

132 
	m«me
[9];

133 
RLEVEL
 
	mvÆue
;

134 
	m©å
[33];

135 } 
	mªÆôy_Àvñ
[32];

136 
RLEVEL
 
	mdef_room_rx
;

137 
RLEVEL
 
	mdef_room_tx
;

138 
RLEVEL
 
	mdef_∂ayî_rx
;

139 
RLEVEL
 
	mdef_∂ayî_tx
;

140 
RLEVEL
 
	mdef_exô_rx
;

141 
RLEVEL
 
	mdef_exô_tx
;

142 
RLEVEL
 
	mdef_thög_rx
;

143 
RLEVEL
 
	mdef_thög_tx
;

145 
	m¡fy_√°_lim
;

146 
	mnumbî_gue°s
;

147 
	m›íco°
;

148 
	mouçut_limô
;

149 
	m∑geco°
;

150 
	m∑ª¡_√°_lim
;

151 
	m∑ycheck
;

152 
	m∑yföd
;

153 
	m∑ylimô
;

154 
	m∑y°¨t
;

155 
	m∂ayî_quŸa
;

156 
	mp¸óã_≥r_hour
;

157 
	mqueue_chunk
;

158 
	mqueuemax
;

159 
	mªåy_limô
;

160 
	mrobŸco°
;

161 
	mroom_quŸa
;

162 
	mßˇdju°
;

163 
	mßcÁ˘‹
;

164 
	m£¨chco°
;

165 
	msig_a˘i⁄
;

166 
	m°ack_limô
;

167 
	m°¨t_quŸa
;

168 
	mthög_quŸa
;

169 
	måa˚_limô
;

170 
	mv©å_Êags
;

171 
	mv©å_≥r_hour
;

172 
	mwaôco°
;

173 
	mwûd_övk_lim
;

174 
	mz⁄e_√°_lim
;

175 
	mª°ri˘_home
;

177 
	mmax_ˇche_size
;

178 
	msôe_ch¨s
;

180 
I¡Aºay
 
	mp‹ts
;

182 
	mgue°_¥efix
[32];

183 
	mgue°s_ch™√l
[32];

184 
	mgue°s_ch™√l_Æüs
[32];

185 
	mm™y_coös
[32];

186 
	mmud_«me
[32];

187 
	m⁄e_coö
[32];

188 
	mpublic_ch™√l
[32];

189 
	mpublic_ch™√l_Æüs
[32];

190 
	mdump_msg
[128];

191 
	mfixed_home_msg
[128];

192 
	mfixed_ãl_msg
[128];

193 
	mpo°dump_msg
[128];

194 
	mdownmŸd_msg
[
GBUF_SIZE
];

195 
	mfuŒmŸd_msg
[
GBUF_SIZE
];

196 
	mmŸd_msg
[
GBUF_SIZE
];

197 
	mpueblo_msg
[
GBUF_SIZE
];

198 
	mwizmŸd_msg
[
GBUF_SIZE
];

199 *
	mcom¥ess
;

200 *
	mcomsys_db
;

201 *
	mc⁄fig_fûe
;

202 *
	mc⁄n_fûe
;

203 *
	m¸ashdb
;

204 *
	m¸ó_fûe
;

205 *
	m¸eg_fûe
;

206 *
	mdown_fûe
;

207 *
	mfuŒ_fûe
;

208 *
	mgame_dú
;

209 *
	mgame_∑g
;

210 *
	mgue°_fûe
;

211 *
	mödb
;

212 *
	mmaû_db
;

213 *
	mmŸd_fûe
;

214 *
	moutdb
;

215 *
	mquô_fûe
;

216 *
	mªgf_fûe
;

217 *
	msôe_fûe
;

218 *
	m°©us_fûe
;

219 *
	muncom¥ess
;

220 *
	mwizmŸd_fûe
;

221 *
	mpid_fûe
;

222 
	mm¨kd©a
[8];

223 
CLöórTimeDñè
 
	mΩt_cmd£cs
;

224 
CLöórTimeDñè
 
	mmax_cmd£cs
;

225 
CLöórTimeDñè
 
	mˇche_tick_≥riod
;

226 
CLöórTimeDñè
 
	mtime¶i˚
;

228 
FLAGSET
 
	mexô_Êags
;

229 
FLAGSET
 
	m∂ayî_Êags
;

230 
FLAGSET
 
	mrobŸ_Êags
;

231 
FLAGSET
 
	mroom_Êags
;

232 
FLAGSET
 
	mthög_Êags
;

234 
AπRuÀ£t
* 
	m¨t_ruÀs
;

237 
CONFDATA
 
mudc⁄f
;

239 
sôe_d©a
 
	tSITE
;

240 
	ssôe_d©a


242 
sôe_d©a
 *
	m√xt
;

243 
ö_addr
 
	maddªss
;

244 
ö_addr
 
	mmask
;

245 
	mÊag
;

248 
objli°_block
 
	tOBLOCK
;

249 
	sobjli°_block


251 
objli°_block
 *
	m√xt
;

252 
dbªf
 
	md©a
[(
LBUF_SIZE
 - (
OBLOCK
 *)) / (dbref)];

255 
	#OBLOCK_SIZE
 ((
LBUF_SIZE
 - (
OBLOCK
 *)Ë/ (
dbªf
))

	)

257 
objli°_°ack
 
	tOLSTK
;

258 
	sobjli°_°ack


260 
objli°_°ack
 *
	m√xt
;

261 
OBLOCK
 *
	mhód
;

262 
OBLOCK
 *
	mèû
;

263 
OBLOCK
 *
	mcblock
;

264 
	mcou¡
;

265 
	mcôm
;

268 
m¨kbuf
 
	tMARKBUF
;

269 
	sm¨kbuf


271 
	mchunk
[5000];

274 
Æi°
 
	tALIST
;

275 
	sÆi°


277 *
	md©a
;

278 
size_t
 
	mÀn
;

279 
Æi°
 *
	m√xt
;

282 
bad«me_°ruc
 
	tBADNAME
;

283 
	sbad«me_°ruc


285 *
	m«me
;

286 
bad«me_°ruc
 *
	m√xt
;

289 
f‹w¨d_li°
 
	tFWDLIST
;

290 
	sf‹w¨d_li°


292 
	mcou¡
;

293 
	md©a
[1000];

296 
	#MAX_ITEXT
 100

	)

298 
°©ed©a
 
	tSTATEDATA
;

299 
	s°©ed©a


301 
boﬁ
 
	mbC™Re°¨t
;

302 
boﬁ
 
	mbRódögC⁄figuøti⁄
;

303 
boﬁ
 
	mbSèckLimôRóched
;

304 
boﬁ
 
	mbSèndAl⁄e
;

305 
boﬁ
 
	m∑nickög
;

306 
boﬁ
 
	mshutdown_Êag
;

307 
boﬁ
 
	möpùe
;

308 #i‚de‡
WIN32


309 
boﬁ
 
	mª°¨tög
;

310 vﬁ©ûê
boﬁ
 
	mdumpög
;

311 vﬁ©ûê
pid_t
 
	mdum≥r
;

312 
boﬁ
 
	mwrôe_¥Ÿe˘
;

316 
dbªf
 
	mcuº_ía˘‹
;

317 
dbªf
 
	mcuº_execut‹
;

318 
dbªf
 
	m‰ìli°
;

319 
dbªf
 
	mmod_Æ_id
;

320 
dbªf
 
	mpoutobj
;

321 
	m©å_√xt
;

322 
	mdb_size
;

323 
	mdb_t›
;

324 
	mïoch
;

325 
	mevíts_Êag
;

326 
	mfunc_övk_˘r
;

327 
	mfunc_√°_Àv
;

328 
	mgíî©i⁄
;

329 
	mö_lo›
;

330 
	mlock_√°_Àv
;

331 
	mloggög
;

332 
	mmaû_db_size
;

333 
	mmaû_db_t›
;

334 
	mmHñpDesc
;

335 
	mmö_size
;

336 
	mm°©_cuº
;

337 
	mnHñpDesc
;

338 
	mnObjEvÆNe°
;

339 
	mnSèckNe°
;

340 
	mnHórNe°
;

341 
	mpùe_√°_Àv
;

342 
	mp¸óãs_this_hour
;

343 
	m¡fy_√°_Àv
;

344 
	mªc‹d_∂ayîs
;

345 
	mwûd_övk_˘r
;

346 
	mz⁄e_√°_num
;

347 
	mm°©_idrss
[2];

348 
	mm°©_i§ss
[2];

349 
	mm°©_ixrss
[2];

350 
	mm°©_£cs
[2];

351 
	mglob_ªg_Àn
[
MAX_GLOBAL_REGS
];

352 
	möum
[
MAX_ITEXT
];

353 *
	mgue°_‰ì
;

354 
size_t
 
	mmod_Æi°_Àn
;

355 
size_t
 
	mmod_size
;

357 
	msh‹t_vî
[64];

358 
	mdoög_hdr
[
SIZEOF_DOING_STRING
];

359 
	mvîsi⁄
[128];

360 *
	mcuº_cmd
;

361 *
	mdebug_cmd
;

362 *
	mmod_Æi°
;

363 *
	mpout
;

364 *
	mpoutbufc
;

365 *
	mpouäew
;

366 *
	mglobÆ_ªgs
[
MAX_GLOBAL_REGS
];

367 *
	môext
[
MAX_ITEXT
];

369 
ALIST
 
	môî_Æi°
;

370 
BADNAME
 *
	mbad«me_hód
;

371 
HELP_DESC
 *
	maHñpDesc
;

372 
MARKBUF
 *
	mm¨kbôs
;

373 
OLSTK
 *
	mﬁi°
;

374 
SITE
 *
	msu•e˘_li°
;

375 
SITE
 *
	mac˚ss_li°
;

377 
CLöórTimeAbsﬁuã
 
	mcheck_cou¡î
;

378 
CLöórTimeAbsﬁuã
 
	m˝u_cou¡_‰om
;

379 
CLöórTimeAbsﬁuã
 
	mdump_cou¡î
;

380 
CLöórTimeAbsﬁuã
 
	mevíts_cou¡î
;

381 
CLöórTimeAbsﬁuã
 
	midÀ_cou¡î
;

382 
CLöórTimeAbsﬁuã
 
	m°¨t_time
;

383 
CLöórTimeAbsﬁuã
 
	mtThrŸéeExpúed
;

385 
CHashTabÀ
 
	maˇche_hèb
;

386 
CHashTabÀ
 
	m©å_«me_hèb
;

387 
CHashTabÀ
 
	mch™√l_hèb
;

388 
CHashTabÀ
 
	mcomm™d_hèb
;

389 
CHashTabÀ
 
	mdesc_hèb
;

390 
CHashTabÀ
 
	mÊags_hèb
;

391 
CHashTabÀ
 
	mfunc_hèb
;

392 
CHashTabÀ
 
	mfwdli°_hèb
;

393 
CHashTabÀ
 
	mlogout_cmd_hèb
;

394 
CHashTabÀ
 
	mmaû_hèb
;

395 
CHashTabÀ
 
	m∑ª¡_hèb
;

396 
CHashTabÀ
 
	m∂ayî_hèb
;

397 
CHashTabÀ
 
	mpowîs_hèb
;

398 #ifde‡
PARSE_TREES


399 
CHashTabÀ
 
	måì_hèb
;

401 
CHashTabÀ
 
	mufunc_hèb
;

402 
CHashTabÀ
 
	mv©å_«me_hèb
;

404 
CBôFõld
 
	mbfNoLi°ís
;

405 
CBôFõld
 
	mbfNoComm™ds
;

406 
CBôFõld
 
	mbfComm™ds
;

407 
CBôFõld
 
	mbfLi°ís
;

409 
CBôFõld
 
	mbfRï‹t
;

410 
CBôFõld
 
	mbfTøvî£
;

413 
STATEDATA
 
mud°©e
;

417 
	#CF_HAND
(
¥oc
Ë
	`¥oc
(*
vp
, *
°r
, *
pExåa
, 
UINT32
 
nExåa
, 
dbªf
 
∂ayî
, *
cmd
)

	)

423 
	#CF_LOGIN
 0x0001

	)

424 
	#CF_BUILD
 0x0002

	)

425 
	#CF_INTERP
 0x0004

	)

426 
	#CF_CHECKPOINT
 0x0008

	)

427 
	#CF_DBCHECK
 0x0010

	)

428 
	#CF_IDLECHECK
 0x0020

	)

429 
	#CF_GUEST
 0x0040

	)

431 
	#CF_DEQUEUE
 0x0100

	)

432 #ifde‡
MUSH3


433 
	#CF_GODMONITOR
 0x0200

435 
	#CF_EVENTCHECK
 0x0400

436 

	)

439 
	#H_REGISTRATION
 0x0001

	)

440 
	#H_FORBIDDEN
 0x0002

	)

441 
	#H_SUSPECT
 0x0004

	)

442 
	#H_GUEST
 0x0008

443 
	#H_NOSITEMON
 0x0010

444 

	)

447 
	#ET_DAILY
 0x00000001

	)

451 
	#LOG_ALLCOMMANDS
 0x00000001

	)

452 
	#LOG_ACCOUNTING
 0x00000002

	)

453 
	#LOG_BADCOMMANDS
 0x00000004

	)

454 
	#LOG_BUGS
 0x00000008

	)

455 
	#LOG_DBSAVES
 0x00000010

	)

456 
	#LOG_CONFIGMODS
 0x00000020

	)

457 
	#LOG_PCREATES
 0x00000040

	)

458 
	#LOG_KILLS
 0x00000080

	)

459 
	#LOG_LOGIN
 0x00000100

	)

460 
	#LOG_NET
 0x00000200

	)

461 
	#LOG_SECURITY
 0x00000400

	)

462 
	#LOG_SHOUTS
 0x00000800

	)

463 
	#LOG_STARTUP
 0x00001000

	)

464 
	#LOG_WIZARD
 0x00002000

	)

465 
	#LOG_ALLOCATE
 0x00004000

	)

466 
	#LOG_PROBLEMS
 0x00008000

	)

467 
	#LOG_SUSPECTCMDS
 0x00020000

468 #ifde‡
MUSH3


	)

469 
	#LOG_KBCOMMANDS
 0x00010000

471 
	#LOG_TIMEUSE
 0x00040000

472 
	#LOG_ALWAYS
 0x80000000

	)

474 
	#LOGOPT_FLAGS
 0x01

	)

475 
	#LOGOPT_LOC
 0x02

	)

476 
	#LOGOPT_OWNER
 0x04

	)

477 
	#LOGOPT_TIMESTAMP
 0x08

	)

	@muxcli.h

9 
	#CLI_USER
 0

	)

13 
	#CLI_NONE
 0

	)

14 
	#CLI_OPTIONAL
 1

	)

15 
	#CLI_REQUIRED
 2

	)

19 *
	mm_Fœg
;

20 
	mm_ArgC⁄åﬁ
;

21 
	mm_Unique
;

22 } 
	tCLI_O±i⁄E¡ry
;

24 
	tCLI_CALLBACKFUNC
(
	tCLI_O±i⁄E¡ry
 *
	tpO±i⁄
, *
	tVÆue
);

26 
	gCLI_Pro˚ss


28 
	g¨gc
,

29 *
	g¨gv
[],

30 
CLI_O±i⁄E¡ry
 *
	gaO±i⁄TabÀ
,

31 
	gnO±i⁄TabÀ
,

32 
CLI_CALLBACKFUNC
 *
	gpFunc


	@pcre.h

10 #i‚de‡
_PCRE_H


11 
	#_PCRE_H


	)

13 
	#PCRE_MAJOR
 4

	)

14 
	#PCRE_MINOR
 5

	)

15 
	#PCRE_DATE
 01-
De˚mbî
-2003

	)

17 #i‚de‡
PCRE_DATA_SCOPE


18 
	#PCRE_DATA_SCOPE
 

	)

24 
	~<°dlib.h
>

28 
	#PCRE_CASELESS
 0x0001

	)

29 
	#PCRE_MULTILINE
 0x0002

	)

30 
	#PCRE_DOTALL
 0x0004

	)

31 
	#PCRE_EXTENDED
 0x0008

	)

32 
	#PCRE_ANCHORED
 0x0010

	)

33 
	#PCRE_DOLLAR_ENDONLY
 0x0020

	)

34 
	#PCRE_EXTRA
 0x0040

	)

35 
	#PCRE_NOTBOL
 0x0080

	)

36 
	#PCRE_NOTEOL
 0x0100

	)

37 
	#PCRE_UNGREEDY
 0x0200

	)

38 
	#PCRE_NOTEMPTY
 0x0400

	)

39 
	#PCRE_UTF8
 0x0800

	)

40 
	#PCRE_NO_AUTO_CAPTURE
 0x1000

	)

41 
	#PCRE_NO_UTF8_CHECK
 0x2000

	)

45 
	#PCRE_ERROR_NOMATCH
 (-1)

	)

46 
	#PCRE_ERROR_NULL
 (-2)

	)

47 
	#PCRE_ERROR_BADOPTION
 (-3)

	)

48 
	#PCRE_ERROR_BADMAGIC
 (-4)

	)

49 
	#PCRE_ERROR_UNKNOWN_NODE
 (-5)

	)

50 
	#PCRE_ERROR_NOMEMORY
 (-6)

	)

51 
	#PCRE_ERROR_NOSUBSTRING
 (-7)

	)

52 
	#PCRE_ERROR_MATCHLIMIT
 (-8)

	)

53 
	#PCRE_ERROR_CALLOUT
 (-9Ë

	)

54 
	#PCRE_ERROR_BADUTF8
 (-10)

	)

55 
	#PCRE_ERROR_BADUTF8_OFFSET
 (-11)

	)

59 
	#PCRE_INFO_OPTIONS
 0

	)

60 
	#PCRE_INFO_SIZE
 1

	)

61 
	#PCRE_INFO_CAPTURECOUNT
 2

	)

62 
	#PCRE_INFO_BACKREFMAX
 3

	)

63 
	#PCRE_INFO_FIRSTBYTE
 4

	)

64 
	#PCRE_INFO_FIRSTCHAR
 4

	)

65 
	#PCRE_INFO_FIRSTTABLE
 5

	)

66 
	#PCRE_INFO_LASTLITERAL
 6

	)

67 
	#PCRE_INFO_NAMEENTRYSIZE
 7

	)

68 
	#PCRE_INFO_NAMECOUNT
 8

	)

69 
	#PCRE_INFO_NAMETABLE
 9

	)

70 
	#PCRE_INFO_STUDYSIZE
 10

	)

74 
	#PCRE_CONFIG_UTF8
 0

	)

75 
	#PCRE_CONFIG_NEWLINE
 1

	)

76 
	#PCRE_CONFIG_LINK_SIZE
 2

	)

77 
	#PCRE_CONFIG_POSIX_MALLOC_THRESHOLD
 3

	)

78 
	#PCRE_CONFIG_MATCH_LIMIT
 4

	)

79 
	#PCRE_CONFIG_STACKRECURSE
 5

	)

83 
	#PCRE_EXTRA_STUDY_DATA
 0x0001

	)

84 
	#PCRE_EXTRA_MATCH_LIMIT
 0x0002

	)

85 
	#PCRE_EXTRA_CALLOUT_DATA
 0x0004

	)

89 
ªÆ_p¸e
;

90 
ªÆ_p¸e
 
	tp¸e
;

95 
	sp¸e_exåa
 {

96 
	mÊags
;

97 *
	m°udy_d©a
;

98 
	mm©ch_limô
;

99 *
	mˇŒout_d©a
;

100 } 
	tp¸e_exåa
;

107 
	sp¸e_ˇŒout_block
 {

108 
	mvîsi⁄
;

110 
	mˇŒout_numbî
;

111 *
	moff£t_ve˘‹
;

112 c⁄° *
	msubje˘
;

113 
	msubje˘_Àngth
;

114 
	m°¨t_m©ch
;

115 
	mcuºít_posôi⁄
;

116 
	mˇ±uª_t›
;

117 
	mˇ±uª_œ°
;

118 *
	mˇŒout_d©a
;

120 } 
	tp¸e_ˇŒout_block
;

125 
p¸e
 *
p¸e_compûe
(const *, , const **,

127 
p¸e_c›y_sub°rög
(const *, *, , ,

129 
p¸e_exec
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *,

131 c⁄° *
p¸e_makëabÀs
();

132 
p¸e_exåa
 *
p¸e_°udy
(c⁄° 
p¸e
 *, , const **);

	@powers.h

6 
	~"c›yright.h
"

8 #i‚de‡
__POWERS_H


9 
	#__POWERS_H


	)

11 
	#POWER_EXT
 0x1

	)

14 
	#POW_CHG_QUOTAS
 0x00000001

	)

15 
	#POW_CHOWN_ANY
 0x00000002

	)

16 
	#POW_ANNOUNCE
 0x00000004

	)

17 
	#POW_BOOT
 0x00000008

	)

18 
	#POW_HALT
 0x00000010

	)

19 
	#POW_CONTROL_ALL
 0x00000020

	)

20 
	#POW_WIZARD_WHO
 0x00000040

	)

21 
	#POW_EXAM_ALL
 0x00000080

	)

22 
	#POW_FIND_UNFIND
 0x00000100

	)

23 
	#POW_FREE_MONEY
 0x00000200

	)

24 
	#POW_FREE_QUOTA
 0x00000400

	)

25 
	#POW_HIDE
 0x00000800

	)

26 
	#POW_IDLE
 0x00001000

	)

27 
	#POW_SEARCH
 0x00002000

	)

28 
	#POW_LONGFINGERS
 0x00004000

	)

29 
	#POW_PROG
 0x00008000

	)

30 
	#POW_SITEADMIN
 0x00010000

31 

	)

34 
	#POW_COMM_ALL
 0x00080000

	)

35 
	#POW_SEE_QUEUE
 0x00100000

	)

36 
	#POW_SEE_HIDDEN
 0x00200000

	)

37 
	#POW_MONITOR
 0x00400000

	)

38 
	#POW_POLL
 0x00800000

	)

39 
	#POW_NO_DESTROY
 0x01000000

	)

40 
	#POW_GUEST
 0x02000000

	)

41 
	#POW_PASS_LOCKS
 0x04000000

	)

42 
	#POW_STAT_ANY
 0x08000000

	)

43 
	#POW_STEAL
 0x10000000

	)

44 
	#POW_TEL_ANYWHR
 0x20000000

	)

45 
	#POW_TEL_UNRST
 0x40000000

	)

46 
	#POW_UNKILLABLE
 0x80000000

	)

49 
	#POW_BUILDER
 0x00000001

	)

50 #ifde‡
FIRANMUX


51 
	#POW_IMMUTABLE
 0x00000002

	)

58 
	spowî_íåy
 {

59 c⁄° *
	mpowî«me
;

60 
	mpowîvÆue
;

61 
	mpowîpowî
;

62 
	mli°≥rm
;

63 
boﬁ
 (*
h™dÀr
)(
dbªf
 
	mèrgë
, dbª‡
	m∂ayî
, 
POWER
 
	mpowî
, 
	mÂowîs
, boﬁ 
	mª£t
);

64 } 
	tPOWERENT
;

66 
	spowî£t
 {

67 
POWER
 
	mw‹d1
;

68 
POWER
 
	mw‹d2
;

69 } 
	tPOWERSET
;

71 
öô_powîèb
();

72 
di•œy_powîèb
(
dbªf
);

73 
powî_£t
(
dbªf
, dbref, *, );

74 *
powîs_li°
(
dbªf
 
execut‹
, dbª‡
thög
);

75 
boﬁ
 
has_powî
(
dbªf
, dbref, *);

76 
decompûe_powîs
(
dbªf
, dbref, *);

77 
boﬁ
 
decode_powî
(
dbªf
 
∂ayî
, *
powî«me
, 
POWERSET
 *
p£t
);

79 
	#s_Gue°
(
c
Ë
	`s_Powîs
((c), 
	`Powîs
(cË| 
POW_GUEST
)

	)

81 
	#QuŸa
(
c
Ë(((
	`Powîs
(cË& 
POW_CHG_QUOTAS
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

82 
	#Chown_Any
(
c
Ë(((
	`Powîs
(cË& 
POW_CHOWN_ANY
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

83 
	#A¬oun˚
(
c
Ë(((
	`Powîs
(cË& 
POW_ANNOUNCE
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

84 
	#C™_BoŸ
(
c
Ë(((
	`Powîs
(cË& 
POW_BOOT
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

85 
	#C™_HÆt
(
c
Ë(((
	`Powîs
(cË& 
POW_HALT
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

86 
	#C⁄åﬁ_AŒ
(
c
Ë(((
	`Powîs
(cË& 
POW_CONTROL_ALL
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

87 
	#Wiz¨d_Who
(
c
Ë(((
	`Powîs
(cË& 
POW_WIZARD_WHO
Ë!0Ë|| 
	`WizRoy
(c))

	)

88 
	#Sì_AŒ
(
c
Ë(((
	`Powîs
(cË& 
POW_EXAM_ALL
Ë!0Ë|| 
	`WizRoy
(c))

	)

89 
	#Föd_UnfödabÀ
(
c
Ë((
	`Powîs
(cË& 
POW_FIND_UNFIND
Ë!0)

	)

90 
	#Fªe_M⁄ey
(
c
Ë(((
	`Powîs
(cË& 
POW_FREE_MONEY
Ë!0Ë|| 
	`Imm‹èl
(c))

	)

91 
	#Fªe_QuŸa
(
c
Ë(((
	`Powîs
(cË& 
POW_FREE_QUOTA
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

92 
	#C™_Hide
(
c
Ë(((
	`Powîs
(cË& 
POW_HIDE
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

93 
	#C™_IdÀ
(
c
Ë(((
	`Powîs
(cË& 
POW_IDLE
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

94 
	#Sórch
(
c
Ë(((
	`Powîs
(cË& 
POW_SEARCH
Ë!0Ë|| 
	`WizRoy
(c))

	)

95 
	#L⁄g_Fögîs
(
c
Ë(((
	`Powîs
(cË& 
POW_LONGFINGERS
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

96 
	#Comm_AŒ
(
c
Ë(((
	`Powîs
(cË& 
POW_COMM_ALL
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

97 
	#Sì_Queue
(
c
Ë(((
	`Powîs
(cË& 
POW_SEE_QUEUE
Ë!0Ë|| 
	`WizRoy
(c))

	)

98 
	#Sì_Hiddí
(
c
Ë(((
	`Powîs
(cË& 
POW_SEE_HIDDEN
Ë!0Ë|| 
	`WizRoy
(c))

	)

99 
	#C™_M⁄ô‹
(
c
Ë(((
	`Powîs
(cË& 
POW_MONITOR
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

100 
	#C™_Pﬁl
(
c
Ë(((
	`Powîs
(cË& 
POW_POLL
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

101 
	#No_De°roy
(
c
Ë(((
	`Powîs
(cË& 
POW_NO_DESTROY
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

102 
	#Gue°
(
c
Ë((
	`Powîs
(cË& 
POW_GUEST
Ë!0)

	)

103 
	#Sèt_Any
(
c
Ë((
	`Powîs
(cË& 
POW_STAT_ANY
Ë!0)

	)

104 
	#SãÆ
(
c
Ë(((
	`Powîs
(cË& 
POW_STEAL
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

105 
	#Tñ_Anywhîe
(
c
Ë(((
	`Powîs
(cË& 
POW_TEL_ANYWHR
Ë!0Ë|| 
	`Tñ_Anythög
(c))

	)

106 
	#Tñ_Anythög
(
c
Ë(((
	`Powîs
(cË& 
POW_TEL_UNRST
Ë!0Ë|| 
	`WizRoy
(c))

	)

107 
	#UnkûœbÀ
(
c
Ë(((
	`Powîs
(cË& 
POW_UNKILLABLE
Ë!0Ë|| 
	`Imm‹èl
(c))

	)

108 
	#Prog
(
c
Ë(((
	`Powîs
(cË& 
POW_PROG
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

109 
	#Pass_Locks
(
c
Ë((
	`Powîs
(cË& 
POW_PASS_LOCKS
Ë!0)

	)

110 
	#Buûdî
(
c
Ë(((
	`Powîs2
(cË& 
POW_BUILDER
Ë!0Ë|| 
	`WizRoy
(c))

	)

111 #ifde‡
FIRANMUX


112 
	#ImmuèbÀ
(
c
Ë((
	`Powîs2
(cË& 
POW_IMMUTABLE
Ë!0)

	)

115 
	#C™_SôeAdmö
(
c
Ë(((
	`Powîs
(cË& 
POW_SITEADMIN
Ë!0Ë|| 
	`Wiz¨d
(c))

	)

	@python.h

1 #i‚de‡
PYTHON_H


2 
	#PYTHON_H


	)

4 
	~<m≠
>

5 #unde‡
_POSIX_C_SOURCE


6 
	~"Pyth⁄.h
"

8 
	~"c›yright.h
"

9 
	~"autoc⁄f.h
"

10 
	~"c⁄fig.h
"

11 
	~"db.h
"

12 
	~"exã∫s.h
"

13 
	~"Êags.h
"

14 
	~"fun˘i⁄s.h
"

16 
	g°d
::
	tm≠
<
	tdbªf
, 
	tPyObje˘
 *> 
	tDi˘M≠
;

17 
	g°d
::
	tm≠
<
	tdbªf
, *> 
	tCodeM≠
;

19 ˛as†
	cPyth⁄
 {

20 
	mpublic
:

21 
boﬁ
 
m_Ru¬ög
;

22 
Di˘M≠
 
	mm_GlobÆsM≠
;

23 
Di˘M≠
 
	mm_LoˇlsM≠
;

24 
CodeM≠
 
	mm_CodeM≠
;

26 
PyObje˘
 *
	mm_MaöModuÀ
;

27 
PyObje˘
 *
	mm_SysModuÀ
;

28 
PyObje˘
 *
	mm_btModuÀ
;

29 
PyObje˘
 *
	mm_btwizModuÀ
;

31 
Pyth⁄
();

32 ~
Pyth⁄
();

34 
Lﬂd
();

35 
Save
();

36 
Upd©e
();

38 
Run
(
dbªf
 
execut‹
, *
p°r
);

40 
CheckDi˘s
(
dbªf
 
execut‹
);

43 
FUNCTION
(
fun_pyth⁄
);

	@sha1.h

1 #i‚de‡
SHA1_H


2 
	#SHA1_H


	)

6 
UINT64
 
	mnTŸÆ
;

7 
UINT32
 
	mH
[5];

8 
UINT8
 
	mblock
[64];

9 
size_t
 
	mnblock
;

10 } 
	tSHA1_CONTEXT
;

12 
SHA1_Inô
(
SHA1_CONTEXT
 *
p
);

13 
SHA1_Compuã
(
SHA1_CONTEXT
 *
p
, 
size_t
 
n
, c⁄° *
buf
);

14 
SHA1_FöÆ
(
SHA1_CONTEXT
 *
p
);

	@slave.h

7 
	mSLAVE_IDENTQ
 = 'i',

8 
	mSLAVE_IPTONAME
 = 'h'

	@sqlshared.h

6 #i‚de‡
SQLSHARED_H


7 
	#SQLSHARED_H


	)

8 #ifde‡
QUERY_SLAVE


10 
sqlfoo
();

	@stringutil.h

9 #i‚de‡
STRINGUTIL_H


10 
	#STRINGUTIL_H


	)

12 c⁄° 
boﬁ
 
mux_i•röt
[256];

13 c⁄° 
boﬁ
 
mux_isdigô
[256];

14 c⁄° 
boﬁ
 
mux_ishex
[256];

15 c⁄° 
boﬁ
 
mux_ißÕha
[256];

16 c⁄° 
boﬁ
 
mux_iß um
[256];

17 c⁄° 
boﬁ
 
mux_i¶owî
[256];

18 c⁄° 
boﬁ
 
mux_isuµî
[256];

19 c⁄° 
boﬁ
 
mux_is•a˚
[256];

20 
boﬁ
 
mux_AârNameInôülSë
[256];

21 
boﬁ
 
mux_AârNameSë
[256];

22 c⁄° 
boﬁ
 
mux_Obje˘NameSë
[256];

23 
boﬁ
 
mux_PœyîNameSë
[256];

24 c⁄° 
boﬁ
 
mux_is£cuª
[256];

25 c⁄° 
boﬁ
 
mux_i£sˇ≥
[256];

26 c⁄° 
mux_hex2dec
[256];

27 c⁄° 
mux_touµî
[256];

28 c⁄° 
mux_tﬁowî
[256];

29 c⁄° 
mux_SåùAc˚¡s
[256];

31 
	#mux_i•röt
(
x
Ë(
mux_i•röt
[()(x)])

	)

32 
	#mux_isdigô
(
x
Ë(
mux_isdigô
[()(x)])

	)

33 
	#mux_ishex
(
x
Ë(
mux_ishex
[()(x)])

	)

34 
	#mux_ißÕha
(
x
Ë(
mux_ißÕha
[()(x)])

	)

35 
	#mux_iß um
(
x
Ë(
mux_iß um
[()(x)])

	)

36 
	#mux_i¶owî
(
x
Ë(
mux_i¶owî
[()(x)])

	)

37 
	#mux_isuµî
(
x
Ë(
mux_isuµî
[()(x)])

	)

38 
	#mux_is•a˚
(
x
Ë(
mux_is•a˚
[()(x)])

	)

39 
	#mux_hex2dec
(
x
Ë(
mux_hex2dec
[()(x)])

	)

40 
	#mux_touµî
(
x
Ë(
mux_touµî
[()(x)])

	)

41 
	#mux_tﬁowî
(
x
Ë(
mux_tﬁowî
[()(x)])

	)

43 
	#mux_AârNameInôülSë
(
x
Ë(
mux_AârNameInôülSë
[()(x)])

	)

44 
	#mux_AârNameSë
(
x
Ë(
mux_AârNameSë
[()(x)])

	)

45 
	#mux_Obje˘NameSë
(
x
Ë(
mux_Obje˘NameSë
[()(x)])

	)

46 
	#mux_PœyîNameSë
(
x
Ë(
mux_PœyîNameSë
[()(x)])

	)

47 
	#mux_is£cuª
(
x
Ë(
mux_is£cuª
[()(x)])

	)

48 
	#mux_i£sˇ≥
(
x
Ë(
mux_i£sˇ≥
[()(x)])

	)

49 
	#mux_SåùAc˚¡s
(
x
Ë(
mux_SåùAc˚¡s
[()(x)])

	)

51 
ANSI_Àx
(
nSåög
, c⁄° *
pSåög
, *
nLígthTokí0
, *
nLígthTokí1
);

52 
	#TOKEN_TEXT_ANSI
 0

53 
	#TOKEN_ANSI
 1

54 

	)

57 *
	mpSåög
;

58 
	maC⁄åﬁ
[256];

59 } 
	tMUX_STRTOK_STATE
;

61 
mux_°πok_§c
(
MUX_STRTOK_STATE
 *
âs
, *
pSåög
);

62 
mux_°πok_˘l
(
MUX_STRTOK_STATE
 *
âs
, *
pC⁄åﬁ
);

63 *
mux_°πok_∑r£LEN
(
MUX_STRTOK_STATE
 *
âs
, *
≤Lí
);

64 *
mux_°πok_∑r£
(
MUX_STRTOK_STATE
 *
âs
);

65 *
RemoveSëOfCh¨a˘îs
(*
pSåög
, *
pSëToRemove
);

67 
size_t
 
mux_…ﬂ
(
vÆ
, *
buf
);

68 *
mux_…ﬂ_t
(
vÆ
);

69 
ß„_…ﬂ
(
vÆ
, *
buff
, **
bufc
);

70 
size_t
 
mux_i64tﬂ
(
INT64
 
vÆ
, *
buf
);

71 *
mux_i64tﬂ_t
(
INT64
 
vÆ
);

72 
ß„_i64tﬂ
(
INT64
 
vÆ
, *
buff
, **
bufc
);

73 
mux_©ﬁ
(c⁄° *
pSåög
);

74 
INT64
 
mux_©oi64
(c⁄° *
pSåög
);

75 
mux_©of
(*
szSåög
, 
boﬁ
 
bSåi˘
 = 
åue
);

76 *
mux_·ﬂ
(
r
, 
boﬁ
 
bRounded
, 
‰ac
);

78 
boﬁ
 
is_öãgî
(*, *);

79 
boﬁ
 
is_øti⁄Æ
(*);

80 
boﬁ
 
is_ªÆ
(*);

82 #¥agm®
∑ck
(1)

85 
	mbN‹mÆ
:1;

86 
	mbBlök
:1;

87 
	mbHighlôe
:1;

88 
	mbInvî£
:1;

89 
	mbUndî
:1;

91 
	miF‹eground
:4;

92 
	miBackground
:4;

93 } 
	tANSI_Cﬁ‹Sèã
;

94 #¥agm®
∑ck
()

96 
	sANSI_In_C⁄ãxt


98 
ANSI_Cﬁ‹Sèã
 
	mm_acs
;

99 c⁄° *
	mm_p
;

100 
	mm_n
;

101 
boﬁ
 
	mm_bSawN‹mÆ
;

104 
	sANSI_Out_C⁄ãxt


106 
	mm_iEndGﬂl
;

107 
ANSI_Cﬁ‹Sèã
 
	mm_acs
;

108 
boﬁ
 
	mm_bD⁄e
;

109 *
	mm_p
;

110 
	mm_n
;

111 
	mm_nMax
;

112 
	mm_vw
;

113 
	mm_vwMax
;

116 
	#ANSI_ENDGOAL_NORMAL
 0

	)

117 
	#ANSI_ENDGOAL_NOBLEED
 1

	)

118 
	#ANSI_ENDGOAL_LEAK
 2

	)

120 
ANSI_Såög_In_Inô
(
ANSI_In_C⁄ãxt
 *
∑cIn
, c⁄° *
szSåög
, 
iEndGﬂl
);

121 
ANSI_Såög_Out_Inô
(
ANSI_Out_C⁄ãxt
 *
∑cOut
, *
pFõld
, 
nFõld
, 
vwMax
, 
iEndGﬂl
);

122 
ANSI_Såög_Skù
(
ANSI_In_C⁄ãxt
 *
∑cIn
, 
maxVisuÆWidth
, *
≤VisuÆWidth
);

123 
ANSI_Såög_C›y
(
ANSI_Out_C⁄ãxt
 *
∑cOut
, 
ANSI_In_C⁄ãxt
 *
∑cIn
, 
vwMax
);

124 
ANSI_Såög_FöÆize
(
ANSI_Out_C⁄ãxt
 *
∑cOut
, *
≤VisuÆWidth
);

125 *
ANSI_TrunˇãAndPad_sbuf
(c⁄° *
pSåög
, 
nMaxVisuÆWidth
, 
fûl
 = ' ');

126 
ANSI_TrunˇãToFõld
(c⁄° *
szSåög
, 
nFõld
, *
pFõld
, 
maxVisuÆ
, *
nVisuÆWidth
, 
iEndGﬂl
);

127 *
°rù_™si
(c⁄° *
szSåög
, 
size_t
 *
≤Såög
 = 0);

128 *
°rù_ac˚¡s
(c⁄° *
szSåög
, 
size_t
 *
≤Såög
 = 0);

129 *
n‹mÆ_to_whôe
(const *);

130 *
munge_•a˚
(const *);

131 *
åim_•a˚s
(*);

132 *
gøbto
(**, );

133 
°rög_com∑ª
(const *, const *);

134 
°rög_¥efix
(const *, const *);

135 c⁄° * 
°rög_m©ch
(const * ,const *);

136 *
ª∂a˚_°rög
(const *, const *, const *);

137 *
ª∂a˚_tokís


139 c⁄° *
s
,

140 c⁄° *
pBound
,

141 c⁄° *
pLi°Pœ˚
,

142 c⁄° *
pSwôch


145 
¥efix_m©ch
(const *, const *);

146 *
Buf„rCl⁄eLí
(c⁄° *
pBuf„r
, 
nBuf„r
);

148 
boﬁ
 
möm©ch
(*
°r
, *
èrgë
, 
mö
);

149 *
SåögCl⁄eLí
(c⁄° *
°r
, 
size_t
 
nSå
);

150 *
SåögCl⁄e
(c⁄° *
°r
);

151 
ß„_c›y_°r
(c⁄° *
§c
, *
buff
, **
buÂ
, 
max
);

152 
ß„_c›y_°r_lbuf
(c⁄° *
§c
, *
buff
, **
buÂ
);

153 
size_t
 
ß„_c›y_buf
(c⁄° *
§c
, size_à
nLí
, *
buff
, **
buÂ
);

154 
size_t
 
ß„_fûl
(*
buff
, **
bufc
, 
chFûe
, size_à
nS∑˚s
);

155 
boﬁ
 
m©ches_exô_‰om_li°
(*, const *);

156 *
å™¶©e_°rög
(c⁄° *, 
boﬁ
);

157 
mux_°ricmp
(c⁄° *
a
, c⁄° *
b
);

158 
mux_memicmp
(c⁄° *
p1_¨g
, c⁄° *
p2_¨g
, 
size_t
 
n
);

159 
mux_°æwr
(*
ç
);

160 
mux_°ru¥
(*
a
);

162 
	sèg_ôl


164 
boﬁ
 
	mbFú°
;

165 
	mchPªfix
;

166 
	mchSï
;

167 *
	mbuff
;

168 **
	mbufc
;

169 
size_t
 
	mnBuf„rAvaûabÀ
;

170 } 
	tITL
;

172 
IãmToLi°_Inô
(
ITL
 *
pC⁄ãxt
, *
¨g_buff
, **
¨g_bufc
,

173 
¨g_chPªfix
 = 0, 
¨g_chSï
 = ' ');

174 
boﬁ
 
IãmToLi°_AddI¡egî
(
ITL
 *
pC⁄ãxt
, 
i
);

175 
boﬁ
 
IãmToLi°_AddSåög
(
ITL
 *
pC⁄ãxt
, *
pSå
);

176 
boﬁ
 
IãmToLi°_AddSåögLEN
(
ITL
 *
pC⁄ãxt
, 
size_t
 
nSå
, *
pSå
);

177 
IãmToLi°_FöÆ
(
ITL
 *
pC⁄ãxt
);

179 
DCL_CDECL
 
mux_v¢¥ötf
(*
buff
, 
cou¡
, c⁄° *
fmt
, 
va_li°
 
va
);

180 
GëLöeTrunc
(*
Buf„r
, 
size_t
 
nBuf„r
, 
FILE
 *
Â
);

184 
	mm_d
[256];

185 
	mm_skù2
;

186 } 
	tBMH_Sèã
;

188 
BMH_Pª∑ª
(
BMH_Sèã
 *
bmhs
, 
nP©
, c⁄° *
pP©
);

189 
BMH_Execuã
(
BMH_Sèã
 *
bmhs
, 
nP©
, c⁄° *
pP©
, 
nSrc
, c⁄° *
pSrc
);

190 
BMH_SåögSórch
(
nP©
, c⁄° *
pP©
, 
nSrc
, c⁄° *
pSrc
);

191 
BMH_Pª∑ªI
(
BMH_Sèã
 *
bmhs
, 
nP©
, c⁄° *
pP©
);

192 
BMH_ExecuãI
(
BMH_Sèã
 *
bmhs
, 
nP©
, c⁄° *
pP©
, 
nSrc
, c⁄° *
pSrc
);

193 
BMH_SåögSórchI
(
nP©
, c⁄° *
pP©
, 
nSrc
, c⁄° *
pSrc
);

195 
	sAπRuÀ£t


197 
AπRuÀ£t
* 
	mm_pNextRuÀ
;

199 * 
	mm_pRegexp
;

200 *
	mm_pRegexpStudy
;

201 
	mm_bU£An
;

206 
	miLódögSign
;

207 
	miSåög
;

208 c⁄° *
	mpDigôsA
;

209 
size_t
 
	mnDigôsA
;

210 c⁄° *
	mpDigôsB
;

211 
size_t
 
	mnDigôsB
;

212 
	miExp⁄ítSign
;

213 c⁄° *
	mpDigôsC
;

214 
size_t
 
	mnDigôsC
;

215 c⁄° *
	mpMót
;

216 
size_t
 
	mnMót
;

218 } 
	tPARSE_FLOAT_RESULT
;

220 
boﬁ
 
P¨£Flﬂt
(
PARSE_FLOAT_RESULT
 *
p‰
, c⁄° *
°r
, boﬁ 
bSåi˘
 = 
åue
);

	@svdhash.h

9 #i‚de‡
SVDHASH_H


10 
	#SVDHASH_H


	)

14 
	#SECTOR_SIZE
 512

	)

15 
	#LBUF_BLOCKED
 (
SECTOR_SIZE
*((
LBUF_SIZE
+SECTOR_SIZE-1)/SECTOR_SIZE))

	)

16 
	#HT_SIZEOF_PAGE
 (1*
LBUF_BLOCKED
)

	)

17 
	#HF_SIZEOF_PAGE
 (3*
LBUF_BLOCKED
)

	)

19 
UINT32
 
CRC32_Pro˚ssBuf„r


21 
UINT32
 
ulCrc
,

22 c⁄° *
pBuf„r
,

23 
nBuf„r


26 
UINT32
 
CRC32_Pro˚ssI¡egî
(UINT32 
nI¡egî
);

27 
UINT32
 
CRC32_Pro˚ssI¡egî2


29 
UINT32
 
nI¡egî1
,

30 
UINT32
 
nI¡egî2


33 
UINT32
 
HASH_Pro˚ssBuf„r


35 
UINT32
 
ulHash
,

36 c⁄° *
¨g_pBuf„r
,

37 
size_t
 
nBuf„r


40 #i‡
_SGI_SOURCE
 || ((
UINT16_MAX_VALUE
-2Ë<
HF_SIZEOF_PAGE
)

41 
UINT32
 
	tUINT_OFFSET
;

42 
	#UINT_OFFSET_MAX_VALUE
 
UINT32_MAX_VALUE


	)

43 
	#EXPAND_TO_BOUNDARY
(
x
Ë(((xË+ 3Ë& (~3))

	)

45 
UINT16
 
	tUINT_OFFSET
;

46 
	#UINT_OFFSET_MAX_VALUE
 
UINT16_MAX_VALUE


	)

47 
	#EXPAND_TO_BOUNDARY
(
x
Ë(((xË+ 1Ë& (~1))

	)

50 
UINT_OFFSET
 
	tHP_HEAPOFFSET
, *
	tHP_PHEAPOFFSET
;

51 
UINT_OFFSET
 
	tHP_HEAPLENGTH
, *
	tHP_PHEAPLENGTH
;

52 
UINT_OFFSET
 
	tHP_DIRINDEX
, *
	tHP_PDIRINDEX
;

54 
	#HP_SIZEOF_HEAPOFFSET
 (
HP_HEAPOFFSET
)

	)

55 
	#HP_SIZEOF_HEAPLENGTH
 (
HP_HEAPLENGTH
)

	)

56 
	#HP_SIZEOF_DIRINDEX
 (
HP_DIRINDEX
);

	)

58 #¥agm®
∑ck
(1)

59 
	sègHPHódî


61 
UINT32
 
	mm_nTŸÆIn£π
;

62 
UINT32
 
	mm_nDúEm±yLe·
;

63 
UINT32
 
	mm_nHashGroup
;

64 
HP_DIRINDEX
 
	mm_nDúSize
;

65 
HP_DIRINDEX
 
	mm_Primes
[16];

66 
HP_HEAPOFFSET
 
	mm_oFªeLi°
;

67 
HP_DIRINDEX
 
	mm_nDïth
;

68 } 
	tHP_HEADER
, *
	tHP_PHEADER
;

70 
	#HP_NIL_OFFSET
 
UINT_OFFSET_MAX_VALUE


	)

74 
	#HP_DIR_EMPTY
 
UINT_OFFSET_MAX_VALUE


	)

75 
	#HP_DIR_DELETED
 (
UINT_OFFSET_MAX_VALUE
-1)

	)

77 
	sègHPTøûî


79 
UINT32
 
	mm_checksum
;

80 } 
	tHP_TRAILER
, *
	tHP_PTRAILER
;

82 
	sègHPHópNode


84 
HP_HEAPLENGTH
 
	mnBlockSize
;

87 
HP_HEAPOFFSET
 
	moNext
;

90 
HP_HEAPLENGTH
 
	mnRec‹dSize
;

91 
UINT32
 
	mnHash
;

92 } 
	ms
;

93 } 
	mu
;

94 } 
	tHP_HEAPNODE
, *
	tHP_PHEAPNODE
;

95 
	#HP_SIZEOF_HEAPNODE
 (
HP_HEAPNODE
)

	)

96 #¥agm®
∑ck
()

98 
	#HP_MIN_HEAP_ALLOC
 
HP_SIZEOF_HEAPNODE


	)

100 
	tHF_FILEOFFSET
, *
	tHF_PFILEOFFSET
;

101 
	#HF_SIZEOF_FILEOFFSET
 (
HF_FILEOFFSET
)

	)

103 ˛as†
	cCHashPage


105 
	m¥iv©e
:

106 *
m_pPage
;

107 
	mm_nPageSize
;

108 
HP_PHEADER
 
	mm_pHódî
;

109 
HP_PHEAPOFFSET
 
	mm_pDúe˘‹y
;

110 *
	mm_pHópSèπ
;

111 *
	mm_pHópEnd
;

112 
HP_PTRAILER
 
	mm_pTøûî
;

114 
	mm_iDú
;

115 
	mm_nProbesLe·
;

116 
UINT32
 
	mm_nDúEm±yTriggî
;

118 #ifde‡
HP_PROTECTION


119 
boﬁ
 
VÆid©eAŒoˇãdBlock
(
UINT32
 
iDú
);

120 
boﬁ
 
VÆid©eFªeBlock
(
HP_HEAPOFFSET
 
oBlock
);

121 
boﬁ
 
VÆid©eFªeLi°
();

123 
boﬁ
 
HópAŒoc
(
HP_DIRINDEX
 
iDú
, 
HP_HEAPLENGTH
 
nRec‹d
, 
UINT32
 
nHash
, *
pRec‹d
);

124 
SëV¨übÀPoöãrs
();

125 
SëFixedPoöãrs
();

126 
GëSèts
(
HP_HEAPLENGTH
 
nExåa
, *
≤Rec‹ds
, HP_HEAPLENGTH *
≤AŒoˇãdSize
, *
≤GoodDúSize
);

128 
	mpublic
:

129 
CHashPage
();

130 
boﬁ
 
AŒoˇã
(
nPageSize
);

131 ~
CHashPage
();

132 
Em±y
(
HP_DIRINDEX
 
¨g_nDïth
, 
UINT32
 
¨g_nHashGroup
, HP_DIRINDEX 
¨g_nDúSize
);

133 #ifde‡
HP_PROTECTION


134 
PrŸe˘i⁄
();

135 
boﬁ
 
VÆid©e
();

138 
	#HP_INSERT_SUCCESS_DEFRAG
 0

	)

139 
	#HP_INSERT_SUCCESS
 1

	)

140 
	#HP_INSERT_ERROR_FULL
 2

	)

141 
	#HP_INSERT_ERROR_ILLEGAL
 3

	)

142 
	#IS_HP_SUCCESS
(
x
Ë((xË<
HP_INSERT_SUCCESS
)

	)

143 
In£π
(
HP_HEAPLENGTH
 
nRec‹d
, 
UINT32
 
nHash
, *
pRec‹d
);

144 
HP_DIRINDEX
 
FödFú°Key
(
UINT32
 
nHash
, *
numchecks
);

145 
HP_DIRINDEX
 
FödNextKey
(HP_DIRINDEX 
i
, 
UINT32
 
nHash
, *
numchecks
);

146 
HP_DIRINDEX
 
FödFú°
(
HP_PHEAPLENGTH
 
≤Rec‹d
, *
pRec‹d
);

147 
HP_DIRINDEX
 
FödNext
(
HP_PHEAPLENGTH
 
≤Rec‹d
, *
pRec‹d
);

148 
HópC›y
(
HP_DIRINDEX
 
iDú
, 
HP_PHEAPLENGTH
 
≤Rec‹d
, *
pRec‹d
);

149 
HópFªe
(
HP_DIRINDEX
 
iDú
);

150 
HópUpd©e
(
HP_DIRINDEX
 
iDú
, 
HP_HEAPLENGTH
 
nRec‹d
, *
pRec‹d
);

152 
boﬁ
 
WrôePage
(
HANDLE
 
hFûe
, 
HF_FILEOFFSET
 
oWhîe
);

153 
boﬁ
 
RódPage
(
HANDLE
 
hFûe
, 
HF_FILEOFFSET
 
oWhîe
);

155 
HP_DIRINDEX
 
GëDïth
();

156 
boﬁ
 
S∂ô
(
CHashPage
 &
hp0
, CHashPagê&
hp1
);

158 
boﬁ
 
De‰ag
(
HP_HEAPLENGTH
 
nExåa
);

159 
GëR™ge
(
UINT32
 
¨g_nDúDïth
, UINT32 &
nSèπ
, UINT32 &
nEnd
);

163 
	#HF_FIND_FIRST
 
HP_DIR_EMPTY


	)

164 
	#HF_FIND_END
 
HP_DIR_EMPTY


	)

166 
	#HF_CACHE_EMPTY
 0

	)

167 
	#HF_CACHE_CLEAN
 1

	)

168 
	#HF_CACHE_UNPROTECTED
 2

	)

169 
	#HF_CACHE_UNWRITTEN
 3

	)

170 
	#HF_CACHE_NUM_STATES
 4

	)

172 
	sègHashFûeCache


174 
CHashPage
 
	mm_hp
;

175 
HF_FILEOFFSET
 
	mm_o
;

176 
	mm_iSèã
;

177 
	mm_iYoungî
;

178 
	mm_iOldî
;

179 } 
	tHF_CACHE
;

181 ˛as†
	cCHashFûe


183 
	m¥iv©e
:

184 
HANDLE
 
m_hDúFûe
;

185 
HANDLE
 
	mm_hPageFûe
;

186 
	miCache
;

187 
	mm_iOlde°
;

188 
	mm_iLa°Flushed
;

189 *
	mm_hpCacheLookup
;

190 
HF_FILEOFFSET
 
	moEndOfFûe
;

191 
	mm_nDú
;

192 
	mm_nDúDïth
;

193 
HF_CACHE
 *
	mm_Cache
;

194 
	mm_nCache
;

195 
HF_PFILEOFFSET
 
	mm_pDú
;

196 
boﬁ
 
DoubÀDúe˘‹y
();

198 
AŒoˇãEm±yPage
(
nSa„
, 
Sa„
[]);

199 
RódCache
(
UINT32
 
iFûeDú
, *
pHôs
);

200 
boﬁ
 
FlushCache
(
iCache
);

201 
WrôeDúe˘‹y
();

202 
boﬁ
 
InôülizeDúe˘‹y
(
nSize
);

203 
Re£tAge
(
iE¡ry
);

205 
Inô
();

206 
InôCache
(
nCachePages
);

207 
FöÆCache
();

209 
boﬁ
 
Cª©eFûeSë
(c⁄° *
szDúFûe
, c⁄° *
szPageFûe
);

210 
boﬁ
 
RebuûdDúe˘‹y
();

211 
boﬁ
 
RódDúe˘‹y
();

213 
	mpublic
:

214 
CHashFûe
();

215 
	#HF_OPEN_STATUS_ERROR
 -1

	)

216 
	#HF_OPEN_STATUS_NEW
 0

	)

217 
	#HF_OPEN_STATUS_OLD
 1

	)

218 
O≥n
(c⁄° *
szDúFûe
, c⁄° *
szPageFûe
, 
nCachePages
);

219 
boﬁ
 
In£π
(
HP_HEAPLENGTH
 
nRec‹d
, 
UINT32
 
nHash
, *
pRec‹d
);

220 
HP_DIRINDEX
 
FödFú°Key
(
UINT32
 
nHash
);

221 
HP_DIRINDEX
 
FödNextKey
(HP_DIRINDEX 
iDú
, 
UINT32
 
nHash
);

222 
C›y
(
HP_DIRINDEX
 
iDú
, 
HP_PHEAPLENGTH
 
≤Rec‹d
, *
pRec‹d
);

223 
Remove
(
HP_DIRINDEX
 
iDú
);

224 
Clo£AŒ
();

225 
Sync
();

226 
Tick
();

227 ~
CHashFûe
();

230 
CHashPage
 *
	tpCHashPage
;

232 ˛as†
	cCHashTabÀ


234 
	m¥iv©e
:

235 
m_nDú
;

236 
	mm_nDúDïth
;

237 
pCHashPage
 *
	mm_pDú
;

238 
CHashPage
 *
	mm_hpLa°
;

239 
	mm_iPage
;

241 
	mm_nPages
;

242 
	mm_nE¡rõs
;

243 
INT64
 
	mm_nDñëi⁄s
;

244 
INT64
 
	mm_nSˇns
;

245 
INT64
 
	mm_nHôs
;

246 
INT64
 
	mm_nChecks
;

247 
	mm_nMaxSˇn
;

249 
boﬁ
 
DoubÀDúe˘‹y
();

251 
Inô
();

252 
FöÆ
();

254 
	mpublic
:

255 
CHashTabÀ
();

256 
Re£tSèts
();

257 
GëSèts
–*
hashsize
, *
íåõs
, 
INT64
 *
dñëes
,

258 
INT64
 *
sˇns
, INT64 *
hôs
, INT64 *
checks
, *
max_sˇn
);

259 
INT64
 
GëE¡ryCou¡
();

261 
Re£t
();

262 
boﬁ
 
In£π
(
HP_HEAPLENGTH
 
nRec‹d
, 
UINT32
 
nHash
, *
pRec‹d
);

263 
HP_DIRINDEX
 
FödFú°Key
(
UINT32
 
nHash
);

264 
HP_DIRINDEX
 
FödNextKey
(HP_DIRINDEX 
iDú
, 
UINT32
 
nHash
);

265 
HP_DIRINDEX
 
FödFú°
(
HP_PHEAPLENGTH
 
≤Rec‹d
, *
pRec‹d
);

266 
HP_DIRINDEX
 
FödNext
(
HP_PHEAPLENGTH
 
≤Rec‹d
, *
pRec‹d
);

267 
C›y
(
HP_DIRINDEX
 
iDú
, 
HP_PHEAPLENGTH
 
≤Rec‹d
, *
pRec‹d
);

268 
Remove
(
HP_DIRINDEX
 
iDú
);

269 
Upd©e
(
HP_DIRINDEX
 
iDú
, 
HP_HEAPLENGTH
 
nRec‹d
, *
pRec‹d
);

270 ~
CHashTabÀ
();

274 
	#SIZEOF_LOG_BUFFER
 1024

	)

275 ˛as†
	cCLogFûe


277 
	m¥iv©e
:

278 
CLöórTimeAbsﬁuã
 
m_…aSèπed
;

279 #ifde‡
WIN32


280 
CRITICAL_SECTION
 
	mcsLog
;

282 
HANDLE
 
	mm_hFûe
;

283 
size_t
 
	mm_nSize
;

284 
size_t
 
	mm_nBuf„r
;

285 
	mm_aBuf„r
[
SIZEOF_LOG_BUFFER
];

286 
boﬁ
 
	mbE«bÀd
;

287 
boﬁ
 
	mbU£Stdîr
;

288 *
	mm_pBa£«me
;

289 
	mm_szPªfix
[32];

290 
	mm_szFûíame
[
SIZEOF_PATHNAME
];

292 
Cª©eLogFûe
();

293 
AµídLogFûe
();

294 
Clo£LogFûe
();

295 
	mpublic
:

296 
CLogFûe
();

297 ~
CLogFûe
();

298 
WrôeBuf„r
(
size_t
 
nSåög
, c⁄° *
pSåög
);

299 
WrôeSåög
(c⁄° *
pSåög
);

300 
WrôeI¡egî
(
iNumbî
);

301 
DCL_CDECL
 
töy¥ötf
(*
pF‹m©S≥c
, ...);

302 
Flush
();

303 
SëPªfix
(c⁄° *
pPªfix
);

304 
SëBa£«me
(c⁄° *
pBa£«me
);

305 
SèπLoggög
();

306 
St›Loggög
();

309 
CLogFûe
 
Log
;

	@svdrand.h

12 #i‚de‡
SVDRAND_H


13 
	#SVDRAND_H


	)

15 
SìdR™domNumbîGíî©‹
();

16 
R™domFlﬂt
(
ÊLow
, 
ÊHigh
);

17 
INT32
 
R™domINT32
(INT32 
lLow
, INT32 
lHigh
);

19 #ifde‡
WIN32


20 
boﬁ
 
bCry±oAPI
;

	@svdreport.h

	@timeutil.h

12 #i‚de‡
TIMEUTIL_H


13 
	#TIMEUTIL_H


	)

17 
	miYór
;

18 
	miM⁄th
;

19 
	miDayOfWìk
;

20 
	miDayOfM⁄th
;

21 
	miDayOfYór
;

22 
	miHour
;

23 
	miMöuã
;

24 
	miSec⁄d
;

25 
	miMûli£c⁄d
;

26 
	miMi¸o£c⁄d
;

27 
	miN™o£c⁄d
;

28 } 
	tFIELDEDTIME
;

30 
˛ass
 
	gCLöórTimeDñè
;

32 ˛as†
	cCLöórTimeAbsﬁuã


34 
‰õnd
 
˛ass
 
	mCLöórTimeDñè
;

35 
‰õnd
 
boﬁ
 
	m›î©‹
<(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…a
, c⁄° CLöórTimeAbsﬁuã& 
	m…b
);

36 
‰õnd
 
boﬁ
 
	m›î©‹
>(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…a
, c⁄° CLöórTimeAbsﬁuã& 
	m…b
);

37 
‰õnd
 
boﬁ
 
	m›î©‹
==(c⁄° 
CLöórTimeAbsﬁuã
& 
…a
, c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…b
);

38 
‰õnd
 
boﬁ
 
	m›î©‹
<=(c⁄° 
CLöórTimeAbsﬁuã
& 
…a
, c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…b
);

39 
‰õnd
 
CLöórTimeAbsﬁuã
 
	m›î©‹
+(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…a
, c⁄° 
	mCLöórTimeDñè
& 
	m…d
);

40 
‰õnd
 
CLöórTimeAbsﬁuã
 
	m›î©‹
-(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…a
, c⁄° 
	mCLöórTimeDñè
& 
	m…d
);

41 
‰õnd
 
CLöórTimeDñè
 
	m›î©‹
-(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…a
, c⁄° CLöórTimeAbsﬁuã& 
	m…b
);

43 
	m¥iv©e
:

44 
INT64
 
m_tAbsﬁuã
;

45 
	mm_nCou¡
;

46 
	mm_Buf„r
[204];

48 
	mpublic
:

50 
CLöórTimeAbsﬁuã
();

51 
CLöórTimeAbsﬁuã
(c⁄° CLöórTimeAbsﬁuã& 
…aOrigö
, c⁄° 
CLöórTimeDñè
& 
…dOff£t
);

52 
CLöórTimeAbsﬁuã
(c⁄° CLöórTimeAbsﬁuã& 
…a
);

53 
	m›î©‹
=(c⁄° 
CLöórTimeAbsﬁuã
& 
…a
);

54 
	m›î©‹
+=(c⁄° 
CLöórTimeDñè
& 
…dOff£t
);

55 
	m›î©‹
-=(c⁄° 
CLöórTimeDñè
& 
…dOff£t
);

57 
GëUTC
();

58 
GëLoˇl
();

60 
Rëu∫UniqueSåög
(*
buf„r
);

61 *
Rëu∫D©eSåög
(
nFøcDigôs
 = 0);

62 
boﬁ
 
Rëu∫Fõlds
(
FIELDEDTIME
 *
¨g_tSåu˘
);

63 
INT64
 
Rëu∫Sec⁄ds
();

64 *
Rëu∫Sec⁄dsSåög
(
nFøcDigôs
 = 0);

65 
INT64
 
Rëu∫100ns
();

67 
SëSec⁄ds
(
INT64
 
¨g_tSec⁄ds
);

68 
SëSec⁄dsSåög
(*
¨g_szSec⁄ds
);

69 
boﬁ
 
SëFõlds
(
FIELDEDTIME
 *
¨g_tSåu˘
);

70 
boﬁ
 
SëSåög
(c⁄° *
¨g_tBuf„r
);

71 
Së100ns
(
INT64
 
¨g_t100ns
);

73 
UTC2Loˇl
();

74 
Loˇl2UTC
();

77 
boﬁ
 
FõldedTimeToLöórTime
(
FIELDEDTIME
 *
·
, 
INT64
 *
∂t
);

78 
boﬁ
 
LöórTimeToFõldedTime
(
INT64
 
…
, 
FIELDEDTIME
 *
·
);

80 ˛as†
	cCLöórTimeDñè


82 
‰õnd
 
˛ass
 
	mCLöórTimeAbsﬁuã
;

83 
‰õnd
 
boﬁ
 
	m›î©‹
<(c⁄° 
	mCLöórTimeDñè
& 
	m…a
, c⁄° CLöórTimeDñè& 
	m…b
);

84 
‰õnd
 
boﬁ
 
	m›î©‹
>(c⁄° 
	mCLöórTimeDñè
& 
	m…a
, c⁄° CLöórTimeDñè& 
	m…b
);

85 
‰õnd
 
boﬁ
 
	m›î©‹
==(c⁄° 
CLöórTimeDñè
& 
…a
, c⁄° 
	mCLöórTimeDñè
& 
	m…b
);

86 
‰õnd
 
boﬁ
 
	m›î©‹
<=(c⁄° 
CLöórTimeDñè
& 
…a
, c⁄° 
	mCLöórTimeDñè
& 
	m…b
);

87 
‰õnd
 
boﬁ
 
	m›î©‹
!=(c⁄° 
CLöórTimeDñè
& 
…a
, c⁄° 
	mCLöórTimeDñè
& 
	m…b
);

88 
‰õnd
 
CLöórTimeDñè
 
	m›î©‹
-(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…a
, c⁄° CLöórTimeAbsﬁuã& 
	m…b
);

89 
‰õnd
 
CLöórTimeDñè
 
	m›î©‹
-(c⁄° 
	mCLöórTimeDñè
& 
	m…a
, c⁄° CLöórTimeDñè& 
	m…b
);

90 
‰õnd
 
	m›î©‹
/(c⁄° 
	mCLöórTimeDñè
& 
	m…dA
, c⁄° CLöórTimeDñè& 
	m…dB
);

91 
‰õnd
 
CLöórTimeDñè
 
	m›î©‹
*(c⁄° 
	mCLöórTimeDñè
& 
	m…dA
, 
	mnSˇÀr
);

92 
‰õnd
 
CLöórTimeAbsﬁuã
 
	m›î©‹
+(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…dA
, c⁄° 
	mCLöórTimeDñè
& 
	m…dB
);

93 
‰õnd
 
CLöórTimeAbsﬁuã
 
	m›î©‹
-(c⁄° 
	mCLöórTimeAbsﬁuã
& 
	m…a
, c⁄° 
	mCLöórTimeDñè
& 
	m…d
);

95 
	m¥iv©e
:

96 
INT64
 
m_tDñè
;

97 
	mm_Buf„r
[204];

99 
	mpublic
:

100 
CLöórTimeDñè
();

101 
CLöórTimeDñè
(
INT64
 
¨g_t100ns
);

102 
CLöórTimeDñè
(
CLöórTimeAbsﬁuã
, CLinearTimeAbsolute);

104 
Rëu∫TimeVÆueSåu˘
(
timevÆ
 *
tv
);

105 #ifde‡
HAVE_NANOSLEEP


106 
Rëu∫TimeS≥cSåu˘
(
time•ec
 *
ts
);

108 
Rëu∫Mûli£c⁄ds
();

109 
INT64
 
Rëu∫Mi¸o£c⁄ds
();

110 
Rëu∫Days
();

111 
Rëu∫Sec⁄ds
();

112 *
Rëu∫Sec⁄dsSåög
(
nFøcDigôs
 = 0);

113 
INT64
 
Rëu∫100ns
();

115 
SëTimeVÆueSåu˘
(
timevÆ
 *
tv
);

116 
SëMûli£c⁄ds
(
¨g_dwMûli£c⁄ds
);

117 
SëSec⁄ds
(
INT64
 
¨g_tSec⁄ds
);

118 
SëSec⁄dsSåög
(*
¨g_szSec⁄ds
);

119 
Së100ns
(
INT64
 
¨g_t100ns
);

121 
	m›î©‹
+=(c⁄° 
CLöórTimeDñè
& 
…d
);

124 ˛as†
	cCMuxAœrm


126 
	m¥iv©e
:

127 
boﬁ
 
bAœrmSë
;

128 #ifde‡
WIN32


129 
HANDLE
 
	mhThªad
;

132 
	mpublic
:

133 
boﬁ
 
bAœrmed
;

135 #ifde‡
WIN32


136 vﬁ©ûê
HANDLE
 
	mhSemAœrm
;

137 vﬁ©ûê
DWORD
 
	mdwWaô
;

138 ~
CMuxAœrm
();

141 
CMuxAœrm
();

142 
SÀï
(
CLöórTimeDñè
 
…d
);

143 
SuºídîSli˚
();

145 
Së
(
CLöórTimeDñè
 
…dDódlöe
);

146 
CÀ¨
();

148 #i‚de‡
WIN32


149 
Sig«l
();

153 
CMuxAœrm
 
MuxAœrm
;

155 
	#FACTOR_NANOSECONDS_PER_100NS
 100

	)

156 
	#FACTOR_100NS_PER_MICROSECOND
 10

	)

157 
	#FACTOR_100NS_PER_MILLISECOND
 10000

	)

158 #ifde‡
WIN32


159 
	#EPOCH_OFFSET
 116444736000000000
i64


	)

161 
	#EPOCH_OFFSET
 116444736000000000uŒ

	)

163 c⁄° 
INT64
 
FACTOR_100NS_PER_SECOND
;

164 c⁄° 
INT64
 
FACTOR_100NS_PER_MINUTE
;

165 c⁄° 
INT64
 
FACTOR_100NS_PER_HOUR
;

166 c⁄° 
INT64
 
FACTOR_100NS_PER_DAY
;

167 c⁄° 
INT64
 
FACTOR_100NS_PER_WEEK
;

169 c⁄° 
CLöórTimeDñè
 
	gtime_250ms
 = 250*
FACTOR_100NS_PER_MILLISECOND
;

170 c⁄° 
CLöórTimeDñè
 
	gtime_1s
 = 
FACTOR_100NS_PER_SECOND
;

171 c⁄° 
CLöórTimeDñè
 
	gtime_15s
 = 15*
FACTOR_100NS_PER_SECOND
;

172 c⁄° 
CLöórTimeDñè
 
	gtime_30s
 = 30*
FACTOR_100NS_PER_SECOND
;

173 c⁄° 
CLöórTimeDñè
 
	gtime_45s
 = 45*
FACTOR_100NS_PER_SECOND
;

174 c⁄° 
CLöórTimeDñè
 
	gtime_15m
 = 15*
FACTOR_100NS_PER_MINUTE
;

175 c⁄° 
CLöórTimeDñè
 
	gtime_30m
 = 30*
FACTOR_100NS_PER_MINUTE
;

176 c⁄° 
CLöórTimeDñè
 
	gtime_1w
 = 
FACTOR_100NS_PER_WEEK
;

178 
TIME_Inôülize
();

179 #ifde‡
WIN32


180 
BOOL
 
CÆibøãQuîyPîf‹m™˚
();

183 #ifde‡
SMALLEST_INT_GTE_NEG_QUOTIENT


184 
INT64
 
i64Mod
(INT64 
x
, INT64 
y
);

185 
INT64
 
i64Flo‹Divisi⁄
(INT64 
x
, INT64 
y
);

186 
DCL_INLINE
 
INT64
 
	$i64Divisi⁄
(
INT64
 
x
, INT64 
y
Ë{  x / y; 
	}
}

187 
DCL_INLINE
 
INT64
 
	$i64Remaödî
(
INT64
 
x
, INT64 
y
Ë{  x % y; 
	}
}

188 
iFlo‹Divisi⁄Mod
(
x
, 
y
, *
piMod
);

190 
DCL_INLINE
 
INT64
 
	$i64Mod
(
INT64
 
x
, INT64 
y
Ë{  x % y; 
	}
}

191 
DCL_INLINE
 
INT64
 
	$i64Flo‹Divisi⁄
(
INT64
 
x
, INT64 
y
Ë{  x / y; 
	}
}

192 
INT64
 
i64Divisi⁄
(INT64 
x
, INT64 
y
);

193 
INT64
 
i64Remaödî
(INT64 
x
, INT64 
y
);

194 
DCL_INLINE
 
iFlo‹Divisi⁄Mod
(
x
, 
y
, *
piMod
) \

196 *
	gpiMod
 = 
x
 % 
y
; \

197  
	gx
 / 
	gy
; \

202 
boﬁ
 
P¨£D©e
(
CLöórTimeAbsﬁuã
 &
…a
, *
pD©eSåög
, boﬁ *
pbZ⁄eS≥cifõd
);

203 
boﬁ
 
isLópYór
(
iYór
);

	@tools/announce.c

12 
	#PORT
 2860

	)

14 
	~<sys/∑øm.h
>

15 
	~<sys/sockë.h
>

16 
	~<sys/ty≥s.h
>

17 
	~<sys/time.h
>

18 
	~<sys/ªsour˚.h
>

19 
	~<√töë/ö.h
>

20 
	~<√tdb.h
>

21 
	~<sig«l.h
>

22 
	~<°dio.h
>

23 
	~<˘y≥.h
>

25 *
	gName
;

26 
	gmsg
[8192];

27 
size_t
 
	gnmsg
;

29 
	$maö
(
¨gc
, *
¨gv
[])

31 
s
;

32 
ns
;

33 
foo
;

34 
sockaddr_ö
 
sö
 = {
AF_INET
};

35 *
ho°
;

36 *
	`öë_¡ﬂ
();

37 
˘
;

38 
ch
;

39 *
p
;

40 
›t
;

44 
Name
 = 
¨gv
[0];

48 
sö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
Ë
PORT
);

49 
¨gc
--;

50 
¨gv
++;

51 i‡(
¨gc
 > 0)

55 
sö
.
sö_p‹t
 = 
	`©oi
(*
¨gv
);

56 
sö
.
sö_p‹t
 = 
	`ht⁄s
((
u_sh‹t
) sin.sin_port);

61 
p
 = 
msg
;

62  (
ch
 = 
	`gëch¨
()Ë!
EOF


63 && 
p
 + 2 < 
msg
 + (msg))

65 i‡(
ch
 != '\r')

67 i‡(
ch
 == '\n')

69 *
p
++ = '\r';

71 *
p
++ = 
ch
;

74 *
p
 = '\0';

75 
nmsg
 = 
p
 - 
msg
;

77 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

78 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

79 i‡(
s
 < 0)

81 
	`≥º‹
("announce: socket");

82 
	`exô
(1);

84 
›t
 = 1;

85 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
›t
, (opt)) < 0)

87 
	`≥º‹
("setsockopt");

89 i‡(
	`böd
(
s
, (
sockaddr
 *)&
sö
,  sin) < 0)

91 
	`≥º‹
("bind");

92 
	`exô
(1);

94 i‡((
foo
 = 
	`f‹k
()) != 0)

96 
	`Ârötf
(
°dîr
, "™noun˚:Öid %dÑu¬ög o¿p‹à%d\n", 
foo
,

97 
	`¡ohs
((
u_sh‹t
Ë
sö
.
sö_p‹t
));

98 
	`_exô
(0);

102 
	`£çri‹ôy
(
PRIO_PROCESS
, 
	`gëpid
(), 10);

104 i‡(
	`li°í
(
s
, 1) < 0)

108 
	`≥º‹
("announce:Üisten");

109 
	`_exô
(1);

111 
foo
 =  
sö
;

116 
ns
 = 
	`ac˚±
(
s
, (
sockaddr
 *)&
sö
, &
foo
);

117 i‡(
ns
 < 0)

119 
	`≥º‹
("announce:áccept");

120 
	`_exô
(1);

122 
ho°
 = 
	`öë_¡ﬂ
(
sö
.
sö_addr
);

123 
˘
 = 
	`time
(0L);

124 
	`Ârötf
(
°dîr
, "CONNECTION made from %sát %s",

125 
ho°
, 
	`˘ime
(&
˘
));

126 
	`wrôe
(
ns
, 
msg
, 
nmsg
);

127 
	`¶ìp
(5);

128 
	`˛o£
(
ns
);

130 
	}
}

	@tools/dbpuller.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

10 
	~<˘y≥.h
>

14 
	#MALSIZE
 16535

	)

16 
	#SBUFSIZE
 65

	)

18 
	$°ricmp
(*
buf1
, *
buf2
)

20 *
p1
, *
p2
;

22 
p1
 = 
buf1
;

23 
p2
 = 
buf2
;

24 (*
p1
 !'\0'Ë&& (*
p2
 !'\0'Ë&& (
	`tﬁowî
(*p1) ==Åolower(*p2))) {

25 
p1
++;

26 
p2
++;

28 i‡((*
p1
 ='\0'Ë&& (*
p2
 == '\0'))

30 i‡(*
p1
 == '\0')

32 i‡(*
p2
 == '\0')

34 i‡(*
p1
 < *
p2
)

37 
	}
}

39 
	$maö
(
¨gc
, **
¨gv
)

41 
FILE
 *
f_muxÊ©
, *
f_mymuxfûe
, *
f_mux©ås
, *
f_muxout
, *
f_muxlock
;

42 *
±1
, *
•t2
, *
•t3
, *
±2
, *
±3
, 
s_©åib
[
SBUFSIZE
],

43 
s_©åvÆ
[
SBUFSIZE
], 
s_©å
[SBUFSIZE], 
s_fö©å
[SBUFSIZE];

44 
i_chk
 = 0, 
i_lck
 = 1, 
i_©r˙å
 = 0, 
i_©r˙å2
 = 0;

46 i‡–
¨gc
 < 3 ) {

47 
	`Ârötf
(
°dîr
, "Sy¡ax: %†mux-Ê©fûêdbªf# (nÿ¥e˚edög # ch¨a˘îË[›ti⁄Æáâribuã-«me]\r\n", 
¨gv
[0]);

48 
	`exô
(1);

50 i‡–(
f_muxÊ©
 = 
	`f›í
(
¨gv
[1], "r")Ë=
NULL
 ) {

51 
	`Ârötf
(
°dîr
, "ERROR: U«bÀÅÿ›í %†f‹Ñódög.", 
¨gv
[1]);

52 
	`exô
(1);

54 
±1
 = 
¨gv
[2];

55 *
±1
) {

56 i‡–!
	`isdigô
(*
±1
) ) {

57 
	`Ârötf
(
°dîr
, "ERROR: Dbref# must beán integer (no #Öreceeding) [optionaláttribute-name]\r\n");

58 
	`f˛o£
(
f_muxÊ©
);

59 
	`exô
(1);

61 
±1
++;

63 i‡–(
f_mymuxfûe
 = 
	`f›í
("mymuxfûe.d©", "w")Ë=
NULL
 ) {

64 
	`Ârötf
(
°dîr
, "ERROR: UnableÅo open output file foráttribute header information (mymuxfile.dat)\r\n");

65 
	`f˛o£
(
f_muxÊ©
);

66 
	`exô
(1);

68 
	`mem£t
(
s_©åib
, '\0', (s_attrib));

69 i‡–(
¨gc
 >4Ë&& *
¨gv
[3] )

70 
	`°∫˝y
(
s_©åib
, 
¨gv
[3], 
SBUFSIZE
-1);

71 
•t2
=
	`mÆloc
(
MALSIZE
);

72 
	`mem£t
(
•t2
, '\0', 
MALSIZE
);

73 
	`mem£t
(
s_©å
, '\0', (s_attr));

74 
	`mem£t
(
s_©åvÆ
, '\0', (
s_©å
));

75  !
	`„of
(
f_muxÊ©
) ) {

76 
	`fgës
(
•t2
, (
MALSIZE
-2), 
f_muxÊ©
);

77 
±2
 = 
•t2
;

78 i‡–
i_chk
 ) {

79 
i_chk
 = 0;

80 
	`°πok
(
±2
, ":");

81 
	`•rötf
(
s_©å
, "%s", 
	`°πok
(
NULL
, ":"));

82 
s_©å
[
	`°æí
(s_attr)-2]='\0';

83 
	`Ârötf
(
f_mymuxfûe
, "%†%d \r\n", 
s_©å
, 
	`©oi
(
s_©åvÆ
));

85 i‡–(
	`°æí
(
±2
Ë> 3Ë&& (*±2 ='+'Ë&& (*’t2+1Ë='A'Ë&& 
	`isdigô
(*(pt2+2)) ) {

86 
i_chk
 = 1;

87 
	`•rötf
(
s_©åvÆ
, "%s", 
±2
+2);

89 i‡–*
±2
 == '!' )

92 
	`f˛o£
(
f_mymuxfûe
);

93 i‡–(
f_mymuxfûe
 = 
	`f›í
("mymuxfûe.d©", "r")Ë=
NULL
 ) {

94 
	`f˛o£
(
f_muxÊ©
);

95 
	`Ârötf
(
°dîr
, "ERROR: UnableÅo openáttribute header information (mymuxfile.dat)\r\n");

96 
	`‰ì
(
•t2
);

97 
	`exô
(1);

99 i‡–(
f_mux©ås
 = 
	`f›í
("mux©ås.d©", "r")Ë=
NULL
 ) {

100 
	`f˛o£
(
f_muxÊ©
);

101 
	`f˛o£
(
f_mymuxfûe
);

102 
	`Ârötf
(
°dîr
, "ERROR: UnableÅo openáttribute header information (muxattrs.dat)\r\n");

103 
	`‰ì
(
•t2
);

104 
	`exô
(1);

106 i‡–(
f_muxout
 = 
	`f›í
("muxout.txt", "w")Ë=
NULL
 ) {

107 
	`f˛o£
(
f_muxÊ©
);

108 
	`f˛o£
(
f_mymuxfûe
);

109 
	`f˛o£
(
f_mux©ås
);

110 
	`Ârötf
(
°dîr
, "ERROR: UnableÅo open output file (muxout.txt)\r\n");

111 
	`‰ì
(
•t2
);

112 
	`exô
(1);

114 i‡–(
f_muxlock
 = 
	`f›í
("muxlocks.d©", "r")Ë=
NULL
 ) {

115 
	`f˛o£
(
f_muxÊ©
);

116 
	`f˛o£
(
f_mymuxfûe
);

117 
	`f˛o£
(
f_mux©ås
);

118 
	`f˛o£
(
f_muxout
);

119 
	`Ârötf
(
°dîr
, "ERROR: UnableÅo open muxÜock file (muxlocks.dat)\r\n");

120 
	`‰ì
(
•t2
);

121 
	`exô
(1);

123 
	`mem£t
(
•t2
, '\0', 
MALSIZE
);

124 
•t3
=
	`mÆloc
(
MALSIZE
);

125 
	`mem£t
(
•t3
, '\0', 
MALSIZE
);

126 
±3
 = 
•t3
;

127 
	`f£ek
(
f_muxÊ©
, 0L, 
SEEK_SET
);

128 
	`Ârötf
(
°dîr
, "Sã∞1: Quîög f‹ dbª‡#%d\n", 
	`©oi
(
¨gv
[2]));

129 
i_chk
 = 0;

130  !
	`„of
(
f_muxÊ©
) ) {

131 
	`fgës
(
•t2
, (
MALSIZE
-2), 
f_muxÊ©
);

132 
±2
 = 
•t2
;

133 i‡–(*
±2
 ='<'Ë&& 
i_chk
 ) {

136 i‡–*
±2
 ='!' && (
	`©oi
’t2+1Ë=©oi(
¨gv
[2])) ) {

137 
i_chk
 = 1;

140 i‡–
i_chk
 && *
±2
 ='>' && 
	`isdigô
(*(pt2+1)) ) {

141 
i_chk
 = 2;

142 
i_©r˙å
++;

143 
	`•rötf
(
s_©åvÆ
, " %d ", 
	`©oi
(
±2
+1));

144 
	`mem£t
(
•t2
, '\0', 
MALSIZE
);

145 
	`mem£t
(
s_fö©å
, '\0', (s_finattr));

146 
	`f£ek
(
f_mux©ås
, 0L, 
SEEK_SET
);

147  !
	`„of
(
f_mux©ås
) ) {

148 
	`fgës
(
•t2
, (
MALSIZE
-2), 
f_mux©ås
);

149 i‡–
	`°r°r
(
•t2
, 
s_©åvÆ
Ë!
NULL
 ) {

150 
	`°r˝y
(
s_fö©å
, (*)
	`°πok
(
•t2
, " "));

154 i‡–
	`°æí
(
s_fö©å
) == 0 ) {

155 
	`f£ek
(
f_mymuxfûe
, 0L, 
SEEK_SET
);

156  !
	`„of
(
f_mymuxfûe
) ) {

157 
	`fgës
(
•t2
, (
MALSIZE
-2), 
f_mymuxfûe
);

158 i‡–
	`°r°r
(
•t2
, 
s_©åvÆ
Ë!
NULL
 ) {

159 
	`°r˝y
(
s_fö©å
, (*)
	`°πok
(
•t2
, " "));

164 i‡–
	`°æí
(
s_fö©å
) == 0 ) {

165 
	`Ârötf
(
°dîr
, "ERROR: UnknownÉrror ináttribute handler.");

166 
	`exô
(1);

168 
	`f£ek
(
f_muxlock
, 0L, 
SEEK_SET
);

169 
i_lck
 = 0;

170  !
	`„of
(
f_muxlock
) ) {

171 
	`fgës
(
•t2
, (
MALSIZE
-2), 
f_muxlock
);

172 i‡–
	`°r°r
(
•t2
, 
s_©åvÆ
Ë!
NULL
 ) {

173 
i_lck
 = 1;

177 i‡–!*
s_©åib
 || !
	`°ricmp
(
s_fö©å
, s_©åibË|| 
	`°r°r
(s_finattr, s_attrib) ) {

178 
i_©r˙å2
++;

179 i‡–
i_lck
 )

180 
	`Ârötf
(
f_muxout
, "@lock/%†#%s=", 
s_fö©å
, 
¨gv
[2]);

181 i‡–
	`©oi
(
s_©åvÆ
) < 256 )

182 
	`Ârötf
(
f_muxout
, "@%†#%s=", 
s_fö©å
, 
¨gv
[2]);

184 
	`Ârötf
(
f_muxout
, "&%†#%s=", 
s_fö©å
, 
¨gv
[2]);

186 } i‡–
i_chk
 == 2) {

187 i‡–*
±2
 == '"' )

188 
±2
++;

189 i‡–*
±2
 == '\001' ) {

190  *
±2
 && *pt2 != ':' )Öt2++;

191 
±2
++;

192  *
±2
 && *pt2 != ':' )Öt2++;

193 
±2
++;

195 
	`mem£t
(
•t3
, '\0', 
MALSIZE
);

196 
±3
 = 
•t3
;

197  *
±2
 ) {

198 i‡–*
±2
 == '\\' ) {

199 
±2
++;

201 i‡–*
±2
 == '\t' ) {

202 
±2
++;

203 *
±3
 = '%';

204 
±3
++;

205 *
±3
 = 't';

206 
±3
++;

208 *
±3
 = *
±2
;

209 
±2
++;

210 
±3
++;

212 *
±3
 = '\0';

213 i‡–
	`°æí
(
•t3
) > 2) {

214 i‡–*(
±3
-2) == '"' ) {

215 *(
±3
-2) = '\n';

216 *(
±3
-1) = '\0';

217 } i‡–*(
±3
-2) == '\r' ) {

218 *(
±3
-2) = '%';

219 *(
±3
-1) = 'r';

220 *
±3
 = '\0';

223 i‡–*
•t3
 ='\r' && (
	`°æí
(spt3) <= 2) ) {

224 
	`°r˝y
(
•t3
, "%r");

226 i‡–!*
s_©åib
 || !
	`°ricmp
(
s_fö©å
, s_©åibË|| 
	`°r°r
(s_finattr, s_attrib) )

227 
	`Ârötf
(
f_muxout
, "%s", 
•t3
);

230 i‡–!*
s_©åib
 )

231 
	`Ârötf
(
°dîr
, "Sã∞2: Wrôög %dáâribuãs\n", 
i_©r˙å
);

233 
	`Ârötf
(
°dîr
, "Sã∞2: Wrôög %d (o‡%dË©åibuãs\n", 
i_©r˙å2
, 
i_©r˙å
);

234 
	`f˛o£
(
f_muxlock
);

235 
	`f˛o£
(
f_muxout
);

236 
	`f˛o£
(
f_mux©ås
);

237 
	`f˛o£
(
f_mymuxfûe
);

238 
	`f˛o£
(
f_muxÊ©
);

239 
	`‰ì
(
•t2
);

240 
	`‰ì
(
•t3
);

241 
	`Ârötf
(
°dîr
, "Step 3: Completed (file is: muxout.txt).\n");

243 
	}
}

	@vattr.h

6 
ATTR
 *
v©å_ª«me_LEN
(*, , *, );

7 
ATTR
 *
v©å_föd_LEN
(c⁄° *
pAârName
, 
size_t
 
nAârName
);

8 
ATTR
 *
v©å_Æloc_LEN
(*
pAârName
, 
size_t
 
nAârName
, 
Êags
);

9 
ATTR
 *
v©å_deföe_LEN
(*
pAârName
, 
size_t
 
nAârName
, 
numbî
, 
Êags
);

10 
v©å_dñëe_LEN
(*, );

11 
ATTR
 *
v©å_fú°
();

12 
ATTR
 *
v©å_√xt
(ATTR *);

13 
li°_vhash°©s
(
dbªf
);

	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_GNU


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

23 #i‚def 
_FCNTL_H


24 
	#_FCNTL_H
 1

	)

26 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/f˙é.h
>

36 #ifde‡
__USE_XOPEN


37 
	~<sys/°©.h
>

40 #ifdef 
__USE_MISC


41 #i‚de‡
R_OK


44 
	#R_OK
 4

	)

45 
	#W_OK
 2

	)

46 
	#X_OK
 1

	)

47 
	#F_OK
 0

	)

52 #ifde‡
__USE_XOPEN


53 
	#SEEK_SET
 0

	)

54 
	#SEEK_CUR
 1

	)

55 
	#SEEK_END
 2

	)

63 
f˙é
 (
__fd
, 
__cmd
, ...);

71 #i‚de‡
__USE_FILE_OFFSET64


72 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__REDIRECT


75 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

76 
	`__n⁄nuŒ
 ((1));

78 
	#›í
 
›í64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

90 #i‚de‡
__USE_FILE_OFFSET64


91 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

93 #ifde‡
__REDIRECT


94 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

95 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

97 
	#¸ót
 
¸ót64


	)

100 #ifde‡
__USE_LARGEFILE64


101 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

104 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

105 && !
deföed
 
__USE_POSIX
))

114 
	#F_ULOCK
 0

	)

115 
	#F_LOCK
 1

	)

116 
	#F_TLOCK
 2

	)

117 
	#F_TEST
 3

	)

119 #i‚de‡
__USE_FILE_OFFSET64


120 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

122 #ifde‡
__REDIRECT


123 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

125 
	#lockf
 
lockf64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

133 #ifde‡
__USE_XOPEN2K


136 #i‚de‡
__USE_FILE_OFFSET64


137 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

138 
__advi£
Ë
__THROW
;

140 #ifde‡
__REDIRECT_NTH


141 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

142 
__off64_t
 
__Àn
, 
__advi£
),

143 
posix_Ádvi£64
);

145 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

148 #ifde‡
__USE_LARGEFILE64


149 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

150 
__advi£
Ë
__THROW
;

158 #i‚de‡
__USE_FILE_OFFSET64


159 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

161 #ifde‡
__REDIRECT


162 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

163 
__off64_t
 
__Àn
),

164 
posix_ÁŒoˇã64
);

166 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

169 #ifde‡
__USE_LARGEFILE64


170 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

174 
__END_DECLS


	@/usr/include/limits.h

23 #i‚de‡
_LIBC_LIMITS_H_


24 
	#_LIBC_LIMITS_H_
 1

	)

26 
	~<„©uªs.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

129 #ifde‡
__USE_ISOC99


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 
LONG_LONG_MIN


	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
LONG_LONG_MAX


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 
ULONG_LONG_MAX


	)

142 #ifdef 
__USE_POSIX


144 
	~<bôs/posix1_lim.h
>

147 #ifdef 
__USE_POSIX2


148 
	~<bôs/posix2_lim.h
>

151 #ifdef 
__USE_XOPEN


152 
	~<bôs/x›í_lim.h
>

	@/usr/include/malloc.h

20 #i‚de‡
_MALLOC_H


21 
	#_MALLOC_H
 1

	)

23 
	~<„©uªs.h
>

43 #i‡
deföed
(
__STDC__
Ë|| deföed (
__˝lu•lus
)

44 
	~<°ddef.h
>

45 
	#__mÆloc_±r_t
 *

	)

47 #unde‡
size_t


48 
	#size_t
 

	)

49 #unde‡
±rdiff_t


50 
	#±rdiff_t
 

	)

51 
	#__mÆloc_±r_t
 *

	)

54 #ifde‡
_LIBC


56 
	#__mÆloc_size_t
 
size_t


	)

57 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

58 #ñi‡!
deföed
 
__©åibuã_mÆloc__


59 
	#__©åibuã_mÆloc__


	)

62 #ifde‡
__GNUC__


67 #i‚de‡
__THROW


68 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC__
 >3 || 
__GNUC_MINOR__
 >= 8)

69 
	#__THROW
 
	`throw
 ()

	)

71 
	#__THROW


	)

74 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

77 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

81 
	#__THROW


	)

83 #i‡(
deföed
 
__STDC__
 && __STDC__Ë|| deföed 
__˝lu•lus


85 
	#__MALLOC_P
(
¨gs
Ë
	)
args

86 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

88 #i‚de‡
__c⁄°


89 
	#__c⁄°
 c⁄°

	)

94 
	#__MALLOC_P
(
¨gs
Ë(Ë

	)

95 
	#__MALLOC_PMT
(
¨gs
Ë()

	)

97 #i‚de‡
__c⁄°


98 
	#__c⁄°


	)

105 #i‚de‡
NULL


106 #ifde‡
__˝lu•lus


107 
	#NULL
 0

	)

109 
	#NULL
 ((
__mÆloc_±r_t
Ë0)

	)

113 #ifde‡
__˝lu•lus


118 
__mÆloc_±r_t
 
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
;

121 
__mÆloc_±r_t
 
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

122 
__©åibuã_mÆloc__
;

126 
__mÆloc_±r_t
 
ªÆloc
 
__MALLOC_P
 ((__mÆloc_±r_à
__±r
,

127 
size_t
 
__size
))

128 
__©åibuã_mÆloc__
;

131 
‰ì
 
__MALLOC_P
 ((
__mÆloc_±r_t
 
__±r
));

134 
c‰ì
 
__MALLOC_P
 ((
__mÆloc_±r_t
 
__±r
));

137 
__mÆloc_±r_t
 
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
));

140 
__mÆloc_±r_t
 
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
;

144 
__mÆloc_±r_t
 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

145 
__©åibuã_mÆloc__
;

149 
__mÆloc_±r_t
 (*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

152 
__mÆloc_±r_t
 
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

153 
__©åibuã_mÆloc__
;

157 
	smÆlöfo
 {

158 
	g¨ía
;

159 
	g‹dblks
;

160 
	gsmblks
;

161 
	ghblks
;

162 
	ghblkhd
;

163 
	gusmblks
;

164 
	gfsmblks
;

165 
	gu‹dblks
;

166 
	gf‹dblks
;

167 
	gkìpco°
;

171 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

174 #i‚de‡
M_MXFAST


175 
	#M_MXFAST
 1

	)

177 #i‚de‡
M_NLBLKS


178 
	#M_NLBLKS
 2

	)

180 #i‚de‡
M_GRAIN


181 
	#M_GRAIN
 3

	)

183 #i‚de‡
M_KEEP


184 
	#M_KEEP
 4

	)

188 
	#M_TRIM_THRESHOLD
 -1

	)

189 
	#M_TOP_PAD
 -2

	)

190 
	#M_MMAP_THRESHOLD
 -3

	)

191 
	#M_MMAP_MAX
 -4

	)

192 
	#M_CHECK_ACTION
 -5

	)

195 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

199 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

203 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((
__mÆloc_±r_t
 
__±r
));

206 
mÆloc_°©s
 
__MALLOC_P
 (());

209 
__mÆloc_±r_t
 
mÆloc_gë_°©e
 
__MALLOC_P
 (());

213 
mÆloc_£t_°©e
 
__MALLOC_P
 ((
__mÆloc_±r_t
 
__±r
));

218 (*
__mÆloc_öôülize_hook
Ë
__MALLOC_PMT
 (());

220 (*
__‰ì_hook
Ë
__MALLOC_PMT
 ((
__mÆloc_±r_t
 
__±r
,

221 
__c⁄°
 
__mÆloc_±r_t
));

222 
__mÆloc_±r_t
 (*
__mÆloc_hook
Ë
__MALLOC_PMT
 ((
size_t
 
__size
,

223 
__c⁄°
 
__mÆloc_±r_t
));

224 
__mÆloc_±r_t
 (*
__ªÆloc_hook
Ë
__MALLOC_PMT
 ((__mÆloc_±r_à
__±r
,

225 
size_t
 
__size
,

226 
__c⁄°
 
__mÆloc_±r_t
));

227 
__mÆloc_±r_t
 (*
__memÆign_hook
Ë
__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

228 
size_t
 
__size
,

229 
__c⁄°
 
__mÆloc_±r_t
));

230 (*
__a·î_m‹ec‹e_hook
Ë
__MALLOC_PMT
 (());

233 
__mÆloc_check_öô
 
__MALLOC_P
 (());

236 #ifde‡
__˝lu•lus


	@/usr/include/math.h

24 #i‚def 
_MATH_H


25 
	#_MATH_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 
	~<bôs/huge_vÆ.h
>

34 #ifde‡
__USE_ISOC99


35 
	~<bôs/huge_vÆf.h
>

36 
	~<bôs/huge_vÆl.h
>

39 
	~<bôs/öf.h
>

42 
	~<bôs/«n.h
>

46 
	~<bôs/m©hdef.h
>

53 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

54 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

55 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

56 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

57 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

58 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

59 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

60 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

61 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

62 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

63 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

64 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

66 
	#_MdoubÀ_
 

	)

67 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

68 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

69 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

70 
	~<bôs/m©hˇŒs.h
>

71 #unde‡
_MdoubÀ_


72 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


73 #unde‡
_MdoubÀ_END_NAMESPACE


74 #unde‡
__MATH_PRECNAME


76 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


82 #i‚de‡
_MÊﬂt_


83 
	#_MÊﬂt_
 

	)

85 
	#_MdoubÀ_
 
_MÊﬂt_


	)

86 #ifde‡
__STDC__


87 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

89 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

91 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

92 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

93 
	~<bôs/m©hˇŒs.h
>

94 #unde‡
_MdoubÀ_


95 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


96 #unde‡
_MdoubÀ_END_NAMESPACE


97 #unde‡
__MATH_PRECNAME


99 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0Ë&& !
deföed
 
__NO_LONG_DOUBLE_MATH


103 #i‚de‡
_Ml⁄g_doubÀ_


104 
	#_Ml⁄g_doubÀ_
 

	)

106 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

107 #ifde‡
__STDC__


108 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

110 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

112 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

113 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

114 
	~<bôs/m©hˇŒs.h
>

115 #unde‡
_MdoubÀ_


116 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


117 #unde‡
_MdoubÀ_END_NAMESPACE


118 #unde‡
__MATH_PRECNAME


123 #unde‡
__MATHDECL_1


124 #unde‡
__MATHDECL


125 #unde‡
__MATHCALL


128 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


130 
signgam
;

135 #ifde‡
__USE_ISOC99


173 
	mFP_NAN
,

174 
	#FP_NAN
 
FP_NAN


	)

175 
	mFP_INFINITE
,

176 
	#FP_INFINITE
 
FP_INFINITE


	)

177 
	mFP_ZERO
,

178 
	#FP_ZERO
 
FP_ZERO


	)

179 
	mFP_SUBNORMAL
,

180 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

181 
	mFP_NORMAL


182 
	#FP_NORMAL
 
FP_NORMAL


	)

186 #ifde‡
__NO_LONG_DOUBLE_MATH


187 
	#Â˛assify
(
x
) \

188 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

190 
	#Â˛assify
(
x
) \

191 ( (
x
) ==  () \

192 ? 
	`__Â˛assifyf
 (
x
) \

193 :  (
x
) ==  () \

194 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

198 #ifde‡
__NO_LONG_DOUBLE_MATH


199 
	#signbô
(
x
) \

200 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

202 
	#signbô
(
x
) \

203 ( (
x
) ==  () \

204 ? 
	`__signbôf
 (
x
) \

205 :  (
x
) ==  () \

206 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

210 #ifde‡
__NO_LONG_DOUBLE_MATH


211 
	#isföôe
(
x
) \

212 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

214 
	#isföôe
(
x
) \

215 ( (
x
) ==  () \

216 ? 
	`__föôef
 (
x
) \

217 :  (
x
) ==  () \

218 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

222 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

226 #ifde‡
__NO_LONG_DOUBLE_MATH


227 
	#i¢™
(
x
) \

228 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

230 
	#i¢™
(
x
) \

231 ( (
x
) ==  () \

232 ? 
	`__i¢™f
 (
x
) \

233 :  (
x
) ==  () \

234 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

238 #ifde‡
__NO_LONG_DOUBLE_MATH


239 
	#isöf
(
x
) \

240 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

242 
	#isöf
(
x
) \

243 ( (
x
) ==  () \

244 ? 
	`__isöff
 (
x
) \

245 :  (
x
) ==  () \

246 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

250 
	#MATH_ERRNO
 1

	)

251 
	#MATH_ERREXCEPT
 2

	)

255 #ifdef 
__USE_MISC


259 
	m_IEEE_
 = -1,

260 
	m_SVID_
,

261 
	m_XOPEN_
,

262 
	m_POSIX_
,

263 
	m_ISOC_


264 } 
	t_LIB_VERSION_TYPE
;

269 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

273 #ifde‡
__USE_SVID


279 #ifde‡
__˝lu•lus


280 
	g__ex˚±i⁄


282 
	gex˚±i⁄


285 
	gty≥
;

286 *
	g«me
;

287 
	g¨g1
;

288 
	g¨g2
;

289 
	gªtvÆ
;

292 #ifde‡
__˝lu•lus


293 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

295 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

298 
	#X_TLOSS
 1.41484755040568800000e+16

	)

301 
	#DOMAIN
 1

	)

302 
	#SING
 2

	)

303 
	#OVERFLOW
 3

	)

304 
	#UNDERFLOW
 4

	)

305 
	#TLOSS
 5

	)

306 
	#PLOSS
 6

	)

309 
	#HUGE
 3.40282347e+38F

	)

313 #ifde‡
__USE_XOPEN


315 
	#MAXFLOAT
 3.40282347e+38F

	)

322 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


323 
	#M_E
 2.7182818284590452354

	)

324 
	#M_LOG2E
 1.4426950408889634074

	)

325 
	#M_LOG10E
 0.43429448190325182765

	)

326 
	#M_LN2
 0.69314718055994530942

	)

327 
	#M_LN10
 2.30258509299404568402

	)

328 
	#M_PI
 3.14159265358979323846

	)

329 
	#M_PI_2
 1.57079632679489661923

	)

330 
	#M_PI_4
 0.78539816339744830962

	)

331 
	#M_1_PI
 0.31830988618379067154

	)

332 
	#M_2_PI
 0.63661977236758134308

	)

333 
	#M_2_SQRTPI
 1.12837916709551257390

	)

334 
	#M_SQRT2
 1.41421356237309504880

	)

335 
	#M_SQRT1_2
 0.70710678118654752440

	)

341 #ifde‡
__USE_GNU


342 
	#M_El
 2.7182818284590452353602874713526625L

	)

343 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

344 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

345 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

346 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

347 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

348 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

349 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

350 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

351 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

352 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

353 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

354 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

361 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


362 
	#__NO_MATH_INLINES
 1

	)

365 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

372 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

373 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

374 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

375 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

376 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

377 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

381 #ifde‡
__USE_EXTERN_INLINES


382 
	~<bôs/m©hölöe.h
>

385 #ifde‡
__USE_ISOC99


389 #i‚de‡
isgª©î


390 
	#isgª©î
(
x
, 
y
) \

391 (
__exãnsi⁄__
 \

392 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

393 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

397 #i‚de‡
isgª©îequÆ


398 
	#isgª©îequÆ
(
x
, 
y
) \

399 (
__exãnsi⁄__
 \

400 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

401 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

405 #i‚de‡
i¶ess


406 
	#i¶ess
(
x
, 
y
) \

407 (
__exãnsi⁄__
 \

408 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

409 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

413 #i‚de‡
i¶es£quÆ


414 
	#i¶es£quÆ
(
x
, 
y
) \

415 (
__exãnsi⁄__
 \

416 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

417 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

421 #i‚de‡
i¶essgª©î


422 
	#i¶essgª©î
(
x
, 
y
) \

423 (
__exãnsi⁄__
 \

424 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

425 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

429 #i‚de‡
isun‹dîed


430 
	#isun‹dîed
(
u
, 
v
) \

431 (
__exãnsi⁄__
 \

432 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

433 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

438 
	g__END_DECLS


	@/usr/include/memory.h

23 #i‚def 
_MEMORY_H


24 
	#_MEMORY_H
 1

	)

26 
	~<„©uªs.h
>

29 #i‚def 
_STRING_H


30 
	~<°rög.h
>

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


58 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

61 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

65 
	#NETDB_INTERNAL
 -1

	)

66 
	#NETDB_SUCCESS
 0

	)

67 
	#HOST_NOT_FOUND
 1

	)

68 
	#TRY_AGAIN
 2

	)

70 
	#NO_RECOVERY
 3

	)

72 
	#NO_DATA
 4

	)

74 
	#NO_ADDRESS
 
NO_DATA


	)

76 #ifde‡
__USE_XOPEN2K


78 
	#IPPORT_RESERVED
 1024

	)

81 #ifde‡
__USE_GNU


83 
	#SCOPE_DELIMITER
 '%'

	)

88 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

91 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

96 
	sho°ít


98 *
h_«me
;

99 **
h_Æü£s
;

100 
h_addπy≥
;

101 
h_Àngth
;

102 **
h_addr_li°
;

103 
	#h_addr
 
h_addr_li°
[0]

	)

111 
	`£tho°ít
 (
__°ay_›í
);

117 
	`ídho°ít
 ();

124 
ho°ít
 *
	`gëho°ít
 ();

131 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

132 
__ty≥
);

138 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

140 #ifde‡
__USE_MISC


149 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

161 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

162 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

163 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

164 *
__ª°ri˘
 
__h_î∫›
);

166 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

167 
__ty≥
,

168 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

174 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

175 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

176 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

177 *
__ª°ri˘
 
__h_î∫›
);

179 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

180 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

181 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

182 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

183 *
__ª°ri˘
 
__h_î∫›
);

192 
	`£äëít
 (
__°ay_›í
);

198 
	`íd√ã¡
 ();

205 
√ã¡
 *
	`gë√ã¡
 ();

212 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

218 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

220 #ifdef 
__USE_MISC


231 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

232 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

233 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

234 *
__ª°ri˘
 
__h_î∫›
);

236 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

237 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

238 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

239 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

240 *
__ª°ri˘
 
__h_î∫›
);

242 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

243 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

244 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

245 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

246 *
__ª°ri˘
 
__h_î∫›
);

251 
	s£rvít


253 *
s_«me
;

254 **
s_Æü£s
;

255 
s_p‹t
;

256 *
s_¥Ÿo
;

264 
	`£t£rvít
 (
__°ay_›í
);

270 
	`íd£rvít
 ();

277 
£rvít
 *
	`gë£rvít
 ();

284 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

285 
__c⁄°
 *
__¥Ÿo
);

292 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

295 #ifdef 
__USE_MISC


303 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

304 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

305 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

307 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

308 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

309 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

310 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

311 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

313 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

314 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

315 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

316 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

321 
	s¥Ÿ€¡


323 *
p_«me
;

324 **
p_Æü£s
;

325 
p_¥Ÿo
;

333 
	`£çrŸ€¡
 (
__°ay_›í
);

339 
	`íd¥Ÿ€¡
 ();

346 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

352 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

358 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

361 #ifdef 
__USE_MISC


369 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

370 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

371 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

373 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

374 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

375 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

376 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

378 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

379 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

380 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

381 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

390 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

398 
	`íd√tgª¡
 ();

407 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

408 **
__ª°ri˘
 
__u£Ω
,

409 **
__ª°ri˘
 
__domaöp
);

418 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

419 
__c⁄°
 *
__u£r
, __c⁄° *
domaö
);

427 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

428 **
__ª°ri˘
 
__u£Ω
,

429 **
__ª°ri˘
 
__domaöp
,

430 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

434 #ifde‡
__USE_BSD


446 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

447 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

448 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

449 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

458 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

459 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

460 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

461 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

462 
ß_Ámûy_t
 
__af
);

474 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

475 
__c⁄°
 *
__ª°ri˘
 
__«me
,

476 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

477 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

486 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

487 
__c⁄°
 *
__ª°ri˘
 
__«me
,

488 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

489 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

490 
ß_Ámûy_t
 
__af
);

500 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

501 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

510 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

511 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

512 
ß_Ámûy_t
 
__af
);

522 
	`ºesvp‹t
 (*
__Æp‹t
);

531 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

536 #ifdef 
__USE_POSIX


538 
	saddröfo


540 
ai_Êags
;

541 
ai_Ámûy
;

542 
ai_sockty≥
;

543 
ai_¥Ÿocﬁ
;

544 
sockÀn_t
 
ai_addæí
;

545 
sockaddr
 *
ai_addr
;

546 *
ai_ˇn⁄«me
;

547 
addröfo
 *
ai_√xt
;

550 #ifde‡
__USE_GNU


552 
	sgaicb


554 c⁄° *
¨_«me
;

555 c⁄° *
¨_£rvi˚
;

556 c⁄° 
addröfo
 *
¨_ªque°
;

557 
addröfo
 *
¨_ªsu…
;

559 
__ªtu∫
;

560 
__unu£d
[5];

564 
	#GAI_WAIT
 0

	)

565 
	#GAI_NOWAIT
 1

	)

569 
	#AI_PASSIVE
 0x0001

	)

570 
	#AI_CANONNAME
 0x0002

	)

571 
	#AI_NUMERICHOST
 0x0004

	)

572 
	#AI_V4MAPPED
 0x0008

	)

573 
	#AI_ALL
 0x0010

	)

574 
	#AI_ADDRCONFIG
 0x0020

	)

576 #ifde‡
__USE_GNU


577 
	#AI_IDN
 0x0040

	)

580 
	#AI_CANONIDN
 0x0080

	)

581 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

583 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

586 
	#AI_NUMERICSERV
 0x0400

	)

589 
	#EAI_BADFLAGS
 -1

	)

590 
	#EAI_NONAME
 -2

	)

591 
	#EAI_AGAIN
 -3

	)

592 
	#EAI_FAIL
 -4

	)

593 
	#EAI_NODATA
 -5

	)

594 
	#EAI_FAMILY
 -6

	)

595 
	#EAI_SOCKTYPE
 -7

	)

596 
	#EAI_SERVICE
 -8

	)

597 
	#EAI_ADDRFAMILY
 -9

	)

598 
	#EAI_MEMORY
 -10

	)

599 
	#EAI_SYSTEM
 -11

	)

600 
	#EAI_OVERFLOW
 -12

	)

601 #ifde‡
__USE_GNU


602 
	#EAI_INPROGRESS
 -100

	)

603 
	#EAI_CANCELED
 -101

	)

604 
	#EAI_NOTCANCELED
 -102

	)

605 
	#EAI_ALLDONE
 -103

	)

606 
	#EAI_INTR
 -104

	)

607 
	#EAI_IDN_ENCODE
 -105

	)

610 
	#NI_MAXHOST
 1025

	)

611 
	#NI_MAXSERV
 32

	)

613 
	#NI_NUMERICHOST
 1

	)

614 
	#NI_NUMERICSERV
 2

	)

615 
	#NI_NOFQDN
 4

	)

616 
	#NI_NAMEREQD
 8

	)

617 
	#NI_DGRAM
 16

	)

618 #ifde‡
__USE_GNU


619 
	#NI_IDN
 32

	)

620 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

622 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

631 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

632 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

633 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

634 
addröfo
 **
__ª°ri˘
 
__∑i
);

637 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

640 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

646 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

647 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

648 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

649 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

652 #ifde‡
__USE_GNU


661 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

662 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

672 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

673 
__c⁄°
 
time•ec
 *
__timeout
);

676 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

679 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

682 
__END_DECLS


	@/usr/include/netinet/in.h

19 #i‚def 
_NETINET_IN_H


20 
	#_NETINET_IN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°döt.h
>

24 
	~<sys/sockë.h
>

25 
	~<bôs/ty≥s.h
>

28 
__BEGIN_DECLS


33 
	mIPPROTO_IP
 = 0,

34 
	#IPPROTO_IP
 
IPPROTO_IP


	)

35 
	mIPPROTO_HOPOPTS
 = 0,

36 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

37 
	mIPPROTO_ICMP
 = 1,

38 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

39 
	mIPPROTO_IGMP
 = 2,

40 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

41 
	mIPPROTO_IPIP
 = 4,

42 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

43 
	mIPPROTO_TCP
 = 6,

44 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

45 
	mIPPROTO_EGP
 = 8,

46 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

47 
	mIPPROTO_PUP
 = 12,

48 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

49 
	mIPPROTO_UDP
 = 17,

50 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

51 
	mIPPROTO_IDP
 = 22,

52 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

53 
	mIPPROTO_TP
 = 29,

54 
	#IPPROTO_TP
 
IPPROTO_TP


	)

55 
	mIPPROTO_IPV6
 = 41,

56 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

57 
	mIPPROTO_ROUTING
 = 43,

58 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

59 
	mIPPROTO_FRAGMENT
 = 44,

60 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

61 
	mIPPROTO_RSVP
 = 46,

62 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

63 
	mIPPROTO_GRE
 = 47,

64 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

65 
	mIPPROTO_ESP
 = 50,

66 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

67 
	mIPPROTO_AH
 = 51,

68 
	#IPPROTO_AH
 
IPPROTO_AH


	)

69 
	mIPPROTO_ICMPV6
 = 58,

70 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

71 
	mIPPROTO_NONE
 = 59,

72 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

73 
	mIPPROTO_DSTOPTS
 = 60,

74 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

75 
	mIPPROTO_MTP
 = 92,

76 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

77 
	mIPPROTO_ENCAP
 = 98,

78 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

79 
	mIPPROTO_PIM
 = 103,

80 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

81 
	mIPPROTO_COMP
 = 108,

82 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

83 
	mIPPROTO_SCTP
 = 132,

84 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

85 
	mIPPROTO_RAW
 = 255,

86 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

87 
	mIPPROTO_MAX


92 
uöt16_t
 
	tö_p‹t_t
;

97 
	mIPPORT_ECHO
 = 7,

98 
	mIPPORT_DISCARD
 = 9,

99 
	mIPPORT_SYSTAT
 = 11,

100 
	mIPPORT_DAYTIME
 = 13,

101 
	mIPPORT_NETSTAT
 = 15,

102 
	mIPPORT_FTP
 = 21,

103 
	mIPPORT_TELNET
 = 23,

104 
	mIPPORT_SMTP
 = 25,

105 
	mIPPORT_TIMESERVER
 = 37,

106 
	mIPPORT_NAMESERVER
 = 42,

107 
	mIPPORT_WHOIS
 = 43,

108 
	mIPPORT_MTP
 = 57,

110 
	mIPPORT_TFTP
 = 69,

111 
	mIPPORT_RJE
 = 77,

112 
	mIPPORT_FINGER
 = 79,

113 
	mIPPORT_TTYLINK
 = 87,

114 
	mIPPORT_SUPDUP
 = 95,

117 
	mIPPORT_EXECSERVER
 = 512,

118 
	mIPPORT_LOGINSERVER
 = 513,

119 
	mIPPORT_CMDSERVER
 = 514,

120 
	mIPPORT_EFSSERVER
 = 520,

123 
	mIPPORT_BIFFUDP
 = 512,

124 
	mIPPORT_WHOSERVER
 = 513,

125 
	mIPPORT_ROUTESERVER
 = 520,

128 
	mIPPORT_RESERVED
 = 1024,

131 
	mIPPORT_USERRESERVED
 = 5000

136 
uöt32_t
 
	tö_addr_t
;

137 
	sö_addr


139 
ö_addr_t
 
	ms_addr
;

148 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

149 
	#IN_CLASSA_NET
 0xff000000

	)

150 
	#IN_CLASSA_NSHIFT
 24

	)

151 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

152 
	#IN_CLASSA_MAX
 128

	)

154 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

155 
	#IN_CLASSB_NET
 0xffff0000

	)

156 
	#IN_CLASSB_NSHIFT
 16

	)

157 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

158 
	#IN_CLASSB_MAX
 65536

	)

160 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

161 
	#IN_CLASSC_NET
 0xffffff00

	)

162 
	#IN_CLASSC_NSHIFT
 8

	)

163 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

165 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

166 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

168 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

169 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

172 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

174 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

176 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

179 
	#IN_LOOPBACKNET
 127

	)

181 #i‚de‡
INADDR_LOOPBACK


182 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

186 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

187 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

188 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

189 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

193 
	sö6_addr


197 
uöt8_t
 
	mu6_addr8
[16];

198 
uöt16_t
 
	mu6_addr16
[8];

199 
uöt32_t
 
	mu6_addr32
[4];

200 } 
	mö6_u
;

201 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

202 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

203 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

206 c⁄° 
ö6_addr
 
ö6addr_™y
;

207 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

208 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

209 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

211 
	#INET_ADDRSTRLEN
 16

	)

212 
	#INET6_ADDRSTRLEN
 46

	)

215 
	~<bôs/sockë.h
>

219 
	ssockaddr_ö


221 
__SOCKADDR_COMMON
 (
sö_
);

222 
ö_p‹t_t
 
	msö_p‹t
;

223 
ö_addr
 
	msö_addr
;

226 
	msö_zîo
[ (
sockaddr
) -

227 
__SOCKADDR_COMMON_SIZE
 -

228  (
ö_p‹t_t
) -

229  (
ö_addr
)];

233 
	ssockaddr_ö6


235 
__SOCKADDR_COMMON
 (
sö6_
);

236 
ö_p‹t_t
 
	msö6_p‹t
;

237 
uöt32_t
 
	msö6_Êowöfo
;

238 
ö6_addr
 
	msö6_addr
;

239 
uöt32_t
 
	msö6_sc›e_id
;

244 
	sù_mªq


247 
ö_addr
 
	mimr_mu…üddr
;

250 
ö_addr
 
	mimr_öãrÁ˚
;

253 
	sù_mªq_sour˚


256 
ö_addr
 
	mimr_mu…üddr
;

259 
ö_addr
 
	mimr_öãrÁ˚
;

262 
ö_addr
 
	mimr_sour˚addr
;

266 
	sùv6_mªq


269 
ö6_addr
 
	mùv6mr_mu…üddr
;

272 
	mùv6mr_öãrÁ˚
;

277 
	sgroup_ªq


280 
uöt32_t
 
	mgr_öãrÁ˚
;

283 
sockaddr_°‹age
 
	mgr_group
;

286 
	sgroup_sour˚_ªq


289 
uöt32_t
 
	mg§_öãrÁ˚
;

292 
sockaddr_°‹age
 
	mg§_group
;

295 
sockaddr_°‹age
 
	mg§_sour˚
;

300 
	sù_msfûãr


303 
ö_addr
 
	mimsf_mu…üddr
;

306 
ö_addr
 
	mimsf_öãrÁ˚
;

309 
uöt32_t
 
	mimsf_fmode
;

312 
uöt32_t
 
	mimsf_num§c
;

314 
ö_addr
 
	mimsf_¶i°
[1];

317 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

318 -  (
ö_addr
) \

319 + (
num§c
Ë*  (
ö_addr
))

	)

321 
	sgroup_fûãr


324 
uöt32_t
 
	mgf_öãrÁ˚
;

327 
sockaddr_°‹age
 
	mgf_group
;

330 
uöt32_t
 
	mgf_fmode
;

333 
uöt32_t
 
	mgf_num§c
;

335 
sockaddr_°‹age
 
	mgf_¶i°
[1];

338 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

339 -  (
sockaddr_°‹age
) \

340 + ((
num§c
) \

341 *  (
sockaddr_°‹age
)))

	)

345 
	~<bôs/ö.h
>

354 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

355 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

356 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

357 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

358 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

359 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

360 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

362 
	~<ídün.h
>

365 
	~<bôs/byãsw≠.h
>

367 #ifde‡
__OPTIMIZE__


371 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


374 
	#¡ohl
(
x
Ë(x)

	)

375 
	#¡ohs
(
x
Ë(x)

	)

376 
	#ht⁄l
(
x
Ë(x)

	)

377 
	#ht⁄s
(
x
Ë(x)

	)

379 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


380 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

381 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

382 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

383 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

388 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

389 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

390 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

391 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

392 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

394 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

395 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

396 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

397 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

398 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

400 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

402 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

403 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

404 =
	`ht⁄l
 (0x„800000))

	)

406 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

407 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

408 =
	`ht⁄l
 (0x„c00000))

	)

410 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

411 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

412 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

413 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

415 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

416 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

417 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

418 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

419 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

421 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

425 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

428 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

431 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

432 
__THROW
;

435 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

436 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

437 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

439 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

440 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

441 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

443 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

444 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

445 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

447 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

448 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

449 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

451 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

452 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

453 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

456 
	sö6_pktöfo


458 
ö6_addr
 
ùi6_addr
;

459 
ùi6_ifödex
;

463 #ifde‡
__USE_GNU


465 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
Ë
__THROW
;

466 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

467 
__ty≥
Ë
__THROW
;

468 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

469 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

470 
__∂usy
Ë
__THROW
;

471 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

472 
__mu…x
, 
__∂usy
Ë
__THROW
;

473 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

474 
uöt8_t
 **
__çåp
Ë
__THROW
;

475 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

476 
uöt8_t
 **
__çåp
, 
__ty≥
Ë
__THROW
;

482 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

483 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

484 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

485 
__THROW
;

488 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

489 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

490 
uöt32_t
 
__num§c
,

491 
__c⁄°
 
ö_addr
 *
__¶i°
)

492 
__THROW
;

496 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

497 
__c⁄°
 
sockaddr
 *
__group
,

498 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

499 
uöt32_t
 *
__num§c
,

500 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

503 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

504 
__c⁄°
 
sockaddr
 *
__group
,

505 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

506 
uöt32_t
 
__num§c
,

507 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

510 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

75 (*
	t__sigh™dÀr_t
) ();

80 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

82 #ifde‡
__USE_GNU


83 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

84 
__THROW
;

90 
__BEGIN_NAMESPACE_STD


91 #ifde‡
__USE_BSD


92 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

96 #ifde‡
__REDIRECT_NTH


97 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

98 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

99 
__sysv_sig«l
);

101 
	#sig«l
 
__sysv_sig«l


	)

104 
__END_NAMESPACE_STD


106 #ifde‡
__USE_XOPEN


109 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

110 
__THROW
;

116 #ifde‡
__USE_POSIX


117 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

120 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


124 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

127 
__BEGIN_NAMESPACE_STD


129 
	$øi£
 (
__sig
Ë
__THROW
;

130 
__END_NAMESPACE_STD


132 #ifde‡
__USE_SVID


134 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

135 
__THROW
;

136 
	$gsig«l
 (
__sig
Ë
__THROW
;

139 #ifde‡
__USE_MISC


141 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

155 #ifde‡
__FAVOR_BSD


158 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

160 #ifde‡
__USE_XOPEN


161 #ifde‡
__GNUC__


162 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

165 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

171 #ifde‡
__USE_BSD


178 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

181 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

184 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

187 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

191 #ifde‡
__USE_MISC


192 
	#NSIG
 
_NSIG


	)

195 #ifde‡
__USE_GNU


196 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

200 #ifde‡
__USE_BSD


201 
__sigh™dÀr_t
 
	tsig_t
;

204 #ifde‡
__USE_POSIX


206 #ifde‡
__USE_POSIX199309


208 
	#__√ed_time•ec


	)

209 
	~<time.h
>

212 
	~<bôs/sigöfo.h
>

216 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

229 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 #ifde‡
__USE_GNU


233 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

236 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

237 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

240 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

241 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	~<bôs/siga˘i⁄.h
>

249 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

250 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

257 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

260 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

261 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

264 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

271 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

272 
	`__n⁄nuŒ
 ((1, 2));

274 #ifde‡
__USE_POSIX199309


279 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

280 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

287 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

288 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

289 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

290 
	`__n⁄nuŒ
 ((1));

294 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

295 
__THROW
;

300 #ifde‡
__USE_BSD


304 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

305 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

308 
	ssigvec


310 
__sigh™dÀr_t
 
sv_h™dÀr
;

311 
sv_mask
;

313 
sv_Êags
;

314 
	#sv_⁄°ack
 
sv_Êags


	)

318 
	#SV_ONSTACK
 (1 << 0)

	)

319 
	#SV_INTERRUPT
 (1 << 1)

	)

320 
	#SV_RESETHAND
 (1 << 2)

	)

328 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

329 
sigvec
 *
__ovec
Ë
__THROW
;

333 
	~<bôs/sigc⁄ãxt.h
>

336 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

341 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


346 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

348 
	~<bôs/sig°ack.h
>

349 #ifde‡
__USE_XOPEN


351 
	~<sys/uc⁄ãxt.h
>

357 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

358 
__THROW
 
__©åibuã_dïªˇãd__
;

362 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

363 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

367 #ifde‡
__USE_XOPEN_EXTENDED


371 
	$sighﬁd
 (
__sig
Ë
__THROW
;

374 
	$sigªl£
 (
__sig
Ë
__THROW
;

377 
	$sigign‹e
 (
__sig
Ë
__THROW
;

380 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

383 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


386 
	~<bôs/±hªadty≥s.h
>

387 
	~<bôs/sigthªad.h
>

394 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

396 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

400 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
__BEGIN_NAMESPACE_STD


46 
_IO_FILE
 
	tFILE
;

47 
	g__END_NAMESPACE_STD


48 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

49 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

50 || 
deföed
 
__USE_POSIX2


51 
	$__USING_NAMESPACE_STD
(
FILE
)

54 
	#__FILE_deföed
 1

	)

56 #unde‡
__√ed_FILE


59 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


62 
_IO_FILE
 
	t__FILE
;

64 
	#____FILE_deföed
 1

	)

66 #unde‡
__√ed___FILE


69 #ifdef 
_STDIO_H


70 
	#_STDIO_USES_IOSTREAM


	)

72 
	~<libio.h
>

74 #ifde‡
__USE_XOPEN


75 #ifde‡
__GNUC__


76 #i‚de‡
_VA_LIST_DEFINED


77 
_G_va_li°
 
	tva_li°
;

78 
	#_VA_LIST_DEFINED


	)

81 
	~<°d¨g.h
>

86 
__BEGIN_NAMESPACE_STD


87 #i‚de‡
__USE_FILE_OFFSET64


88 
_G_Âos_t
 
	tÂos_t
;

90 
_G_Âos64_t
 
	tÂos_t
;

92 
__END_NAMESPACE_STD


93 #ifde‡
__USE_LARGEFILE64


94 
_G_Âos64_t
 
	tÂos64_t
;

98 
	#_IOFBF
 0

	)

99 
	#_IOLBF
 1

	)

100 
	#_IONBF
 2

	)

104 #i‚de‡
BUFSIZ


105 
	#BUFSIZ
 
_IO_BUFSIZ


	)

111 #i‚de‡
EOF


112 
	#EOF
 (-1)

	)

118 
	#SEEK_SET
 0

	)

119 
	#SEEK_CUR
 1

	)

120 
	#SEEK_END
 2

	)

123 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


125 
	#P_tmpdú
 "/tmp"

	)

138 
	~<bôs/°dio_lim.h
>

142 
_IO_FILE
 *
°dö
;

143 
_IO_FILE
 *
°dout
;

144 
_IO_FILE
 *
°dîr
;

146 
	#°dö
 
°dö


	)

147 
	#°dout
 
°dout


	)

148 
	#°dîr
 
°dîr


	)

150 
__BEGIN_NAMESPACE_STD


152 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

155 
__END_NAMESPACE_STD


158 
__BEGIN_NAMESPACE_STD


163 #i‚de‡
__USE_FILE_OFFSET64


164 
FILE
 *
	`tmpfûe
 ();

166 #ifde‡
__REDIRECT


167 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
);

169 
	#tmpfûe
 
tmpfûe64


	)

173 #ifde‡
__USE_LARGEFILE64


174 
FILE
 *
	`tmpfûe64
 ();

178 *
	$tm≤am
 (*
__s
Ë
__THROW
;

179 
__END_NAMESPACE_STD


181 #ifde‡
__USE_MISC


184 *
	$tm≤am_r
 (*
__s
Ë
__THROW
;

188 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


196 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

197 
__THROW
 
__©åibuã_mÆloc__
;

201 
__BEGIN_NAMESPACE_STD


206 
	`f˛o£
 (
FILE
 *
__°ªam
);

211 
	`fÊush
 (
FILE
 *
__°ªam
);

212 
__END_NAMESPACE_STD


214 #ifde‡
__USE_MISC


221 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

224 #ifde‡
__USE_GNU


231 
	`f˛o£Æl
 ();

235 
__BEGIN_NAMESPACE_STD


236 #i‚de‡
__USE_FILE_OFFSET64


241 
FILE
 *
	`f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

242 
__c⁄°
 *
__ª°ri˘
 
__modes
);

247 
FILE
 *
	`‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

248 
__c⁄°
 *
__ª°ri˘
 
__modes
,

249 
FILE
 *
__ª°ri˘
 
__°ªam
);

251 #ifde‡
__REDIRECT


252 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

253 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
);

254 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

255 
__c⁄°
 *
__ª°ri˘
 
__modes
,

256 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
);

258 
	#f›í
 
f›í64


	)

259 
	#‰e›í
 
‰e›í64


	)

262 
__END_NAMESPACE_STD


263 #ifde‡
__USE_LARGEFILE64


264 
FILE
 *
	`f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

265 
__c⁄°
 *
__ª°ri˘
 
__modes
);

266 
FILE
 *
	`‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

267 
__c⁄°
 *
__ª°ri˘
 
__modes
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
);

271 #ifdef 
__USE_POSIX


273 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
;

276 #ifdef 
__USE_GNU


279 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
;

284 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
Ë
__THROW
;

289 
FILE
 *
	$›í_mem°ªam
 (**
__ª°ri˘
 
__buÊoc
,

290 
size_t
 *
__ª°ri˘
 
__sizñoc
Ë
__THROW
;

294 
__BEGIN_NAMESPACE_STD


297 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

301 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

302 
__modes
, 
size_t
 
__n
Ë
__THROW
;

303 
__END_NAMESPACE_STD


305 #ifdef 
__USE_BSD


308 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

309 
size_t
 
__size
Ë
__THROW
;

312 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

316 
__BEGIN_NAMESPACE_STD


321 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

322 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

327 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
	$•rötf
 (*
__ª°ri˘
 
__s
,

330 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

336 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

337 
_G_va_li°
 
__¨g
);

342 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

344 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

345 
_G_va_li°
 
__¨g
Ë
__THROW
;

346 
__END_NAMESPACE_STD


348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


349 
__BEGIN_NAMESPACE_C99


351 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

352 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

353 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

355 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

356 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

357 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

358 
__END_NAMESPACE_C99


361 #ifde‡
__USE_GNU


364 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

365 
_G_va_li°
 
__¨g
)

366 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

367 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

368 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

369 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

370 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

371 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

372 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

380 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

381 
_G_va_li°
 
__¨g
)

382 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

383 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

384 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

388 
__BEGIN_NAMESPACE_STD


393 
	`fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

394 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

399 
	`sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

401 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

402 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

403 
__END_NAMESPACE_STD


405 #ifdef 
__USE_ISOC99


406 
__BEGIN_NAMESPACE_C99


411 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

412 
_G_va_li°
 
__¨g
)

413 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

419 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 1, 0)));

423 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

424 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

425 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

426 
__END_NAMESPACE_C99


430 
__BEGIN_NAMESPACE_STD


435 
	`fgëc
 (
FILE
 *
__°ªam
);

436 
	`gëc
 (
FILE
 *
__°ªam
);

442 
	`gëch¨
 ();

443 
__END_NAMESPACE_STD


447 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

449 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


454 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

455 
	`gëch¨_u∆ocked
 ();

458 #ifde‡
__USE_MISC


465 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

469 
__BEGIN_NAMESPACE_STD


477 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

478 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

484 
	`putch¨
 (
__c
);

485 
__END_NAMESPACE_STD


489 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

491 #ifde‡
__USE_MISC


498 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

501 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


506 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

507 
	`putch¨_u∆ocked
 (
__c
);

511 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

512 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

514 
	`gëw
 (
FILE
 *
__°ªam
);

517 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

521 
__BEGIN_NAMESPACE_STD


526 *
	`fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
);

533 *
	`gës
 (*
__s
);

534 
__END_NAMESPACE_STD


536 #ifde‡
__USE_GNU


543 *
	`fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

544 
FILE
 *
__ª°ri˘
 
__°ªam
);

548 #ifdef 
__USE_GNU


559 
_IO_ssize_t
 
	`__gëdñim
 (**
__ª°ri˘
 
__löïå
,

560 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

561 
FILE
 *
__ª°ri˘
 
__°ªam
);

562 
_IO_ssize_t
 
	`gëdñim
 (**
__ª°ri˘
 
__löïå
,

563 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

564 
FILE
 *
__ª°ri˘
 
__°ªam
);

572 
_IO_ssize_t
 
	`gëlöe
 (**
__ª°ri˘
 
__löïå
,

573 
size_t
 *
__ª°ri˘
 
__n
,

574 
FILE
 *
__ª°ri˘
 
__°ªam
);

578 
__BEGIN_NAMESPACE_STD


583 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

589 
	`puts
 (
__c⁄°
 *
__s
);

596 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

603 
size_t
 
	`‰ód
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

604 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

609 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

610 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

611 
__END_NAMESPACE_STD


613 #ifde‡
__USE_GNU


620 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

621 
FILE
 *
__ª°ri˘
 
__°ªam
);

624 #ifde‡
__USE_MISC


631 
size_t
 
	`‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, size_à
__size
,

632 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

633 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

634 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

638 
__BEGIN_NAMESPACE_STD


643 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

648 
	`·ñl
 (
FILE
 *
__°ªam
);

653 
	`ªwöd
 (
FILE
 *
__°ªam
);

654 
__END_NAMESPACE_STD


661 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


662 #i‚de‡
__USE_FILE_OFFSET64


667 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

672 
__off_t
 
	`·ñlo
 (
FILE
 *
__°ªam
);

674 #ifde‡
__REDIRECT


675 
	`__REDIRECT
 (
f£eko
,

676 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

677 
f£eko64
);

678 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

680 
	#f£eko
 
f£eko64


	)

681 
	#·ñlo
 
·ñlo64


	)

686 
__BEGIN_NAMESPACE_STD


687 #i‚de‡
__USE_FILE_OFFSET64


692 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

697 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

699 #ifde‡
__REDIRECT


700 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

701 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

702 
	`__REDIRECT
 (
f£ços
,

703 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

705 
	#fgëpos
 
fgëpos64


	)

706 
	#f£ços
 
f£ços64


	)

709 
__END_NAMESPACE_STD


711 #ifde‡
__USE_LARGEFILE64


712 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

713 
__off64_t
 
	`·ñlo64
 (
FILE
 *
__°ªam
);

714 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

715 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

718 
__BEGIN_NAMESPACE_STD


720 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

722 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
;

724 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
;

725 
__END_NAMESPACE_STD


727 #ifde‡
__USE_MISC


729 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

730 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

731 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

735 
__BEGIN_NAMESPACE_STD


740 
	`≥º‹
 (
__c⁄°
 *
__s
);

741 
__END_NAMESPACE_STD


747 
	~<bôs/sys_îæi°.h
>

750 #ifdef 
__USE_POSIX


752 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
;

755 #ifde‡
__USE_MISC


757 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

761 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

762 
deföed
 
__USE_MISC
)

767 
FILE
 *
	`p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
);

773 
	`p˛o£
 (
FILE
 *
__°ªam
);

777 #ifdef 
__USE_POSIX


779 *
	$˘îmid
 (*
__s
Ë
__THROW
;

783 #ifde‡
__USE_XOPEN


785 *
	`cu£rid
 (*
__s
);

789 #ifdef 
__USE_GNU


790 
ob°ack
;

793 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

794 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

795 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

796 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

797 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

798 
_G_va_li°
 
__¨gs
)

799 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

803 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


807 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

811 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

814 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

817 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


821 
	#__√ed_gë›t


	)

822 
	~<gë›t.h
>

827 #ifde‡
__USE_EXTERN_INLINES


828 
	~<bôs/°dio.h
>

830 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


831 
	~<bôs/°dio2.h
>

834 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

53 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_C99


192 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

277 
	$__°πod_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

278 **
__ª°ri˘
 
__íd±r
, 
__group
)

279 
__THROW
 
	`__n⁄nuŒ
 ((1));

280 
	$__°πof_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

281 **
__ª°ri˘
 
__íd±r
, 
__group
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

283 
	$__°πﬁd_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

284 **
__ª°ri˘
 
__íd±r
,

285 
__group
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #i‚de‡
__°πﬁ_öã∫Æ_deföed


287 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

288 **
__ª°ri˘
 
__íd±r
,

289 
__ba£
, 
__group
)

290 
__THROW
 
	`__n⁄nuŒ
 ((1));

291 
	#__°πﬁ_öã∫Æ_deföed
 1

	)

293 #i‚de‡
__°πoul_öã∫Æ_deföed


294 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

295 **
__ª°ri˘
 
__íd±r
,

296 
__ba£
, 
__group
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

298 
	#__°πoul_öã∫Æ_deföed
 1

	)

300 #i‡
deföed
 
__GNUC__
 || deföed 
__USE_ISOC99


301 #i‚de‡
__°πﬁl_öã∫Æ_deföed


302 
__exãnsi⁄__


303 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

304 **
__ª°ri˘
 
__íd±r
,

305 
__ba£
, 
__group
)

306 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	#__°πﬁl_öã∫Æ_deföed
 1

	)

309 #i‚de‡
__°πouŒ_öã∫Æ_deföed


310 
__exãnsi⁄__


311 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

312 
__ª°ri˘
 
__≈å
,

313 **
__ª°ri˘
 
__íd±r
,

314 
__ba£
, 
__group
)

315 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	#__°πouŒ_öã∫Æ_deföed
 1

	)

320 #ifde‡
__USE_EXTERN_INLINES


323 
__BEGIN_NAMESPACE_STD


324 
__ölöe
 

325 
	`__NTH
 (
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

327  
	`__°πod_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

328 
	}
}

329 
__ölöe
 

330 
__NTH
 (
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

331 
__ba£
))

333  
	`__°πﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

334 
	}
}

335 
__ölöe
 

336 
__NTH
 (
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

337 
__ba£
))

339  
	`__°πoul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

340 
	}
}

341 
__END_NAMESPACE_STD


343 #ifde‡
__USE_ISOC99


344 
__BEGIN_NAMESPACE_C99


345 
__ölöe
 

346 
__NTH
 (
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

348  
	`__°πof_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

349 
	}
}

350 
__ölöe
 

351 
__NTH
 (
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
))

353  
	`__°πﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0);

354 
	}
}

355 
__END_NAMESPACE_C99


358 #ifde‡
__USE_BSD


359 
__exãnsi⁄__
 
__ölöe
 

360 
__NTH
 (
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

361 
__ba£
))

363  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

364 
	}
}

365 
__exãnsi⁄__
 
__ölöe
 

366 
__NTH
 (
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

367 
__ba£
))

369  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

370 
	}
}

373 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


374 
__BEGIN_NAMESPACE_C99


375 
__exãnsi⁄__
 
__ölöe
 

376 
__NTH
 (
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

377 
__ba£
))

379  
	`__°πﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

380 
	}
}

381 
__exãnsi⁄__
 
__ölöe
 

382 
__NTH
 (
	$°πouŒ
 (
__c⁄°
 * 
__ª°ri˘
 
__≈å
, **__ª°ri˘ 
__íd±r
,

383 
__ba£
))

385  
	`__°πouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0);

386 
	}
}

387 
__END_NAMESPACE_C99


390 
__BEGIN_NAMESPACE_STD


391 
__ölöe
 

392 
__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

394  
	`°πod
 (
__≈å
, (**Ë
NULL
);

395 
	}
}

396 
__ölöe
 

397 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

399  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

400 
	}
}

401 
__ölöe
 

402 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

404  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

405 
	}
}

406 
__END_NAMESPACE_STD


408 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


409 
__BEGIN_NAMESPACE_C99


410 
__exãnsi⁄__
 
__ölöe
 

411 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

413  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

414 
	}
}

415 
__END_NAMESPACE_C99


420 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


424 *
	$l64a
 (
__n
Ë
__THROW
;

427 
	$a64l
 (
__c⁄°
 *
__s
)

428 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

432 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


433 
	~<sys/ty≥s.h
>

440 
	$øndom
 (Ë
__THROW
;

443 
	$§™dom
 (
__£ed
Ë
__THROW
;

449 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

450 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

454 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 #ifde‡
__USE_MISC


462 
	søndom_d©a


464 
öt32_t
 *
Âå
;

465 
öt32_t
 *
Ωå
;

466 
öt32_t
 *
°©e
;

467 
ønd_ty≥
;

468 
ønd_deg
;

469 
ønd_£p
;

470 
öt32_t
 *
íd_±r
;

473 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

474 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

477 
__THROW
 
	`__n⁄nuŒ
 ((2));

479 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

480 
size_t
 
__°©ñí
,

481 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

482 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

484 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

485 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

486 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 
__BEGIN_NAMESPACE_STD


493 
	$ønd
 (Ë
__THROW
;

495 
	$§™d
 (
__£ed
Ë
__THROW
;

496 
__END_NAMESPACE_STD


498 #ifde‡
__USE_POSIX


500 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

504 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


508 
	$dønd48
 (Ë
__THROW
;

509 
	`î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

512 
	$Ã™d48
 (Ë
__THROW
;

513 
	`ƒ™d48
 (
__xsubi
[3])

514 
__THROW
 
	`__n⁄nuŒ
 ((1));

517 
	$mønd48
 (Ë
__THROW
;

518 
	`jønd48
 (
__xsubi
[3])

519 
__THROW
 
	`__n⁄nuŒ
 ((1));

522 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

523 *
	`£ed48
 (
__£ed16v
[3])

524 
__THROW
 
	`__n⁄nuŒ
 ((1));

525 
	`lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

527 #ifde‡
__USE_MISC


531 
	sdønd48_d©a


533 
__x
[3];

534 
__ﬁd_x
[3];

535 
__c
;

536 
__öô
;

537 
__a
;

541 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

542 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

543 
	`î™d48_r
 (
__xsubi
[3],

544 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

545 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

548 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

549 *
__ª°ri˘
 
__ªsu…
)

550 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 
	`ƒ™d48_r
 (
__xsubi
[3],

552 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

553 *
__ª°ri˘
 
__ªsu…
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

558 *
__ª°ri˘
 
__ªsu…
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

560 
	`jønd48_r
 (
__xsubi
[3],

561 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

562 *
__ª°ri˘
 
__ªsu…
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

566 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

567 
__THROW
 
	`__n⁄nuŒ
 ((2));

569 
	`£ed48_r
 (
__£ed16v
[3],

570 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 
	`lc⁄g48_r
 (
__∑øm
[7],

573 
dønd48_d©a
 *
__buf„r
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

580 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


581 
	#__mÆloc_™d_ˇŒoc_deföed


	)

582 
__BEGIN_NAMESPACE_STD


584 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

586 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

587 
__THROW
 
__©åibuã_mÆloc__
;

588 
__END_NAMESPACE_STD


591 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


592 
__BEGIN_NAMESPACE_STD


595 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

597 
	$‰ì
 (*
__±r
Ë
__THROW
;

598 
__END_NAMESPACE_STD


600 #ifdef 
__USE_MISC


602 
	$c‰ì
 (*
__±r
Ë
__THROW
;

605 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


606 
	~<Æloˇ.h
>

609 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


611 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
;

614 #ifde‡
__USE_XOPEN2K


616 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

617 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

620 
__BEGIN_NAMESPACE_STD


622 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

627 
__END_NAMESPACE_STD


629 #ifdef 
__USE_MISC


632 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

633 
__THROW
 
	`__n⁄nuŒ
 ((1));

636 
__BEGIN_NAMESPACE_STD


640 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 
__END_NAMESPACE_STD


643 #ifde‡
__USE_ISOC99


644 
__BEGIN_NAMESPACE_C99


647 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

648 
__END_NAMESPACE_C99


652 
__BEGIN_NAMESPACE_STD


654 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

655 
__END_NAMESPACE_STD


659 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

661 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


665 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

668 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


671 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

672 
__THROW
 
	`__n⁄nuŒ
 ((2));

675 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
;

678 #ifdef 
__USE_MISC


682 
	$˛óªnv
 (Ë
__THROW
;

686 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


691 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

701 #i‚de‡
__USE_FILE_OFFSET64


702 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

704 #ifde‡
__REDIRECT


705 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
Ë
	`__n⁄nuŒ
 ((1));

707 
	#mk°emp
 
mk°emp64


	)

710 #ifde‡
__USE_LARGEFILE64


711 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1));

715 #ifde‡
__USE_BSD


721 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

725 
__BEGIN_NAMESPACE_STD


730 
	`sy°em
 (
__c⁄°
 *
__comm™d
);

731 
__END_NAMESPACE_STD


734 #ifdef 
__USE_GNU


738 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


749 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

750 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
;

755 #i‚de‡
__COMPAR_FN_T


756 
	#__COMPAR_FN_T


	)

757 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

759 #ifdef 
__USE_GNU


760 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

764 
__BEGIN_NAMESPACE_STD


767 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

768 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

769 
	`__n⁄nuŒ
 ((1, 2, 5));

773 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

774 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

778 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

779 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

780 
__END_NAMESPACE_STD


782 #ifde‡
__USE_ISOC99


783 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

784 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

788 
__BEGIN_NAMESPACE_STD


792 
div_t
 
	$div
 (
__numî
, 
__díom
)

793 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

794 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

796 
__END_NAMESPACE_STD


798 #ifde‡
__USE_ISOC99


799 
__BEGIN_NAMESPACE_C99


800 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

801 
__díom
)

802 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

803 
__END_NAMESPACE_C99


807 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


814 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

820 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

821 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

826 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

827 
__THROW
 
	`__n⁄nuŒ
 ((3));

830 #ifde‡
__USE_MISC


832 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

835 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

836 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

838 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

839 
__THROW
 
	`__n⁄nuŒ
 ((3));

844 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

847 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

848 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

849 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

851 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

852 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

853 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

854 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

855 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

856 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

857 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

858 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

863 
__BEGIN_NAMESPACE_STD


866 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

870 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

873 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

877 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

878 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

880 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

881 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

882 
__THROW
;

883 
__END_NAMESPACE_STD


886 #ifde‡
__USE_SVID


891 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

895 #ifde‡
__USE_XOPEN_EXTENDED


902 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

903 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

904 **
__ª°ri˘
 
__vÆuï
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

909 #ifde‡
__USE_XOPEN


911 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

917 #ifde‡
__USE_XOPEN2K


919 
	`posix_›í±
 (
__oÊag
);

922 #ifde‡
__USE_XOPEN


927 
	$gø¡±
 (
__fd
Ë
__THROW
;

931 
	$u∆ock±
 (
__fd
Ë
__THROW
;

936 *
	$±¢ame
 (
__fd
Ë
__THROW
;

939 #ifde‡
__USE_GNU


943 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

944 
__THROW
 
	`__n⁄nuŒ
 ((2));

947 
	`gë±
 ();

950 #ifde‡
__USE_BSD


954 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

955 
__THROW
 
	`__n⁄nuŒ
 ((1));

959 #unde‡
__√ed_mÆloc_™d_ˇŒoc


961 
__END_DECLS


	@/usr/include/string.h

23 #i‚def 
_STRING_H


24 
	#_STRING_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 
__BEGIN_NAMESPACE_STD


38 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

39 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

40 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

43 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

44 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

45 
__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


51 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

52 
__c
, 
size_t
 
__n
)

53 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

57 
__BEGIN_NAMESPACE_STD


59 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

62 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

63 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

66 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

67 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

68 
__END_NAMESPACE_STD


70 #ifde‡
__USE_GNU


73 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

74 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

82 
__BEGIN_NAMESPACE_STD


84 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

85 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

87 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

88 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

89 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

92 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

93 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

95 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

96 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

99 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

100 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

102 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

106 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

109 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

110 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

111 
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
__END_NAMESPACE_STD


114 #ifde‡
__USE_GNU


118 
	~<xloˇÀ.h
>

121 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

124 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

125 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

128 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


130 *
	$°rdup
 (
__c⁄°
 *
__s
)

131 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

137 #i‡
deföed
 
__USE_GNU


138 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

139 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

142 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


144 
	#°rdu∑
(
s
) \

145 (
__exãnsi⁄__
 \

147 
__c⁄°
 *
__ﬁd
 = (
s
); \

148 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

149 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

150 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

151 
	}
}))

	)

154 
	#°∫du∑
(
s
, 
n
) \

155 (
__exãnsi⁄__
 \

157 
__c⁄°
 *
__ﬁd
 = (
s
); \

158 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

159 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

160 
__√w
[
__Àn
] = '\0'; \

161 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

162 }))

	)

165 
__BEGIN_NAMESPACE_STD


167 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

168 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

170 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

171 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

172 
__END_NAMESPACE_STD


174 #ifde‡
__USE_GNU


177 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

178 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

181 
__BEGIN_NAMESPACE_STD


184 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

185 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

188 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

189 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

191 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

192 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

194 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

195 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

199 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

200 
__THROW
 
	`__n⁄nuŒ
 ((2));

201 
__END_NAMESPACE_STD


205 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

207 **
__ª°ri˘
 
__ßve_±r
)

208 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

209 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


210 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

211 **
__ª°ri˘
 
__ßve_±r
)

212 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

215 #ifde‡
__USE_GNU


217 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

218 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

221 #ifde‡
__USE_GNU


225 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

226 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

227 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

231 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

232 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

233 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

234 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

235 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

236 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

240 
__BEGIN_NAMESPACE_STD


242 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

243 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__END_NAMESPACE_STD


246 #ifdef 
__USE_GNU


249 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

250 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

254 
__BEGIN_NAMESPACE_STD


256 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

257 
__END_NAMESPACE_STD


258 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


266 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


269 #ifde‡
__REDIRECT_NTH


270 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

271 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

272 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

274 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

275 
__THROW
 
	`__n⁄nuŒ
 ((2));

276 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

281 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

282 
__THROW
 
	`__n⁄nuŒ
 ((2));

288 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_BSD


292 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

296 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

300 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

303 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

304 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

307 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

308 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

312 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

316 #ifdef 
__USE_GNU


317 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

318 #ifde‡
__GNUC__


319 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

320 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

325 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

330 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

333 #ifdef 
__USE_GNU


336 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

337 
__loˇÀ_t
 
__loc
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

340 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

341 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

345 #ifdef 
__USE_BSD


348 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

349 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

353 #ifdef 
__USE_GNU


355 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

356 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

359 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

362 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

364 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

369 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

370 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

371 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

373 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

377 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

380 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

382 #i‚de‡
ba£«me


387 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

392 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

393 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

394 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


414 
	~<bôs/°rög.h
>

417 
	~<bôs/°rög2.h
>

420 #i‡
__USE_FORTIFY_LEVEL
 > 0 && !
deföed
 
__˝lu•lus


422 
	~<bôs/°rög3.h
>

426 
__END_DECLS


	@/usr/include/sys/fcntl.h

1 
	~<f˙é.h
>

	@/usr/include/sys/file.h

19 #i‚def 
_SYS_FILE_H


20 
	#_SYS_FILE_H
 1

	)

22 
	~<„©uªs.h
>

24 #i‚def 
_FCNTL_H


25 
	~<f˙é.h
>

28 
	g__BEGIN_DECLS


33 #i‚de‡
L_SET


34 
	#L_SET
 0

	)

35 
	#L_INCR
 1

	)

36 
	#L_XTND
 2

	)

41 
	#LOCK_SH
 1

	)

42 
	#LOCK_EX
 2

	)

43 
	#LOCK_UN
 8

	)

46 
	#LOCK_NB
 4

	)

51 
	$Êock
 (
__fd
, 
__›î©i⁄
Ë
__THROW
;

54 
__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	~<limôs.h
>

23 
	~<löux/limôs.h
>

24 
	~<löux/∑øm.h
>

28 
	#NBBY
 
CHAR_BIT


	)

29 #i‚def 
NGROUPS


30 
	#NGROUPS
 
NGROUPS_MAX


	)

32 
	#MAXSYMLINKS
 20

	)

33 
	#CANBSIZ
 
MAX_CANON


	)

34 
	#NCARGS
 
ARG_MAX


	)

35 
	#MAXPATHLEN
 
PATH_MAX


	)

39 
	#NOFILE
 256

	)

42 
	~<sys/ty≥s.h
>

45 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

46 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

47 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

48 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

51 #i‚de‡
howm™y


52 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

54 #ifde‡
__GNUC__


55 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

56 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

57 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

59 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

61 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

64 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

65 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

69 
	#DEV_BSIZE
 512

	)

	@/usr/include/sys/resource.h

19 #i‚def 
_SYS_RESOURCE_H


20 
	#_SYS_RESOURCE_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ªsour˚.h
>

27 #i‚de‡
__id_t_deföed


28 
__id_t
 
	tid_t
;

29 
	#__id_t_deföed


	)

32 
	g__BEGIN_DECLS


38 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


39 
__æimô_ªsour˚
 
	t__æimô_ªsour˚_t
;

40 
__rußge_who
 
	t__rußge_who_t
;

41 
__¥i‹ôy_which
 
	t__¥i‹ôy_which_t
;

43 
	t__æimô_ªsour˚_t
;

44 
	t__rußge_who_t
;

45 
	t__¥i‹ôy_which_t
;

50 #i‚de‡
__USE_FILE_OFFSET64


51 
	$gëæimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

52 
æimô
 *
__æimôs
Ë
__THROW
;

54 #ifde‡
__REDIRECT_NTH


55 
	`__REDIRECT_NTH
 (
gëæimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

56 
æimô
 *
__æimôs
), 
gëæimô64
);

58 
	#gëæimô
 
gëæimô64


	)

61 #ifde‡
__USE_LARGEFILE64


62 
	$gëæimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

63 
æimô64
 *
__æimôs
Ë
__THROW
;

69 #i‚de‡
__USE_FILE_OFFSET64


70 
	$£ålimô
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

71 
__c⁄°
 
æimô
 *
__æimôs
Ë
__THROW
;

73 #ifde‡
__REDIRECT_NTH


74 
	`__REDIRECT_NTH
 (
£ålimô
, (
__æimô_ªsour˚_t
 
__ªsour˚
,

75 
__c⁄°
 
æimô
 *
__æimôs
),

76 
£ålimô64
);

78 
	#£ålimô
 
£ålimô64


	)

81 #ifde‡
__USE_LARGEFILE64


82 
	$£ålimô64
 (
__æimô_ªsour˚_t
 
__ªsour˚
,

83 
__c⁄°
 
æimô64
 *
__æimôs
Ë
__THROW
;

88 
	$gërußge
 (
__rußge_who_t
 
__who
, 
rußge
 *
__ußge
Ë
__THROW
;

94 
	$gë¥i‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
Ë
__THROW
;

98 
	$£çri‹ôy
 (
__¥i‹ôy_which_t
 
__which
, 
id_t
 
__who
, 
__¥io
)

99 
__THROW
;

101 
__END_DECLS


	@/usr/include/sys/select.h

22 #i‚de‡
_SYS_SELECT_H


23 
	#_SYS_SELECT_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

31 
	~<bôs/£À˘.h
>

34 
	~<bôs/sig£t.h
>

36 #i‚de‡
__sig£t_t_deföed


37 
	#__sig£t_t_deföed


	)

38 
__sig£t_t
 
	tsig£t_t
;

42 
	#__√ed_time_t


	)

43 
	#__√ed_time•ec


	)

44 
	~<time.h
>

45 
	#__√ed_timevÆ


	)

46 
	~<bôs/time.h
>

48 #i‚de‡
__su£c⁄ds_t_deföed


49 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

50 
	#__su£c⁄ds_t_deföed


	)

55 
	t__fd_mask
;

58 #unde‡
__NFDBITS


59 #unde‡
__FDELT


60 #unde‡
__FDMASK


62 
	#__NFDBITS
 (8 *  (
__fd_mask
))

	)

63 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

64 
	#__FDMASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

71 #ifde‡
__USE_XOPEN


72 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

75 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

76 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

78 } 
	tfd_£t
;

81 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

83 #ifde‡
__USE_MISC


85 
__fd_mask
 
	tfd_mask
;

88 
	#NFDBITS
 
__NFDBITS


	)

93 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

94 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

95 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

96 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

99 
__BEGIN_DECLS


109 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

110 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

111 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

112 
timevÆ
 *
__ª°ri˘
 
__timeout
);

114 #ifde‡
__USE_XOPEN2K


121 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

122 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

123 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

124 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

125 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

128 
	g__END_DECLS


	@/usr/include/sys/socket.h

20 #i‚def 
_SYS_SOCKET_H


21 
	#_SYS_SOCKET_H
 1

	)

23 
	~<„©uªs.h
>

25 
	g__BEGIN_DECLS


27 
	~<sys/uio.h
>

28 
	#__√ed_size_t


	)

29 
	~<°ddef.h
>

35 
	~<bôs/sockë.h
>

37 #ifde‡
__USE_BSD


40 
	sosockaddr


42 
	mß_Ámûy
;

43 
	mß_d©a
[14];

51 
	mSHUT_RD
 = 0,

52 
	#SHUT_RD
 
SHUT_RD


	)

53 
	mSHUT_WR
,

54 
	#SHUT_WR
 
SHUT_WR


	)

55 
	mSHUT_RDWR


56 
	#SHUT_RDWR
 
SHUT_RDWR


	)

65 #i‡
deföed
 
__˝lu•lus
 || !
__GNUC_PREREQ
 (2, 7Ë|| !deföed 
__USE_GNU


66 
	#__SOCKADDR_ARG
 
sockaddr
 *
__ª°ri˘


	)

67 
	#__CONST_SOCKADDR_ARG
 
__c⁄°
 
sockaddr
 *

	)

71 
	#__SOCKADDR_ALLTYPES
 \

72 
	`__SOCKADDR_ONETYPE
 (
sockaddr
) \

73 
	`__SOCKADDR_ONETYPE
 (
sockaddr_©
) \

74 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ax25
) \

75 
	`__SOCKADDR_ONETYPE
 (
sockaddr_dl
) \

76 
	`__SOCKADDR_ONETYPE
 (
sockaddr_e⁄
) \

77 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö
) \

78 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö6
) \

79 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ö¨p
) \

80 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ùx
) \

81 
	`__SOCKADDR_ONETYPE
 (
sockaddr_iso
) \

82 
	`__SOCKADDR_ONETYPE
 (
sockaddr_ns
) \

83 
	`__SOCKADDR_ONETYPE
 (
sockaddr_un
) \

84 
	`__SOCKADDR_ONETYPE
 (
sockaddr_x25
)

	)

86 
	#__SOCKADDR_ONETYPE
(
ty≥
Ëty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

87 uni⁄ { 
	m__SOCKADDR_ALLTYPES


88 } 
	t__SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

89 #unde‡
__SOCKADDR_ONETYPE


90 
	#__SOCKADDR_ONETYPE
(
ty≥
Ë
__c⁄°
 ty≥ *
__ª°ri˘
 
__
##ty≥##__;

	)

91 uni⁄ { 
	m__SOCKADDR_ALLTYPES


92 } 
	t__CONST_SOCKADDR_ARG
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

93 #unde‡
__SOCKADDR_ONETYPE


100 
	$sockë
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
Ë
__THROW
;

106 
	`sockë∑ú
 (
__domaö
, 
__ty≥
, 
__¥Ÿocﬁ
,

107 
__fds
[2]Ë
__THROW
;

110 
	$böd
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
)

111 
__THROW
;

114 
	$gësock«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

115 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

124 
	`c⁄√˘
 (
__fd
, 
__CONST_SOCKADDR_ARG
 
__addr
, 
sockÀn_t
 
__Àn
);

128 
	$gë≥î«me
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

129 
sockÀn_t
 *
__ª°ri˘
 
__Àn
Ë
__THROW
;

136 
ssize_t
 
	`£nd
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
, 
__Êags
);

143 
ssize_t
 
	`ªcv
 (
__fd
, *
__buf
, 
size_t
 
__n
, 
__Êags
);

150 
ssize_t
 
	`£ndto
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

151 
__Êags
, 
__CONST_SOCKADDR_ARG
 
__addr
,

152 
sockÀn_t
 
__addr_Àn
);

161 
ssize_t
 
	`ªcv‰om
 (
__fd
, *
__ª°ri˘
 
__buf
, 
size_t
 
__n
,

162 
__Êags
, 
__SOCKADDR_ARG
 
__addr
,

163 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

171 
ssize_t
 
	`£ndmsg
 (
__fd
, 
__c⁄°
 
msghdr
 *
__mesßge
,

172 
__Êags
);

179 
ssize_t
 
	`ªcvmsg
 (
__fd
, 
msghdr
 *
__mesßge
, 
__Êags
);

185 
	$gësock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

186 *
__ª°ri˘
 
__›tvÆ
,

187 
sockÀn_t
 *
__ª°ri˘
 
__›éí
Ë
__THROW
;

192 
	$£tsock›t
 (
__fd
, 
__Àvñ
, 
__›äame
,

193 
__c⁄°
 *
__›tvÆ
, 
sockÀn_t
 
__›éí
Ë
__THROW
;

199 
	$li°í
 (
__fd
, 
__n
Ë
__THROW
;

209 
	`ac˚±
 (
__fd
, 
__SOCKADDR_ARG
 
__addr
,

210 
sockÀn_t
 *
__ª°ri˘
 
__addr_Àn
);

218 
	$shutdown
 (
__fd
, 
__how
Ë
__THROW
;

221 #ifde‡
__USE_XOPEN2K


223 
	$sock©m¨k
 (
__fd
Ë
__THROW
;

227 #ifde‡
__USE_MISC


231 
	$isfdty≥
 (
__fd
, 
__fdty≥
Ë
__THROW
;

234 
__END_DECLS


	@/usr/include/sys/stat.h

23 #i‚def 
_SYS_STAT_H


24 
	#_SYS_STAT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_MISC


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #ifde‡
__USE_MISC


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

153 #ifdef 
__USE_POSIX199309


154 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

155 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

156 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

162 
	#S_ISUID
 
__S_ISUID


	)

163 
	#S_ISGID
 
__S_ISGID


	)

165 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


167 
	#S_ISVTX
 
__S_ISVTX


	)

170 
	#S_IRUSR
 
__S_IREAD


	)

171 
	#S_IWUSR
 
__S_IWRITE


	)

172 
	#S_IXUSR
 
__S_IEXEC


	)

174 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

176 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


177 
	#S_IREAD
 
S_IRUSR


	)

178 
	#S_IWRITE
 
S_IWUSR


	)

179 
	#S_IEXEC
 
S_IXUSR


	)

182 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

183 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

184 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

186 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

188 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

189 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

190 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

192 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

195 #ifdef 
__USE_BSD


197 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

198 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

199 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

201 
	#S_BLKSIZE
 512

	)

205 #i‚de‡
__USE_FILE_OFFSET64


207 
	$°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

208 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

212 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
°©
, (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

216 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

217 
	`__n⁄nuŒ
 ((1, 2));

218 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

219 
	`__n⁄nuŒ
 ((2));

221 
	#°©
 
°©64


	)

222 
	#f°©
 
f°©64


	)

225 #ifde‡
__USE_LARGEFILE64


226 
	$°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

227 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

228 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


232 #i‚de‡
__USE_FILE_OFFSET64


235 
	$l°©
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

236 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

238 #ifde‡
__REDIRECT_NTH


239 
	`__REDIRECT_NTH
 (
l°©
,

240 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

241 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

242 
	`__n⁄nuŒ
 ((1, 2));

244 
	#l°©
 
l°©64


	)

247 #ifde‡
__USE_LARGEFILE64


248 
	$l°©64
 (
__c⁄°
 *
__ª°ri˘
 
__fûe
,

249 
°©64
 *
__ª°ri˘
 
__buf
)

250 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

256 
	$chmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

257 
__THROW
 
	`__n⁄nuŒ
 ((1));

259 #ifde‡
__USE_BSD


263 
	$lchmod
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
)

264 
__THROW
 
	`__n⁄nuŒ
 ((1));

268 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


269 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

275 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

277 #ifdef 
__USE_GNU


280 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

284 
	$mkdú
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


291 
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$mkfifo
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

315 #i‚de‡
_STAT_VER


316 
	#_STAT_VER
 0

	)

318 #i‚de‡
_MKNOD_VER


319 
	#_MKNOD_VER
 0

	)

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

325 
__THROW
 
	`__n⁄nuŒ
 ((3));

326 
	$__x°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

327 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

328 
	$__lx°©
 (
__vî
, 
__c⁄°
 *
__fûíame
,

329 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

331 #ifde‡
__REDIRECT_NTH


332 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

333 
°©
 *
__°©_buf
), 
__fx°©64
)

334 
	`__n⁄nuŒ
 ((3));

335 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

336 
°©
 *
__°©_buf
), 
__x°©64
)

337 
	`__n⁄nuŒ
 ((2, 3));

338 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, 
__c⁄°
 *
__fûíame
,

339 
°©
 *
__°©_buf
), 
__lx°©64
)

340 
	`__n⁄nuŒ
 ((2, 3));

343 
	#__fx°©
 
__fx°©64


	)

344 
	#__x°©
 
__x°©64


	)

345 
	#__lx°©
 
__lx°©64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

351 
__THROW
 
	`__n⁄nuŒ
 ((3));

352 
	$__x°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

353 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

354 
	$__lx°©64
 (
__vî
, 
__c⁄°
 *
__fûíame
,

355 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

357 
	$__xmknod
 (
__vî
, 
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
,

358 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

360 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

363 
__ölöe__
 

364 
	`__NTH
 (
	$°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

366  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

367 
	}
}

369 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


370 
__ölöe__
 

371 
__NTH
 (
	$l°©
 (
__c⁄°
 *
__∑th
, 
°©
 *
__°©buf
))

373  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

374 
	}
}

377 
__ölöe__
 

378 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

380  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

381 
	}
}

383 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


384 
__ölöe__
 

385 
__NTH
 (
	$mknod
 (
__c⁄°
 *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

387  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

388 
	}
}

391 #i‡
deföed
 
__USE_LARGEFILE64
 \

392 && (! 
deföed
 
__USE_FILE_OFFSET64
 \

393 || (
deföed
 
__REDIRECT_NTH
 && deföed 
__OPTIMIZE__
))

394 
__ölöe__
 

395 
__NTH
 (
	$°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

397  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

398 
	}
}

400 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


401 
__ölöe__
 

402 
__NTH
 (
	$l°©64
 (
__c⁄°
 *
__∑th
, 
°©64
 *
__°©buf
))

404  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

405 
	}
}

408 
__ölöe__
 

409 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

411  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

412 
	}
}

417 
__END_DECLS


	@/usr/include/sys/syscall.h

19 #i‚de‡
_SYSCALL_H


20 
	#_SYSCALL_H
 1

	)

25 
	~<asm/uni°d.h
>

27 #i‚de‡
_LIBC


32 
	~<bôs/sysˇŒ.h
>

	@/usr/include/sys/time.h

19 #i‚de‡
_SYS_TIME_H


20 
	#_SYS_TIME_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<bôs/ty≥s.h
>

25 
	#__√ed_time_t


	)

26 
	~<time.h
>

27 
	#__√ed_timevÆ


	)

28 
	~<bôs/time.h
>

30 
	~<sys/£À˘.h
>

32 #i‚de‡
__su£c⁄ds_t_deföed


33 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

34 
	#__su£c⁄ds_t_deföed


	)

38 
	g__BEGIN_DECLS


40 #ifde‡
__USE_GNU


42 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

43 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

44 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

45 }

	)

46 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

47 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

48 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

49 }

	)

53 #ifde‡
__USE_BSD


56 
	stimez⁄e


58 
	mtz_möuãswe°
;

59 
	mtz_d°time
;

62 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

64 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

72 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

73 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
;

75 #ifde‡
__USE_BSD


78 
	$£âimeofday
 (
__c⁄°
 
timevÆ
 *
__tv
,

79 
__c⁄°
 
timez⁄e
 *
__tz
Ë
__THROW
;

85 
	$adjtime
 (
__c⁄°
 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 
__c⁄°
 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	`utimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
;

141 #ifde‡
__USE_BSD


143 
	`lutimes
 (
__c⁄°
 *
__fûe
, __c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
;

147 
	`futimes
 (
__fd
, 
__c⁄°
 
timevÆ
 
__tvp
[2]Ë
__THROW
;

151 #ifde‡
__USE_BSD


154 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

155 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

156 
	#timîcmp
(
a
, 
b
, 
CMP
) \

157 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

158 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

159 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

160 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

162 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

163 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

164 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

166 ++(
ªsu…
)->
tv_£c
; \

167 (
ªsu…
)->
tv_u£c
 -= 1000000; \

169 
	}
} 0)

	)

170 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

172 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

173 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

174 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

175 --(
ªsu…
)->
tv_£c
; \

176 (
ªsu…
)->
tv_u£c
 += 1000000; \

178 } 0)

	)

181 
	g__END_DECLS


	@/usr/include/sys/types.h

24 #i‚def 
_SYS_TYPES_H


25 
	#_SYS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifdef 
__USE_BSD


34 #i‚de‡
__u_ch¨_deföed


35 
__u_ch¨
 
	tu_ch¨
;

36 
__u_sh‹t
 
	tu_sh‹t
;

37 
__u_öt
 
	tu_öt
;

38 
__u_l⁄g
 
	tu_l⁄g
;

39 
__quad_t
 
	tquad_t
;

40 
__u_quad_t
 
	tu_quad_t
;

41 
__fsid_t
 
	tfsid_t
;

42 
	#__u_ch¨_deföed


	)

46 
__loff_t
 
	tloff_t
;

48 #i‚de‡
__öo_t_deföed


49 #i‚de‡
__USE_FILE_OFFSET64


50 
__öo_t
 
	töo_t
;

52 
__öo64_t
 
	töo_t
;

54 
	#__öo_t_deföed


	)

56 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


57 
__öo64_t
 
	töo64_t
;

58 
	#__öo64_t_deföed


	)

61 #i‚de‡
__dev_t_deföed


62 
__dev_t
 
	tdev_t
;

63 
	#__dev_t_deföed


	)

66 #i‚de‡
__gid_t_deföed


67 
__gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‚de‡
__mode_t_deföed


72 
__mode_t
 
	tmode_t
;

73 
	#__mode_t_deföed


	)

76 #i‚de‡
__∆ök_t_deföed


77 
__∆ök_t
 
	t∆ök_t
;

78 
	#__∆ök_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

86 #i‚de‡
__off_t_deföed


87 #i‚de‡
__USE_FILE_OFFSET64


88 
__off_t
 
	toff_t
;

90 
__off64_t
 
	toff_t
;

92 
	#__off_t_deföed


	)

94 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


95 
__off64_t
 
	toff64_t
;

96 
	#__off64_t_deföed


	)

99 #i‚de‡
__pid_t_deföed


100 
__pid_t
 
	tpid_t
;

101 
	#__pid_t_deföed


	)

104 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__id_t_deföed


105 
__id_t
 
	tid_t
;

106 
	#__id_t_deföed


	)

109 #i‚de‡
__ssize_t_deföed


110 
__ssize_t
 
	tssize_t
;

111 
	#__ssize_t_deföed


	)

114 #ifdef 
__USE_BSD


115 #i‚de‡
__daddr_t_deföed


116 
__daddr_t
 
	tdaddr_t
;

117 
__ˇddr_t
 
	tˇddr_t
;

118 
	#__daddr_t_deföed


	)

122 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


123 
__key_t
 
	tkey_t
;

124 
	#__key_t_deföed


	)

127 #ifde‡
__USE_XOPEN


128 
	#__√ed_˛ock_t


	)

130 
	#__√ed_time_t


	)

131 
	#__√ed_timî_t


	)

132 
	#__√ed_˛ockid_t


	)

133 
	~<time.h
>

135 #ifde‡
__USE_XOPEN


136 #i‚de‡
__u£c⁄ds_t_deföed


137 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

138 
	#__u£c⁄ds_t_deföed


	)

140 #i‚de‡
__su£c⁄ds_t_deföed


141 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

142 
	#__su£c⁄ds_t_deföed


	)

146 
	#__√ed_size_t


	)

147 
	~<°ddef.h
>

149 #ifde‡
__USE_MISC


151 
	tul⁄g
;

152 
	tush‹t
;

153 
	tuöt
;

158 #i‡!
__GNUC_PREREQ
 (2, 7)

161 #i‚de‡
__öt8_t_deföed


162 
	#__öt8_t_deföed


	)

163 
	töt8_t
;

164 
	töt16_t
;

165 
	töt32_t
;

166 #i‡
__GLIBC_HAVE_LONG_LONG


167 
__exãnsi⁄__
 
	töt64_t
;

172 
	tu_öt8_t
;

173 
	tu_öt16_t
;

174 
	tu_öt32_t
;

175 #i‡
__GLIBC_HAVE_LONG_LONG


176 
__exãnsi⁄__
 
	tu_öt64_t
;

179 
	tªgi°î_t
;

184 
	#__ötN_t
(
N
, 
MODE
) \

185 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

186 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

187 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 #i‚de‡
	t__öt8_t_deföed


190 
	t__öt8_t_deföed


	)

191 
	t__ötN_t
 (8, 
	t__QI__
);

192 
__ötN_t
 (16, 
__HI__
);

193 
__ötN_t
 (32, 
__SI__
);

194 
__ötN_t
 (64, 
__DI__
);

197 
__u_ötN_t
 (8, 
__QI__
);

198 
__u_ötN_t
 (16, 
__HI__
);

199 
__u_ötN_t
 (32, 
__SI__
);

200 
__u_ötN_t
 (64, 
__DI__
);

202 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

208 
	#__BIT_TYPES_DEFINED__
 1

	)

211 #ifdef 
__USE_BSD


213 
	~<ídün.h
>

216 
	~<sys/£À˘.h
>

219 
	~<sys/sysma¸os.h
>

223 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__blksize_t_deföed


224 
__blksize_t
 
	tblksize_t
;

225 
	#__blksize_t_deföed


	)

229 #i‚de‡
__USE_FILE_OFFSET64


230 #i‚de‡
__blk˙t_t_deföed


231 
__blk˙t_t
 
	tblk˙t_t
;

232 
	#__blk˙t_t_deföed


	)

234 #i‚de‡
__fsblk˙t_t_deföed


235 
__fsblk˙t_t
 
	tfsblk˙t_t
;

236 
	#__fsblk˙t_t_deföed


	)

238 #i‚de‡
__fsfû˙t_t_deföed


239 
__fsfû˙t_t
 
	tfsfû˙t_t
;

240 
	#__fsfû˙t_t_deföed


	)

243 #i‚de‡
__blk˙t_t_deföed


244 
__blk˙t64_t
 
	tblk˙t_t
;

245 
	#__blk˙t_t_deföed


	)

247 #i‚de‡
__fsblk˙t_t_deföed


248 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

249 
	#__fsblk˙t_t_deföed


	)

251 #i‚de‡
__fsfû˙t_t_deföed


252 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

253 
	#__fsfû˙t_t_deföed


	)

257 #ifde‡
__USE_LARGEFILE64


258 
__blk˙t64_t
 
	tblk˙t64_t
;

259 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

260 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

265 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


266 
	~<bôs/±hªadty≥s.h
>

269 
	g__END_DECLS


	@/usr/include/sys/wait.h

23 #i‚def 
_SYS_WAIT_H


24 
	#_SYS_WAIT_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<sig«l.h
>

31 
	~<sys/ªsour˚.h
>

34 #i‡!
deföed
 
_STDLIB_H
 || !deföed 
__USE_XOPEN


37 
	~<bôs/waôÊags.h
>

39 #ifdef 
__USE_BSD


44 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


45 
	#__WAIT_INT
(
°©us
) \

46 (
	`__exãnsi⁄__
 ({ uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; } 
__u
; \

47 
__u
.
__ö
 = (
°©us
); __u.
__i
; }))

	)

49 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

57 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


58 
	#__WAIT_STATUS
 *

	)

59 
	#__WAIT_STATUS_DEFN
 *

	)

64 
waô
 *
	m__u±r
;

65 *
	m__ùå
;

66 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

67 
	#__WAIT_STATUS_DEFN
 *

	)

72 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

73 
	#__WAIT_STATUS
 *

	)

74 
	#__WAIT_STATUS_DEFN
 *

	)

79 
	~<bôs/waô°©us.h
>

81 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
(
	`__WAIT_INT
(°©us))

	)

82 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
(
	`__WAIT_INT
(°©us))

	)

83 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
(
	`__WAIT_INT
(°©us))

	)

84 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
(
	`__WAIT_INT
(°©us))

	)

85 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
(
	`__WAIT_INT
(°©us))

	)

86 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
(
	`__WAIT_INT
(°©us))

	)

87 #ifde‡
__WIFCONTINUED


88 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
(
	`__WAIT_INT
(°©us))

	)

92 #ifdef 
__USE_BSD


93 
	#WCOREFLAG
 
__WCOREFLAG


	)

94 
	#WCOREDUMP
(
°©us
Ë
	`__WCOREDUMP
(
	`__WAIT_INT
(°©us))

	)

95 
	#W_EXITCODE
(
ªt
, 
sig
Ë
	`__W_EXITCODE
‘ë, sig)

	)

96 
	#W_STOPCODE
(
sig
Ë
	`__W_STOPCODE
(sig)

	)

100 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


103 
	mP_ALL
,

104 
	mP_PID
,

105 
	mP_PGID


106 } 
	tidty≥_t
;

115 
__pid_t
 
waô
 (
__WAIT_STATUS
 
__°©_loc
);

117 #ifdef 
__USE_BSD


119 
	#WAIT_ANY
 (-1Ë

	)

120 
	#WAIT_MYPGRP
 0

	)

138 
__pid_t
 
waôpid
 (__pid_à
__pid
, *
__°©_loc
, 
__›ti⁄s
);

140 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


141 
	#__√ed_sigöfo_t


	)

142 
	~<bôs/sigöfo.h
>

154 
waôid
 (
idty≥_t
 
__idty≥
, 
__id_t
 
__id
, 
sigöfo_t
 *
__öf›
,

155 
__›ti⁄s
);

158 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


161 
	grußge
;

168 
__pid_t
 
	$waô3
 (
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

169 
rußge
 * 
__ußge
Ë
__THROW
;

172 #ifde‡
__USE_BSD


175 
rußge
;

178 
__pid_t
 
	$waô4
 (
__pid_t
 
__pid
, 
__WAIT_STATUS
 
__°©_loc
, 
__›ti⁄s
,

179 
rußge
 *
__ußge
Ë
__THROW
;

183 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

118 
	stime•ec


120 
__time_t
 
tv_£c
;

121 
tv_n£c
;

125 #unde‡
__√ed_time•ec


128 #ifdef 
_TIME_H


129 
__BEGIN_NAMESPACE_STD


131 
	stm


133 
tm_£c
;

134 
tm_mö
;

135 
tm_hour
;

136 
tm_mday
;

137 
tm_m⁄
;

138 
tm_yór
;

139 
tm_wday
;

140 
tm_yday
;

141 
tm_isd°
;

143 #ifdef 
__USE_BSD


144 
tm_gmtoff
;

145 
__c⁄°
 *
tm_z⁄e
;

147 
__tm_gmtoff
;

148 
__c⁄°
 *
__tm_z⁄e
;

151 
__END_NAMESPACE_STD


152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


153 
	$__USING_NAMESPACE_STD
(
tm
)

157 #ifde‡
__USE_POSIX199309


159 
	sôimî•ec


161 
time•ec
 
ô_öãrvÆ
;

162 
time•ec
 
ô_vÆue
;

166 
sigevít
;

170 #ifde‡
__USE_XOPEN2K


171 #i‚de‡
__pid_t_deföed


172 
__pid_t
 
	tpid_t
;

173 
	#__pid_t_deföed


	)

178 
__BEGIN_NAMESPACE_STD


181 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

184 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

187 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

188 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

191 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

197 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

198 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

199 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

200 
__END_NAMESPACE_STD


202 #ifde‡
__USE_XOPEN


205 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

206 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

207 
__THROW
;

210 #ifde‡
__USE_GNU


213 
	~<xloˇÀ.h
>

215 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

216 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

217 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

218 
__loˇÀ_t
 
__loc
Ë
__THROW
;

220 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

221 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

222 
__loˇÀ_t
 
__loc
Ë
__THROW
;

226 
__BEGIN_NAMESPACE_STD


229 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

233 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

234 
__END_NAMESPACE_STD


236 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


239 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

240 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

244 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

245 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
__BEGIN_NAMESPACE_STD


251 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

254 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

255 
__END_NAMESPACE_STD


257 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


262 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

263 *
__ª°ri˘
 
__buf
Ë
__THROW
;

266 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

272 *
__tz«me
[2];

273 
__daylight
;

274 
__timez⁄e
;

277 #ifdef 
__USE_POSIX


279 *
tz«me
[2];

283 
	$tz£t
 (Ë
__THROW
;

286 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


287 
daylight
;

288 
timez⁄e
;

291 #ifde‡
__USE_SVID


294 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

300 
	#__i¶óp
(
yór
) \

301 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

304 #ifde‡
__USE_MISC


309 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

312 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

315 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

319 #ifde‡
__USE_POSIX199309


324 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

325 
time•ec
 *
__ªmaöög
);

329 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

332 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

335 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

336 
__THROW
;

338 #ifde‡
__USE_XOPEN2K


343 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

344 
__c⁄°
 
time•ec
 *
__ªq
,

345 
time•ec
 *
__ªm
);

348 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

353 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

354 
sigevít
 *
__ª°ri˘
 
__evp
,

355 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

358 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

361 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

362 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

363 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

366 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

367 
__THROW
;

370 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

374 #ifde‡
__USE_XOPEN_EXTENDED


386 
gëd©e_îr
;

395 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

398 #ifde‡
__USE_GNU


409 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

410 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

413 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


34 
	#_POSIX_VERSION
 200112L

	)

40 
	#_POSIX2_VERSION
 200112L

	)

44 
	#_POSIX2_C_BIND
 200112L

	)

48 
	#_POSIX2_C_DEV
 200112L

	)

52 
	#_POSIX2_SW_DEV
 200112L

	)

56 
	#_POSIX2_LOCALEDEF
 200112L

	)

59 #ifde‡
__USE_UNIX98


60 
	#_XOPEN_VERSION
 500

	)

62 
	#_XOPEN_VERSION
 4

	)

66 
	#_XOPEN_XCU_VERSION
 4

	)

69 
	#_XOPEN_XPG2
 1

	)

70 
	#_XOPEN_XPG3
 1

	)

71 
	#_XOPEN_XPG4
 1

	)

74 
	#_XOPEN_UNIX
 1

	)

77 
	#_XOPEN_CRYPT
 1

	)

81 
	#_XOPEN_ENH_I18N
 1

	)

84 
	#_XOPEN_LEGACY
 1

	)

171 
	~<bôs/posix_›t.h
>

174 #ifde‡
__USE_UNIX98


175 
	~<bôs/ívú⁄míts.h
>

179 
	#STDIN_FILENO
 0

	)

180 
	#STDOUT_FILENO
 1

	)

181 
	#STDERR_FILENO
 2

	)

186 
	~<bôs/ty≥s.h
>

188 #i‚def 
__ssize_t_deföed


189 
__ssize_t
 
	tssize_t
;

190 
	#__ssize_t_deföed


	)

193 
	#__√ed_size_t


	)

194 
	#__√ed_NULL


	)

195 
	~<°ddef.h
>

197 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


200 #i‚de‡
__gid_t_deföed


201 
__gid_t
 
	tgid_t
;

202 
	#__gid_t_deföed


	)

205 #i‚de‡
__uid_t_deföed


206 
__uid_t
 
	tuid_t
;

207 
	#__uid_t_deföed


	)

210 #i‚de‡
__off_t_deföed


211 #i‚de‡
__USE_FILE_OFFSET64


212 
__off_t
 
	toff_t
;

214 
__off64_t
 
	toff_t
;

216 
	#__off_t_deföed


	)

218 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


219 
__off64_t
 
	toff64_t
;

220 
	#__off64_t_deföed


	)

223 #i‚de‡
__u£c⁄ds_t_deföed


224 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

225 
	#__u£c⁄ds_t_deföed


	)

228 #i‚de‡
__pid_t_deföed


229 
__pid_t
 
	tpid_t
;

230 
	#__pid_t_deföed


	)

234 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


235 #i‚de‡
__öçå_t_deföed


236 
__öçå_t
 
	töçå_t
;

237 
	#__öçå_t_deföed


	)

241 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


242 #i‚de‡
__sockÀn_t_deföed


243 
__sockÀn_t
 
	tsockÀn_t
;

244 
	#__sockÀn_t_deföed


	)

250 
	#R_OK
 4

	)

251 
	#W_OK
 2

	)

252 
	#X_OK
 1

	)

253 
	#F_OK
 0

	)

256 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__USE_GNU


261 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1));

267 #i‚def 
_STDIO_H


268 
	#SEEK_SET
 0

	)

269 
	#SEEK_CUR
 1

	)

270 
	#SEEK_END
 2

	)

273 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


275 
	#L_SET
 
SEEK_SET


	)

276 
	#L_INCR
 
SEEK_CUR


	)

277 
	#L_XTND
 
SEEK_END


	)

286 #i‚de‡
__USE_FILE_OFFSET64


287 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

289 #ifde‡
__REDIRECT_NTH


290 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

291 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

292 
l£ek64
);

294 
	#l£ek
 
l£ek64


	)

297 #ifde‡
__USE_LARGEFILE64


298 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

305 
	`˛o£
 (
__fd
);

312 
ssize_t
 
	`ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
);

318 
ssize_t
 
	`wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
);

320 #ifde‡
__USE_UNIX98


321 #i‚de‡
__USE_FILE_OFFSET64


328 
ssize_t
 
	`¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

329 
__off_t
 
__off£t
);

336 
ssize_t
 
	`pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

337 
__off_t
 
__off£t
);

339 #ifde‡
__REDIRECT


340 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

341 
__off64_t
 
__off£t
),

342 
¥ód64
);

343 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

344 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

345 
pwrôe64
);

347 
	#¥ód
 
¥ód64


	)

348 
	#pwrôe
 
pwrôe64


	)

352 #ifde‡
__USE_LARGEFILE64


356 
ssize_t
 
	`¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

357 
__off64_t
 
__off£t
);

360 
ssize_t
 
	`pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

361 
__off64_t
 
__off£t
);

369 
	`pùe
 (
__pùedes
[2]Ë
__THROW
;

378 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

390 
	`¶ìp
 (
__£c⁄ds
);

392 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


397 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

398 
__THROW
;

405 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

414 
	`∑u£
 ();

418 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

419 
__THROW
 
	`__n⁄nuŒ
 ((1));

421 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


423 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
;

428 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

429 
__THROW
 
	`__n⁄nuŒ
 ((1));

434 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

436 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


438 
	$fchdú
 (
__fd
Ë
__THROW
;

448 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
;

450 #ifdef 
__USE_GNU


454 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

457 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


461 *
	$gëwd
 (*
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

466 
	$dup
 (
__fd
Ë
__THROW
;

469 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

472 **
__ívú⁄
;

473 #ifde‡
__USE_GNU


474 **
ívú⁄
;

480 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

481 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

483 #ifde‡
__USE_GNU


486 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

487 
__THROW
;

492 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

493 
__THROW
 
	`__n⁄nuŒ
 ((1));

497 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

498 
__THROW
 
	`__n⁄nuŒ
 ((1));

502 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

503 
__THROW
 
	`__n⁄nuŒ
 ((1));

507 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

508 
__THROW
 
	`__n⁄nuŒ
 ((1));

513 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

514 
__THROW
 
	`__n⁄nuŒ
 ((1));

517 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


519 
	$ni˚
 (
__öc
Ë
__THROW
;

524 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

530 
	~<bôs/c⁄‚ame.h
>

533 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

534 
__THROW
 
	`__n⁄nuŒ
 ((1));

537 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

540 
	$sysc⁄f
 (
__«me
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

542 #ifdef 
__USE_POSIX2


544 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

549 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

552 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

556 #i‚de‡
__FAVOR_BSD


557 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

559 #ifde‡
__REDIRECT_NTH


560 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

562 
	#gëpgΩ
 
__gëpgid


	)

567 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

568 #ifde‡
__USE_XOPEN_EXTENDED


569 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

576 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

578 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


589 #i‚de‡
__FAVOR_BSD


593 
	$£çgΩ
 (Ë
__THROW
;

598 #ifde‡
__REDIRECT_NTH


599 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

601 
	#£çgΩ
 
£çgid


	)

610 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

612 #ifde‡
__USE_XOPEN_EXTENDED


614 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

618 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

621 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

624 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

627 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

632 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
;

634 #ifdef 
__USE_GNU


636 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

643 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

645 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


648 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


653 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

660 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

662 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

668 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


670 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

673 #ifde‡
__USE_GNU


676 
	`gëªsuid
 (
__uid_t
 *
__euid
, __uid_à*
__ruid
, __uid_à*
__suid
);

680 
	`gëªsgid
 (
__gid_t
 *
__egid
, __gid_à*
__rgid
, __gid_à*
__sgid
);

684 
	`£åesuid
 (
__uid_t
 
__euid
, __uid_à
__ruid
, __uid_à
__suid
);

688 
	`£åesgid
 (
__gid_t
 
__egid
, __gid_à
__rgid
, __gid_à
__sgid
);

695 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

697 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


702 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

708 *
	$ây«me
 (
__fd
Ë
__THROW
;

712 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

713 
__THROW
 
	`__n⁄nuŒ
 ((2));

717 
	$ißây
 (
__fd
Ë
__THROW
;

719 #i‡
deföed
 
__USE_BSD
 \

720 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

723 
	$ây¶Ÿ
 (Ë
__THROW
;

728 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

729 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


733 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

734 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

739 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

740 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

744 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

747 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

751 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

754 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

761 *
	`gëlogö
 ();

762 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_UNIX98


769 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

772 #ifdef 
__USE_BSD


774 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

778 #ifdef 
__USE_POSIX2


782 
	#__√ed_gë›t


	)

783 
	~<gë›t.h
>

787 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


791 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

798 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1));

803 
	$£tho°id
 (
__id
Ë
__THROW
;

809 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1));

811 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1));

818 
	$vh™gup
 (Ë
__THROW
;

821 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

829 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

830 
size_t
 
__off£t
, 
__sˇÀ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

837 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

841 *
	$gëu£rshñl
 (Ë
__THROW
;

842 
	$ídu£rshñl
 (Ë
__THROW
;

843 
	$£tu£rshñl
 (Ë
__THROW
;

849 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
;

853 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

856 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

864 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


869 
	`fsync
 (
__fd
);

873 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


876 
	`gëho°id
 ();

879 
	$sync
 (Ë
__THROW
;

884 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

889 
	$gëdèbÀsize
 (Ë
__THROW
;

893 #i‚de‡
__USE_FILE_OFFSET64


894 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

895 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 #ifde‡
__REDIRECT_NTH


898 
	`__REDIRECT_NTH
 (
åunˇã
,

899 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

900 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1));

902 
	#åunˇã
 
åunˇã64


	)

905 #ifde‡
__USE_LARGEFILE64


906 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

907 
__THROW
 
	`__n⁄nuŒ
 ((1));

912 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


915 #i‚de‡
__USE_FILE_OFFSET64


916 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
;

918 #ifde‡
__REDIRECT_NTH


919 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

920 
·runˇã64
);

922 
	#·runˇã
 
·runˇã64


	)

925 #ifde‡
__USE_LARGEFILE64


926 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
;

932 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


936 
	$brk
 (*
__addr
Ë
__THROW
;

942 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

946 #ifde‡
__USE_MISC


957 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

962 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


974 
	#F_ULOCK
 0

	)

975 
	#F_LOCK
 1

	)

976 
	#F_TLOCK
 2

	)

977 
	#F_TEST
 3

	)

979 #i‚de‡
__USE_FILE_OFFSET64


980 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

982 #ifde‡
__REDIRECT


983 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

984 
lockf64
);

986 
	#lockf
 
lockf64


	)

989 #ifde‡
__USE_LARGEFILE64


990 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

995 #ifde‡
__USE_GNU


1000 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1001 (
__exãnsi⁄__
 \

1002 ({ 
__ªsu…
; \

1003 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1004 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1005 
__ªsu…
; 
	}
}))

	)

1008 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1011 
	$fd©async
 (
__fûdes
Ë
__THROW
;

1017 #ifdef 
__USE_XOPEN


1019 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1024 
	$í¸y±
 (*
__block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1031 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1032 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1038 #ifde‡
__USE_XOPEN


1040 *
	$˘îmid
 (*
__s
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1043 
__END_DECLS


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/asm/unistd.h

1 #i‚de‡
_ASM_I386_UNISTD_H_


2 
	#_ASM_I386_UNISTD_H_


	)

8 
	#__NR_ª°¨t_sysˇŒ
 0

	)

9 
	#__NR_exô
 1

	)

10 
	#__NR_f‹k
 2

	)

11 
	#__NR_ªad
 3

	)

12 
	#__NR_wrôe
 4

	)

13 
	#__NR_›í
 5

	)

14 
	#__NR_˛o£
 6

	)

15 
	#__NR_waôpid
 7

	)

16 
	#__NR_¸ót
 8

	)

17 
	#__NR_lök
 9

	)

18 
	#__NR_u∆ök
 10

	)

19 
	#__NR_execve
 11

	)

20 
	#__NR_chdú
 12

	)

21 
	#__NR_time
 13

	)

22 
	#__NR_mknod
 14

	)

23 
	#__NR_chmod
 15

	)

24 
	#__NR_lchown
 16

	)

25 
	#__NR_bªak
 17

	)

26 
	#__NR_ﬁd°©
 18

	)

27 
	#__NR_l£ek
 19

	)

28 
	#__NR_gëpid
 20

	)

29 
	#__NR_mou¡
 21

	)

30 
	#__NR_umou¡
 22

	)

31 
	#__NR_£tuid
 23

	)

32 
	#__NR_gëuid
 24

	)

33 
	#__NR_°ime
 25

	)

34 
	#__NR_±ø˚
 26

	)

35 
	#__NR_Æ¨m
 27

	)

36 
	#__NR_ﬁdf°©
 28

	)

37 
	#__NR_∑u£
 29

	)

38 
	#__NR_utime
 30

	)

39 
	#__NR_°ty
 31

	)

40 
	#__NR_gây
 32

	)

41 
	#__NR_ac˚ss
 33

	)

42 
	#__NR_ni˚
 34

	)

43 
	#__NR_·ime
 35

	)

44 
	#__NR_sync
 36

	)

45 
	#__NR_kûl
 37

	)

46 
	#__NR_ª«me
 38

	)

47 
	#__NR_mkdú
 39

	)

48 
	#__NR_rmdú
 40

	)

49 
	#__NR_dup
 41

	)

50 
	#__NR_pùe
 42

	)

51 
	#__NR_times
 43

	)

52 
	#__NR_¥of
 44

	)

53 
	#__NR_brk
 45

	)

54 
	#__NR_£tgid
 46

	)

55 
	#__NR_gëgid
 47

	)

56 
	#__NR_sig«l
 48

	)

57 
	#__NR_gëeuid
 49

	)

58 
	#__NR_gëegid
 50

	)

59 
	#__NR_ac˘
 51

	)

60 
	#__NR_umou¡2
 52

	)

61 
	#__NR_lock
 53

	)

62 
	#__NR_io˘l
 54

	)

63 
	#__NR_f˙é
 55

	)

64 
	#__NR_mpx
 56

	)

65 
	#__NR_£çgid
 57

	)

66 
	#__NR_ulimô
 58

	)

67 
	#__NR_ﬁdﬁdu«me
 59

	)

68 
	#__NR_umask
 60

	)

69 
	#__NR_chroŸ
 61

	)

70 
	#__NR_u°©
 62

	)

71 
	#__NR_dup2
 63

	)

72 
	#__NR_gëµid
 64

	)

73 
	#__NR_gëpgΩ
 65

	)

74 
	#__NR_£tsid
 66

	)

75 
	#__NR_siga˘i⁄
 67

	)

76 
	#__NR_sgëmask
 68

	)

77 
	#__NR_s£tmask
 69

	)

78 
	#__NR_£åeuid
 70

	)

79 
	#__NR_£åegid
 71

	)

80 
	#__NR_sigsu•íd
 72

	)

81 
	#__NR_sig≥ndög
 73

	)

82 
	#__NR_£tho°«me
 74

	)

83 
	#__NR_£ålimô
 75

	)

84 
	#__NR_gëæimô
 76

	)

85 
	#__NR_gërußge
 77

	)

86 
	#__NR_gëtimeofday
 78

	)

87 
	#__NR_£âimeofday
 79

	)

88 
	#__NR_gëgroups
 80

	)

89 
	#__NR_£tgroups
 81

	)

90 
	#__NR_£À˘
 82

	)

91 
	#__NR_symlök
 83

	)

92 
	#__NR_ﬁdl°©
 84

	)

93 
	#__NR_ªadlök
 85

	)

94 
	#__NR_u£lib
 86

	)

95 
	#__NR_sw≠⁄
 87

	)

96 
	#__NR_ªboŸ
 88

	)

97 
	#__NR_ªaddú
 89

	)

98 
	#__NR_mm≠
 90

	)

99 
	#__NR_munm≠
 91

	)

100 
	#__NR_åunˇã
 92

	)

101 
	#__NR_·runˇã
 93

	)

102 
	#__NR_fchmod
 94

	)

103 
	#__NR_fchown
 95

	)

104 
	#__NR_gë¥i‹ôy
 96

	)

105 
	#__NR_£çri‹ôy
 97

	)

106 
	#__NR_¥ofû
 98

	)

107 
	#__NR_°©fs
 99

	)

108 
	#__NR_f°©fs
 100

	)

109 
	#__NR_i›îm
 101

	)

110 
	#__NR_sockëˇŒ
 102

	)

111 
	#__NR_sy¶og
 103

	)

112 
	#__NR_£tôimî
 104

	)

113 
	#__NR_gëôimî
 105

	)

114 
	#__NR_°©
 106

	)

115 
	#__NR_l°©
 107

	)

116 
	#__NR_f°©
 108

	)

117 
	#__NR_ﬁdu«me
 109

	)

118 
	#__NR_i›l
 110

	)

119 
	#__NR_vh™gup
 111

	)

120 
	#__NR_idÀ
 112

	)

121 
	#__NR_vm86ﬁd
 113

	)

122 
	#__NR_waô4
 114

	)

123 
	#__NR_sw≠off
 115

	)

124 
	#__NR_sysöfo
 116

	)

125 
	#__NR_ùc
 117

	)

126 
	#__NR_fsync
 118

	)

127 
	#__NR_sigªtu∫
 119

	)

128 
	#__NR_˛⁄e
 120

	)

129 
	#__NR_£tdomaö«me
 121

	)

130 
	#__NR_u«me
 122

	)

131 
	#__NR_modify_ldt
 123

	)

132 
	#__NR_adjtimex
 124

	)

133 
	#__NR_m¥Ÿe˘
 125

	)

134 
	#__NR_sig¥ocmask
 126

	)

135 
	#__NR_¸óã_moduÀ
 127

	)

136 
	#__NR_öô_moduÀ
 128

	)

137 
	#__NR_dñëe_moduÀ
 129

	)

138 
	#__NR_gë_kî√l_syms
 130

	)

139 
	#__NR_quŸa˘l
 131

	)

140 
	#__NR_gëpgid
 132

	)

141 
	#__NR_fchdú
 133

	)

142 
	#__NR_bdÊush
 134

	)

143 
	#__NR_sysfs
 135

	)

144 
	#__NR_≥rs⁄Æôy
 136

	)

145 
	#__NR_afs_sysˇŒ
 137

	)

146 
	#__NR_£tfsuid
 138

	)

147 
	#__NR_£tfsgid
 139

	)

148 
	#__NR__Œ£ek
 140

	)

149 
	#__NR_gëdíts
 141

	)

150 
	#__NR__√w£À˘
 142

	)

151 
	#__NR_Êock
 143

	)

152 
	#__NR_msync
 144

	)

153 
	#__NR_ªadv
 145

	)

154 
	#__NR_wrôev
 146

	)

155 
	#__NR_gësid
 147

	)

156 
	#__NR_fd©async
 148

	)

157 
	#__NR__sys˘l
 149

	)

158 
	#__NR_mlock
 150

	)

159 
	#__NR_mu∆ock
 151

	)

160 
	#__NR_mlockÆl
 152

	)

161 
	#__NR_mu∆ockÆl
 153

	)

162 
	#__NR_sched_£ç¨am
 154

	)

163 
	#__NR_sched_gë∑øm
 155

	)

164 
	#__NR_sched_£tscheduÀr
 156

	)

165 
	#__NR_sched_gëscheduÀr
 157

	)

166 
	#__NR_sched_yõld
 158

	)

167 
	#__NR_sched_gë_¥i‹ôy_max
 159

	)

168 
	#__NR_sched_gë_¥i‹ôy_mö
 160

	)

169 
	#__NR_sched_º_gë_öãrvÆ
 161

	)

170 
	#__NR_«no¶ìp
 162

	)

171 
	#__NR_mªm≠
 163

	)

172 
	#__NR_£åesuid
 164

	)

173 
	#__NR_gëªsuid
 165

	)

174 
	#__NR_vm86
 166

	)

175 
	#__NR_quîy_moduÀ
 167

	)

176 
	#__NR_pﬁl
 168

	)

177 
	#__NR_nfs£rv˘l
 169

	)

178 
	#__NR_£åesgid
 170

	)

179 
	#__NR_gëªsgid
 171

	)

180 
	#__NR_¥˘l
 172

	)

181 
	#__NR_π_sigªtu∫
 173

	)

182 
	#__NR_π_siga˘i⁄
 174

	)

183 
	#__NR_π_sig¥ocmask
 175

	)

184 
	#__NR_π_sig≥ndög
 176

	)

185 
	#__NR_π_sigtimedwaô
 177

	)

186 
	#__NR_π_sigqueueöfo
 178

	)

187 
	#__NR_π_sigsu•íd
 179

	)

188 
	#__NR_¥ód64
 180

	)

189 
	#__NR_pwrôe64
 181

	)

190 
	#__NR_chown
 182

	)

191 
	#__NR_gëcwd
 183

	)

192 
	#__NR_ˇpgë
 184

	)

193 
	#__NR_ˇp£t
 185

	)

194 
	#__NR_sigÆt°ack
 186

	)

195 
	#__NR_£ndfûe
 187

	)

196 
	#__NR_gëpmsg
 188

	)

197 
	#__NR_puçmsg
 189

	)

198 
	#__NR_vf‹k
 190

	)

199 
	#__NR_ugëæimô
 191

	)

200 
	#__NR_mm≠2
 192

	)

201 
	#__NR_åunˇã64
 193

	)

202 
	#__NR_·runˇã64
 194

	)

203 
	#__NR_°©64
 195

	)

204 
	#__NR_l°©64
 196

	)

205 
	#__NR_f°©64
 197

	)

206 
	#__NR_lchown32
 198

	)

207 
	#__NR_gëuid32
 199

	)

208 
	#__NR_gëgid32
 200

	)

209 
	#__NR_gëeuid32
 201

	)

210 
	#__NR_gëegid32
 202

	)

211 
	#__NR_£åeuid32
 203

	)

212 
	#__NR_£åegid32
 204

	)

213 
	#__NR_gëgroups32
 205

	)

214 
	#__NR_£tgroups32
 206

	)

215 
	#__NR_fchown32
 207

	)

216 
	#__NR_£åesuid32
 208

	)

217 
	#__NR_gëªsuid32
 209

	)

218 
	#__NR_£åesgid32
 210

	)

219 
	#__NR_gëªsgid32
 211

	)

220 
	#__NR_chown32
 212

	)

221 
	#__NR_£tuid32
 213

	)

222 
	#__NR_£tgid32
 214

	)

223 
	#__NR_£tfsuid32
 215

	)

224 
	#__NR_£tfsgid32
 216

	)

225 
	#__NR_pivŸ_roŸ
 217

	)

226 
	#__NR_möc‹e
 218

	)

227 
	#__NR_madvi£
 219

	)

228 
	#__NR_madvi£1
 219

	)

229 
	#__NR_gëdíts64
 220

	)

230 
	#__NR_f˙é64
 221

	)

232 
	#__NR_gëtid
 224

	)

233 
	#__NR_ªadahód
 225

	)

234 
	#__NR_£tx©å
 226

	)

235 
	#__NR_l£tx©å
 227

	)

236 
	#__NR_f£tx©å
 228

	)

237 
	#__NR_gëx©å
 229

	)

238 
	#__NR_lgëx©å
 230

	)

239 
	#__NR_fgëx©å
 231

	)

240 
	#__NR_li°x©å
 232

	)

241 
	#__NR_Œi°x©å
 233

	)

242 
	#__NR_Êi°x©å
 234

	)

243 
	#__NR_ªmovex©å
 235

	)

244 
	#__NR_Ãemovex©å
 236

	)

245 
	#__NR_‰emovex©å
 237

	)

246 
	#__NR_tkûl
 238

	)

247 
	#__NR_£ndfûe64
 239

	)

248 
	#__NR_fuãx
 240

	)

249 
	#__NR_sched_£èfföôy
 241

	)

250 
	#__NR_sched_gëafföôy
 242

	)

251 
	#__NR_£t_thªad_¨ó
 243

	)

252 
	#__NR_gë_thªad_¨ó
 244

	)

253 
	#__NR_io_£tup
 245

	)

254 
	#__NR_io_de°roy
 246

	)

255 
	#__NR_io_gëevíts
 247

	)

256 
	#__NR_io_submô
 248

	)

257 
	#__NR_io_ˇn˚l
 249

	)

258 
	#__NR_Ádvi£64
 250

	)

260 
	#__NR_exô_group
 252

	)

261 
	#__NR_lookup_dcookõ
 253

	)

262 
	#__NR_ïﬁl_¸óã
 254

	)

263 
	#__NR_ïﬁl_˘l
 255

	)

264 
	#__NR_ïﬁl_waô
 256

	)

265 
	#__NR_ªm≠_fûe_∑ges
 257

	)

266 
	#__NR_£t_tid_addªss
 258

	)

267 
	#__NR_timî_¸óã
 259

	)

268 
	#__NR_timî_£âime
 (
__NR_timî_¸óã
+1)

	)

269 
	#__NR_timî_gëtime
 (
__NR_timî_¸óã
+2)

	)

270 
	#__NR_timî_gëovîrun
 (
__NR_timî_¸óã
+3)

	)

271 
	#__NR_timî_dñëe
 (
__NR_timî_¸óã
+4)

	)

272 
	#__NR_˛ock_£âime
 (
__NR_timî_¸óã
+5)

	)

273 
	#__NR_˛ock_gëtime
 (
__NR_timî_¸óã
+6)

	)

274 
	#__NR_˛ock_gëªs
 (
__NR_timî_¸óã
+7)

	)

275 
	#__NR_˛ock_«no¶ìp
 (
__NR_timî_¸óã
+8)

	)

276 
	#__NR_°©fs64
 268

	)

277 
	#__NR_f°©fs64
 269

	)

278 
	#__NR_tgkûl
 270

	)

279 
	#__NR_utimes
 271

	)

280 
	#__NR_Ádvi£64_64
 272

	)

281 
	#__NR_v£rvî
 273

	)

282 
	#__NR_mböd
 274

	)

283 
	#__NR_gë_mempﬁicy
 275

	)

284 
	#__NR_£t_mempﬁicy
 276

	)

285 
	#__NR_mq_›í
 277

	)

286 
	#__NR_mq_u∆ök
 (
__NR_mq_›í
+1)

	)

287 
	#__NR_mq_timed£nd
 (
__NR_mq_›í
+2)

	)

288 
	#__NR_mq_timedª˚ive
 (
__NR_mq_›í
+3)

	)

289 
	#__NR_mq_nŸify
 (
__NR_mq_›í
+4)

	)

290 
	#__NR_mq_gë£èâr
 (
__NR_mq_›í
+5)

	)

291 
	#__NR_sys_kexec_lﬂd
 283

	)

292 
	#__NR_waôid
 284

	)

294 
	#__NR_add_key
 286

	)

295 
	#__NR_ªque°_key
 287

	)

296 
	#__NR_key˘l
 288

	)

298 
	#NR_sysˇŒs
 289

	)

304 
	#__sysˇŒ_ªtu∫
(
ty≥
, 
ªs
) \

306 i‡(()(
ªs
) >= ()(-(128 + 1))) { \

307 
î∫o
 = -(
ªs
); \

308 
ªs
 = -1; \

310  (
ty≥
Ë(
ªs
); \

311 } 0)

	)

314 
	#_sysˇŒ0
(
ty≥
,
«me
) \

315 
ty≥
 
	`«me
() \

317 
__ªs
; \

318 
__asm__
 volatile ("int $0x80" \

319 : "˜" (
__ªs
) \

320 : "0" (
__NR_
##
«me
)); \

321 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

322 }

	)

324 #ifde‡
__PIC__


325 
	#_sysˇŒ1
(
ty≥
,
«me
,
ty≥1
,
¨g1
) \

326 
ty≥
 
	`«me
(
ty≥1
 
¨g1
) \

328 
__ªs
; \

329 
__asm__
 volatile (\

334 : "˜" (
__ªs
) \

335 : "0" (
__NR_
##
«me
),"r" (()(
¨g1
))); \

336 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

337 }

	)

339 
	#_sysˇŒ1
(
ty≥
,
«me
,
ty≥1
,
¨g1
) \

340 
ty≥
 
	`«me
(
ty≥1
 
¨g1
) \

342 
__ªs
; \

343 
__asm__
 volatile ("int $0x80" \

344 : "˜" (
__ªs
) \

345 : "0" (
__NR_
##
«me
),"b" (()(
¨g1
))); \

346 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

347 }

	)

350 #ifde‡
__PIC__


351 
	#_sysˇŒ2
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
) \

352 
ty≥
 
	`«me
(
ty≥1
 
¨g1
,
ty≥2
 
¨g2
) \

354 
__ªs
; \

355 
__asm__
 volatile (\

360 : "˜" (
__ªs
) \

361 : "0" (
__NR_
##
«me
),"r" (()(
¨g1
)),"c" (()(
¨g2
))); \

362 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

363 }

	)

365 
	#_sysˇŒ2
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
) \

366 
ty≥
 
	`«me
(
ty≥1
 
¨g1
,
ty≥2
 
¨g2
) \

368 
__ªs
; \

369 
__asm__
 volatile ("int $0x80" \

370 : "˜" (
__ªs
) \

371 : "0" (
__NR_
##
«me
),"b" (()(
¨g1
)),"c" (()(
¨g2
))); \

372 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

373 }

	)

376 #ifde‡
__PIC__


377 
	#_sysˇŒ3
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
) \

378 
ty≥
 
	`«me
(
ty≥1
 
¨g1
,
ty≥2
 
¨g2
,
ty≥3
 
¨g3
) \

380 
__ªs
; \

381 
__asm__
 volatile (\

386 : "˜" (
__ªs
) \

387 : "0" (
__NR_
##
«me
),"r" (()(
¨g1
)),"c" (()(
¨g2
)), \

388 "d" (()(
¨g3
))); \

389 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

390 }

	)

392 
	#_sysˇŒ3
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
) \

393 
ty≥
 
	`«me
(
ty≥1
 
¨g1
,
ty≥2
 
¨g2
,
ty≥3
 
¨g3
) \

395 
__ªs
; \

396 
__asm__
 volatile ("int $0x80" \

397 : "˜" (
__ªs
) \

398 : "0" (
__NR_
##
«me
),"b" (()(
¨g1
)),"c" (()(
¨g2
)), \

399 "d" (()(
¨g3
))); \

400 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

401 }

	)

404 #ifde‡
__PIC__


405 
	#_sysˇŒ4
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
,
ty≥4
,
¨g4
) \

406 
ty≥
 
	`«me
 (
ty≥1
 
¨g1
, 
ty≥2
 
¨g2
, 
ty≥3
 
¨g3
, 
ty≥4
 
¨g4
) \

408 
__ªs
; \

409 
__asm__
 volatile (\

414 : "˜" (
__ªs
) \

415 : "0" (
__NR_
##
«me
),"r" (()(
¨g1
)),"c" (()(
¨g2
)), \

416 "d" (()(
¨g3
)),"S" (()(
¨g4
))); \

417 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

418 }

	)

420 
	#_sysˇŒ4
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
,
ty≥4
,
¨g4
) \

421 
ty≥
 
	`«me
 (
ty≥1
 
¨g1
, 
ty≥2
 
¨g2
, 
ty≥3
 
¨g3
, 
ty≥4
 
¨g4
) \

423 
__ªs
; \

424 
__asm__
 volatile ("int $0x80" \

425 : "˜" (
__ªs
) \

426 : "0" (
__NR_
##
«me
),"b" (()(
¨g1
)),"c" (()(
¨g2
)), \

427 "d" (()(
¨g3
)),"S" (()(
¨g4
))); \

428 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

429 }

	)

432 #ifde‡
__PIC__


433 
	#_sysˇŒ5
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
,
ty≥4
,
¨g4
, \

434 
ty≥5
,
¨g5
) \

435 
ty≥
 
	`«me
 (
ty≥1
 
¨g1
,
ty≥2
 
¨g2
,
ty≥3
 
¨g3
,
ty≥4
 
¨g4
,
ty≥5
 
¨g5
) \

437 
__ªs
; \

438 
__asm__
 volatile (\

443 : "˜" (
__ªs
) \

444 : "0" (
__NR_
##
«me
),"m" (()(
¨g1
)),"c" (()(
¨g2
)), \

445 "d" (()(
¨g3
)),"S" (()(
¨g4
)),"D" (()(
¨g5
))); \

446 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

447 }

	)

449 
	#_sysˇŒ5
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
,
ty≥4
,
¨g4
, \

450 
ty≥5
,
¨g5
) \

451 
ty≥
 
	`«me
 (
ty≥1
 
¨g1
,
ty≥2
 
¨g2
,
ty≥3
 
¨g3
,
ty≥4
 
¨g4
,
ty≥5
 
¨g5
) \

453 
__ªs
; \

454 
__asm__
 volatile ("int $0x80" \

455 : "˜" (
__ªs
) \

456 : "0" (
__NR_
##
«me
),"b" (()(
¨g1
)),"c" (()(
¨g2
)), \

457 "d" (()(
¨g3
)),"S" (()(
¨g4
)),"D" (()(
¨g5
))); \

458 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

459 }

	)

462 #ifde‡
__PIC__


463 
	#_sysˇŒ6
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
,
ty≥4
,
¨g4
, \

464 
ty≥5
,
¨g5
,
ty≥6
,
¨g6
) \

465 
ty≥
 
	`«me
 (
ty≥1
 
¨g1
,
ty≥2
 
¨g2
,
ty≥3
 
¨g3
,
ty≥4
 
¨g4
,
ty≥5
 
¨g5
,
ty≥6
 
¨g6
) \

467 
__ªs
; \

468 
__asm__
 volatile (\

477 : "˜" (
__ªs
) \

478 : "i" (
__NR_
##
«me
),"m" (()(
¨g1
)),"c" (()(
¨g2
)), \

479 "d" (()(
¨g3
)),"S" (()(
¨g4
)),"D" (()(
¨g5
)), \

480 "0" (()(
¨g6
))); \

481 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

482 }

	)

484 
	#_sysˇŒ6
(
ty≥
,
«me
,
ty≥1
,
¨g1
,
ty≥2
,
¨g2
,
ty≥3
,
¨g3
,
ty≥4
,
¨g4
, \

485 
ty≥5
,
¨g5
,
ty≥6
,
¨g6
) \

486 
ty≥
 
	`«me
 (
ty≥1
 
¨g1
,
ty≥2
 
¨g2
,
ty≥3
 
¨g3
,
ty≥4
 
¨g4
,
ty≥5
 
¨g5
,
ty≥6
 
¨g6
) \

488 
__ªs
; \

489 
__asm__
 volatile ("push %%ebp ; movl %%eax,%%ebp ; movl %1,%%eax ; int $0x80 ;Öop %%ebp" \

490 : "˜" (
__ªs
) \

491 : "i" (
__NR_
##
«me
),"b" (()(
¨g1
)),"c" (()(
¨g2
)), \

492 "d" (()(
¨g3
)),"S" (()(
¨g4
)),"D" (()(
¨g5
)), \

493 "0" (()(
¨g6
))); \

494 
	`__sysˇŒ_ªtu∫
(
ty≥
,
__ªs
); \

495 }

	)

498 #ifde‡
__KERNEL__


499 
	#__ARCH_WANT_IPC_PARSE_VERSION


	)

500 
	#__ARCH_WANT_OLD_READDIR


	)

501 
	#__ARCH_WANT_OLD_STAT


	)

502 
	#__ARCH_WANT_STAT64


	)

503 
	#__ARCH_WANT_SYS_ALARM


	)

504 
	#__ARCH_WANT_SYS_GETHOSTNAME


	)

505 
	#__ARCH_WANT_SYS_PAUSE


	)

506 
	#__ARCH_WANT_SYS_SGETMASK


	)

507 
	#__ARCH_WANT_SYS_SIGNAL


	)

508 
	#__ARCH_WANT_SYS_TIME


	)

509 
	#__ARCH_WANT_SYS_UTIME


	)

510 
	#__ARCH_WANT_SYS_WAITPID


	)

511 
	#__ARCH_WANT_SYS_SOCKETCALL


	)

512 
	#__ARCH_WANT_SYS_FADVISE64


	)

513 
	#__ARCH_WANT_SYS_GETPGRP


	)

514 
	#__ARCH_WANT_SYS_LLSEEK


	)

515 
	#__ARCH_WANT_SYS_NICE


	)

516 
	#__ARCH_WANT_SYS_OLD_GETRLIMIT


	)

517 
	#__ARCH_WANT_SYS_OLDUMOUNT


	)

518 
	#__ARCH_WANT_SYS_SIGPENDING


	)

519 
	#__ARCH_WANT_SYS_SIGPROCMASK


	)

520 
	#__ARCH_WANT_SYS_RT_SIGACTION


	)

523 #ifde‡
__KERNEL_SYSCALLS__


525 
	~<löux/compûî.h
>

526 
	~<löux/ty≥s.h
>

527 
	~<löux/lökage.h
>

528 
	~<asm/±ø˚.h
>

542 
ölöe
 
	$_sysˇŒ3
(,
execve
,c⁄° *,
fûe
,**,
¨gv
,**,
ívp
)

544 
asmlökage
 
	`sys_modify_ldt
(
func
, 
__u£r
 *
±r
, 
byãcou¡
);

545 
asmlökage
 
	`sys_mm≠2
(
addr
, 
Àn
,

546 
¥Ÿ
, 
Êags
,

547 
fd
, 
pgoff
);

548 
asmlökage
 
	`sys_execve
(
±_ªgs
 
ªgs
);

549 
asmlökage
 
	`sys_˛⁄e
(
±_ªgs
 
ªgs
);

550 
asmlökage
 
	`sys_f‹k
(
±_ªgs
 
ªgs
);

551 
asmlökage
 
	`sys_vf‹k
(
±_ªgs
 
ªgs
);

552 
asmlökage
 
	`sys_pùe
(
__u£r
 *
fûdes
);

553 
asmlökage
 
	`sys_±ø˚
(
ªque°
, 
pid
, 
addr
, 
d©a
);

554 
asmlökage
 
	`sys_i›l
(
unu£d
);

555 
siga˘i⁄
;

556 
asmlökage
 
	`sys_π_siga˘i⁄
(
sig
,

557 c⁄° 
siga˘i⁄
 
__u£r
 *
a˘
,

558 
siga˘i⁄
 
__u£r
 *
ﬂ˘
,

559 
size_t
 
sig£tsize
);

569 #i‚de‡
c⁄d_sysˇŒ


570 
	#c⁄d_sysˇŒ
(
x
Ë
	`asm
(".wók\t" #x "\n\t.£t\t" #x ",sys_ni_sysˇŒ");

	)

	@/usr/include/bits/byteswap.h

20 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H


24 #i‚de‡
_BITS_BYTESWAP_H


25 
	#_BITS_BYTESWAP_H
 1

	)

28 
	#__bsw≠_c⁄°™t_16
(
x
) \

29 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

31 #ifde‡
__GNUC__


32 #i‡
__GNUC__
 >= 2

33 
	#__bsw≠_16
(
x
) \

34 (
__exãnsi⁄__
 \

35 ({ 
__v
, 
__x
 = (
x
); \

36 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

37 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

39 
	`__asm__
 ("rorw $8, %w0" \

40 : "Ù" (
__v
) \

41 : "0" (
__x
) \

43 
__v
; }))

	)

46 
	#__bsw≠_16
(
x
) \

47 (
__exãnsi⁄__
 \

48 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

51 
__ölöe
 

52 
	$__bsw≠_16
 (
__bsx
)

54  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

55 
	}
}

59 
	#__bsw≠_c⁄°™t_32
(
x
) \

60 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

61 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

63 #ifde‡
__GNUC__


64 #i‡
__GNUC__
 >= 2

67 #i‡!
deföed
 
__i486__
 && !deföed 
__≥¡ium__
 && !deföed 
__≥¡ium¥o__
 \

68 && !
deföed
 
	g__≥¡ium4__


69 
	#__bsw≠_32
(
x
) \

70 (
__exãnsi⁄__
 \

71 ({ 
__v
, 
__x
 = (
x
); \

72 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

73 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

75 
	`__asm__
 ("rorw $8, %w0;" \

78 : "Ù" (
__v
) \

79 : "0" (
__x
) \

81 
__v
; }))

	)

83 
	#__bsw≠_32
(
x
) \

84 (
__exãnsi⁄__
 \

85 ({ 
__v
, 
__x
 = (
x
); \

86 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

87 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

89 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

90 
__v
; }))

	)

93 
	#__bsw≠_32
(
x
) \

94 (
__exãnsi⁄__
 \

95 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 
__ölöe
 

99 
	$__bsw≠_32
 (
__bsx
)

101  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

102 
	}
}

106 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

108 
	#__bsw≠_c⁄°™t_64
(
x
) \

109 ((((
x
) & 0xff00000000000000ull) >> 56) \

110 | (((
x
) & 0x00ff000000000000ull) >> 40) \

111 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

112 | (((
x
) & 0x000000ff00000000ull) >> 8) \

113 | (((
x
) & 0x00000000ff000000ull) << 8) \

114 | (((
x
) & 0x0000000000ff0000ull) << 24) \

115 | (((
x
) & 0x000000000000ff00ull) << 40) \

116 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

118 
	#__bsw≠_64
(
x
) \

119 (
__exãnsi⁄__
 \

120 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

121 
__l
[2]; } 
__w
, 
__r
; \

122 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

123 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

126 
__w
.
__Œ
 = (
x
); \

127 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

128 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

130 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/confname.h

21 #i‚de‡
_UNISTD_H


28 
	m_PC_LINK_MAX
,

29 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

30 
	m_PC_MAX_CANON
,

31 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

32 
	m_PC_MAX_INPUT
,

33 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

34 
	m_PC_NAME_MAX
,

35 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

36 
	m_PC_PATH_MAX
,

37 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

38 
	m_PC_PIPE_BUF
,

39 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

40 
	m_PC_CHOWN_RESTRICTED
,

41 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

42 
	m_PC_NO_TRUNC
,

43 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

44 
	m_PC_VDISABLE
,

45 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

46 
	m_PC_SYNC_IO
,

47 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

48 
	m_PC_ASYNC_IO
,

49 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

50 
	m_PC_PRIO_IO
,

51 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

52 
	m_PC_SOCK_MAXBUF
,

53 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

54 
	m_PC_FILESIZEBITS
,

55 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

56 
	m_PC_REC_INCR_XFER_SIZE
,

57 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

58 
	m_PC_REC_MAX_XFER_SIZE
,

59 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

60 
	m_PC_REC_MIN_XFER_SIZE
,

61 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

62 
	m_PC_REC_XFER_ALIGN
,

63 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

64 
	m_PC_ALLOC_SIZE_MIN
,

65 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

66 
	m_PC_SYMLINK_MAX
,

67 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

68 
	m_PC_2_SYMLINKS


69 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

75 
	m_SC_ARG_MAX
,

76 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

77 
	m_SC_CHILD_MAX
,

78 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

79 
	m_SC_CLK_TCK
,

80 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

81 
	m_SC_NGROUPS_MAX
,

82 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

83 
	m_SC_OPEN_MAX
,

84 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

85 
	m_SC_STREAM_MAX
,

86 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

87 
	m_SC_TZNAME_MAX
,

88 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

89 
	m_SC_JOB_CONTROL
,

90 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

91 
	m_SC_SAVED_IDS
,

92 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

93 
	m_SC_REALTIME_SIGNALS
,

94 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

95 
	m_SC_PRIORITY_SCHEDULING
,

96 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

97 
	m_SC_TIMERS
,

98 
	#_SC_TIMERS
 
_SC_TIMERS


	)

99 
	m_SC_ASYNCHRONOUS_IO
,

100 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

101 
	m_SC_PRIORITIZED_IO
,

102 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

103 
	m_SC_SYNCHRONIZED_IO
,

104 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

105 
	m_SC_FSYNC
,

106 
	#_SC_FSYNC
 
_SC_FSYNC


	)

107 
	m_SC_MAPPED_FILES
,

108 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

109 
	m_SC_MEMLOCK
,

110 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

111 
	m_SC_MEMLOCK_RANGE
,

112 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

113 
	m_SC_MEMORY_PROTECTION
,

114 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

115 
	m_SC_MESSAGE_PASSING
,

116 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

117 
	m_SC_SEMAPHORES
,

118 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

119 
	m_SC_SHARED_MEMORY_OBJECTS
,

120 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

121 
	m_SC_AIO_LISTIO_MAX
,

122 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

123 
	m_SC_AIO_MAX
,

124 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

125 
	m_SC_AIO_PRIO_DELTA_MAX
,

126 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

127 
	m_SC_DELAYTIMER_MAX
,

128 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

129 
	m_SC_MQ_OPEN_MAX
,

130 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

131 
	m_SC_MQ_PRIO_MAX
,

132 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

133 
	m_SC_VERSION
,

134 
	#_SC_VERSION
 
_SC_VERSION


	)

135 
	m_SC_PAGESIZE
,

136 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

137 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

138 
	m_SC_RTSIG_MAX
,

139 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

140 
	m_SC_SEM_NSEMS_MAX
,

141 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

142 
	m_SC_SEM_VALUE_MAX
,

143 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

144 
	m_SC_SIGQUEUE_MAX
,

145 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

146 
	m_SC_TIMER_MAX
,

147 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

151 
	m_SC_BC_BASE_MAX
,

152 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

153 
	m_SC_BC_DIM_MAX
,

154 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

155 
	m_SC_BC_SCALE_MAX
,

156 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

157 
	m_SC_BC_STRING_MAX
,

158 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

159 
	m_SC_COLL_WEIGHTS_MAX
,

160 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

161 
	m_SC_EQUIV_CLASS_MAX
,

162 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

163 
	m_SC_EXPR_NEST_MAX
,

164 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

165 
	m_SC_LINE_MAX
,

166 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

167 
	m_SC_RE_DUP_MAX
,

168 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

169 
	m_SC_CHARCLASS_NAME_MAX
,

170 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

172 
	m_SC_2_VERSION
,

173 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

174 
	m_SC_2_C_BIND
,

175 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

176 
	m_SC_2_C_DEV
,

177 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

178 
	m_SC_2_FORT_DEV
,

179 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

180 
	m_SC_2_FORT_RUN
,

181 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

182 
	m_SC_2_SW_DEV
,

183 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

184 
	m_SC_2_LOCALEDEF
,

185 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

187 
	m_SC_PII
,

188 
	#_SC_PII
 
_SC_PII


	)

189 
	m_SC_PII_XTI
,

190 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

191 
	m_SC_PII_SOCKET
,

192 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

193 
	m_SC_PII_INTERNET
,

194 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

195 
	m_SC_PII_OSI
,

196 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

197 
	m_SC_POLL
,

198 
	#_SC_POLL
 
_SC_POLL


	)

199 
	m_SC_SELECT
,

200 
	#_SC_SELECT
 
_SC_SELECT


	)

201 
	m_SC_UIO_MAXIOV
,

202 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

203 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

204 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

205 
	m_SC_PII_INTERNET_STREAM
,

206 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

207 
	m_SC_PII_INTERNET_DGRAM
,

208 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

209 
	m_SC_PII_OSI_COTS
,

210 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

211 
	m_SC_PII_OSI_CLTS
,

212 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

213 
	m_SC_PII_OSI_M
,

214 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

215 
	m_SC_T_IOV_MAX
,

216 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

219 
	m_SC_THREADS
,

220 
	#_SC_THREADS
 
_SC_THREADS


	)

221 
	m_SC_THREAD_SAFE_FUNCTIONS
,

222 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

223 
	m_SC_GETGR_R_SIZE_MAX
,

224 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

225 
	m_SC_GETPW_R_SIZE_MAX
,

226 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

227 
	m_SC_LOGIN_NAME_MAX
,

228 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

229 
	m_SC_TTY_NAME_MAX
,

230 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

231 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

232 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

233 
	m_SC_THREAD_KEYS_MAX
,

234 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

235 
	m_SC_THREAD_STACK_MIN
,

236 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

237 
	m_SC_THREAD_THREADS_MAX
,

238 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

239 
	m_SC_THREAD_ATTR_STACKADDR
,

240 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

241 
	m_SC_THREAD_ATTR_STACKSIZE
,

242 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

243 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

244 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

245 
	m_SC_THREAD_PRIO_INHERIT
,

246 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

247 
	m_SC_THREAD_PRIO_PROTECT
,

248 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

249 
	m_SC_THREAD_PROCESS_SHARED
,

250 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

252 
	m_SC_NPROCESSORS_CONF
,

253 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

254 
	m_SC_NPROCESSORS_ONLN
,

255 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

256 
	m_SC_PHYS_PAGES
,

257 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

258 
	m_SC_AVPHYS_PAGES
,

259 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

260 
	m_SC_ATEXIT_MAX
,

261 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

262 
	m_SC_PASS_MAX
,

263 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

265 
	m_SC_XOPEN_VERSION
,

266 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

267 
	m_SC_XOPEN_XCU_VERSION
,

268 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

269 
	m_SC_XOPEN_UNIX
,

270 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

271 
	m_SC_XOPEN_CRYPT
,

272 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

273 
	m_SC_XOPEN_ENH_I18N
,

274 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

275 
	m_SC_XOPEN_SHM
,

276 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

278 
	m_SC_2_CHAR_TERM
,

279 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

280 
	m_SC_2_C_VERSION
,

281 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

282 
	m_SC_2_UPE
,

283 
	#_SC_2_UPE
 
_SC_2_UPE


	)

285 
	m_SC_XOPEN_XPG2
,

286 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

287 
	m_SC_XOPEN_XPG3
,

288 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

289 
	m_SC_XOPEN_XPG4
,

290 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

292 
	m_SC_CHAR_BIT
,

293 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

294 
	m_SC_CHAR_MAX
,

295 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

296 
	m_SC_CHAR_MIN
,

297 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

298 
	m_SC_INT_MAX
,

299 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

300 
	m_SC_INT_MIN
,

301 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

302 
	m_SC_LONG_BIT
,

303 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

304 
	m_SC_WORD_BIT
,

305 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

306 
	m_SC_MB_LEN_MAX
,

307 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

308 
	m_SC_NZERO
,

309 
	#_SC_NZERO
 
_SC_NZERO


	)

310 
	m_SC_SSIZE_MAX
,

311 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

312 
	m_SC_SCHAR_MAX
,

313 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

314 
	m_SC_SCHAR_MIN
,

315 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

316 
	m_SC_SHRT_MAX
,

317 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

318 
	m_SC_SHRT_MIN
,

319 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

320 
	m_SC_UCHAR_MAX
,

321 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

322 
	m_SC_UINT_MAX
,

323 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

324 
	m_SC_ULONG_MAX
,

325 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

326 
	m_SC_USHRT_MAX
,

327 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

329 
	m_SC_NL_ARGMAX
,

330 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

331 
	m_SC_NL_LANGMAX
,

332 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

333 
	m_SC_NL_MSGMAX
,

334 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

335 
	m_SC_NL_NMAX
,

336 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

337 
	m_SC_NL_SETMAX
,

338 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

339 
	m_SC_NL_TEXTMAX
,

340 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

342 
	m_SC_XBS5_ILP32_OFF32
,

343 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

344 
	m_SC_XBS5_ILP32_OFFBIG
,

345 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

346 
	m_SC_XBS5_LP64_OFF64
,

347 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

348 
	m_SC_XBS5_LPBIG_OFFBIG
,

349 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

351 
	m_SC_XOPEN_LEGACY
,

352 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

353 
	m_SC_XOPEN_REALTIME
,

354 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

355 
	m_SC_XOPEN_REALTIME_THREADS
,

356 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

358 
	m_SC_ADVISORY_INFO
,

359 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

360 
	m_SC_BARRIERS
,

361 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

362 
	m_SC_BASE
,

363 
	#_SC_BASE
 
_SC_BASE


	)

364 
	m_SC_C_LANG_SUPPORT
,

365 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

366 
	m_SC_C_LANG_SUPPORT_R
,

367 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

368 
	m_SC_CLOCK_SELECTION
,

369 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

370 
	m_SC_CPUTIME
,

371 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

372 
	m_SC_THREAD_CPUTIME
,

373 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

374 
	m_SC_DEVICE_IO
,

375 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

376 
	m_SC_DEVICE_SPECIFIC
,

377 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

378 
	m_SC_DEVICE_SPECIFIC_R
,

379 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

380 
	m_SC_FD_MGMT
,

381 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

382 
	m_SC_FIFO
,

383 
	#_SC_FIFO
 
_SC_FIFO


	)

384 
	m_SC_PIPE
,

385 
	#_SC_PIPE
 
_SC_PIPE


	)

386 
	m_SC_FILE_ATTRIBUTES
,

387 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

388 
	m_SC_FILE_LOCKING
,

389 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

390 
	m_SC_FILE_SYSTEM
,

391 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

392 
	m_SC_MONOTONIC_CLOCK
,

393 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

394 
	m_SC_MULTI_PROCESS
,

395 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

396 
	m_SC_SINGLE_PROCESS
,

397 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

398 
	m_SC_NETWORKING
,

399 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

400 
	m_SC_READER_WRITER_LOCKS
,

401 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

402 
	m_SC_SPIN_LOCKS
,

403 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

404 
	m_SC_REGEXP
,

405 
	#_SC_REGEXP
 
_SC_REGEXP


	)

406 
	m_SC_REGEX_VERSION
,

407 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

408 
	m_SC_SHELL
,

409 
	#_SC_SHELL
 
_SC_SHELL


	)

410 
	m_SC_SIGNALS
,

411 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

412 
	m_SC_SPAWN
,

413 
	#_SC_SPAWN
 
_SC_SPAWN


	)

414 
	m_SC_SPORADIC_SERVER
,

415 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

416 
	m_SC_THREAD_SPORADIC_SERVER
,

417 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

418 
	m_SC_SYSTEM_DATABASE
,

419 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

420 
	m_SC_SYSTEM_DATABASE_R
,

421 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

422 
	m_SC_TIMEOUTS
,

423 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

424 
	m_SC_TYPED_MEMORY_OBJECTS
,

425 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

426 
	m_SC_USER_GROUPS
,

427 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

428 
	m_SC_USER_GROUPS_R
,

429 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

430 
	m_SC_2_PBS
,

431 
	#_SC_2_PBS
 
_SC_2_PBS


	)

432 
	m_SC_2_PBS_ACCOUNTING
,

433 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

434 
	m_SC_2_PBS_LOCATE
,

435 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

436 
	m_SC_2_PBS_MESSAGE
,

437 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

438 
	m_SC_2_PBS_TRACK
,

439 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

440 
	m_SC_SYMLOOP_MAX
,

441 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

442 
	m_SC_STREAMS
,

443 
	#_SC_STREAMS
 
_SC_STREAMS


	)

444 
	m_SC_2_PBS_CHECKPOINT
,

445 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

447 
	m_SC_V6_ILP32_OFF32
,

448 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

449 
	m_SC_V6_ILP32_OFFBIG
,

450 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

451 
	m_SC_V6_LP64_OFF64
,

452 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

453 
	m_SC_V6_LPBIG_OFFBIG
,

454 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

456 
	m_SC_HOST_NAME_MAX
,

457 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

458 
	m_SC_TRACE
,

459 
	#_SC_TRACE
 
_SC_TRACE


	)

460 
	m_SC_TRACE_EVENT_FILTER
,

461 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

462 
	m_SC_TRACE_INHERIT
,

463 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

464 
	m_SC_TRACE_LOG
,

465 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

467 
	m_SC_LEVEL1_ICACHE_SIZE
,

468 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

469 
	m_SC_LEVEL1_ICACHE_ASSOC
,

470 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

471 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

472 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

473 
	m_SC_LEVEL1_DCACHE_SIZE
,

474 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

475 
	m_SC_LEVEL1_DCACHE_ASSOC
,

476 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

477 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

478 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

479 
	m_SC_LEVEL2_CACHE_SIZE
,

480 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

481 
	m_SC_LEVEL2_CACHE_ASSOC
,

482 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

483 
	m_SC_LEVEL2_CACHE_LINESIZE
,

484 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

485 
	m_SC_LEVEL3_CACHE_SIZE
,

486 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

487 
	m_SC_LEVEL3_CACHE_ASSOC
,

488 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

489 
	m_SC_LEVEL3_CACHE_LINESIZE
,

490 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

491 
	m_SC_LEVEL4_CACHE_SIZE
,

492 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

493 
	m_SC_LEVEL4_CACHE_ASSOC
,

494 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

495 
	m_SC_LEVEL4_CACHE_LINESIZE
,

496 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

499 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

500 
	#_SC_IPV6
 
_SC_IPV6


	)

501 
	m_SC_RAW_SOCKETS


502 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

508 
	m_CS_PATH
,

509 
	#_CS_PATH
 
_CS_PATH


	)

511 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

512 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

514 
	m_CS_GNU_LIBC_VERSION
,

515 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

516 
	m_CS_GNU_LIBPTHREAD_VERSION
,

517 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

519 
	m_CS_LFS_CFLAGS
 = 1000,

520 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

521 
	m_CS_LFS_LDFLAGS
,

522 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

523 
	m_CS_LFS_LIBS
,

524 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

525 
	m_CS_LFS_LINTFLAGS
,

526 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

527 
	m_CS_LFS64_CFLAGS
,

528 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

529 
	m_CS_LFS64_LDFLAGS
,

530 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

531 
	m_CS_LFS64_LIBS
,

532 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

533 
	m_CS_LFS64_LINTFLAGS
,

534 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

536 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

537 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

538 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

539 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

540 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

541 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

542 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

543 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

544 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

545 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

546 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

547 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

548 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

549 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

550 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

551 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

552 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

553 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

554 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

555 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

556 
	m_CS_XBS5_LP64_OFF64_LIBS
,

557 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

558 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

559 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

560 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

561 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

562 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

563 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

564 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

565 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

566 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

567 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

569 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

570 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

571 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

572 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

573 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

574 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

575 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

576 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

577 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

578 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

579 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

580 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

581 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

582 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

583 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

584 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

585 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

586 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

587 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

588 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

589 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

590 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

591 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

592 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

593 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

594 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

595 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

596 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

597 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

598 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

599 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


600 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

	@/usr/include/bits/environments.h

19 #i‚de‡
_UNISTD_H


41 
	#_POSIX_V6_ILP32_OFF32
 1

	)

42 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

43 
	#_XBS5_ILP32_OFF32
 1

	)

44 
	#_XBS5_ILP32_OFFBIG
 1

	)

57 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

58 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

59 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

60 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

61 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

62 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

32 #i‚de‡
ECANCELED


33 
	#ECANCELED
 125

	)

36 #i‚de‡
__ASSEMBLER__


38 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

40 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


42 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

47 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


51 
	#EDOM
 33

	)

52 
	#EILSEQ
 84

	)

53 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

21 #i‚def 
_FCNTL_H


26 
	~<sys/ty≥s.h
>

30 
	#O_ACCMODE
 0003

	)

31 
	#O_RDONLY
 00

	)

32 
	#O_WRONLY
 01

	)

33 
	#O_RDWR
 02

	)

34 
	#O_CREAT
 0100

	)

35 
	#O_EXCL
 0200

	)

36 
	#O_NOCTTY
 0400

	)

37 
	#O_TRUNC
 01000

	)

38 
	#O_APPEND
 02000

	)

39 
	#O_NONBLOCK
 04000

	)

40 
	#O_NDELAY
 
O_NONBLOCK


	)

41 
	#O_SYNC
 010000

	)

42 
	#O_FSYNC
 
O_SYNC


	)

43 
	#O_ASYNC
 020000

	)

45 #ifde‡
__USE_GNU


46 
	#O_DIRECT
 040000

	)

47 
	#O_DIRECTORY
 0200000

	)

48 
	#O_NOFOLLOW
 0400000

	)

49 
	#O_NOATIME
 01000000

	)

55 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


56 
	#O_DSYNC
 
O_SYNC


	)

57 
	#O_RSYNC
 
O_SYNC


	)

60 #ifde‡
__USE_LARGEFILE64


61 
	#O_LARGEFILE
 0100000

	)

65 
	#F_DUPFD
 0

	)

66 
	#F_GETFD
 1

	)

67 
	#F_SETFD
 2

	)

68 
	#F_GETFL
 3

	)

69 
	#F_SETFL
 4

	)

70 #i‚de‡
__USE_FILE_OFFSET64


71 
	#F_GETLK
 5

	)

72 
	#F_SETLK
 6

	)

73 
	#F_SETLKW
 7

	)

75 
	#F_GETLK
 
F_GETLK64


	)

76 
	#F_SETLK
 
F_SETLK64


	)

77 
	#F_SETLKW
 
F_SETLKW64


	)

79 
	#F_GETLK64
 12

	)

80 
	#F_SETLK64
 13

	)

81 
	#F_SETLKW64
 14

	)

83 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


84 
	#F_SETOWN
 8

	)

85 
	#F_GETOWN
 9

	)

88 #ifde‡
__USE_GNU


89 
	#F_SETSIG
 10

	)

90 
	#F_GETSIG
 11

	)

93 #ifde‡
__USE_GNU


94 
	#F_SETLEASE
 1024

	)

95 
	#F_GETLEASE
 1025

	)

96 
	#F_NOTIFY
 1026

	)

100 
	#FD_CLOEXEC
 1

	)

103 
	#F_RDLCK
 0

	)

104 
	#F_WRLCK
 1

	)

105 
	#F_UNLCK
 2

	)

108 
	#F_EXLCK
 4

	)

109 
	#F_SHLCK
 8

	)

111 #ifde‡
__USE_BSD


113 
	#LOCK_SH
 1

	)

114 
	#LOCK_EX
 2

	)

115 
	#LOCK_NB
 4

	)

117 
	#LOCK_UN
 8

	)

120 #ifde‡
__USE_GNU


121 
	#LOCK_MAND
 32

	)

122 
	#LOCK_READ
 64

	)

123 
	#LOCK_WRITE
 128

	)

124 
	#LOCK_RW
 192

	)

127 #ifde‡
__USE_GNU


129 
	#DN_ACCESS
 0x00000001

	)

130 
	#DN_MODIFY
 0x00000002

	)

131 
	#DN_CREATE
 0x00000004

	)

132 
	#DN_DELETE
 0x00000008

	)

133 
	#DN_RENAME
 0x00000010

	)

134 
	#DN_ATTRIB
 0x00000020

	)

135 
	#DN_MULTISHOT
 0x80000000

	)

138 
	sÊock


140 
	ml_ty≥
;

141 
	ml_whí˚
;

142 #i‚de‡
__USE_FILE_OFFSET64


143 
__off_t
 
	ml_°¨t
;

144 
__off_t
 
	ml_Àn
;

146 
__off64_t
 
	ml_°¨t
;

147 
__off64_t
 
	ml_Àn
;

149 
__pid_t
 
	ml_pid
;

152 #ifde‡
__USE_LARGEFILE64


153 
	sÊock64


155 
	ml_ty≥
;

156 
	ml_whí˚
;

157 
__off64_t
 
	ml_°¨t
;

158 
__off64_t
 
	ml_Àn
;

159 
__pid_t
 
	ml_pid
;

165 #ifdef 
__USE_BSD


166 
	#FAPPEND
 
O_APPEND


	)

167 
	#FFSYNC
 
O_FSYNC


	)

168 
	#FASYNC
 
O_ASYNC


	)

169 
	#FNONBLOCK
 
O_NONBLOCK


	)

170 
	#FNDELAY
 
O_NDELAY


	)

174 #ifde‡
__USE_XOPEN2K


175 
	#POSIX_FADV_NORMAL
 0

	)

176 
	#POSIX_FADV_RANDOM
 1

	)

177 
	#POSIX_FADV_SEQUENTIAL
 2

	)

178 
	#POSIX_FADV_WILLNEED
 3

	)

179 
	#POSIX_FADV_DONTNEED
 4

	)

180 
	#POSIX_FADV_NOREUSE
 5

	)

183 
__BEGIN_DECLS


186 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

187 
__THROW
;

189 
__END_DECLS


	@/usr/include/bits/huge_val.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VAL
 (
	`__buûtö_huge_vÆ
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VAL
 (
__exãnsi⁄__
 0x1.0
p2047
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VAL
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__DI__
))); 
__d
; }) \

37 { 
__l
: 0x7ff0000000000000ULL }).
__d
)

	)

41 
	~<ídün.h
>

43 uni⁄ { 
	m__c
[8]; 
	m__d
; } 
	t__huge_vÆ_t
;

45 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


46 
	#__HUGE_VAL_byãs
 { 0x7f, 0xf0, 0, 0, 0, 0, 0, 0 }

	)

48 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


49 
	#__HUGE_VAL_byãs
 { 0, 0, 0, 0, 0, 0, 0xf0, 0x7‡}

	)

52 
__huge_vÆ_t
 
	g__huge_vÆ
 = { 
__HUGE_VAL_byãs
 };

53 
	#HUGE_VAL
 (
__huge_vÆ
.
__d
)

	)

	@/usr/include/bits/huge_valf.h

22 #i‚de‡
_MATH_H


28 #i‡
__GNUC_PREREQ
(3,3)

29 
	#HUGE_VALF
 (
	`__buûtö_huge_vÆf
())

	)

30 #ñi‡
__GNUC_PREREQ
(2,96)

31 
	#HUGE_VALF
 (
__exãnsi⁄__
 0x1.0
p255f
)

	)

32 #ñi‡
deföed
 
__GNUC__


34 
	#HUGE_VALF
 \

35 (
__exãnsi⁄__
 \

36 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

37 { 
__l
: 0x7f800000UL }).
__d
)

	)

41 uni⁄ { 
	m__c
[4]; 
	m__f
; } 
	t__huge_vÆf_t
;

43 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


44 
	#__HUGE_VALF_byãs
 { 0x7f, 0x80, 0, 0 }

	)

46 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


47 
	#__HUGE_VALF_byãs
 { 0, 0, 0x80, 0x7‡}

	)

50 
__huge_vÆf_t
 
	g__huge_vÆf
 = { 
__HUGE_VALF_byãs
 };

51 
	#HUGE_VALF
 (
__huge_vÆf
.
__f
)

	)

	@/usr/include/bits/huge_vall.h

22 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#HUGE_VALL
 (
	`__buûtö_huge_vÆl
())

	)

28 #ñi‡
__GNUC_PREREQ
(2,96)

29 
	#HUGE_VALL
 (
__exãnsi⁄__
 0x1.0
p32767L
)

	)

32 
	#__HUGE_VALL_byãs
 { 0, 0, 0, 0, 0, 0, 0, 0x80, 0xff, 0x7f, 0, 0 }

	)

34 
	#__huge_vÆl_t
 uni⁄ { 
__c
[12]; 
__ld
; }

	)

35 #ifde‡
__GNUC__


36 
	#HUGE_VALL
 (
__exãnsi⁄__
 \

37 ((
__huge_vÆl_t
Ë{ 
__c
: 
__HUGE_VALL_byãs
 }).
__ld
)

	)

39 
__huge_vÆl_t
 
	g__huge_vÆl
 = { 
__HUGE_VALL_byãs
 };

40 
	#HUGE_VALL
 (
__huge_vÆl
.
__ld
)

	)

	@/usr/include/bits/in.h

21 #i‚de‡
_NETINET_IN_H


28 
	#IP_OPTIONS
 4

	)

29 
	#IP_HDRINCL
 3

	)

30 
	#IP_TOS
 1

	)

31 
	#IP_TTL
 2

	)

32 
	#IP_RECVOPTS
 6

	)

34 
	#IP_RECVRETOPTS
 
IP_RETOPTS


	)

35 
	#IP_RETOPTS
 7

	)

36 
	#IP_MULTICAST_IF
 32

	)

37 
	#IP_MULTICAST_TTL
 33

	)

38 
	#IP_MULTICAST_LOOP
 34

	)

39 
	#IP_ADD_MEMBERSHIP
 35

	)

40 
	#IP_DROP_MEMBERSHIP
 36

	)

41 
	#IP_UNBLOCK_SOURCE
 37

	)

42 
	#IP_BLOCK_SOURCE
 38

	)

43 
	#IP_ADD_SOURCE_MEMBERSHIP
 39

	)

44 
	#IP_DROP_SOURCE_MEMBERSHIP
 40

	)

45 
	#IP_MSFILTER
 41

	)

46 
	#MCAST_JOIN_GROUP
 42

	)

47 
	#MCAST_BLOCK_SOURCE
 43

	)

48 
	#MCAST_UNBLOCK_SOURCE
 44

	)

49 
	#MCAST_LEAVE_GROUP
 45

	)

50 
	#MCAST_JOIN_SOURCE_GROUP
 46

	)

51 
	#MCAST_LEAVE_SOURCE_GROUP
 47

	)

52 
	#MCAST_MSFILTER
 48

	)

54 
	#MCAST_EXCLUDE
 0

	)

55 
	#MCAST_INCLUDE
 1

	)

57 
	#IP_ROUTER_ALERT
 5

	)

58 
	#IP_PKTINFO
 8

	)

59 
	#IP_PKTOPTIONS
 9

	)

60 
	#IP_PMTUDISC
 10

	)

61 
	#IP_MTU_DISCOVER
 10

	)

62 
	#IP_RECVERR
 11

	)

63 
	#IP_RECVTTL
 12

	)

64 
	#IP_RECVTOS
 13

	)

68 
	#IP_PMTUDISC_DONT
 0

	)

69 
	#IP_PMTUDISC_WANT
 1

	)

70 
	#IP_PMTUDISC_DO
 2

	)

73 
	#SOL_IP
 0

	)

75 
	#IP_DEFAULT_MULTICAST_TTL
 1

	)

76 
	#IP_DEFAULT_MULTICAST_LOOP
 1

	)

77 
	#IP_MAX_MEMBERSHIPS
 20

	)

82 
	sù_›ts


84 
ö_addr
 
	mù_d°
;

85 
	mù_›ts
[40];

89 
	sù_mªqn


91 
ö_addr
 
	mimr_mu…üddr
;

92 
ö_addr
 
	mimr_addªss
;

93 
	mimr_ifödex
;

97 
	sö_pktöfo


99 
	mùi_ifödex
;

100 
ö_addr
 
	mùi_•ec_d°
;

101 
ö_addr
 
	mùi_addr
;

107 
	#IPV6_ADDRFORM
 1

	)

108 
	#IPV6_PKTINFO
 2

	)

109 
	#IPV6_HOPOPTS
 3

	)

110 
	#IPV6_DSTOPTS
 4

	)

111 
	#IPV6_RTHDR
 5

	)

112 
	#IPV6_PKTOPTIONS
 6

	)

113 
	#IPV6_CHECKSUM
 7

	)

114 
	#IPV6_HOPLIMIT
 8

	)

116 
	#SCM_SRCRT
 
IPV6_RXSRCRT


	)

118 
	#IPV6_NEXTHOP
 9

	)

119 
	#IPV6_AUTHHDR
 10

	)

120 
	#IPV6_UNICAST_HOPS
 16

	)

121 
	#IPV6_MULTICAST_IF
 17

	)

122 
	#IPV6_MULTICAST_HOPS
 18

	)

123 
	#IPV6_MULTICAST_LOOP
 19

	)

124 
	#IPV6_JOIN_GROUP
 20

	)

125 
	#IPV6_LEAVE_GROUP
 21

	)

126 
	#IPV6_ROUTER_ALERT
 22

	)

127 
	#IPV6_MTU_DISCOVER
 23

	)

128 
	#IPV6_MTU
 24

	)

129 
	#IPV6_RECVERR
 25

	)

130 
	#IPV6_V6ONLY
 26

	)

131 
	#IPV6_JOIN_ANYCAST
 27

	)

132 
	#IPV6_LEAVE_ANYCAST
 28

	)

133 
	#IPV6_IPSEC_POLICY
 34

	)

134 
	#IPV6_XFRM_POLICY
 35

	)

137 
	#IPV6_ADD_MEMBERSHIP
 
IPV6_JOIN_GROUP


	)

138 
	#IPV6_DROP_MEMBERSHIP
 
IPV6_LEAVE_GROUP


	)

139 
	#IPV6_RXHOPOPTS
 
IPV6_HOPOPTS


	)

140 
	#IPV6_RXDSTOPTS
 
IPV6_DSTOPTS


	)

143 
	#IPV6_PMTUDISC_DONT
 0

	)

144 
	#IPV6_PMTUDISC_WANT
 1

	)

145 
	#IPV6_PMTUDISC_DO
 2

	)

148 
	#SOL_IPV6
 41

	)

149 
	#SOL_ICMPV6
 58

	)

152 
	#IPV6_RTHDR_LOOSE
 0

	)

153 
	#IPV6_RTHDR_STRICT
 1

	)

155 
	#IPV6_RTHDR_TYPE_0
 0

	)

	@/usr/include/bits/inf.h

20 #i‚de‡
_MATH_H


26 #i‡
__GNUC_PREREQ
(3,3)

27 
	#INFINITY
 (
	`__buûtö_öff
())

	)

29 
	#INFINITY
 
HUGE_VALF


	)

	@/usr/include/bits/mathcalls.h

46 #i‚de‡
_MATH_H


53 
_MdoubÀ_BEGIN_NAMESPACE


55 
__MATHCALL
 (
acos
,, (
_MdoubÀ_
 
__x
));

57 
__MATHCALL
 (
asö
,, (
_MdoubÀ_
 
__x
));

59 
__MATHCALL
 (
©™
,, (
_MdoubÀ_
 
__x
));

61 
__MATHCALL
 (
©™2
,, (
_MdoubÀ_
 
__y
, _MdoubÀ_ 
__x
));

64 
__MATHCALL
 (
cos
,, (
_MdoubÀ_
 
__x
));

66 
__MATHCALL
 (
sö
,, (
_MdoubÀ_
 
__x
));

68 
__MATHCALL
 (
èn
,, (
_MdoubÀ_
 
__x
));

73 
__MATHCALL
 (
cosh
,, (
_MdoubÀ_
 
__x
));

75 
__MATHCALL
 (
söh
,, (
_MdoubÀ_
 
__x
));

77 
__MATHCALL
 (
ènh
,, (
_MdoubÀ_
 
__x
));

78 
	g_MdoubÀ_END_NAMESPACE


80 #ifde‡
__USE_GNU


82 
__MATHDECL
 (,
söcos
,,

83 (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__söx
, _MdoubÀ_ *
__cosx
));

86 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


87 
__BEGIN_NAMESPACE_C99


89 
__MATHCALL
 (
acosh
,, (
_MdoubÀ_
 
__x
));

91 
__MATHCALL
 (
asöh
,, (
_MdoubÀ_
 
__x
));

93 
__MATHCALL
 (
©™h
,, (
_MdoubÀ_
 
__x
));

94 
	g__END_NAMESPACE_C99


99 
_MdoubÀ_BEGIN_NAMESPACE


101 
__MATHCALL
 (
exp
,, (
_MdoubÀ_
 
__x
));

104 
__MATHCALL
 (
‰exp
,, (
_MdoubÀ_
 
__x
, *
__exp⁄ít
));

107 
__MATHCALL
 (
ldexp
,, (
_MdoubÀ_
 
__x
, 
__exp⁄ít
));

110 
__MATHCALL
 (
log
,, (
_MdoubÀ_
 
__x
));

113 
__MATHCALL
 (
log10
,, (
_MdoubÀ_
 
__x
));

116 
__MATHCALL
 (
modf
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ *
__ùå
));

117 
	g_MdoubÀ_END_NAMESPACE


119 #ifde‡
__USE_GNU


121 
__MATHCALL
 (
exp10
,, (
_MdoubÀ_
 
__x
));

123 
__MATHCALL
 (
pow10
,, (
_MdoubÀ_
 
__x
));

126 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


127 
__BEGIN_NAMESPACE_C99


129 
__MATHCALL
 (
expm1
,, (
_MdoubÀ_
 
__x
));

132 
__MATHCALL
 (
log1p
,, (
_MdoubÀ_
 
__x
));

135 
__MATHCALL
 (
logb
,, (
_MdoubÀ_
 
__x
));

136 
	g__END_NAMESPACE_C99


139 #ifde‡
__USE_ISOC99


140 
__BEGIN_NAMESPACE_C99


142 
__MATHCALL
 (
exp2
,, (
_MdoubÀ_
 
__x
));

145 
__MATHCALL
 (
log2
,, (
_MdoubÀ_
 
__x
));

146 
	g__END_NAMESPACE_C99


152 
_MdoubÀ_BEGIN_NAMESPACE


154 
__MATHCALL
 (
pow
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

157 
__MATHCALL
 (
sqπ
,, (
_MdoubÀ_
 
__x
));

158 
	g_MdoubÀ_END_NAMESPACE


160 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


161 
__BEGIN_NAMESPACE_C99


163 
__MATHCALL
 (
hypŸ
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

164 
	g__END_NAMESPACE_C99


167 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


168 
__BEGIN_NAMESPACE_C99


170 
__MATHCALL
 (
cbπ
,, (
_MdoubÀ_
 
__x
));

171 
	g__END_NAMESPACE_C99


177 
_MdoubÀ_BEGIN_NAMESPACE


179 
__MATHCALLX
 (
˚û
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

182 
__MATHCALLX
 (
Ábs
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

185 
__MATHCALLX
 (
Êo‹
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

188 
__MATHCALL
 (
fmod
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

193 
__MATHDECL_1
 (,
__isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

196 
__MATHDECL_1
 (,
__föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

197 
	g_MdoubÀ_END_NAMESPACE


199 #ifde‡
__USE_MISC


202 
__MATHDECL_1
 (,
isöf
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

205 
__MATHDECL_1
 (,
föôe
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

208 
__MATHCALL
 (
dªm
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

212 
__MATHCALL
 (
signifiˇnd
,, (
_MdoubÀ_
 
__x
));

215 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


216 
__BEGIN_NAMESPACE_C99


218 
__MATHCALLX
 (
c›ysign
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

219 
	g__END_NAMESPACE_C99


222 #ifde‡
__USE_ISOC99


223 
__BEGIN_NAMESPACE_C99


225 
__MATHCALLX
 (
«n
,, (
__c⁄°
 *
__ègb
), (
__c⁄°__
));

226 
	g__END_NAMESPACE_C99


231 
__MATHDECL_1
 (,
__i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

233 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
__MATHDECL_1
 (,
i¢™
,, (
_MdoubÀ_
 
__vÆue
)Ë
__©åibuã__
 ((
__c⁄°__
));

238 
__MATHCALL
 (
j0
,, (
_MdoubÀ_
));

239 
__MATHCALL
 (
j1
,, (
_MdoubÀ_
));

240 
__MATHCALL
 (
jn
,, (, 
_MdoubÀ_
));

241 
__MATHCALL
 (
y0
,, (
_MdoubÀ_
));

242 
__MATHCALL
 (
y1
,, (
_MdoubÀ_
));

243 
__MATHCALL
 (
yn
,, (, 
_MdoubÀ_
));

247 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || deföed 
__USE_ISOC99


248 
__BEGIN_NAMESPACE_C99


250 
__MATHCALL
 (
îf
,, (
_MdoubÀ_
));

251 
__MATHCALL
 (
îfc
,, (
_MdoubÀ_
));

252 
__MATHCALL
 (
lgamma
,, (
_MdoubÀ_
));

253 
	g__END_NAMESPACE_C99


256 #ifde‡
__USE_ISOC99


257 
__BEGIN_NAMESPACE_C99


259 
__MATHCALL
 (
tgamma
,, (
_MdoubÀ_
));

260 
	g__END_NAMESPACE_C99


263 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


265 
__MATHCALL
 (
gamma
,, (
_MdoubÀ_
));

268 #ifde‡
__USE_MISC


272 
__MATHCALL
 (
lgamma
,
_r
, (
_MdoubÀ_
, *
__signgamp
));

276 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_ISOC99


277 
__BEGIN_NAMESPACE_C99


280 
__MATHCALL
 (
röt
,, (
_MdoubÀ_
 
__x
));

283 
__MATHCALLX
 (
√xè·î
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
), (
__c⁄°__
));

284 #ifde‡
__USE_ISOC99


285 
__MATHCALLX
 (
√xâow¨d
,, (
_MdoubÀ_
 
__x
, 
__y
), (
__c⁄°__
));

289 
__MATHCALL
 (
ªmaödî
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

291 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


293 
__MATHCALL
 (
sˇlbn
,, (
_MdoubÀ_
 
__x
, 
__n
));

297 
__MATHDECL
 (,
ûogb
,, (
_MdoubÀ_
 
__x
));

300 #ifde‡
__USE_ISOC99


302 
__MATHCALL
 (
sˇlb 
,, (
_MdoubÀ_
 
__x
, 
__n
));

306 
__MATHCALL
 (
√¨byöt
,, (
_MdoubÀ_
 
__x
));

310 
__MATHCALLX
 (
round
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

314 
__MATHCALLX
 (
åunc
,, (
_MdoubÀ_
 
__x
), (
__c⁄°__
));

319 
__MATHCALL
 (
ªmquo
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, *
__quo
));

326 
__MATHDECL
 (,
Ãöt
,, (
_MdoubÀ_
 
__x
));

327 
__MATHDECL
 (,
Œröt
,, (
_MdoubÀ_
 
__x
));

331 
__MATHDECL
 (,
Ãound
,, (
_MdoubÀ_
 
__x
));

332 
__MATHDECL
 (,
Œround
,, (
_MdoubÀ_
 
__x
));

336 
__MATHCALL
 (
fdim
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

339 
__MATHCALL
 (
fmax
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

342 
__MATHCALL
 (
fmö
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
));

346 
__MATHDECL_1
 (, 
__Â˛assify
,, (
_MdoubÀ_
 
__vÆue
))

347 
__©åibuã__
 ((
__c⁄°__
));

350 
__MATHDECL_1
 (, 
__signbô
,, (
_MdoubÀ_
 
__vÆue
))

351 
__©åibuã__
 ((
__c⁄°__
));

355 
__MATHCALL
 (
fma
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__y
, _MdoubÀ_ 
__z
));

356 
	g__END_NAMESPACE_C99


358 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


360 
__MATHCALL
 (
sˇlb
,, (
_MdoubÀ_
 
__x
, _MdoubÀ_ 
__n
));

	@/usr/include/bits/mathdef.h

19 #i‡!
deföed
 
_MATH_H
 && !deföed 
_COMPLEX_H


23 #i‡
deföed
 
__USE_ISOC99
 && deföed 
_MATH_H
 && !deföed 
_MATH_H_MATHDEF


24 
	#_MATH_H_MATHDEF
 1

	)

26 #i‡
deföed
 
__FLT_EVAL_METHOD__
 && __FLT_EVAL_METHOD__ == 0

29 
	tÊﬂt_t
;

30 
	tdoubÀ_t
;

36 
	tÊﬂt_t
;

38 
	tdoubÀ_t
;

43 
	#FP_ILOGB0
 (-2147483647 - 1)

	)

44 
	#FP_ILOGBNAN
 (-2147483647 - 1)

	)

	@/usr/include/bits/mathinline.h

22 #i‚de‡
_MATH_H


26 #ifde‡
__˝lu•lus


27 
	#__MATH_INLINE
 
__ölöe


	)

29 
	#__MATH_INLINE
 
__ölöe


	)

33 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__
 && __GNUC__ >= 2

35 #i‡!
__GNUC_PREREQ
 (2,97)

40 #unde‡
isgª©î


41 #unde‡
isgª©îequÆ


42 #unde‡
i¶ess


43 #unde‡
i¶es£quÆ


44 #unde‡
i¶essgª©î


45 #unde‡
isun‹dîed


46 #ifde‡
__i686__


49 
	#isgª©î
(
x
, 
y
) \

50 ({ 
__ªsu…
; \

51 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

52 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

53 
__ªsu…
; })

	)

54 
	#isgª©îequÆ
(
x
, 
y
) \

55 ({ 
__ªsu…
; \

56 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

57 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

58 
__ªsu…
; })

	)

60 
	#i¶ess
(
x
, 
y
) \

61 ({ 
__ªsu…
; \

62 
	`__asm__
 ("fucomip %%st(1), %%st; seta %%al" \

63 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

64 
__ªsu…
; })

	)

66 
	#i¶es£quÆ
(
x
, 
y
) \

67 ({ 
__ªsu…
; \

68 
	`__asm__
 ("fucomip %%st(1), %%st; setae %%al" \

69 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st"); \

70 
__ªsu…
; })

	)

72 
	#i¶essgª©î
(
x
, 
y
) \

73 ({ 
__ªsu…
; \

74 
	`__asm__
 ("fucomip %%st(1), %%st; setne %%al" \

75 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

76 
__ªsu…
; })

	)

78 
	#isun‹dîed
(
x
, 
y
) \

79 ({ 
__ªsu…
; \

80 
	`__asm__
 ("fucomip %%st(1), %%st; setp %%al" \

81 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st"); \

82 
__ªsu…
; })

	)

85 
	#isgª©î
(
x
, 
y
) \

86 ({ 
__ªsu…
; \

87 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

88 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

89 
__ªsu…
; })

	)

91 
	#isgª©îequÆ
(
x
, 
y
) \

92 ({ 
__ªsu…
; \

93 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

94 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

95 
__ªsu…
; })

	)

97 
	#i¶ess
(
x
, 
y
) \

98 ({ 
__ªsu…
; \

99 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x45, %%ah; setz %%al" \

100 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

101 
__ªsu…
; })

	)

103 
	#i¶es£quÆ
(
x
, 
y
) \

104 ({ 
__ªsu…
; \

105 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x05, %%ah; setz %%al" \

106 : "˜" (
__ªsu…
Ë: "u" (
x
), "t" (
y
) : "cc", "st", "st(1)"); \

107 
__ªsu…
; })

	)

109 
	#i¶essgª©î
(
x
, 
y
) \

110 ({ 
__ªsu…
; \

111 
	`__asm__
 ("fucompp; fnstsw;Åestb $0x44, %%ah; setz %%al" \

112 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

113 
__ªsu…
; })

	)

115 
	#isun‹dîed
(
x
, 
y
) \

116 ({ 
__ªsu…
; \

117 
	`__asm__
 ("fucompp; fnstsw; sahf; setp %%al" \

118 : "˜" (
__ªsu…
Ë: "u" (
y
), "t" (
x
) : "cc", "st", "st(1)"); \

119 
__ªsu…
; })

	)

125 #i‡
__GNUC_PREREQ
 (2, 8)

127 
__MATH_INLINE
 

128 
__NTH
 (
	$__signbôf
 (
__x
))

130 
__exãnsi⁄__
 uni⁄ { 
__f
; 
__i
; } 
__u
 = { __f: 
__x
 };

131  
__u
.
__i
 < 0;

132 
	}
}

133 
__MATH_INLINE
 

134 
__NTH
 (
	$__signbô
 (
__x
))

136 
__exãnsi⁄__
 uni⁄ { 
__d
; 
__i
[2]; } 
__u
 = { __d: 
__x
 };

137  
__u
.
__i
[1] < 0;

138 
	}
}

139 
__MATH_INLINE
 

140 
__NTH
 (
	$__signbôl
 (
__x
))

142 
__exãnsi⁄__
 uni⁄ { 
__l
; 
__i
[3]; } 
__u
 = { __l: 
__x
 };

143  (
__u
.
__i
[2] & 0x8000) != 0;

144 
	}
}

151 #i‡
__GNUC_PREREQ
 (2, 8)

153 #i‡((!
deföed
 
__NO_MATH_INLINES
 || deföed 
__LIBC_INTERNAL_MATH_INLINES
) \

154 && 
deföed
 
__OPTIMIZE__
)

163 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


164 
	#__ölöe_m©h›
(
func
, 
›
) \

165 
	`__ölöe_m©h›_
 (, 
func
, 
›
) \

166 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

167 
	`__ölöe_m©h›_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

168 
	#__ölöe_m©h›NP
(
func
, 
›
) \

169 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
) \

170 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
) \

171 
	`__ölöe_m©h›NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
)

	)

173 
	#__ölöe_m©h›
(
func
, 
›
) \

174 
	`__ölöe_m©h›_
 (, 
func
, 
›
)

	)

175 
	#__ölöe_m©h›NP
(
func
, 
›
) \

176 
	`__ölöe_m©h›NP_
 (, 
func
, 
›
)

	)

179 
	#__ölöe_m©h›_
(
Êﬂt_ty≥
, 
func
, 
›
) \

180 
	`__ölöe_m©h›_de˛_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

181 
	#__ölöe_m©h›NP_
(
Êﬂt_ty≥
, 
func
, 
›
) \

182 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, "0" (
__x
))

	)

185 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


186 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

187 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
) \

188 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

189 
	`__ölöe_m©h›_de˛_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

190 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

191 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
) \

192 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
f
), 
›
, 
∑øms
) \

193 
	`__ölöe_m©h›_de˛NP_
 (, 
	`__CONCAT
(
func
,
l
), 
›
, 
∑øms
)

	)

195 
	#__ölöe_m©h›_de˛
(
func
, 
›
, 
∑øms
...) \

196 
	`__ölöe_m©h›_de˛_
 (, 
func
, 
›
, 
∑øms
)

	)

197 
	#__ölöe_m©h›_de˛NP
(
func
, 
›
, 
∑øms
...) \

198 
	`__ölöe_m©h›_de˛NP_
 (, 
func
, 
›
, 
∑øms
)

	)

201 
	#__ölöe_m©h›_de˛_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

202 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

203 
	`__ölöe_m©h›_de˛NP_
 (
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
)

	)

205 
	#__ölöe_m©h›_de˛NP_
(
Êﬂt_ty≥
, 
func
, 
›
, 
∑øms
...) \

206 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
__x
)) \

208 
Êﬂt_ty≥
 
__ªsu…
; \

209 
__asm
 
	`__vﬁ©ûe__
 (
›
 : "Ò" (
__ªsu…
Ë: 
∑øms
); \

210  
__ªsu…
; \

211 }

	)

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


215 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

216 
	`__ölöe_m©hcode_
 (, 
func
, 
¨g
, 
code
) \

217 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

218 
	`__ölöe_m©hcode_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

219 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

220 
	`__ölöe_m©hcodeNP_
 (, 
func
, 
¨g
, 
code
) \

221 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g
, 
code
) \

222 
	`__ölöe_m©hcodeNP_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g
, 
code
)

	)

223 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

224 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

225 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

226 
	`__ölöe_m©hcode2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

227 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

228 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
) \

229 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
code
) \

230 
	`__ölöe_m©hcodeNP2_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
code
)

	)

231 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

232 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

233 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

234 
	`__ölöe_m©hcode3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

235 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

236 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

237 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
f
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

238 
	`__ölöe_m©hcodeNP3_
 (, 
	`__CONCAT
(
func
,
l
), 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

240 
	#__ölöe_m©hcode
(
func
, 
¨g
, 
code
) \

241 
	`__ölöe_m©hcode_
 (, 
func
, (
¨g
), 
code
)

	)

242 
	#__ölöe_m©hcodeNP
(
func
, 
¨g
, 
code
) \

243 
	`__ölöe_m©hcodeNP_
 (, 
func
, (
¨g
), 
code
)

	)

244 
	#__ölöe_m©hcode2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

245 
	`__ölöe_m©hcode2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

246 
	#__ölöe_m©hcodeNP2
(
func
, 
¨g1
, 
¨g2
, 
code
) \

247 
	`__ölöe_m©hcodeNP2_
 (, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

248 
	#__ölöe_m©hcode3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

249 
	`__ölöe_m©hcode3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

250 
	#__ölöe_m©hcodeNP3
(
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

251 
	`__ölöe_m©hcodeNP3_
 (, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

254 
	#__ölöe_m©hcode_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

255 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥Ë
__THROW
; \

256 
	`__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
)

	)

258 
	#__ölöe_m©hcodeNP_
(
Êﬂt_ty≥
, 
func
, 
¨g
, 
code
) \

259 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g
)) \

261 
code
; \

262 }

	)

265 
	#__ölöe_m©hcode2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

266 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

267 
	`__ölöe_m©hcodeNP2_
 (
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
)

	)

269 
	#__ölöe_m©hcodeNP2_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
code
) \

270 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
)) \

272 
code
; \

273 }

	)

275 
	#__ölöe_m©hcode3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

276 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`func
 (Êﬂt_ty≥, flﬂt_ty≥, flﬂt_ty≥Ë
__THROW
; \

277 
	`__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
)

	)

279 
	#__ölöe_m©hcodeNP3_
(
Êﬂt_ty≥
, 
func
, 
¨g1
, 
¨g2
, 
¨g3
, 
code
) \

280 
__MATH_INLINE
 
Êﬂt_ty≥
 
	`__NTH
 (
	`func
 (Êﬂt_ty≥ 
¨g1
, flﬂt_ty≥ 
¨g2
, \

281 
Êﬂt_ty≥
 
¨g3
)) \

283 
code
; \

284 }

	)

288 #i‡!
deföed
 
__NO_MATH_INLINES
 && deföed 
__OPTIMIZE__


291 
__ölöe_m©hcode
 (
__sgn
, 
__x
, \

292  
__x
 == 0.0 ? 0.0 : (__x > 0.0 ? 1.0 : -1.0))

295 #ifde‡
__FAST_MATH__


296 
__ölöe_m©hcode
 (
__pow2
, 
__x
, \

297 
__vÆue
; \

298 
__exp⁄ít
; \

299 
__exãnsi⁄__
 
__p
 = (Ë
__x
; \

300 i‡(
__x
 =(Ë
__p
) \

302 
__asm
 
__vﬁ©ûe__
 \

304 : "Ò" (
__vÆue
Ë: "0" (1.0), "u" (
__x
)); \

305  
__vÆue
; \

307 
__asm
 
__vﬁ©ûe__
 \

313 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

314 
__vÆue
 += 1.0; \

315 
__asm
 
__vﬁ©ûe__
 \

317 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

318  
__vÆue
)

320 #ifde‡
__USE_GNU


321 
	#__söcos_code
 \

322 
__co§
; \

323 
__sör
; \

324 
__asm
 
__vﬁ©ûe__
 \

339 : "Ò" (
__co§
), "=u" (
__sör
Ë: "0" (
__x
)); \

340 *
__söx
 = 
__sör
; \

341 *
__cosx
 = 
__co§


	)

343 
__MATH_INLINE
 

344 
__NTH
 (
	$__söcos
 (
__x
, *
__söx
, *
__cosx
))

346 
__söcos_code
;

347 
	}
}

349 
__MATH_INLINE
 

350 
__NTH
 (
	$__söcosf
 (
__x
, *
__söx
, *
__cosx
))

352 
__söcos_code
;

353 
	}
}

355 
__MATH_INLINE
 

356 
__NTH
 (
	$__söco¶
 (
__x
, *
__söx
, *
__cosx
))

358 
__söcos_code
;

359 
	}
}

366 #i‡
__GNUC_PREREQ
 (3, 5)

367 
	#__expm1_code
 \

368 
__ãmp
; \

369 
__ãmp
 = 
	`__buûtö_expm1l
 (
__x
); \

370  
__ãmp
 ? __ãm∞: 
__x


	)

372 
	#__expm1_code
 \

373 
__vÆue
; \

374 
__exp⁄ít
; \

375 
__ãmp
; \

376 
__asm
 
__vﬁ©ûe__
 \

385 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

386 
__asm
 
__vﬁ©ûe__
 \

388 : "Ò" (
__ãmp
Ë: "0" (1.0), "u" (
__exp⁄ít
)); \

389 
__ãmp
 -= 1.0; \

390 
__ãmp
 +
__vÆue
; \

391  
__ãmp
 ? __ãm∞: 
__x


	)

393 
	$__ölöe_m©hcodeNP_
 (, 
__expm1l
, 
__x
, 
__expm1_code
)

395 #i‡
	`__GNUC_PREREQ
 (3, 4)

396 
	`__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
,  
	$__buûtö_ex∂
 (
__x
))

398 
	#__exp_code
 \

399 
__vÆue
; \

400 
__exp⁄ít
; \

401 
__asm
 
__vﬁ©ûe__
 \

409 : "Ò" (
__vÆue
), "=u" (
__exp⁄ít
Ë: "0" (
__x
)); \

410 
__vÆue
 += 1.0; \

411 
__asm
 
__vﬁ©ûe__
 \

413 : "Ò" (
__vÆue
Ë: "0" (__vÆue), "u" (
__exp⁄ít
)); \

414  
__vÆue


	)

415 
	$__ölöe_m©hcodeNP
 (
exp
, 
__x
, 
__exp_code
)

416 
	$__ölöe_m©hcodeNP_
 (, 
__ex∂
, 
__x
, 
__exp_code
)

420 #i‡!
	`__GNUC_PREREQ
 (3, 5)

421 
	`__ölöe_m©hcodeNP
 (
èn
, 
__x
, \

422 
__vÆue
; \

423 
__vÆue2
 
	`__©åibuã__
 ((
__unu£d__
)); \

424 
__asm
 
__vﬁ©ûe__
 \

426 : "Ò" (
__vÆue2
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

427  
__vÆue
)

432 #i‡
	`__GNUC_PREREQ
 (3, 4)

433 
	`__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
,

434  
	$__buûtö_©™2l
 (
__y
, 
__x
))

436 
	#__©™2_code
 \

437 
__vÆue
; \

438 
__asm
 
__vﬁ©ûe__
 \

440 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "st(1)"); \

441  
__vÆue


	)

442 #ifde‡
__FAST_MATH__


443 
	$__ölöe_m©hcodeNP2
 (
©™2
, 
__y
, 
__x
, 
__©™2_code
)

445 
	$__ölöe_m©hcodeNP2_
 (, 
__©™2l
, 
__y
, 
__x
, 
__©™2_code
)

449 #i‡
deföed
 
__FAST_MATH__
 && !
	`__GNUC_PREREQ
 (3, 5)

450 
	`__ölöe_m©hcodeNP2
 (
fmod
, 
__x
, 
__y
, \

451 
__vÆue
; \

452 
__asm
 
__vﬁ©ûe__
 \

457 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" (
__y
) : "ax", "cc"); \

458  
__vÆue
)

462 #ifde‡
__FAST_MATH__


463 #i‡!
	`__GNUC_PREREQ
 (3,3)

464 
	`__ölöe_m©h›NP
 (
sqπ
, "fsqrt")

465 
	`__ölöe_m©h›NP_
 (, 
__sqπl
, "fsqrt")

466 
	#__libc_sqπl
(
n
Ë
	`__sqπl
 (n)

	)

468 
	#__libc_sqπl
(
n
Ë
	`__buûtö_sqπl
 (n)

	)

472 #i‡
	`__GNUC_PREREQ
 (2, 8)

473 
	`__ölöe_m©hcodeNP_
 (, 
Ábs
, 
__x
,  
	$__buûtö_Ábs
 (
__x
))

474 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


475 
	`__ölöe_m©hcodeNP_
 (, 
Ábsf
, 
__x
,  
	$__buûtö_Ábsf
 (
__x
))

476 
	`__ölöe_m©hcodeNP_
 (, 
Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

478 
	`__ölöe_m©hcodeNP_
 (, 
__Áb¶
, 
__x
,  
	$__buûtö_Áb¶
 (
__x
))

480 
	`__ölöe_m©h›
 (
Ábs
, "fabs")

481 
	`__ölöe_m©h›_
 (, 
__Áb¶
, "fabs")

484 #ifde‡
__FAST_MATH__


485 #i‡!
	`__GNUC_PREREQ
 (3, 4)

487 
	`__ölöe_m©h›NP
 (
sö
, "fsin")

489 
	`__ölöe_m©h›NP
 (
cos
, "fcos")

491 
	`__ölöe_m©h›_de˛NP
 (
log
, "Êd 2; fxch; fyl2x", "0" (
__x
) : "st(1)")

494 #i‡!
	`__GNUC_PREREQ
 (3, 5)

495 
	`__ölöe_m©h›_de˛NP
 (
log10
, "Êdlg2; fxch; fyl2x", "0" (
__x
) : "st(1)")

497 
	`__ölöe_m©hcodeNP
 (
asö
, 
__x
,  
	`__©™2l
 (__x, 
	`__libc_sqπl
 (1.0 - __x * __x)))

498 
	`__ölöe_m©hcodeNP
 (
acos
, 
__x
,  
	`__©™2l
 (
	`__libc_sqπl
 (1.0 - __x * __x), __x))

501 #i‡!
	`__GNUC_PREREQ
 (3, 4)

502 
	`__ölöe_m©h›_de˛NP
 (
©™
, "Êd1; f∑èn", "0" (
__x
) : "st(1)")

506 
	`__ölöe_m©hcode_
 (, 
__sgn1l
, 
__x
, \

507 
__exãnsi⁄__
 uni⁄ { 
__xld
; 
__xi
[3]; } 
__n
 = \

508 { 
__xld
: 
__x
 
	}
}; \

509 
	g__n
.
	g__xi
[2] = (
__n
.
__xi
[2] & 0x8000) | 0x3fff; \

510 
	g__n
.
	g__xi
[1] = 0x80000000; \

511 
	g__n
.
	g__xi
[0] = 0; \

512  
	g__n
.
	g__xld
)

515 #ifde‡
__FAST_MATH__


517 
__ölöe_m©hcodeNP
 (
söh
, 
__x
, \

518 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

519  0.5 * (
__exm1
 / (__exm1 + 1.0Ë+ __exm1Ë* 
	$__sgn1l
 (
__x
))

521 
	`__ölöe_m©hcodeNP
 (
cosh
, 
__x
, \

522 
__ex
 = 
	`__ex∂
 (
__x
); \

523  0.5 * (
__ex
 + 1.0 / __ex))

525 
	`__ölöe_m©hcodeNP
 (
ènh
, 
__x
, \

526 
__exm1
 = 
	`__expm1l
 (-
	`__Áb¶
 (
__x
 + __x)); \

527  
__exm1
 / (__exm1 + 2.0Ë* 
	`__sgn1l
 (-
__x
))

530 
	`__ölöe_m©hcodeNP
 (
Êo‹
, 
__x
, \

531 
__vÆue
; \

532 
__vﬁ©ûe
 
__cw
; \

533 
__vﬁ©ûe
 
__cwtmp
; \

534 
__asm
 
	`__vﬁ©ûe
 ("‚°cw %0" : "=m" (
__cw
)); \

535 
__cwtmp
 = (
__cw
 & 0xf3ff) | 0x0400; \

536 
__asm
 
	`__vﬁ©ûe
 ("Êdcw %0" : : "m" (
__cwtmp
)); \

537 
__asm
 
	`__vﬁ©ûe
 ("‰ndöt" : "Ò" (
__vÆue
Ë: "0" (
__x
)); \

538 
__asm
 
	`__vﬁ©ûe
 ("Êdcw %0" : : "m" (
__cw
)); \

539  
__vÆue
)

541 
	`__ölöe_m©hcodeNP
 (
˚û
, 
__x
, \

542 
__vÆue
; \

543 
__vﬁ©ûe
 
__cw
; \

544 
__vﬁ©ûe
 
__cwtmp
; \

545 
__asm
 
	`__vﬁ©ûe
 ("‚°cw %0" : "=m" (
__cw
)); \

546 
__cwtmp
 = (
__cw
 & 0xf3ff) | 0x0800; \

547 
__asm
 
	`__vﬁ©ûe
 ("Êdcw %0" : : "m" (
__cwtmp
)); \

548 
__asm
 
	`__vﬁ©ûe
 ("‰ndöt" : "Ò" (
__vÆue
Ë: "0" (
__x
)); \

549 
__asm
 
	`__vﬁ©ûe
 ("Êdcw %0" : : "m" (
__cw
)); \

550  
__vÆue
)

552 #ifde‡
__FAST_MATH__


553 
	#__ldexp_code
 \

554 
__vÆue
; \

555 
__asm
 
__vﬁ©ûe__
 \

557 : "Ò" (
__vÆue
Ë: "0" (
__x
), "u" ((Ë
__y
)); \

558  
__vÆue


	)

560 
__MATH_INLINE
 

561 
	`__NTH
 (
	$ldexp
 (
__x
, 
__y
))

563 
__ldexp_code
;

564 
	}
}

569 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


571 #ifde‡
__FAST_MATH__


572 
	$__ölöe_m©hcodeNP
 (
expm1
, 
__x
, 
__expm1_code
)

576 
	#__M_SQRT2
 1.41421356237309504880L

	)

578 #i‡!
	`__GNUC_PREREQ
 (3, 5)

579 
	`__ölöe_m©hcodeNP
 (
log1p
, 
__x
, \

580 
__vÆue
; \

581 i‡(
	`__Áb¶
 (
__x
Ë>1.0 - 0.5 * 
__M_SQRT2
) \

582 
__vÆue
 = 
	`logl
 (1.0 + 
__x
); \

584 
__asm
 
__vﬁ©ûe__
 \

588 : "Ò" (
__vÆue
Ë: "0" (
__x
) : "st(1)"); \

589  
__vÆue
)

594 
	`__ölöe_m©hcodeNP
 (
asöh
, 
__x
, \

595 
__y
 = 
	`__Áb¶
 (
__x
); \

596  (
	`log1∂
 (
__y
 * __y / (
	`__libc_sqπl
 (__y * __y + 1.0) + 1.0) + __y) \

597 * 
	$__sgn1l
 (
__x
)))

599 
	`__ölöe_m©hcodeNP
 (
acosh
, 
__x
, \

600  
	`logl
 (
__x
 + 
	`__libc_sqπl
 (__x - 1.0) * __libc_sqrtl (__x + 1.0)))

602 
	`__ölöe_m©hcodeNP
 (
©™h
, 
__x
, \

603 
__y
 = 
	`__Áb¶
 (
__x
); \

604  -0.5 * 
	`log1∂
 (-(
__y
 + __yË/ (1.0 + __y)Ë* 
	$__sgn1l
 (
__x
))

607 
	`__ölöe_m©hcodeNP2
 (
hypŸ
, 
__x
, 
__y
,

608  
	`__libc_sqπl
 (
__x
 * __x + 
__y
 * __y))

610 #i‡!
	`__GNUC_PREREQ
 (3, 5)

611 
	`__ölöe_m©hcodeNP
(
logb
, 
__x
, \

612 
__vÆue
; \

613 
__junk
; \

614 
__asm
 
__vﬁ©ûe__
 \

616 : "Ò" (
__junk
), "=u" (
__vÆue
Ë: "0" (
__x
)); \

617  
__vÆue
)

623 #ifde‡
__USE_ISOC99


624 #ifde‡
__FAST_MATH__


626 #i‡!
	`__GNUC_PREREQ
 (3, 5)

627 
	`__ölöe_m©h›_de˛NP
 (
log2
, "Êd1; fxch; fyl2x", "0" (
__x
) : "st(1)")

630 
__MATH_INLINE
 

631 
	`__NTH
 (
	$ldexpf
 (
__x
, 
__y
))

633 
__ldexp_code
;

634 
	}
}

636 
__MATH_INLINE
 

637 
__NTH
 (
	$ldex∂
 (
__x
, 
__y
))

639 
__ldexp_code
;

640 
	}
}

642 
__ölöe_m©hcodeNP3
 (
fma
, 
__x
, 
__y
, 
__z
,  (__x * __y) + __z)

644 
__ölöe_m©h›NP
 (
röt
, "frndint")

647 
	#__Ãöt_code
 \

648 
__Ãöåes
; \

649 
__asm__
 
__vﬁ©ûe__
 \

651 : "=m" (
__Ãöåes
Ë: "t" (
__x
) : "st"); \

652  
__Ãöåes


	)

653 
__MATH_INLINE
 

654 
__NTH
 (
	$Ãötf
 (
__x
))

656 
__Ãöt_code
;

657 
	}
}

658 
__MATH_INLINE
 

659 
__NTH
 (
	$Ãöt
 (
__x
))

661 
__Ãöt_code
;

662 
	}
}

663 
__MATH_INLINE
 

664 
__NTH
 (
	$Ãöé
 (
__x
))

666 
__Ãöt_code
;

667 
	}
}

668 #unde‡
__Ãöt_code


670 
	#__Œröt_code
 \

671 
__Œröåes
; \

672 
__asm__
 
__vﬁ©ûe__
 \

674 : "=m" (
__Œröåes
Ë: "t" (
__x
) : "st"); \

675  
__Œröåes


	)

676 
__MATH_INLINE
 

677 
__NTH
 (
	$Œrötf
 (
__x
))

679 
__Œröt_code
;

680 
	}
}

681 
__MATH_INLINE
 

682 
__NTH
 (
	$Œröt
 (
__x
))

684 
__Œröt_code
;

685 
	}
}

686 
__MATH_INLINE
 

687 
__NTH
 (
	$Œröé
 (
__x
))

689 
__Œröt_code
;

690 
	}
}

691 #unde‡
__Œröt_code


696 #ifde‡
__USE_MISC


698 #i‡
deföed
 
__FAST_MATH__
 && !
__GNUC_PREREQ
 (3, 5)

699 
__ölöe_m©hcodeNP2
 (
dªm
, 
__x
, 
__y
, \

700 
__vÆue
; \

701 
__˛obbîed
; \

702 
__asm
 
__vﬁ©ûe__
 \

707 : "Ò" (
__vÆue
), "=&a" (
__˛obbîed
Ë: "0" (
__x
), "u" (
__y
) : "cc"); \

708  
__vÆue
)

713 
__MATH_INLINE
 

714 
__NTH
 (
	$__föôe
 (
__x
))

716  (
__exãnsi⁄__


717 (((((uni⁄ { 
__d
; 
__i
[2]; }Ë{__d: 
__x
}).__i[1]

719 
	}
}

722 #ifde‡
__FAST_MATH__


723 
__ölöe_m©hcode
 (
__coshm1
, 
__x
, \

724 
__exm1
 = 
__expm1l
 (
__Áb¶
 (
__x
)); \

725  0.5 * (
__exm1
 / (__exm1 + 1.0)) * __exm1)

727 
__ölöe_m©hcode
 (
__acosh1p
, 
__x
, \

728  
log1∂
 (
__x
 + 
__libc_sqπl
 (__x) * __libc_sqrtl (__x + 2.0)))

734 #unde‡
__©™2_code


735 #ifde‡
__FAST_MATH__


736 #unde‡
__expm1_code


737 #unde‡
__exp_code


738 #unde‡
__söcos_code


745 #ifde‡
__LIBC_INTERNAL_MATH_INLINES


746 
__ölöe_m©h›
 (
__õì754_sqπ
, "fsqrt")

747 
__ölöe_m©hcode2
 (
__õì754_©™2
, 
__y
, 
__x
,

748 
__vÆue
;

749 
__asm
 
__vﬁ©ûe__
 ("fpatan\n\t"

750 : "Ò" (
__vÆue
)

751 : "0" (
__x
), "u" (
__y
) : "st(1)");

752  
__vÆue
;)

	@/usr/include/bits/nan.h

20 #i‚de‡
_MATH_H


27 #i‡
__GNUC_PREREQ
(3,3)

29 
	#NAN
 (
	`__buûtö_«nf
(""))

	)

31 #ñi‡
deföed__GNUC__


33 
	#NAN
 \

34 (
__exãnsi⁄__
 \

35 ((uni⁄ { 
__l
 
	`__©åibuã__
((
	`__mode__
(
__SI__
))); 
__d
; }) \

36 { 
__l
: 0x7fc00000UL }).
__d
)

	)

40 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#__«n_byãs
 { 0x7f, 0xc0, 0, 0 }

	)

45 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


46 
	#__«n_byãs
 { 0, 0, 0xc0, 0x7‡}

	)

49 uni⁄ { 
	m__c
[4]; 
	m__d
; } 
__«n_uni⁄


50 
	g__©åibuã_u£d__
 = { 
__«n_byãs
 };

51 
	#NAN
 (
__«n_uni⁄
.
__d
)

	)

	@/usr/include/bits/netdb.h

19 #i‚de‡
_NETDB_H


27 
	s√ã¡


29 *
	mn_«me
;

30 **
	mn_Æü£s
;

31 
	mn_addπy≥
;

32 
uöt32_t
 
	mn_√t
;

	@/usr/include/bits/posix1_lim.h

25 #i‚def 
_BITS_POSIX1_LIM_H


26 
	#_BITS_POSIX1_LIM_H
 1

	)

32 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

35 
	#_POSIX_AIO_MAX
 1

	)

38 
	#_POSIX_ARG_MAX
 4096

	)

41 #ifde‡
__USE_XOPEN2K


42 
	#_POSIX_CHILD_MAX
 25

	)

44 
	#_POSIX_CHILD_MAX
 6

	)

48 
	#_POSIX_DELAYTIMER_MAX
 32

	)

52 
	#_POSIX_HOST_NAME_MAX
 255

	)

55 
	#_POSIX_LINK_MAX
 8

	)

58 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

61 
	#_POSIX_MAX_CANON
 255

	)

65 
	#_POSIX_MAX_INPUT
 255

	)

68 
	#_POSIX_MQ_OPEN_MAX
 8

	)

71 
	#_POSIX_MQ_PRIO_MAX
 32

	)

74 
	#_POSIX_NAME_MAX
 14

	)

77 #ifde‡
__USE_XOPEN2K


78 
	#_POSIX_NGROUPS_MAX
 8

	)

80 
	#_POSIX_NGROUPS_MAX
 0

	)

84 #ifde‡
__USE_XOPEN2K


85 
	#_POSIX_OPEN_MAX
 20

	)

87 
	#_POSIX_OPEN_MAX
 16

	)

92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

95 
	#_POSIX_PATH_MAX
 256

	)

98 
	#_POSIX_PIPE_BUF
 512

	)

102 
	#_POSIX_RE_DUP_MAX
 255

	)

105 
	#_POSIX_RTSIG_MAX
 8

	)

108 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

111 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

114 
	#_POSIX_SIGQUEUE_MAX
 32

	)

117 
	#_POSIX_SSIZE_MAX
 32767

	)

120 
	#_POSIX_STREAM_MAX
 8

	)

123 
	#_POSIX_SYMLINK_MAX
 255

	)

127 
	#_POSIX_SYMLOOP_MAX
 8

	)

130 
	#_POSIX_TIMER_MAX
 32

	)

133 
	#_POSIX_TTY_NAME_MAX
 9

	)

136 
	#_POSIX_TZNAME_MAX
 6

	)

139 
	#_POSIX_QLIMIT
 1

	)

143 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

146 
	#_POSIX_UIO_MAXIOV
 16

	)

149 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

153 
	~<bôs/loˇl_lim.h
>

156 #i‚def 
SSIZE_MAX


157 
	#SSIZE_MAX
 
LONG_MAX


	)

164 #i‚def 
NGROUPS_MAX


165 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

23 #i‚def 
_BITS_POSIX2_LIM_H


24 
	#_BITS_POSIX2_LIM_H
 1

	)

28 
	#_POSIX2_BC_BASE_MAX
 99

	)

31 
	#_POSIX2_BC_DIM_MAX
 2048

	)

34 
	#_POSIX2_BC_SCALE_MAX
 99

	)

37 
	#_POSIX2_BC_STRING_MAX
 1000

	)

41 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

45 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

48 
	#_POSIX2_LINE_MAX
 2048

	)

52 
	#_POSIX2_RE_DUP_MAX
 255

	)

56 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

63 #i‚def 
BC_BASE_MAX


64 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

66 #i‚def 
BC_DIM_MAX


67 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

69 #i‚def 
BC_SCALE_MAX


70 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

72 #i‚def 
BC_STRING_MAX


73 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

75 #i‚def 
COLL_WEIGHTS_MAX


76 
	#COLL_WEIGHTS_MAX
 255

	)

78 #i‚def 
EXPR_NEST_MAX


79 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

81 #i‚def 
LINE_MAX


82 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

84 #i‚def 
CHARCLASS_NAME_MAX


85 
	#CHARCLASS_NAME_MAX
 2048

	)

89 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/posix_opt.h

20 #i‚def 
_POSIX_OPT_H


21 
	#_POSIX_OPT_H
 1

	)

24 
	#_POSIX_JOB_CONTROL
 1

	)

27 
	#_POSIX_SAVED_IDS
 1

	)

30 
	#_POSIX_PRIORITY_SCHEDULING
 200112L

	)

33 
	#_POSIX_SYNCHRONIZED_IO
 200112L

	)

36 
	#_POSIX_FSYNC
 200112L

	)

39 
	#_POSIX_MAPPED_FILES
 200112L

	)

42 
	#_POSIX_MEMLOCK
 200112L

	)

45 
	#_POSIX_MEMLOCK_RANGE
 200112L

	)

48 
	#_POSIX_MEMORY_PROTECTION
 200112L

	)

51 
	#_POSIX_CHOWN_RESTRICTED
 1

	)

55 
	#_POSIX_VDISABLE
 '\0'

	)

58 
	#_POSIX_NO_TRUNC
 1

	)

61 
	#_XOPEN_REALTIME
 1

	)

64 
	#_XOPEN_REALTIME_THREADS
 1

	)

67 
	#_XOPEN_SHM
 1

	)

70 
	#_POSIX_THREADS
 200112L

	)

73 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

74 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200112L

	)

77 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200112L

	)

80 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200112L

	)

83 
	#_POSIX_THREAD_ATTR_STACKADDR
 200112L

	)

86 
	#_POSIX_SEMAPHORES
 200112L

	)

89 
	#_POSIX_REALTIME_SIGNALS
 200112L

	)

92 
	#_POSIX_ASYNCHRONOUS_IO
 200112L

	)

93 
	#_POSIX_ASYNC_IO
 1

	)

95 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

97 
	#_POSIX_PRIORITIZED_IO
 200112L

	)

100 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

103 
	#_LFS_LARGEFILE
 1

	)

104 
	#_LFS64_LARGEFILE
 1

	)

105 
	#_LFS64_STDIO
 1

	)

108 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200112L

	)

111 
	#_POSIX_CPUTIME
 0

	)

114 
	#_POSIX_THREAD_CPUTIME
 0

	)

117 
	#_POSIX_REGEXP
 1

	)

120 
	#_POSIX_READER_WRITER_LOCKS
 200112L

	)

123 
	#_POSIX_SHELL
 1

	)

126 
	#_POSIX_TIMEOUTS
 200112L

	)

129 
	#_POSIX_SPIN_LOCKS
 200112L

	)

132 
	#_POSIX_SPAWN
 200112L

	)

135 
	#_POSIX_TIMERS
 200112L

	)

138 
	#_POSIX_BARRIERS
 200112L

	)

141 
	#_POSIX_MESSAGE_PASSING
 200112L

	)

144 
	#_POSIX_THREAD_PROCESS_SHARED
 -1

	)

147 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

150 
	#_POSIX_CLOCK_SELECTION
 -1

	)

153 
	#_POSIX_ADVISORY_INFO
 200112L

	)

156 
	#_POSIX_IPV6
 200112L

	)

159 
	#_POSIX_RAW_SOCKETS
 200112L

	)

162 
	#_POSIX2_CHAR_TERM
 200112L

	)

165 
	#_POSIX_SPORADIC_SERVER
 -1

	)

166 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

169 
	#_POSIX_TRACE
 -1

	)

170 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

171 
	#_POSIX_TRACE_INHERIT
 -1

	)

172 
	#_POSIX_TRACE_LOG
 -1

	)

175 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

178 
	#_POSIX_THREAD_PRIO_INHERIT
 -1

	)

179 
	#_POSIX_THREAD_PRIO_PROTECT
 -1

	)

	@/usr/include/bits/pthreadtypes.h

15 #i‡!
deföed
 
_BITS_TYPES_H
 && !deföed 
_PTHREAD_H


19 #i‚de‡
_BITS_PTHREADTYPES_H


20 
	#_BITS_PTHREADTYPES_H
 1

	)

22 
	#__√ed_sched∑øm


	)

23 
	~<bôs/sched.h
>

26 
	s_±hªad_Á°lock


28 
	m__°©us
;

29 
	m__•ölock
;

33 #i‚de‡
_PTHREAD_DESCR_DEFINED


35 
_±hªad_des¸_°ru˘
 *
	t_±hªad_des¸
;

36 
	#_PTHREAD_DESCR_DEFINED


	)

41 
	s__±hªad_©å_s


43 
	m__dëach°©e
;

44 
	m__schedpﬁicy
;

45 
__sched_∑øm
 
	m__sched∑øm
;

46 
	m__öhîôsched
;

47 
	m__sc›e
;

48 
size_t
 
	m__gu¨dsize
;

49 
	m__°ackaddr_£t
;

50 *
	m__°ackaddr
;

51 
size_t
 
	m__°acksize
;

52 } 
	t±hªad_©å_t
;

57 #ifde‡
__GLIBC_HAVE_LONG_LONG


58 
__exãnsi⁄__
 
	t__±hªad_c⁄d_Æign_t
;

60 
	t__±hªad_c⁄d_Æign_t
;

65 
_±hªad_Á°lock
 
	m__c_lock
;

66 
_±hªad_des¸
 
	m__c_waôög
;

67 #i‡!(
deföed
(
__DECC
Ë|| deföed(
__DECCXX
))

68 
	m__∑ddög
[48 -  (
_±hªad_Á°lock
)

69 -  (
_±hªad_des¸
Ë-  (
__±hªad_c⁄d_Æign_t
)];

70 
__±hªad_c⁄d_Æign_t
 
	m__Æign
;

72 } 
	t±hªad_c⁄d_t
;

78 
	m__dummy
;

79 } 
	t±hªad_c⁄d©å_t
;

82 
	t±hªad_key_t
;

90 
	m__m_ª£rved
;

91 
	m__m_cou¡
;

92 
_±hªad_des¸
 
	m__m_ow√r
;

93 
	m__m_köd
;

94 
_±hªad_Á°lock
 
	m__m_lock
;

95 } 
	t±hªad_muãx_t
;

101 
	m__muãxköd
;

102 } 
	t±hªad_muãx©å_t
;

106 
	t±hªad_⁄˚_t
;

109 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


111 
	s_±hªad_rwlock_t


113 
_±hªad_Á°lock
 
	m__rw_lock
;

114 
	m__rw_ªadîs
;

115 
_±hªad_des¸
 
	m__rw_wrôî
;

116 
_±hªad_des¸
 
	m__rw_ªad_waôög
;

117 
_±hªad_des¸
 
	m__rw_wrôe_waôög
;

118 
	m__rw_köd
;

119 
	m__rw_psh¨ed
;

120 } 
	t±hªad_rwlock_t
;

126 
	m__lockköd
;

127 
	m__psh¨ed
;

128 } 
	t±hªad_rwlock©å_t
;

131 #ifde‡
__USE_XOPEN2K


133 vﬁ©ûê
	t±hªad_•ölock_t
;

137 
_±hªad_Á°lock
 
	m__ba_lock
;

138 
	m__ba_ªquúed
;

139 
	m__ba_¥e£¡
;

140 
_±hªad_des¸
 
	m__ba_waôög
;

141 } 
	t±hªad_b¨rõr_t
;

145 
	m__psh¨ed
;

146 } 
	t±hªad_b¨rõøâr_t
;

152 
	t±hªad_t
;

	@/usr/include/bits/resource.h

21 #i‚de‡
_SYS_RESOURCE_H


25 
	~<bôs/ty≥s.h
>

33 
	e__æimô_ªsour˚


36 
	mRLIMIT_CPU
 = 0,

37 
	#RLIMIT_CPU
 
RLIMIT_CPU


	)

40 
	mRLIMIT_FSIZE
 = 1,

41 
	#RLIMIT_FSIZE
 
RLIMIT_FSIZE


	)

44 
	mRLIMIT_DATA
 = 2,

45 
	#RLIMIT_DATA
 
RLIMIT_DATA


	)

48 
	mRLIMIT_STACK
 = 3,

49 
	#RLIMIT_STACK
 
RLIMIT_STACK


	)

52 
	mRLIMIT_CORE
 = 4,

53 
	#RLIMIT_CORE
 
RLIMIT_CORE


	)

59 
	m__RLIMIT_RSS
 = 5,

60 
	#RLIMIT_RSS
 
__RLIMIT_RSS


	)

63 
	mRLIMIT_NOFILE
 = 7,

64 
	m__RLIMIT_OFILE
 = 
RLIMIT_NOFILE
,

65 
	#RLIMIT_NOFILE
 
RLIMIT_NOFILE


	)

66 
	#RLIMIT_OFILE
 
__RLIMIT_OFILE


	)

69 
	mRLIMIT_AS
 = 9,

70 
	#RLIMIT_AS
 
RLIMIT_AS


	)

73 
	m__RLIMIT_NPROC
 = 6,

74 
	#RLIMIT_NPROC
 
__RLIMIT_NPROC


	)

77 
	m__RLIMIT_MEMLOCK
 = 8,

78 
	#RLIMIT_MEMLOCK
 
__RLIMIT_MEMLOCK


	)

81 
	m__RLIMIT_LOCKS
 = 10,

82 
	#RLIMIT_LOCKS
 
__RLIMIT_LOCKS


	)

85 
	m__RLIMIT_SIGPENDING
 = 11,

86 
	#RLIMIT_SIGPENDING
 
__RLIMIT_SIGPENDING


	)

89 
	m__RLIMIT_MSGQUEUE
 = 12,

90 
	#RLIMIT_MSGQUEUE
 
__RLIMIT_MSGQUEUE


	)

92 
	m__RLIMIT_NLIMITS
 = 13,

93 
	m__RLIM_NLIMITS
 = 
__RLIMIT_NLIMITS


94 
	#RLIMIT_NLIMITS
 
__RLIMIT_NLIMITS


	)

95 
	#RLIM_NLIMITS
 
__RLIM_NLIMITS


	)

99 #i‚de‡
__USE_FILE_OFFSET64


100 
	#RLIM_INFINITY
 (()(~0UL))

	)

102 
	#RLIM_INFINITY
 0xffffffffffffffffuLL

	)

105 #ifde‡
__USE_LARGEFILE64


106 
	#RLIM64_INFINITY
 0xffffffffffffffffuLL

	)

110 
	#RLIM_SAVED_MAX
 
RLIM_INFINITY


	)

111 
	#RLIM_SAVED_CUR
 
RLIM_INFINITY


	)

115 #i‚de‡
__USE_FILE_OFFSET64


116 
__æim_t
 
	tæim_t
;

118 
__æim64_t
 
	tæim_t
;

120 #ifde‡
__USE_LARGEFILE64


121 
__æim64_t
 
	tæim64_t
;

124 
	sæimô


127 
æim_t
 
	mæim_cur
;

129 
æim_t
 
	mæim_max
;

132 #ifde‡
__USE_LARGEFILE64


133 
	sæimô64


136 
æim64_t
 
	mæim_cur
;

138 
æim64_t
 
	mæim_max
;

143 
	e__rußge_who


146 
	mRUSAGE_SELF
 = 0,

147 
	#RUSAGE_SELF
 
RUSAGE_SELF


	)

150 
	mRUSAGE_CHILDREN
 = -1

151 
	#RUSAGE_CHILDREN
 
RUSAGE_CHILDREN


	)

154 
	#__√ed_timevÆ


	)

155 
	~<bôs/time.h
>

158 
	srußge


161 
timevÆ
 
	mru_utime
;

163 
timevÆ
 
	mru_°ime
;

165 
	mru_maxrss
;

168 
	mru_ixrss
;

170 
	mru_idrss
;

172 
	mru_i§ss
;

175 
	mru_möÊt
;

177 
	mru_majÊt
;

179 
	mru_nsw≠
;

182 
	mru_öblock
;

184 
	mru_oublock
;

186 
	mru_msg¢d
;

188 
	mru_msgrcv
;

190 
	mru_nsig«ls
;

194 
	mru_nvcsw
;

197 
	mru_nivcsw
;

201 
	#PRIO_MIN
 -20

	)

202 
	#PRIO_MAX
 20

	)

206 
	e__¥i‹ôy_which


208 
	mPRIO_PROCESS
 = 0,

209 
	#PRIO_PROCESS
 
PRIO_PROCESS


	)

210 
	mPRIO_PGRP
 = 1,

211 
	#PRIO_PGRP
 
PRIO_PGRP


	)

212 
	mPRIO_USER
 = 2

213 
	#PRIO_USER
 
PRIO_USER


	)

	@/usr/include/bits/select.h

19 #i‚de‡
_SYS_SELECT_H


24 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

26 
	#__FD_ZERO
(
fd•
) \

28 
__d0
, 
__d1
; \

29 
__asm__
 
	`__vﬁ©ûe__
 ("cld;Ñep; stosl" \

30 : "=c" (
__d0
), "=D" (
__d1
) \

31 : "a" (0), "0" ( (
fd_£t
) \

32 /  (
__fd_mask
)), \

33 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

35 } 0)

	)

37 
	#__FD_SET
(
fd
, 
fd•
) \

38 
__asm__
 
	`__vﬁ©ûe__
 ("btsl %1,%0" \

39 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

40 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

41 : "cc","mem‹y")

	)

42 
	#__FD_CLR
(
fd
, 
fd•
) \

43 
__asm__
 
	`__vﬁ©ûe__
 ("btrl %1,%0" \

44 : "=m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

45 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
) \

46 : "cc","mem‹y")

	)

47 
	#__FD_ISSET
(
fd
, 
fd•
) \

48 (
__exãnsi⁄__
 \

49 ({
__ªsu…
; \

50 
__asm__
 
	`__vﬁ©ûe__
 ("btl %1,%2 ; setcb %b0" \

51 : "=q" (
__ªsu…
) \

52 : "r" (((Ë(
fd
)Ë% 
__NFDBITS
), \

53 "m" (
	`__FDS_BITS
 (
fd•
)[
	`__FDELT
 (
fd
)]) \

55 
__ªsu…
; }))

	)

61 
	#__FD_ZERO
(
£t
) \

63 
__i
; \

64 
fd_£t
 *
__¨r
 = (
£t
); \

65 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

66 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

67 } 0)

	)

68 
	#__FD_SET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] |
	`__FDMASK
 (d))

	)

69 
	#__FD_CLR
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] &~
	`__FDMASK
 (d))

	)

70 
	#__FD_ISSET
(
d
, 
£t
Ë(
	`__FDS_BITS
 (£t)[
	`__FDELT
 (d)] & 
	`__FDMASK
 (d))

	)

	@/usr/include/bits/sigaction.h

20 #i‚de‡
_SIGNAL_H


25 
	ssiga˘i⁄


28 #ifde‡
__USE_POSIX199309


32 
__sigh™dÀr_t
 
	mß_h™dÀr
;

34 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

36 
	m__siga˘i⁄_h™dÀr
;

37 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

38 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

40 
__sigh™dÀr_t
 
	mß_h™dÀr
;

44 
__sig£t_t
 
	mß_mask
;

47 
	mß_Êags
;

50 (*
	mß_ª°‹î
) ();

54 
	#SA_NOCLDSTOP
 1

	)

55 
	#SA_NOCLDWAIT
 2

	)

56 
	#SA_SIGINFO
 4

	)

58 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


59 
	#SA_ONSTACK
 0x08000000

	)

60 
	#SA_RESTART
 0x10000000

	)

61 
	#SA_NODEFER
 0x40000000

	)

63 
	#SA_RESETHAND
 0x80000000

	)

65 #ifde‡
__USE_MISC


66 
	#SA_INTERRUPT
 0x20000000

	)

69 
	#SA_NOMASK
 
SA_NODEFER


	)

70 
	#SA_ONESHOT
 
SA_RESETHAND


	)

71 
	#SA_STACK
 
SA_ONSTACK


	)

75 
	#SIG_BLOCK
 0

	)

76 
	#SIG_UNBLOCK
 1

	)

77 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


23 #i‚de‡
sigc⁄ãxt_°ru˘


26 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

28 
	~<asm/sigc⁄ãxt.h
>

	@/usr/include/bits/siginfo.h

20 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

21 && !
deföed
 
	g__√ed_sigevít_t


25 
	~<bôs/w‹dsize.h
>

27 #i‡(!
deföed
 
__have_sigvÆ_t
 \

28 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

29 || 
deföed
 
	g__√ed_sigevít_t
))

30 
	#__have_sigvÆ_t
 1

	)

33 
	usigvÆ


35 
	msivÆ_öt
;

36 *
	msivÆ_±r
;

37 } 
	tsigvÆ_t
;

40 #i‡(!
deföed
 
__have_sigöfo_t
 \

41 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

42 
	#__have_sigöfo_t
 1

	)

44 
	#__SI_MAX_SIZE
 128

	)

45 #i‡
__WORDSIZE
 == 64

46 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

48 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

51 
	ssigöfo


53 
	msi_signo
;

54 
	msi_î∫o
;

56 
	msi_code
;

60 
	m_∑d
[
__SI_PAD_SIZE
];

65 
__pid_t
 
	msi_pid
;

66 
__uid_t
 
	msi_uid
;

67 } 
	m_kûl
;

72 
	msi_tid
;

73 
	msi_ovîrun
;

74 
sigvÆ_t
 
	msi_sigvÆ
;

75 } 
	m_timî
;

80 
__pid_t
 
	msi_pid
;

81 
__uid_t
 
	msi_uid
;

82 
sigvÆ_t
 
	msi_sigvÆ
;

83 } 
	m_π
;

88 
__pid_t
 
	msi_pid
;

89 
__uid_t
 
	msi_uid
;

90 
	msi_°©us
;

91 
__˛ock_t
 
	msi_utime
;

92 
__˛ock_t
 
	msi_°ime
;

93 } 
	m_sigchld
;

98 *
	msi_addr
;

99 } 
	m_sigÁu…
;

104 
	msi_b™d
;

105 
	msi_fd
;

106 } 
	m_sigpﬁl
;

107 } 
	m_sifõlds
;

108 } 
	tsigöfo_t
;

112 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

113 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

114 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

115 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

116 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

117 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

118 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

119 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

120 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

121 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

122 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

123 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

124 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

131 
	mSI_ASYNCNL
 = -60,

132 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

133 
	mSI_TKILL
 = -6,

134 
	#SI_TKILL
 
SI_TKILL


	)

135 
	mSI_SIGIO
,

136 
	#SI_SIGIO
 
SI_SIGIO


	)

137 
	mSI_ASYNCIO
,

138 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

139 
	mSI_MESGQ
,

140 
	#SI_MESGQ
 
SI_MESGQ


	)

141 
	mSI_TIMER
,

142 
	#SI_TIMER
 
SI_TIMER


	)

143 
	mSI_QUEUE
,

144 
	#SI_QUEUE
 
SI_QUEUE


	)

145 
	mSI_USER
,

146 
	#SI_USER
 
SI_USER


	)

147 
	mSI_KERNEL
 = 0x80

148 
	#SI_KERNEL
 
SI_KERNEL


	)

155 
	mILL_ILLOPC
 = 1,

156 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

157 
	mILL_ILLOPN
,

158 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

159 
	mILL_ILLADR
,

160 
	#ILL_ILLADR
 
ILL_ILLADR


	)

161 
	mILL_ILLTRP
,

162 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

163 
	mILL_PRVOPC
,

164 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

165 
	mILL_PRVREG
,

166 
	#ILL_PRVREG
 
ILL_PRVREG


	)

167 
	mILL_COPROC
,

168 
	#ILL_COPROC
 
ILL_COPROC


	)

169 
	mILL_BADSTK


170 
	#ILL_BADSTK
 
ILL_BADSTK


	)

176 
	mFPE_INTDIV
 = 1,

177 
	#FPE_INTDIV
 
FPE_INTDIV


	)

178 
	mFPE_INTOVF
,

179 
	#FPE_INTOVF
 
FPE_INTOVF


	)

180 
	mFPE_FLTDIV
,

181 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

182 
	mFPE_FLTOVF
,

183 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

184 
	mFPE_FLTUND
,

185 
	#FPE_FLTUND
 
FPE_FLTUND


	)

186 
	mFPE_FLTRES
,

187 
	#FPE_FLTRES
 
FPE_FLTRES


	)

188 
	mFPE_FLTINV
,

189 
	#FPE_FLTINV
 
FPE_FLTINV


	)

190 
	mFPE_FLTSUB


191 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

197 
	mSEGV_MAPERR
 = 1,

198 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

199 
	mSEGV_ACCERR


200 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

206 
	mBUS_ADRALN
 = 1,

207 
	#BUS_ADRALN
 
BUS_ADRALN


	)

208 
	mBUS_ADRERR
,

209 
	#BUS_ADRERR
 
BUS_ADRERR


	)

210 
	mBUS_OBJERR


211 
	#BUS_OBJERR
 
BUS_OBJERR


	)

217 
	mTRAP_BRKPT
 = 1,

218 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

219 
	mTRAP_TRACE


220 
	#TRAP_TRACE
 
TRAP_TRACE


	)

226 
	mCLD_EXITED
 = 1,

227 
	#CLD_EXITED
 
CLD_EXITED


	)

228 
	mCLD_KILLED
,

229 
	#CLD_KILLED
 
CLD_KILLED


	)

230 
	mCLD_DUMPED
,

231 
	#CLD_DUMPED
 
CLD_DUMPED


	)

232 
	mCLD_TRAPPED
,

233 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

234 
	mCLD_STOPPED
,

235 
	#CLD_STOPPED
 
CLD_STOPPED


	)

236 
	mCLD_CONTINUED


237 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

243 
	mPOLL_IN
 = 1,

244 
	#POLL_IN
 
POLL_IN


	)

245 
	mPOLL_OUT
,

246 
	#POLL_OUT
 
POLL_OUT


	)

247 
	mPOLL_MSG
,

248 
	#POLL_MSG
 
POLL_MSG


	)

249 
	mPOLL_ERR
,

250 
	#POLL_ERR
 
POLL_ERR


	)

251 
	mPOLL_PRI
,

252 
	#POLL_PRI
 
POLL_PRI


	)

253 
	mPOLL_HUP


254 
	#POLL_HUP
 
POLL_HUP


	)

257 #unde‡
__√ed_sigöfo_t


261 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

262 && !
deföed
 
	g__have_sigevít_t


263 
	#__have_sigevít_t
 1

	)

266 
	#__SIGEV_MAX_SIZE
 64

	)

267 #i‡
__WORDSIZE
 == 64

268 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

270 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

273 
	ssigevít


275 
sigvÆ_t
 
	msigev_vÆue
;

276 
	msigev_signo
;

277 
	msigev_nŸify
;

281 
	m_∑d
[
__SIGEV_PAD_SIZE
];

285 
__pid_t
 
	m_tid
;

289 (*
	m_fun˘i⁄
Ë(
	msigvÆ_t
);

290 *
	m_©åibuã
;

291 } 
	m_sigev_thªad
;

292 } 
	m_sigev_un
;

293 } 
	tsigevít_t
;

296 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

297 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

302 
	mSIGEV_SIGNAL
 = 0,

303 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

304 
	mSIGEV_NONE
,

305 
	#SIGEV_NONE
 
SIGEV_NONE


	)

306 
	mSIGEV_THREAD
,

307 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

309 
	mSIGEV_THREAD_ID
 = 4

310 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

20 #ifdef 
_SIGNAL_H


23 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

24 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

25 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

27 #ifde‡
__USE_UNIX98


28 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

33 
	#SIGHUP
 1

	)

34 
	#SIGINT
 2

	)

35 
	#SIGQUIT
 3

	)

36 
	#SIGILL
 4

	)

37 
	#SIGTRAP
 5

	)

38 
	#SIGABRT
 6

	)

39 
	#SIGIOT
 6

	)

40 
	#SIGBUS
 7

	)

41 
	#SIGFPE
 8

	)

42 
	#SIGKILL
 9

	)

43 
	#SIGUSR1
 10

	)

44 
	#SIGSEGV
 11

	)

45 
	#SIGUSR2
 12

	)

46 
	#SIGPIPE
 13

	)

47 
	#SIGALRM
 14

	)

48 
	#SIGTERM
 15

	)

49 
	#SIGSTKFLT
 16

	)

50 
	#SIGCLD
 
SIGCHLD


	)

51 
	#SIGCHLD
 17

	)

52 
	#SIGCONT
 18

	)

53 
	#SIGSTOP
 19

	)

54 
	#SIGTSTP
 20

	)

55 
	#SIGTTIN
 21

	)

56 
	#SIGTTOU
 22

	)

57 
	#SIGURG
 23

	)

58 
	#SIGXCPU
 24

	)

59 
	#SIGXFSZ
 25

	)

60 
	#SIGVTALRM
 26

	)

61 
	#SIGPROF
 27

	)

62 
	#SIGWINCH
 28

	)

63 
	#SIGPOLL
 
SIGIO


	)

64 
	#SIGIO
 29

	)

65 
	#SIGPWR
 30

	)

66 
	#SIGSYS
 31

	)

67 
	#SIGUNUSED
 31

	)

69 
	#_NSIG
 65

	)

72 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

73 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

77 
	#__SIGRTMIN
 32

	)

78 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

20 #i‚def 
_SIGSET_H_ty≥s


21 
	#_SIGSET_H_ty≥s
 1

	)

23 
	t__sig_©omic_t
;

27 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

30 
	m__vÆ
[
_SIGSET_NWORDS
];

31 } 
	t__sig£t_t
;

42 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


43 
	#_SIGSET_H_‚s
 1

	)

45 #i‚de‡
_EXTERN_INLINE


46 
	#_EXTERN_INLINE
 
__ölöe


	)

50 
	#__sigmask
(
sig
) \

51 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

54 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

56 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

57 
	#__sigem±y£t
(
£t
) \

58 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

59 
sig£t_t
 *
__£t
 = (
£t
); \

60 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

61 0; }))

	)

62 
	#__sigfûl£t
(
£t
) \

63 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

64 
sig£t_t
 *
__£t
 = (
£t
); \

65 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

66 0; }))

	)

68 #ifde‡
__USE_GNU


72 
	#__sigi£m±y£t
(
£t
) \

73 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

74 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

75 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

76 !
__ªt
 && --
__˙t
 >= 0) \

77 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

78 
__ªt
 =0; }))

	)

79 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

80 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

81 
sig£t_t
 *
__de°
 = (
de°
); \

82 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

83 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

84 --
__˙t
 >= 0) \

85 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

86 & 
__right
->
__vÆ
[
__˙t
]); \

87 0; }))

	)

88 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

89 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

90 
sig£t_t
 *
__de°
 = (
de°
); \

91 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

92 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

93 --
__˙t
 >= 0) \

94 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

95 | 
__right
->
__vÆ
[
__˙t
]); \

96 0; }))

	)

103 
__sigismembî
 (
__c⁄°
 
__sig£t_t
 *, );

104 
__sigadd£t
 (
__sig£t_t
 *, );

105 
__sigdñ£t
 (
__sig£t_t
 *, );

107 #ifde‡
__USE_EXTERN_INLINES


108 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

109 
_EXTERN_INLINE
 \

110 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

112 
__mask
 = 
	`__sigmask
 (
__sig
); \

113 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

114  
BODY
; \

115 }

	)

117 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
Ë? 1 : 0, 
__c⁄°
)

118 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

119 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

121 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

20 #i‚de‡
_SIGNAL_H


26 
	ssig°ack


28 *
	mss_•
;

29 
	mss_⁄°ack
;

36 
	mSS_ONSTACK
 = 1,

37 
	#SS_ONSTACK
 
SS_ONSTACK


	)

38 
	mSS_DISABLE


39 
	#SS_DISABLE
 
SS_DISABLE


	)

43 
	#MINSIGSTKSZ
 2048

	)

46 
	#SIGSTKSZ
 8192

	)

50 
	ssigÆt°ack


52 *
	mss_•
;

53 
	mss_Êags
;

54 
size_t
 
	mss_size
;

55 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

20 #i‚de‡
_BITS_SIGTHREAD_H


21 
	#_BITS_SIGTHREAD_H
 1

	)

23 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


31 
	$±hªad_sigmask
 (
__how
,

32 
__c⁄°
 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

33 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

36 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

	@/usr/include/bits/socket.h

20 #i‚de‡
__BITS_SOCKET_H


21 
	#__BITS_SOCKET_H


	)

23 #i‡!
deföed
 
_SYS_SOCKET_H
 && !deföed 
_NETINET_IN_H


27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<limôs.h
>

32 
	~<sys/ty≥s.h
>

35 #i‚de‡
__sockÀn_t_deföed


36 
__sockÀn_t
 
	tsockÀn_t
;

37 
	#__sockÀn_t_deföed


	)

41 
	e__sockë_ty≥


43 
	mSOCK_STREAM
 = 1,

45 
	#SOCK_STREAM
 
SOCK_STREAM


	)

46 
	mSOCK_DGRAM
 = 2,

48 
	#SOCK_DGRAM
 
SOCK_DGRAM


	)

49 
	mSOCK_RAW
 = 3,

50 
	#SOCK_RAW
 
SOCK_RAW


	)

51 
	mSOCK_RDM
 = 4,

52 
	#SOCK_RDM
 
SOCK_RDM


	)

53 
	mSOCK_SEQPACKET
 = 5,

55 
	#SOCK_SEQPACKET
 
SOCK_SEQPACKET


	)

56 
	mSOCK_PACKET
 = 10

59 
	#SOCK_PACKET
 
SOCK_PACKET


	)

63 
	#PF_UNSPEC
 0

	)

64 
	#PF_LOCAL
 1

	)

65 
	#PF_UNIX
 
PF_LOCAL


	)

66 
	#PF_FILE
 
PF_LOCAL


	)

67 
	#PF_INET
 2

	)

68 
	#PF_AX25
 3

	)

69 
	#PF_IPX
 4

	)

70 
	#PF_APPLETALK
 5

	)

71 
	#PF_NETROM
 6

	)

72 
	#PF_BRIDGE
 7

	)

73 
	#PF_ATMPVC
 8

	)

74 
	#PF_X25
 9

	)

75 
	#PF_INET6
 10

	)

76 
	#PF_ROSE
 11

	)

77 
	#PF_DEC√t
 12

	)

78 
	#PF_NETBEUI
 13

	)

79 
	#PF_SECURITY
 14

	)

80 
	#PF_KEY
 15

	)

81 
	#PF_NETLINK
 16

	)

82 
	#PF_ROUTE
 
PF_NETLINK


	)

83 
	#PF_PACKET
 17

	)

84 
	#PF_ASH
 18

	)

85 
	#PF_ECONET
 19

	)

86 
	#PF_ATMSVC
 20

	)

87 
	#PF_SNA
 22

	)

88 
	#PF_IRDA
 23

	)

89 
	#PF_PPPOX
 24

	)

90 
	#PF_WANPIPE
 25

	)

91 
	#PF_BLUETOOTH
 31

	)

92 
	#PF_MAX
 32

	)

95 
	#AF_UNSPEC
 
PF_UNSPEC


	)

96 
	#AF_LOCAL
 
PF_LOCAL


	)

97 
	#AF_UNIX
 
PF_UNIX


	)

98 
	#AF_FILE
 
PF_FILE


	)

99 
	#AF_INET
 
PF_INET


	)

100 
	#AF_AX25
 
PF_AX25


	)

101 
	#AF_IPX
 
PF_IPX


	)

102 
	#AF_APPLETALK
 
PF_APPLETALK


	)

103 
	#AF_NETROM
 
PF_NETROM


	)

104 
	#AF_BRIDGE
 
PF_BRIDGE


	)

105 
	#AF_ATMPVC
 
PF_ATMPVC


	)

106 
	#AF_X25
 
PF_X25


	)

107 
	#AF_INET6
 
PF_INET6


	)

108 
	#AF_ROSE
 
PF_ROSE


	)

109 
	#AF_DEC√t
 
PF_DEC√t


	)

110 
	#AF_NETBEUI
 
PF_NETBEUI


	)

111 
	#AF_SECURITY
 
PF_SECURITY


	)

112 
	#AF_KEY
 
PF_KEY


	)

113 
	#AF_NETLINK
 
PF_NETLINK


	)

114 
	#AF_ROUTE
 
PF_ROUTE


	)

115 
	#AF_PACKET
 
PF_PACKET


	)

116 
	#AF_ASH
 
PF_ASH


	)

117 
	#AF_ECONET
 
PF_ECONET


	)

118 
	#AF_ATMSVC
 
PF_ATMSVC


	)

119 
	#AF_SNA
 
PF_SNA


	)

120 
	#AF_IRDA
 
PF_IRDA


	)

121 
	#AF_PPPOX
 
PF_PPPOX


	)

122 
	#AF_WANPIPE
 
PF_WANPIPE


	)

123 
	#AF_BLUETOOTH
 
PF_BLUETOOTH


	)

124 
	#AF_MAX
 
PF_MAX


	)

130 
	#SOL_RAW
 255

	)

131 
	#SOL_DECNET
 261

	)

132 
	#SOL_X25
 262

	)

133 
	#SOL_PACKET
 263

	)

134 
	#SOL_ATM
 264

	)

135 
	#SOL_AAL
 265

	)

136 
	#SOL_IRDA
 266

	)

139 
	#SOMAXCONN
 128

	)

142 
	~<bôs/sockaddr.h
>

145 
	ssockaddr


147 
__SOCKADDR_COMMON
 (
ß_
);

148 
	mß_d©a
[14];

154 #i‡
ULONG_MAX
 > 0xffffffff

155 
	#__ss_Æig¡y≥
 
__uöt64_t


	)

157 
	#__ss_Æig¡y≥
 
__uöt32_t


	)

159 
	#_SS_SIZE
 128

	)

160 
	#_SS_PADSIZE
 (
_SS_SIZE
 - (2 *  (
__ss_Æig¡y≥
)))

	)

162 
	ssockaddr_°‹age


164 
__SOCKADDR_COMMON
 (
ss_
);

165 
__ss_Æig¡y≥
 
	m__ss_Æign
;

166 
	m__ss_∑ddög
[
_SS_PADSIZE
];

173 
	mMSG_OOB
 = 0x01,

174 
	#MSG_OOB
 
MSG_OOB


	)

175 
	mMSG_PEEK
 = 0x02,

176 
	#MSG_PEEK
 
MSG_PEEK


	)

177 
	mMSG_DONTROUTE
 = 0x04,

178 
	#MSG_DONTROUTE
 
MSG_DONTROUTE


	)

179 #ifde‡
__USE_GNU


181 
	mMSG_TRYHARD
 = 
MSG_DONTROUTE
,

182 
	#MSG_TRYHARD
 
MSG_DONTROUTE


	)

184 
	mMSG_CTRUNC
 = 0x08,

185 
	#MSG_CTRUNC
 
MSG_CTRUNC


	)

186 
	mMSG_PROXY
 = 0x10,

187 
	#MSG_PROXY
 
MSG_PROXY


	)

188 
	mMSG_TRUNC
 = 0x20,

189 
	#MSG_TRUNC
 
MSG_TRUNC


	)

190 
	mMSG_DONTWAIT
 = 0x40,

191 
	#MSG_DONTWAIT
 
MSG_DONTWAIT


	)

192 
	mMSG_EOR
 = 0x80,

193 
	#MSG_EOR
 
MSG_EOR


	)

194 
	mMSG_WAITALL
 = 0x100,

195 
	#MSG_WAITALL
 
MSG_WAITALL


	)

196 
	mMSG_FIN
 = 0x200,

197 
	#MSG_FIN
 
MSG_FIN


	)

198 
	mMSG_SYN
 = 0x400,

199 
	#MSG_SYN
 
MSG_SYN


	)

200 
	mMSG_CONFIRM
 = 0x800,

201 
	#MSG_CONFIRM
 
MSG_CONFIRM


	)

202 
	mMSG_RST
 = 0x1000,

203 
	#MSG_RST
 
MSG_RST


	)

204 
	mMSG_ERRQUEUE
 = 0x2000,

205 
	#MSG_ERRQUEUE
 
MSG_ERRQUEUE


	)

206 
	mMSG_NOSIGNAL
 = 0x4000,

207 
	#MSG_NOSIGNAL
 
MSG_NOSIGNAL


	)

208 
	mMSG_MORE
 = 0x8000

209 
	#MSG_MORE
 
MSG_MORE


	)

215 
	smsghdr


217 *
	mmsg_«me
;

218 
sockÀn_t
 
	mmsg_«mñí
;

220 
iovec
 *
	mmsg_iov
;

221 
size_t
 
	mmsg_iovÀn
;

223 *
	mmsg_c⁄åﬁ
;

224 
size_t
 
	mmsg_c⁄åﬁÀn
;

226 
	mmsg_Êags
;

230 
	scmsghdr


232 
size_t
 
	mcmsg_Àn
;

234 
	mcmsg_Àvñ
;

235 
	mcmsg_ty≥
;

236 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

237 
__exãnsi⁄__
 
__cmsg_d©a
 
	m__Êex¨r
;

242 #i‡(!
deföed
 
__STRICT_ANSI__
 && 
__GNUC__
 >2Ë|| 
__STDC_VERSION__
 >= 199901L

243 
	#CMSG_DATA
(
cmsg
Ë((cmsg)->
__cmsg_d©a
)

	)

245 
	#CMSG_DATA
(
cmsg
Ë((*Ë((
cmsghdr
 *Ë(cmsgË+ 1))

	)

247 
	#CMSG_NXTHDR
(
mhdr
, 
cmsg
Ë
	`__cmsg_nxthdr
 (mhdr, cmsg)

	)

248 
	#CMSG_FIRSTHDR
(
mhdr
) \

249 ((
size_t
Ë(
mhdr
)->
msg_c⁄åﬁÀn
 > (
cmsghdr
) \

250 ? (
cmsghdr
 *Ë(
mhdr
)->
msg_c⁄åﬁ
 : (cmsghd∏*Ë
NULL
)

	)

251 
	#CMSG_ALIGN
(
Àn
Ë((÷íË+  (
size_t
) - 1) \

252 & (
size_t
Ë~( (size_tË- 1))

	)

253 
	#CMSG_SPACE
(
Àn
Ë(
	`CMSG_ALIGN
 (len) \

254 + 
	`CMSG_ALIGN
 ( (
cmsghdr
)))

	)

255 
	#CMSG_LEN
(
Àn
Ë(
	`CMSG_ALIGN
 ( (
cmsghdr
)Ë+ (Àn))

	)

257 
cmsghdr
 *
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
,

258 
cmsghdr
 *
__cmsg
Ë
__THROW
;

259 #ifde‡
__USE_EXTERN_INLINES


260 #i‚de‡
_EXTERN_INLINE


261 
	#_EXTERN_INLINE
 
__ölöe


	)

263 
_EXTERN_INLINE
 
cmsghdr
 *

264 
	`__NTH
 (
	$__cmsg_nxthdr
 (
msghdr
 *
__mhdr
, 
cmsghdr
 *
__cmsg
))

266 i‡((
size_t
Ë
__cmsg
->
cmsg_Àn
 <  (
cmsghdr
))

270 
__cmsg
 = (
cmsghdr
 *) ((*) __cmsg

271 + 
	`CMSG_ALIGN
 (
__cmsg
->
cmsg_Àn
));

272 i‡((*Ë(
__cmsg
 + 1Ë> ((*Ë
__mhdr
->
msg_c⁄åﬁ


273 + 
__mhdr
->
msg_c⁄åﬁÀn
)

274 || ((*Ë
__cmsg
 + 
	`CMSG_ALIGN
 (__cmsg->
cmsg_Àn
)

275 > ((*Ë
__mhdr
->
msg_c⁄åﬁ
 + __mhdr->
msg_c⁄åﬁÀn
)))

278  
__cmsg
;

279 
	}
}

286 
SCM_RIGHTS
 = 0x01

287 
	#SCM_RIGHTS
 
SCM_RIGHTS


	)

288 #ifde‡
__USE_BSD


289 , 
SCM_CREDENTIALS
 = 0x02

290 
	#SCM_CREDENTIALS
 
SCM_CREDENTIALS


	)

296 
	su¸ed


298 
pid_t
 
	mpid
;

299 
uid_t
 
	muid
;

300 
gid_t
 
	mgid
;

304 
	~<asm/sockë.h
>

308 
	slögî


310 
	ml_⁄off
;

311 
	ml_lögî
;

	@/usr/include/bits/stat.h

19 #i‚de‡
_SYS_STAT_H


24 
	#_STAT_VER_LINUX_OLD
 1

	)

25 
	#_STAT_VER_KERNEL
 1

	)

26 
	#_STAT_VER_SVR4
 2

	)

27 
	#_STAT_VER_LINUX
 3

	)

28 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

31 
	#_MKNOD_VER_LINUX
 1

	)

32 
	#_MKNOD_VER_SVR4
 2

	)

33 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

36 
	s°©


38 
__dev_t
 
	m°_dev
;

39 
	m__∑d1
;

40 #i‚de‡
__USE_FILE_OFFSET64


41 
__öo_t
 
	m°_öo
;

43 
__öo_t
 
	m__°_öo
;

45 
__mode_t
 
	m°_mode
;

46 
__∆ök_t
 
	m°_∆ök
;

47 
__uid_t
 
	m°_uid
;

48 
__gid_t
 
	m°_gid
;

49 
__dev_t
 
	m°_rdev
;

50 
	m__∑d2
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	m°_size
;

54 
__off64_t
 
	m°_size
;

56 
__blksize_t
 
	m°_blksize
;

58 #i‚de‡
__USE_FILE_OFFSET64


59 
__blk˙t_t
 
	m°_blocks
;

61 
__blk˙t64_t
 
	m°_blocks
;

63 #ifde‡
__USE_MISC


70 
time•ec
 
	m°_©im
;

71 
time•ec
 
	m°_mtim
;

72 
time•ec
 
	m°_˘im
;

73 
	#°_©ime
 
°_©im
.
tv_£c


	)

74 
	#°_mtime
 
°_mtim
.
tv_£c


	)

75 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

77 
__time_t
 
	m°_©ime
;

78 
	m°_©imí£c
;

79 
__time_t
 
	m°_mtime
;

80 
	m°_mtimí£c
;

81 
__time_t
 
	m°_˘ime
;

82 
	m°_˘imí£c
;

84 #i‚de‡
__USE_FILE_OFFSET64


85 
	m__unu£d4
;

86 
	m__unu£d5
;

88 
__öo64_t
 
	m°_öo
;

92 #ifde‡
__USE_LARGEFILE64


93 
	s°©64


95 
__dev_t
 
	m°_dev
;

96 
	m__∑d1
;

98 
__öo_t
 
	m__°_öo
;

99 
__mode_t
 
	m°_mode
;

100 
__∆ök_t
 
	m°_∆ök
;

101 
__uid_t
 
	m°_uid
;

102 
__gid_t
 
	m°_gid
;

103 
__dev_t
 
	m°_rdev
;

104 
	m__∑d2
;

105 
__off64_t
 
	m°_size
;

106 
__blksize_t
 
	m°_blksize
;

108 
__blk˙t64_t
 
	m°_blocks
;

109 #ifde‡
__USE_MISC


116 
time•ec
 
	m°_©im
;

117 
time•ec
 
	m°_mtim
;

118 
time•ec
 
	m°_˘im
;

120 
__time_t
 
	m°_©ime
;

121 
	m°_©imí£c
;

122 
__time_t
 
	m°_mtime
;

123 
	m°_mtimí£c
;

124 
__time_t
 
	m°_˘ime
;

125 
	m°_˘imí£c
;

127 
__öo64_t
 
	m°_öo
;

132 
	#_STATBUF_ST_BLKSIZE


	)

133 
	#_STATBUF_ST_RDEV


	)

135 
	#_STATBUF_ST_NSEC


	)

139 
	#__S_IFMT
 0170000

	)

142 
	#__S_IFDIR
 0040000

	)

143 
	#__S_IFCHR
 0020000

	)

144 
	#__S_IFBLK
 0060000

	)

145 
	#__S_IFREG
 0100000

	)

146 
	#__S_IFIFO
 0010000

	)

147 
	#__S_IFLNK
 0120000

	)

148 
	#__S_IFSOCK
 0140000

	)

152 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

153 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

154 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

158 
	#__S_ISUID
 04000

	)

159 
	#__S_ISGID
 02000

	)

160 
	#__S_ISVTX
 01000

	)

161 
	#__S_IREAD
 0400

	)

162 
	#__S_IWRITE
 0200

	)

163 
	#__S_IEXEC
 0100

	)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #ifde‡
__˝lu•lus


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


33 
__STDIO_INLINE
 

34 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

36  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

37 
	}
}

40 
__STDIO_INLINE
 

41 
	$gëch¨
 ()

43  
	`_IO_gëc
 (
°dö
);

44 
	}
}

47 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


49 
__STDIO_INLINE
 

50 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

52  
	`_IO_gëc_u∆ocked
 (
__Â
);

53 
	}
}

56 
__STDIO_INLINE
 

57 
	$gëch¨_u∆ocked
 ()

59  
	`_IO_gëc_u∆ocked
 (
°dö
);

60 
	}
}

65 
__STDIO_INLINE
 

66 
	$putch¨
 (
__c
)

68  
	`_IO_putc
 (
__c
, 
°dout
);

69 
	}
}

72 #ifde‡
__USE_MISC


74 
__STDIO_INLINE
 

75 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

77  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

78 
	}
}

82 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


84 
__STDIO_INLINE
 

85 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

87  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

88 
	}
}

91 
__STDIO_INLINE
 

92 
	$putch¨_u∆ocked
 (
__c
)

94  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

95 
	}
}

99 #ifdef 
__USE_GNU


101 
__STDIO_INLINE
 
_IO_ssize_t


102 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

104  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

105 
	}
}

109 #ifde‡
__USE_MISC


111 
__STDIO_INLINE
 

112 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

114  
	`_IO_„of_u∆ocked
 (
__°ªam
);

115 
	}
}

118 
__STDIO_INLINE
 

119 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

121  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

122 
	}
}

128 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__


130 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

131 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

132 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

133 && (
size_t
Ë(
size
) != 0) \

134 ? ({ *
__±r
 = (*Ë(
±r
); \

135 
FILE
 *
__°ªam
 = (
°ªam
); \

136 
size_t
 
__˙t
; \

137 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

138 
__˙t
 > 0; --__cnt) \

140 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

141 i‡(
__c
 =
EOF
) \

143 *
__±r
++ = 
__c
; \

145 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

146 / (
size_t
Ë(
size
); }) \

147 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

148 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

150 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

151 (Ë(
n
), (
size_t
) 0) \

152 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

154 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

155 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

156 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

157 && (
size_t
Ë(
size
) != 0) \

158 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

159 
FILE
 *
__°ªam
 = (
°ªam
); \

160 
size_t
 
__˙t
; \

161 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

162 
__˙t
 > 0; --__cnt) \

163 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

165 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

166 / (
size_t
Ë(
size
); }) \

167 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

168 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

170 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

171 (Ë(
n
), (
size_t
) 0) \

172 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

176 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 
	#•rötf
(
°r
, ...) \

31 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

32 
__VA_ARGS__
)

	)

33 
	#v•rötf
(
°r
, 
fmt
, 
≠
) \

34 
	`__buûtö___v•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (°r), 
fmt
, 
≠
)

	)

36 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


38 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

39 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

40 ...Ë
__THROW
;

41 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

42 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

43 
_G_va_li°
 
__≠
Ë
__THROW
;

45 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

46 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

47 
__VA_ARGS__
)

	)

48 
	#v¢¥ötf
(
°r
, 
Àn
, 
fmt
, 
≠
) \

49 
	`__buûtö___v¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

50 
fmt
, 
≠
)

	)

54 #i‡
__USE_FORTIFY_LEVEL
 > 1

56 
	`__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

57 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

58 
	`__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

59 
	`__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

60 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

61 
	`__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

62 
_G_va_li°
 
__≠
);

64 
	#¥ötf
(...) \

65 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

66 
	#Ârötf
(
°ªam
, ...) \

67 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

68 
	#v¥ötf
(
f‹m©
, 
≠
) \

69 
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

70 
	#vÂrötf
(
°ªam
, 
f‹m©
, 
≠
) \

71 
	`__vÂrötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
f‹m©
, 
≠
)

	)

75 *
	`__gës_chk
 (*
__°r
, 
size_t
);

76 
	#gës
(
__°r
) \

77 ((
	`__bos
 (
__°r
Ë=(
size_t
) -1) \

78 ? (
gës
Ë(
__°r
Ë: 
	`__gës_chk
 (__°r, 
	`__bos
 (__°r)))

	)

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 
	#L_cu£rid
 9

	)

34 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


35 #unde‡
FOPEN_MAX


36 
	#FOPEN_MAX
 16

	)

39 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


40 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/string.h

21 #i‚de‡
_STRING_H


26 
	#_STRING_ARCH_u«lig√d
 1

	)

31 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

32 && 
deföed
 
	g__GNUC__
 && __GNUC__ >2 && !
__BOUNDED_POINTERS__


34 #i‚de‡
__STRING_INLINE


35 #ifde‡
__˝lu•lus


36 
	#__STRING_INLINE
 
ölöe


	)

38 
	#__STRING_INLINE
 
__ölöe


	)

43 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

44 ((((
__c⁄°
 *Ë(
§c
))[
idx
 + 1] << 8) \

45 | ((
__c⁄°
 *Ë(
§c
))[
idx
])

	)

46 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

47 (((((
__c⁄°
 *Ë(
§c
))[
idx
 + 3] << 8 \

48 | ((
__c⁄°
 *Ë(
§c
))[
idx
 + 2]) << 8 \

49 | ((
__c⁄°
 *Ë(
§c
))[
idx
 + 1]) << 8 \

50 | ((
__c⁄°
 *Ë(
§c
))[
idx
])

	)

54 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

55 
	#mem˝y
(
de°
, 
§c
, 
n
) \

56 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

57 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

58 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

59 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

60 ((
n
) == 0 \

61 ? (
de°
) \

62 : (((
n
) % 4 == 0) \

63 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

64 : (((
n
) % 2 == 0) \

65 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

66 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

68 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
,

69 
size_t
 
__n
);

71 
__STRING_INLINE
 *

72 
	$__mem˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

74 
__d0
, 
__d1
;

75 *
__tmp
 = 
__de°
;

76 
__asm__
 
__vﬁ©ûe__


84 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

85 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

87  
__de°
;

88 
	}
}

90 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
,

91 
size_t
 
__n
);

93 
__STRING_INLINE
 *

94 
	$__mem˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

96 
__d0
, 
__d1
;

97 *
__tmp
 = 
__de°
;

98 
__asm__
 
__vﬁ©ûe__


111 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

112 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

114  
__de°
;

115 
	}
}

117 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
,

118 
size_t
 
__n
);

120 
__STRING_INLINE
 *

121 
	$__mem˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

123 
__d0
, 
__d1
, 
__d2
;

124 *
__tmp
 = 
__de°
;

125 
__asm__
 
__vﬁ©ûe__


136 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

137 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

138 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

139 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

141  
__de°
;

142 
	}
}

144 
	#_HAVE_STRING_ARCH_memmove
 1

	)

145 #i‚de‡
_FORCE_INLINES


148 
__STRING_INLINE
 *

149 
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

151 
__d0
, 
__d1
, 
__d2
;

152 *
__tmp
 = 
__de°
;

153 i‡(
__de°
 < 
__§c
)

154 
__asm__
 
__vﬁ©ûe__


157 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

158 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

159 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

160 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

162 
__asm__
 
__vﬁ©ûe__


166 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

167 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

168 : "0" (
__n
), "1" (__¿- 1 + (
__c⁄°
 *Ë
__§c
),

169 "2" (
__n
 - 1 + (*Ë
__tmp
),

170 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

171  
__de°
;

172 
	}
}

176 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

177 #i‚de‡
_FORCE_INLINES


178 #i‚de‡
__PIC__


180 
__STRING_INLINE
 

181 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

183 
__d0
, 
__d1
, 
__d2
;

184 
__ªs
;

185 
__asm__
 
__vﬁ©ûe__


193 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

194 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

195 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

196 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

198  
__ªs
;

199 
	}
}

204 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

205 
	#_USE_STRING_ARCH_mem£t
 1

	)

206 
	#mem£t
(
s
, 
c
, 
n
) \

207 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

208 ? ((
n
) == 1 \

209 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

210 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

211 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

212 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

213 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

214 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

215 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

216 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

217 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

219 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

220 *((*Ë
__s
Ë(Ë(
c
); \

221 
__s
; })

	)

223 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

224 ({ *
__s
 = (
s
); \

226 
__ui
; \

227 
__usi
; \

228 
__uc
; \

229 } *
__u
 = 
__s
; \

230 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

236 i‡((
n
) == 3 || (n) >= 5) \

237 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

240 
n
) \

243 
__u
->
__ui
 = 
__c
; \

244 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

246 
__u
->
__ui
 = 
__c
; \

247 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

249 
__u
->
__ui
 = 
__c
; \

250 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

252 
__u
->
__usi
 = (Ë
__c
; \

253 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

254 
__u
->
__uc
 = (Ë
__c
; \

258 
__u
->
__ui
 = 
__c
; \

259 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

261 
__u
->
__ui
 = 
__c
; \

262 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__usi
 = (Ë
__c
; \

271 
__u
->
__ui
 = 
__c
; \

272 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

274 
__u
->
__ui
 = 
__c
; \

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

277 
__u
->
__ui
 = 
__c
; \

278 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

280 
__u
->
__uc
 = (Ë
__c
; \

284 
__u
->
__ui
 = 
__c
; \

285 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

287 
__u
->
__ui
 = 
__c
; \

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

290 
__u
->
__ui
 = 
__c
; \

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

293 
__u
->
__ui
 = 
__c
; \

298 
__s
; })

	)

300 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

301 (((
n
) % 4 == 0) \

302 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

303 
n
) \

304 : (((
n
) % 2 == 0) \

305 ? 
	`__mem£t_c˙_by2
 (
s
, \

306 ((Ë((Ë(
c
))) * 0x01010101,\

307 
n
) \

308 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

310 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

311 
size_t
 
__n
);

313 
__STRING_INLINE
 *

314 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

316 *
__tmp
 = 
__s
;

317 
__d0
;

318 #ifde‡
__i686__


319 
__asm__
 
__vﬁ©ûe__


322 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

323 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

324 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

327 
__asm__
 
__vﬁ©ûe__


333 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338  
__s
;

339 
	}
}

341 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

342 
size_t
 
__n
);

344 
__STRING_INLINE
 *

345 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

347 
__d0
, 
__d1
;

348 *
__tmp
 = 
__s
;

349 #ifde‡
__i686__


350 
__asm__
 
__vﬁ©ûe__


354 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359 
__asm__
 
__vﬁ©ûe__


365 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370  
__s
;

371 
	}
}

373 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

374 (((
n
) % 4 == 0) \

375 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

376 : (((
n
) % 2 == 0) \

377 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

378 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

380 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

382 
__STRING_INLINE
 *

383 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

385 *
__tmp
 = 
__s
;

386 
__d0
;

387 
__asm__
 
__vﬁ©ûe__


397 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

398 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

399 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

401  
__s
;

402 
	}
}

404 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

406 
__STRING_INLINE
 *

407 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

409 
__d0
, 
__d1
;

410 *
__tmp
 = 
__s
;

411 
__asm__
 
__vﬁ©ûe__


422 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

423 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

424 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

426  
__s
;

427 
	}
}

431 
	#_HAVE_STRING_ARCH_memchr
 1

	)

432 #i‚de‡
_FORCE_INLINES


433 
__STRING_INLINE
 *

434 
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

436 
__d0
;

437 #ifde‡
__i686__


438 
__d1
;

440 *
__ªs
;

441 i‡(
__n
 == 0)

442  
NULL
;

443 #ifde‡
__i686__


444 
__asm__
 
__vﬁ©ûe__


448 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

449 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

450 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

453 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464  
__ªs
 - 1;

465 
	}
}

468 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

469 #i‚de‡
_FORCE_INLINES


470 
__STRING_INLINE
 *
__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
);

472 
__STRING_INLINE
 *

473 
	$__memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

475 
__d0
;

476 #ifde‡
__i686__


477 
__d1
;

479 *
__ªs
;

480 i‡(
__n
 == 0)

481  
NULL
;

482 #ifde‡
__i686__


483 
__asm__
 
__vﬁ©ûe__


489 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

490 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

491 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

494 
__asm__
 
__vﬁ©ûe__


501 : "=D" (
__ªs
), "=&c" (
__d0
)

502 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

503 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

506  
__ªs
;

507 
	}
}

508 #ifde‡
__USE_GNU


509 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

514 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

515 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

517 #i‚de‡
_FORCE_INLINES


518 
__STRING_INLINE
 *

519 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

521 
__d0
;

522 *
__ªs
;

523 
__asm__
 
__vﬁ©ûe__


526 : "=D" (
__ªs
), "=&c" (
__d0
)

527 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

528 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

530  
__ªs
 - 1;

531 
	}
}

532 #ifde‡
__USE_GNU


533 
__STRING_INLINE
 *

534 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

536  
	`__øwmemchr
 (
__s
, 
__c
);

537 
	}
}

543 
	#_HAVE_STRING_ARCH_°æí
 1

	)

544 
	#°æí
(
°r
) \

545 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

546 ? 
	`__buûtö_°æí
 (
°r
) \

547 : 
	`__°æí_g
 (
°r
)))

	)

548 
__STRING_INLINE
 
size_t
 
__°æí_g
 (
__c⁄°
 *
__°r
);

550 
__STRING_INLINE
 
size_t


551 
	$__°æí_g
 (
__c⁄°
 *
__°r
)

553 
__dummy
;

554 
__c⁄°
 *
__tmp
 = 
__°r
;

555 
__asm__
 
__vﬁ©ûe__


561 : "Ù" (
__tmp
), "=&q" (
__dummy
)

562 : "0" (
__°r
),

563 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

565  
__tmp
 - 
__°r
 - 1;

566 
	}
}

570 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

571 
	#°r˝y
(
de°
, 
§c
) \

572 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

573 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

574 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

575 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

576 (
__c⁄°
 *Ë(
§c
), \

577 
	`°æí
 (
§c
) + 1)) \

578 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

580 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

581 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

583 
__ui
; \

584 
__usi
; \

585 
__uc
; \

586 
__c
; \

587 } *
__u
 = (*Ë
__de°
; \

588 
§˛í
) \

591 
__u
->
__uc
 = '\0'; \

594 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

597 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

598 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

599 
__u
->
__uc
 = '\0'; \

602 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

605 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

606 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

607 
__u
->
__uc
 = '\0'; \

610 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

611 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

612 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

615 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

617 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

618 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

619 
__u
->
__uc
 = '\0'; \

622 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

623 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

624 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

627 (*Ë
__de°
; }))

	)

629 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

631 
__STRING_INLINE
 *

632 
	$__°r˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

634 *
__tmp
 = 
__de°
;

635 
__dummy
;

636 
__asm__
 
__vﬁ©ûe__


645 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

646 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

647 : "0" (
__§c
), "1" (
__tmp
),

648 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

650  
__de°
;

651 
	}
}

654 #ifde‡
__USE_GNU


655 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

657 
	#__°p˝y
(
de°
, 
§c
) \

658 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

659 ? (
	`°æí
 (
§c
) + 1 <= 8 \

660 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

661 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

662 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

663 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

664 ((
§˛í
) % 4 == 0 \

665 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

666 : ((
§˛í
) % 2 == 0 \

667 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

668 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

671 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

673 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

674 (
	`__exãnsi⁄__
 ({ union { \

675 
__ui
; \

676 
__usi
; \

677 
__uc
; \

678 
__c
; \

679 } *
__u
 = (*Ë(
de°
); \

680 
§˛í
) \

683 
__u
->
__uc
 = '\0'; \

686 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

687 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

690 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

691 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

692 
__u
->
__uc
 = '\0'; \

695 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

696 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

699 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

700 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

701 
__u
->
__uc
 = '\0'; \

704 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

705 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

706 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

713 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

714 
__u
->
__uc
 = '\0'; \

717 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

719 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

720 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

723 (*Ë
__u
; }))

	)

725 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
,

726 
size_t
 
__§˛í
);

728 
__STRING_INLINE
 *

729 
	$__memp˝y_by4
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

731 *
__tmp
 = 
__de°
;

732 
__d0
, 
__d1
;

733 
__asm__
 
__vﬁ©ûe__


741 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

742 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

744  
__tmp
;

745 
	}
}

747 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
,

748 
size_t
 
__§˛í
);

750 
__STRING_INLINE
 *

751 
	$__memp˝y_by2
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

753 *
__tmp
 = 
__de°
;

754 
__d0
, 
__d1
;

755 
__asm__
 
__vﬁ©ûe__


768 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

769 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

770 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

771 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

773  
__tmp
 + 2;

774 
	}
}

776 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, 
__c⁄°
 *
__§c
,

777 
size_t
 
__§˛í
);

779 
__STRING_INLINE
 *

780 
	$__memp˝y_byn
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__§˛í
)

782 
__d0
, 
__d1
;

783 *
__tmp
 = 
__de°
;

784 
__asm__
 
__vﬁ©ûe__


795 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

796 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

797 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

798 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

800  
__tmp
;

801 
	}
}

803 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

805 
__STRING_INLINE
 *

806 
	$__°p˝y_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

808 *
__tmp
 = 
__de°
;

809 
__dummy
;

810 
__asm__
 
__vﬁ©ûe__


819 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

820 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

821 : "0" (
__§c
), "1" (
__tmp
),

822 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

824  
__tmp
 - 1;

825 
	}
}

830 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

831 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

832 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

833 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

834 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

835 (
__c⁄°
 *Ë(
§c
), 
n
) \

836 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

837 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

838 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

839 (((
§˛í
) % 4 == 0) \

840 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

841 : (((
§˛í
) % 2 == 0) \

842 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

843 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

845 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, 
__c⁄°
 
__§c
[],

846 
size_t
 
__§˛í
, size_à
__n
);

848 
__STRING_INLINE
 *

849 
	$__°∫˝y_by4
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

851 *
__tmp
 = 
__de°
;

852 
__dummy1
, 
__dummy2
;

853 
__asm__
 
__vﬁ©ûe__


861 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

862 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

863 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

864 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

866 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

867  
__de°
;

868 
	}
}

870 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, 
__c⁄°
 
__§c
[],

871 
size_t
 
__§˛í
, size_à
__n
);

873 
__STRING_INLINE
 *

874 
	$__°∫˝y_by2
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

876 *
__tmp
 = 
__de°
;

877 
__dummy1
, 
__dummy2
;

878 
__asm__
 
__vﬁ©ûe__


891 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

892 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

893 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

894 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

896 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

897  
__de°
;

898 
	}
}

900 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, 
__c⁄°
 
__§c
[],

901 
size_t
 
__§˛í
, size_à
__n
);

903 
__STRING_INLINE
 *

904 
	$__°∫˝y_byn
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

906 
__d0
, 
__d1
;

907 *
__tmp
 = 
__de°
;

908 
__asm__
 
__vﬁ©ûe__


919 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

920 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

921 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

922 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

924 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

925  
__de°
;

926 
	}
}

928 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, 
__c⁄°
 *
__§c
,

929 
size_t
 
__n
);

931 
__STRING_INLINE
 *

932 
	$__°∫˝y_gg
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

934 *
__tmp
 = 
__de°
;

935 
__dummy
;

936 i‡(
__n
 > 0)

937 
__asm__
 
__vﬁ©ûe__


953 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

954 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

957  
__de°
;

958 
	}
}

962 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

963 
	#°rˇt
(
de°
, 
§c
) \

964 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

965 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

966 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

968 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, 
__c⁄°
 
__§c
[],

969 
size_t
 
__§˛í
);

971 
__STRING_INLINE
 *

972 
	$__°rˇt_c
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__§˛í
)

974 #ifde‡
__i686__


975 
__d0
;

976 *
__tmp
;

977 
__asm__
 
__vﬁ©ûe__


979 : "=D" (
__tmp
), "=&c" (
__d0
),

980 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

981 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

982 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

984 --
__tmp
;

986 *
__tmp
 = 
__de°
 - 1;

987 
__asm__
 
__vﬁ©ûe__


992 : "Ù" (
__tmp
),

993 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

994 : "0" (
__tmp
),

995 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

998 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

999  
__de°
;

1000 
	}
}

1002 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, 
__c⁄°
 *
__§c
);

1004 
__STRING_INLINE
 *

1005 
	$__°rˇt_g
 (*
__de°
, 
__c⁄°
 *
__§c
)

1007 *
__tmp
 = 
__de°
 - 1;

1008 
__dummy
;

1009 
__asm__
 
__vﬁ©ûe__


1021 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1022 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1023 : "1" (
__tmp
), "2" (
__§c
),

1024 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1026  
__de°
;

1027 
	}
}

1031 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1032 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1033 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1034 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1035 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1036 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1037 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1038 (
__c⁄°
 *Ë(
§c
), \

1039 (
n
)Ë0, 
__de°
)) \

1040 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1042 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, 
__c⁄°
 
__§c
[],

1043 
size_t
 
__n
);

1045 
__STRING_INLINE
 *

1046 
	$__°∫ˇt_g
 (*
__de°
, 
__c⁄°
 
__§c
[], 
size_t
 
__n
)

1048 *
__tmp
 = 
__de°
;

1049 
__dummy
;

1050 #ifde‡
__i686__


1051 
__asm__
 
__vﬁ©ûe__


1065 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1066 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1069 --
__tmp
;

1070 
__asm__
 
__vﬁ©ûe__


1087 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1088 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1091  
__de°
;

1092 
	}
}

1096 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1097 
	#°rcmp
(
s1
, 
s2
) \

1098 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1099 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1100 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1101 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

1102 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1103 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1104 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1105 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1106 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1107 ? 
	`__°rcmp_cc
 ((
__c⁄°
 *Ë(
s1
), \

1108 (
__c⁄°
 *Ë(
s2
), \

1109 
	`°æí
 (
s1
)) \

1110 : 
	`__°rcmp_cg
 ((
__c⁄°
 *Ë(
s1
), \

1111 (
__c⁄°
 *Ë(
s2
), \

1112 
	`°æí
 (
s1
))) \

1113 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1114 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1115 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1116 ? 
	`__°rcmp_cc
 ((
__c⁄°
 *Ë(
s1
), \

1117 (
__c⁄°
 *Ë(
s2
), \

1118 
	`°æí
 (
s2
)) \

1119 : 
	`__°rcmp_gc
 ((
__c⁄°
 *Ë(
s1
), \

1120 (
__c⁄°
 *Ë(
s2
), \

1121 
	`°æí
 (
s2
))) \

1122 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1124 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1125 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1126 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1128 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1129 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1131 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1132 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1133 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1136 
__ªsu…
; }))

	)

1138 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1139 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = (
s2
); \

1140 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1141 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1143 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1144 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1146 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1147 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1148 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1151 
__ªsu…
; }))

	)

1153 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1154 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = (
s1
); \

1155 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1156 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1158 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1159 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1161 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1162 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1163 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1166 
__ªsu…
; }))

	)

1168 
__STRING_INLINE
 
__°rcmp_gg
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
);

1170 
__STRING_INLINE
 

1171 
	$__°rcmp_gg
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

1173 
__ªs
;

1174 
__asm__
 
__vﬁ©ûe__


1190 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1191 : "1" (
__s1
), "2" (
__s2
),

1192 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1193 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1195  
__ªs
;

1196 
	}
}

1200 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1201 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1202 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1203 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1204 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1205 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1206 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1208 
__STRING_INLINE
 
__°∫cmp_g
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

1209 
size_t
 
__n
);

1211 
__STRING_INLINE
 

1212 
	$__°∫cmp_g
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

1214 
__ªs
;

1215 
__asm__
 
__vﬁ©ûe__


1234 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1235 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1236 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1237 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1239  
__ªs
;

1240 
	}
}

1244 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1245 
	#_USE_STRING_ARCH_°rchr
 1

	)

1246 
	#°rchr
(
s
, 
c
) \

1247 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1248 ? ((
c
) == '\0' \

1249 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1250 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1251 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1253 
__STRING_INLINE
 *
__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1255 
__STRING_INLINE
 *

1256 
	$__°rchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1258 
__d0
;

1259 *
__ªs
;

1260 
__asm__
 
__vﬁ©ûe__


1270 : "Ù" (
__ªs
), "=&a" (
__d0
)

1271 : "0" (
__s
), "1" (
__c
),

1272 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1274  
__ªs
;

1275 
	}
}

1277 
__STRING_INLINE
 *
__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1279 
__STRING_INLINE
 *

1280 
	$__°rchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1282 
__d0
;

1283 *
__ªs
;

1284 
__asm__
 
__vﬁ©ûe__


1295 : "Ù" (
__ªs
), "=&a" (
__d0
)

1296 : "0" (
__s
), "1" (
__c
),

1297 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1299  
__ªs
;

1300 
	}
}

1304 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1305 
	#__°rch∫ul
(
s
, 
c
) \

1306 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1307 ? ((
c
) == '\0' \

1308 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1309 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1310 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1312 
__STRING_INLINE
 *
__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
);

1314 
__STRING_INLINE
 *

1315 
	$__°rch∫ul_c
 (
__c⁄°
 *
__s
, 
__c
)

1317 
__d0
;

1318 *
__ªs
;

1319 
__asm__
 
__vﬁ©ûe__


1329 : "Ù" (
__ªs
), "=&a" (
__d0
)

1330 : "0" (
__s
), "1" (
__c
),

1331 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1333  
__ªs
;

1334 
	}
}

1336 
__STRING_INLINE
 *
__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
);

1338 
__STRING_INLINE
 *

1339 
	$__°rch∫ul_g
 (
__c⁄°
 *
__s
, 
__c
)

1341 
__d0
;

1342 *
__ªs
;

1343 
__asm__
 
__vﬁ©ûe__


1354 : "Ù" (
__ªs
), "=&a" (
__d0
)

1355 : "0" (
__s
), "1" (
__c
),

1356 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1358  
__ªs
;

1359 
	}
}

1360 #ifde‡
__USE_GNU


1361 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1365 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1367 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1368 
	#ödex
(
s
, 
c
) \

1369 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1370 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1371 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1376 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1377 
	#°ºchr
(
s
, 
c
) \

1378 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1379 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1380 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1382 #ifde‡
__i686__


1383 
__STRING_INLINE
 *
__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1385 
__STRING_INLINE
 *

1386 
	$__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1388 
__d0
, 
__d1
;

1389 *
__ªs
;

1390 
__asm__
 
__vﬁ©ûe__


1398 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1399 : "0" (1), "1" (
__s
), "2" (
__c
),

1400 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1402  
__ªs
 - 1;

1403 
	}
}

1405 
__STRING_INLINE
 *
__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1407 
__STRING_INLINE
 *

1408 
	$__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1410 
__d0
, 
__d1
;

1411 *
__ªs
;

1412 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_c
 (
__c⁄°
 *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1445 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1446 : "0" (0), "1" (
__s
), "2" (
__c
),

1447 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1449  
__ªs
;

1450 
	}
}

1452 
__STRING_INLINE
 *
__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
);

1454 
__STRING_INLINE
 *

1455 
	$__°ºchr_g
 (
__c⁄°
 *
__s
, 
__c
)

1457 
__d0
, 
__d1
;

1458 *
__ªs
;

1459 
__asm__
 
__vﬁ©ûe__


1470 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1471 : "0" (0), "1" (
__s
), "2" (
__c
),

1472 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1474  
__ªs
;

1475 
	}
}

1479 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1481 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1482 
	#rödex
(
s
, 
c
) \

1483 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1484 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1485 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1491 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1492 
	#°rc•n
(
s
, 
ªje˘
) \

1493 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1494 ? ((
ªje˘
)[0] == '\0' \

1495 ? 
	`°æí
 (
s
) \

1496 : ((
ªje˘
)[1] == '\0' \

1497 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1498 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1499 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1501 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

1503 #i‚de‡
_FORCE_INLINES


1504 
__STRING_INLINE
 
size_t


1505 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

1507 
__d0
;

1508 *
__ªs
;

1509 
__asm__
 
__vﬁ©ûe__


1518 : "Ù" (
__ªs
), "=&a" (
__d0
)

1519 : "0" (
__s
), "1" (
__ªje˘
),

1520 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1522  (
__ªs
 - 1Ë- 
__s
;

1523 
	}
}

1526 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ªje˘
[],

1527 
size_t
 
__ªje˘_Àn
);

1529 
__STRING_INLINE
 
size_t


1530 
	$__°rc•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1532 
__d0
, 
__d1
, 
__d2
;

1533 
__c⁄°
 *
__ªs
;

1534 
__asm__
 
__vﬁ©ûe__


1545 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1546 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1548  (
__ªs
 - 1Ë- 
__s
;

1549 
	}
}

1551 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
);

1552 #ifde‡
__PIC__


1554 
__STRING_INLINE
 
size_t


1555 
	$__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

1557 
__d0
, 
__d1
, 
__d2
;

1558 
__c⁄°
 *
__ªs
;

1559 
__asm__
 
__vﬁ©ûe__


1576 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1577 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1579  (
__ªs
 - 1Ë- 
__s
;

1580 
	}
}

1582 
__STRING_INLINE
 
size_t


1583 
	$__°rc•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

1585 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1586 
__c⁄°
 *
__ªs
;

1587 
__asm__
 
__vﬁ©ûe__


1601 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1602 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1605  (
__ªs
 - 1Ë- 
__s
;

1606 
	}
}

1612 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1613 
	#°r•n
(
s
, 
ac˚±
) \

1614 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1615 ? ((
ac˚±
)[0] == '\0' \

1616 ? ((Ë(
s
), 0) \

1617 : ((
ac˚±
)[1] == '\0' \

1618 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1619 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1620 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1622 #i‚de‡
_FORCE_INLINES


1623 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1625 
__STRING_INLINE
 
size_t


1626 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1628 
__d0
;

1629 *
__ªs
;

1631 
__asm__
 
__vﬁ©ûe__


1637 : "Ù" (
__ªs
), "=&q" (
__d0
)

1638 : "0" (
__s
), "1" (
__ac˚±
),

1639 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1641  (
__ªs
 - 1Ë- 
__s
;

1642 
	}
}

1645 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[],

1646 
size_t
 
__ac˚±_Àn
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1651 
__d0
, 
__d1
, 
__d2
;

1652 
__c⁄°
 *
__ªs
;

1653 
__asm__
 
__vﬁ©ûe__


1664 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1665 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1668 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1669 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1671  (
__ªs
 - 1Ë- 
__s
;

1672 
	}
}

1674 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
);

1675 #ifde‡
__PIC__


1677 
__STRING_INLINE
 
size_t


1678 
	$__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1680 
__d0
, 
__d1
, 
__d2
;

1681 
__c⁄°
 *
__ªs
;

1682 
__asm__
 
__vﬁ©ûe__


1698 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1699 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1701  (
__ªs
 - 1Ë- 
__s
;

1702 
	}
}

1704 
__STRING_INLINE
 
size_t


1705 
	$__°r•n_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1707 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1708 
__c⁄°
 *
__ªs
;

1709 
__asm__
 
__vﬁ©ûe__


1723 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1724 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1726  (
__ªs
 - 1Ë- 
__s
;

1727 
	}
}

1732 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1733 
	#°Ωbrk
(
s
, 
ac˚±
) \

1734 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1735 ? ((
ac˚±
)[0] == '\0' \

1736 ? ((Ë(
s
), (*) 0) \

1737 : ((
ac˚±
)[1] == '\0' \

1738 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1739 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1740 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1742 
__STRING_INLINE
 *
__°Ωbrk_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[],

1743 
size_t
 
__ac˚±_Àn
);

1745 
__STRING_INLINE
 *

1746 
	$__°Ωbrk_cg
 (
__c⁄°
 *
__s
, __c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1748 
__d0
, 
__d1
, 
__d2
;

1749 *
__ªs
;

1750 
__asm__
 
__vﬁ©ûe__


1765 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1766 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1768  
__ªs
;

1769 
	}
}

1771 
__STRING_INLINE
 *
__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
);

1772 #ifde‡
__PIC__


1774 
__STRING_INLINE
 *

1775 
	$__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1777 
__d0
, 
__d1
, 
__d2
;

1778 *
__ªs
;

1779 
__asm__
 
__vﬁ©ûe__


1800 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1801 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1803  
__ªs
;

1804 
	}
}

1806 
__STRING_INLINE
 *

1807 
	$__°Ωbrk_g
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

1809 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1810 *
__ªs
;

1811 
__asm__
 
__vﬁ©ûe__


1830 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1831 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1833  
__ªs
;

1834 
	}
}

1839 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1840 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1841 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1842 ? ((
√edÀ
)[0] == '\0' \

1843 ? (
hay°ack
) \

1844 : ((
√edÀ
)[1] == '\0' \

1845 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1846 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1847 
	`°æí
 (
√edÀ
)))) \

1848 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1852 
__STRING_INLINE
 *
__°r°r_cg
 (
__c⁄°
 *
__hay°ack
, __c⁄° 
__√edÀ
[],

1853 
size_t
 
__√edÀ_Àn
);

1855 
__STRING_INLINE
 *

1856 
	$__°r°r_cg
 (
__c⁄°
 *
__hay°ack
, __c⁄° 
__√edÀ
[],

1857 
size_t
 
__√edÀ_Àn
)

1859 
__d0
, 
__d1
, 
__d2
;

1860 *
__ªs
;

1861 
__asm__
 
__vﬁ©ûe__


1874 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1875 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1877  
__ªs
;

1878 
	}
}

1880 
__STRING_INLINE
 *
__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
);

1881 #ifde‡
__PIC__


1883 
__STRING_INLINE
 *

1884 
	$__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

1886 
__d0
, 
__d1
, 
__d2
;

1887 *
__ªs
;

1888 
__asm__
 
__vﬁ©ûe__


1907 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1908 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1909 "d" (
__√edÀ
)

1911  
__ªs
;

1912 
	}
}

1914 
__STRING_INLINE
 *

1915 
	$__°r°r_g
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

1917 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1918 *
__ªs
;

1919 
__asm__
 
__vﬁ©ûe__


1936 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1937 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1938 "b" (
__√edÀ
)

1940  
__ªs
;

1941 
	}
}

1947 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1948 #ifde‡
__i686__


1949 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1950 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1951 ? 
	`__buûtö_ffs
 (
w‹d
) \

1952 : ({ 
__˙t
, 
__tmp
; \

1953 
__asm__
 
__vﬁ©ûe__
 \

1956 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1957 : "rm" (
w‹d
), "1" (-1)); \

1958 
__˙t
 + 1; }))

	)

1960 #i‚de‡
ff¶


1961 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1966 #i‚de‡
_FORCE_INLINES


1967 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

21 #i‚de‡
_STRING_H


25 #i‡!
deföed
 
__NO_STRING_INLINES
 && !deföed 
__BOUNDED_POINTERS__


42 #i‚de‡
__STRING_INLINE


43 #ifde‡
__˝lu•lus


44 
	#__STRING_INLINE
 
ölöe


	)

46 
	#__STRING_INLINE
 
__ölöe


	)

50 #i‡
_STRING_ARCH_u«lig√d


52 
	~<ídün.h
>

53 
	~<bôs/ty≥s.h
>

55 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


56 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

57 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

58 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

59 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

60 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

61 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

62 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

63 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
])

	)

65 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

66 (((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

67 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1])

	)

68 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

69 (((((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
] << 8 \

70 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

71 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

72 | ((
__c⁄°
 *Ë(__c⁄° *Ë(
§c
))[
idx
 + 3])

	)

77 
	#__STRING2_COPY_TYPE
(
N
) \

78 °ru˘ { 
__¨r
[
N
]; } \

79 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

80 
	t__STRING2_COPY_TYPE
 (2);

81 
__STRING2_COPY_TYPE
 (3);

82 
__STRING2_COPY_TYPE
 (4);

83 
__STRING2_COPY_TYPE
 (5);

84 
__STRING2_COPY_TYPE
 (6);

85 
__STRING2_COPY_TYPE
 (7);

86 
__STRING2_COPY_TYPE
 (8);

87 #unde‡
__STRING2_COPY_TYPE


93 
	#__°rög2_1b±r_p
(
__x
) \

94 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

97 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


98 #i‡!
__GNUC_PREREQ
 (3, 0)

99 #i‡
_STRING_ARCH_u«lig√d


100 
	#mem£t
(
s
, 
c
, 
n
) \

101 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

102 ? ((
n
) == 1 \

103 ? 
	`__mem£t_1
 (
s
, 
c
) \

104 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

105 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

106 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

107 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

109 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

110 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

112 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

113 ({ *
__s
 = (
s
); \

115 
__ui
; \

116 
__usi
; \

117 
__uc
; \

118 } *
__u
 = 
__s
; \

119 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

122 (Ë(
n
)) \

125 
__u
->
__ui
 = 
__c
 * 0x01010101; \

126 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

128 
__u
->
__ui
 = 
__c
 * 0x01010101; \

129 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

131 
__u
->
__ui
 = 
__c
 * 0x01010101; \

132 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

134 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

135 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

136 
__u
->
__uc
 = (Ë
__c
; \

140 
__u
->
__ui
 = 
__c
 * 0x01010101; \

141 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

143 
__u
->
__ui
 = 
__c
 * 0x01010101; \

144 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

146 
__u
->
__ui
 = 
__c
 * 0x01010101; \

147 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

149 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

153 
__u
->
__ui
 = 
__c
 * 0x01010101; \

154 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

156 
__u
->
__ui
 = 
__c
 * 0x01010101; \

157 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

159 
__u
->
__ui
 = 
__c
 * 0x01010101; \

160 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

162 
__u
->
__uc
 = (Ë
__c
; \

166 
__u
->
__ui
 = 
__c
 * 0x01010101; \

167 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

169 
__u
->
__ui
 = 
__c
 * 0x01010101; \

170 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

172 
__u
->
__ui
 = 
__c
 * 0x01010101; \

173 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

175 
__u
->
__ui
 = 
__c
 * 0x01010101; \

180 
__s
; })

	)

182 
	#mem£t
(
s
, 
c
, 
n
) \

183 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

184 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

185 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

194 #i‡
__GNUC_PREREQ
 (2, 91)

195 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

203 #ifde‡
__USE_GNU


204 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


205 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


206 #i‡
__GNUC_PREREQ
 (3, 4)

207 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

208 #ñi‡
__GNUC_PREREQ
 (3, 0)

209 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

210 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

211 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

212 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

213 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

215 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

216 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

217 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

218 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

219 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

223 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

226 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


227 #i‡
_STRING_ARCH_u«lig√d


228 #i‚de‡
_FORCE_INLINES


229 
	#__memp˝y_¨gs
(
§c
) \

230 ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[2], \

231 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[6], \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

235 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

237 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

238 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

239 
__uöt32_t
, 
size_t
);

240 
__STRING_INLINE
 *

241 
	$__memp˝y_smÆl
 (*
__de°1
,

242 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

243 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

244 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

245 
size_t
 
__§˛í
)

248 
__uöt32_t
 
__ui
;

249 
__uöt16_t
 
__usi
;

250 
__uc
;

251 
__c
;

252 } *
__u
 = 
__de°1
;

253 (Ë
__§˛í
)

256 
__u
->
__c
 = 
__§c0_1
;

257 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

260 
__u
->
__usi
 = 
__§c0_2
;

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

264 
__u
->
__usi
 = 
__§c0_2
;

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

266 
__u
->
__c
 = 
__§c2_1
;

267 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

270 
__u
->
__ui
 = 
__§c0_4
;

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

274 
__u
->
__ui
 = 
__§c0_4
;

275 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

276 
__u
->
__c
 = 
__§c4_1
;

277 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

280 
__u
->
__ui
 = 
__§c0_4
;

281 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

282 
__u
->
__usi
 = 
__§c4_2
;

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

286 
__u
->
__ui
 = 
__§c0_4
;

287 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

288 
__u
->
__usi
 = 
__§c4_2
;

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

290 
__u
->
__c
 = 
__§c6_1
;

291 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

294 
__u
->
__ui
 = 
__§c0_4
;

295 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

296 
__u
->
__ui
 = 
__§c4_4
;

297 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

300  (*Ë
__u
;

301 
	}
}

303 #i‚de‡
_FORCE_INLINES


304 
	#__memp˝y_¨gs
(
§c
) \

305 ((
__c⁄°
 *Ë(
§c
))[0], \

306 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

307 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1] } }), \

308 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

309 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

310 ((
__c⁄°
 *Ë(
§c
))[2] } }), \

311 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

312 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

313 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3] } }), \

314 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

315 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

316 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

317 ((
__c⁄°
 *Ë(
§c
))[4] } }), \

318 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

319 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

320 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

321 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5] } }), \

322 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

323 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

324 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

325 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

326 ((
__c⁄°
 *Ë(
§c
))[6] } }), \

327 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

328 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

329 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

330 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

331 ((
__c⁄°
 *Ë(
§c
))[6], ((__c⁄° *Ë(§c))[7] } })

	)

333 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

334 
__STRING2_COPY_ARR3
,

335 
__STRING2_COPY_ARR4
,

336 
__STRING2_COPY_ARR5
,

337 
__STRING2_COPY_ARR6
,

338 
__STRING2_COPY_ARR7
,

339 
__STRING2_COPY_ARR8
, 
size_t
);

340 
__STRING_INLINE
 *

341 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

342 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

343 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

344 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

345 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

348 
__c
;

349 
__STRING2_COPY_ARR2
 
__sˇ2
;

350 
__STRING2_COPY_ARR3
 
__sˇ3
;

351 
__STRING2_COPY_ARR4
 
__sˇ4
;

352 
__STRING2_COPY_ARR5
 
__sˇ5
;

353 
__STRING2_COPY_ARR6
 
__sˇ6
;

354 
__STRING2_COPY_ARR7
 
__sˇ7
;

355 
__STRING2_COPY_ARR8
 
__sˇ8
;

356 } *
__u
 = 
__de°
;

357 (Ë
__§˛í
)

360 
__u
->
__c
 = 
__§c1
;

363 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

366 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

369 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

372 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

375 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

378 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

381 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

384  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

385 
	}
}

393 #i‚de‡
_HAVE_STRING_ARCH_°rchr


394 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

395 #i‡
__GNUC_PREREQ
 (3, 2)

396 
	#°rchr
(
s
, 
c
) \

397 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

398 && (
c
) == '\0' \

399 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

400 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

402 
	#°rchr
(
s
, 
c
) \

403 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

404 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

405 : 
	`°rchr
 (
s
, 
c
)))

	)

411 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

412 || 
deföed
 
	g_FORCE_INLINES


413 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

414 
	#°r˝y
(
de°
, 
§c
) \

415 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

416 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

417 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

418 
	`°æí
 (
§c
) + 1) \

419 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

420 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

423 #i‡
_STRING_ARCH_u«lig√d


424 #i‚de‡
_FORCE_INLINES


425 
	#__°r˝y_¨gs
(
§c
) \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

429 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

431 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

432 
__uöt32_t
, __uöt32_t, 
size_t
);

433 
__STRING_INLINE
 *

434 
	$__°r˝y_smÆl
 (*
__de°
,

435 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

436 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

437 
size_t
 
__§˛í
)

440 
__uöt32_t
 
__ui
;

441 
__uöt16_t
 
__usi
;

442 
__uc
;

443 } *
__u
 = (*Ë
__de°
;

444 (Ë
__§˛í
)

447 
__u
->
__uc
 = '\0';

450 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
->
__usi
 = 
__§c0_2
;

454 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

455 
__u
->
__uc
 = '\0';

458 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
->
__ui
 = 
__§c0_4
;

462 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

463 
__u
->
__uc
 = '\0';

466 
__u
->
__ui
 = 
__§c0_4
;

467 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

468 
__u
->
__usi
 = 
__§c4_2
;

471 
__u
->
__ui
 = 
__§c0_4
;

472 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

473 
__u
->
__usi
 = 
__§c4_2
;

474 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

475 
__u
->
__uc
 = '\0';

478 
__u
->
__ui
 = 
__§c0_4
;

479 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

480 
__u
->
__ui
 = 
__§c4_4
;

483  
__de°
;

484 
	}
}

486 #i‚de‡
_FORCE_INLINES


487 
	#__°r˝y_¨gs
(
§c
) \

488 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

489 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

490 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

491 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

493 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

494 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

495 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

496 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

497 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

498 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

500 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

501 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

502 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

503 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

504 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

505 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

506 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

507 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

509 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

510 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

511 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

512 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

513 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

515 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

516 
__STRING2_COPY_ARR3
,

517 
__STRING2_COPY_ARR4
,

518 
__STRING2_COPY_ARR5
,

519 
__STRING2_COPY_ARR6
,

520 
__STRING2_COPY_ARR7
,

521 
__STRING2_COPY_ARR8
, 
size_t
);

522 
__STRING_INLINE
 *

523 
	$__°r˝y_smÆl
 (*
__de°
,

524 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

525 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

526 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

527 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

530 
__c
;

531 
__STRING2_COPY_ARR2
 
__sˇ2
;

532 
__STRING2_COPY_ARR3
 
__sˇ3
;

533 
__STRING2_COPY_ARR4
 
__sˇ4
;

534 
__STRING2_COPY_ARR5
 
__sˇ5
;

535 
__STRING2_COPY_ARR6
 
__sˇ6
;

536 
__STRING2_COPY_ARR7
 
__sˇ7
;

537 
__STRING2_COPY_ARR8
 
__sˇ8
;

538 } *
__u
 = (*Ë
__de°
;

539 (Ë
__§˛í
)

542 
__u
->
__c
 = '\0';

545 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

548 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

551 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

554 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

557 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

560 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

563 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

566  
__de°
;

567 
	}
}

573 #ifde‡
__USE_GNU


574 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


575 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


576 #i‡
__GNUC_PREREQ
 (3, 4)

577 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

578 #ñi‡
__GNUC_PREREQ
 (3, 0)

579 
	#__°p˝y
(
de°
, 
§c
) \

580 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

581 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

582 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

583 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

585 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

587 
	#__°p˝y
(
de°
, 
§c
) \

588 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

589 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

590 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

591 
	`°æí
 (
§c
) + 1) \

592 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

594 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

598 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

601 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


602 #i‡
_STRING_ARCH_u«lig√d


603 #i‚de‡
_FORCE_INLINES


604 
	#__°p˝y_¨gs
(
§c
) \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

608 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

610 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

611 
__uöt32_t
, __uöt32_t, 
size_t
);

612 
__STRING_INLINE
 *

613 
	$__°p˝y_smÆl
 (*
__de°
,

614 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

615 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

616 
size_t
 
__§˛í
)

619 
__ui
;

620 
__usi
;

621 
__uc
;

622 
__c
;

623 } *
__u
 = (*Ë
__de°
;

624 (Ë
__§˛í
)

627 
__u
->
__uc
 = '\0';

630 
__u
->
__usi
 = 
__§c0_2
;

631 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

634 
__u
->
__usi
 = 
__§c0_2
;

635 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

636 
__u
->
__uc
 = '\0';

639 
__u
->
__ui
 = 
__§c0_4
;

640 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

643 
__u
->
__ui
 = 
__§c0_4
;

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

645 
__u
->
__uc
 = '\0';

648 
__u
->
__ui
 = 
__§c0_4
;

649 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

650 
__u
->
__usi
 = 
__§c4_2
;

651 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

654 
__u
->
__ui
 = 
__§c0_4
;

655 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

656 
__u
->
__usi
 = 
__§c4_2
;

657 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

658 
__u
->
__uc
 = '\0';

661 
__u
->
__ui
 = 
__§c0_4
;

662 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

663 
__u
->
__ui
 = 
__§c4_4
;

664 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

667  &
__u
->
__c
;

668 
	}
}

670 #i‚de‡
_FORCE_INLINES


671 
	#__°p˝y_¨gs
(
§c
) \

672 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

673 { { ((
__c⁄°
 *Ë(
§c
))[0], '\0' } }), \

674 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

675 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

677 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

678 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

679 ((
__c⁄°
 *Ë(
§c
))[2], '\0' } }), \

680 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

681 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

682 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

684 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

685 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

686 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

687 ((
__c⁄°
 *Ë(
§c
))[4], '\0' } }), \

688 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

689 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

690 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

691 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

693 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

694 { { ((
__c⁄°
 *Ë(
§c
))[0], ((__const *) (src))[1], \

695 ((
__c⁄°
 *Ë(
§c
))[2], ((__const *) (src))[3], \

696 ((
__c⁄°
 *Ë(
§c
))[4], ((__const *) (src))[5], \

697 ((
__c⁄°
 *Ë(
§c
))[6], '\0' } })

	)

699 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

700 
__STRING2_COPY_ARR3
,

701 
__STRING2_COPY_ARR4
,

702 
__STRING2_COPY_ARR5
,

703 
__STRING2_COPY_ARR6
,

704 
__STRING2_COPY_ARR7
,

705 
__STRING2_COPY_ARR8
, 
size_t
);

706 
__STRING_INLINE
 *

707 
	$__°p˝y_smÆl
 (*
__de°
,

708 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

709 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

710 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

711 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

714 
__c
;

715 
__STRING2_COPY_ARR2
 
__sˇ2
;

716 
__STRING2_COPY_ARR3
 
__sˇ3
;

717 
__STRING2_COPY_ARR4
 
__sˇ4
;

718 
__STRING2_COPY_ARR5
 
__sˇ5
;

719 
__STRING2_COPY_ARR6
 
__sˇ6
;

720 
__STRING2_COPY_ARR7
 
__sˇ7
;

721 
__STRING2_COPY_ARR8
 
__sˇ8
;

722 } *
__u
 = (*Ë
__de°
;

723 (Ë
__§˛í
)

726 
__u
->
__c
 = '\0';

729 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

732 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

735 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

738 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

741 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

744 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

747 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

750  
__de°
 + 
__§˛í
 - 1;

751 
	}
}

759 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


760 #i‡
__GNUC_PREREQ
 (3, 2)

761 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

763 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

764 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

765 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

766 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

768 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

774 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


775 #ifde‡
_USE_STRING_ARCH_°rchr


776 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

777 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

778 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

779 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

780 ? 
	`°rˇt
 (
__de°
, 
§c
) \

781 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

782 
§c
, 
n
)Ë'\0', 
__de°
)) \

783 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

784 #ñi‡
__GNUC_PREREQ
 (3, 2)

785 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

787 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

788 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

789 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

790 ? 
	`°rˇt
 (
de°
, 
§c
) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

792 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

798 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


799 #i‡
__GNUC_PREREQ
 (3, 2)

800 
	#°rcmp
(
s1
, 
s2
) \

801 
__exãnsi⁄__
 \

802 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

803 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

804 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

805 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

806 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

807 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

808 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

809 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

810 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

811 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

812 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

813 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

814 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

815 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

816 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

817 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

818 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

820 
	#°rcmp
(
s1
, 
s2
) \

821 
__exãnsi⁄__
 \

822 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

823 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

824 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

825 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

826 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

827 ? 
	`memcmp
 ((
__c⁄°
 *Ë(
s1
), (__c⁄° *Ë(
s2
), \

828 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

829 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

830 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

831 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

832 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

833 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

834 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

835 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

836 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

837 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

838 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

839 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

842 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

843 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

844 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

845 - ((
__c⁄°
 *Ë(__c⁄° *)(
s2
))[0]);\

846 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

848 
__ªsu…
 = (((
__c⁄°
 *) \

849 (
__c⁄°
 *Ë(
s1
))[1] \

850 - ((
__c⁄°
 *) \

851 (
__c⁄°
 *Ë(
s2
))[1]); \

852 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

854 
__ªsu…
 = \

855 (((
__c⁄°
 *) \

856 (
__c⁄°
 *Ë(
s1
))[2] \

857 - ((
__c⁄°
 *) \

858 (
__c⁄°
 *Ë(
s2
))[2]); \

859 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

860 
__ªsu…
 = \

861 (((
__c⁄°
 *) \

862 (
__c⁄°
 *Ë(
s1
))[3] \

863 - ((
__c⁄°
 *) \

864 (
__c⁄°
 *Ë(
s2
))[3]); \

867 
__ªsu…
; }))

	)

869 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

870 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s2
 = \

871 (
__c⁄°
 *Ë(__c⁄° *Ë(
s2
); \

872 
__ªsu…
 = \

873 (((
__c⁄°
 *Ë(__c⁄° *Ë(
s1
))[0] \

874 - 
__s2
[0]); \

875 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

877 
__ªsu…
 = (((
__c⁄°
 *) \

878 (
__c⁄°
 *Ë(
s1
))[1] - 
__s2
[1]); \

879 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

881 
__ªsu…
 = (((
__c⁄°
 *) \

882 (
__c⁄°
 *Ë(
s1
))[2] - 
__s2
[2]);\

883 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

884 
__ªsu…
 = (((
__c⁄°
 *) \

885 (
__c⁄°
 *Ë(
s1
))[3] \

886 - 
__s2
[3]); \

889 
__ªsu…
; }))

	)

891 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

892 (
	`__exãnsi⁄__
 ({ 
__c⁄°
 *
__s1
 = \

893 (
__c⁄°
 *Ë(__c⁄° *Ë(
s1
); \

894 
__ªsu…
 = \

895 
__s1
[0] - ((
__c⁄°
 *) \

896 (
__c⁄°
 *Ë(
s2
))[0]; \

897 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

899 
__ªsu…
 = (
__s1
[1] \

900 - ((
__c⁄°
 *) \

901 (
__c⁄°
 *Ë(
s2
))[1]); \

902 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

904 
__ªsu…
 = \

905 (
__s1
[2] - ((
__c⁄°
 *) \

906 (
__c⁄°
 *Ë(
s2
))[2]); \

907 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

908 
__ªsu…
 = \

909 (
__s1
[3] \

910 - ((
__c⁄°
 *) \

911 (
__c⁄°
 *Ë(
s2
))[3]); \

914 
__ªsu…
; }))

	)

919 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


920 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

921 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

922 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

923 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

924 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

925 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

926 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

932 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


933 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


934 #i‡
__GNUC_PREREQ
 (3, 2)

935 
	#°rc•n
(
s
, 
ªje˘
) \

936 
__exãnsi⁄__
 \

937 ({ 
__r0
, 
__r1
, 
__r2
; \

938 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

939 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

940 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

941 : ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

942 ? 
	`°æí
 (
s
) \

943 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

944 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

945 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

946 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

947 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

948 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

949 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

950 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

952 
	#°rc•n
(
s
, 
ªje˘
) \

953 
__exãnsi⁄__
 \

954 ({ 
__r0
, 
__r1
, 
__r2
; \

955 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

956 ? ((
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], __r0 == '\0') \

957 ? 
	`°æí
 (
s
) \

958 : ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], __r1 == '\0') \

959 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

960 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

961 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

962 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

963 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

964 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

965 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

969 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
);

970 
__STRING_INLINE
 
size_t


971 
	$__°rc•n_c1
 (
__c⁄°
 *
__s
, 
__ªje˘
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

975 ++
__ªsu…
;

976  
__ªsu…
;

977 
	}
}

979 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

980 
__ªje˘2
);

981 
__STRING_INLINE
 
size_t


982 
	$__°rc•n_c2
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
)

984 
size_t
 
__ªsu…
 = 0;

985 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


986 && 
__s
[
__ªsu…
] !
__ªje˘2
)

987 ++
__ªsu…
;

988  
__ªsu…
;

989 
	}
}

991 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
,

992 
__ªje˘2
, 
__ªje˘3
);

993 
__STRING_INLINE
 
size_t


994 
	$__°rc•n_c3
 (
__c⁄°
 *
__s
, 
__ªje˘1
, 
__ªje˘2
,

995 
__ªje˘3
)

997 
size_t
 
__ªsu…
 = 0;

998 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


999 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

1000 ++
__ªsu…
;

1001  
__ªsu…
;

1002 
	}
}

1008 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


1009 #i‚de‡
_HAVE_STRING_ARCH_°r•n


1010 #i‡
__GNUC_PREREQ
 (3, 2)

1011 
	#°r•n
(
s
, 
ac˚±
) \

1012 
__exãnsi⁄__
 \

1013 ({ 
__a0
, 
__a1
, 
__a2
; \

1014 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1015 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1016 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

1017 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1018 ? ((Ë(
s
), 0) \

1019 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1020 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1021 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1022 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1023 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1024 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1025 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1026 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1028 
	#°r•n
(
s
, 
ac˚±
) \

1029 
__exãnsi⁄__
 \

1030 ({ 
__a0
, 
__a1
, 
__a2
; \

1031 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1032 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1033 ? ((Ë(
s
), 0) \

1034 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1035 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1036 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1037 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1038 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1039 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1040 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1041 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1045 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c1
 (
__c⁄°
 *
__s
, 
__ac˚±
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±
)

1052 ++
__ªsu…
;

1053  
__ªsu…
;

1054 
	}
}

1056 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1057 
__ac˚±2
);

1058 
__STRING_INLINE
 
size_t


1059 
	$__°r•n_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1061 
size_t
 
__ªsu…
 = 0;

1063 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1064 ++
__ªsu…
;

1065  
__ªsu…
;

1066 
	}
}

1068 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1069 
__ac˚±2
, 
__ac˚±3
);

1070 
__STRING_INLINE
 
size_t


1071 
	$__°r•n_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1073 
size_t
 
__ªsu…
 = 0;

1075 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1076 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1077 ++
__ªsu…
;

1078  
__ªsu…
;

1079 
	}
}

1084 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1085 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1086 #i‡
__GNUC_PREREQ
 (3, 2)

1087 
	#°Ωbrk
(
s
, 
ac˚±
) \

1088 
__exãnsi⁄__
 \

1089 ({ 
__a0
, 
__a1
, 
__a2
; \

1090 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1091 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1092 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1093 : ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1094 ? ((Ë(
s
), (*Ë
NULL
) \

1095 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1096 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1097 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1098 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1099 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1100 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1101 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1102 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1104 
	#°Ωbrk
(
s
, 
ac˚±
) \

1105 
__exãnsi⁄__
 \

1106 ({ 
__a0
, 
__a1
, 
__a2
; \

1107 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1108 ? ((
__a0
 = ((
__c⁄°
 *Ë(
ac˚±
))[0], __a0 == '\0') \

1109 ? ((Ë(
s
), (*Ë
NULL
) \

1110 : ((
__a1
 = ((
__c⁄°
 *Ë(
ac˚±
))[1], __a1 == '\0') \

1111 ? 
	`°rchr
 (
s
, 
__a0
) \

1112 : ((
__a2
 = ((
__c⁄°
 *Ë(
ac˚±
))[2], __a2 == '\0') \

1113 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1114 : (((
__c⁄°
 *Ë(
ac˚±
))[3] == '\0' \

1115 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1116 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1117 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1121 
__STRING_INLINE
 *
__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1122 
__ac˚±2
);

1123 
__STRING_INLINE
 *

1124 
	$__°Ωbrk_c2
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1127 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1128 ++
__s
;

1129  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1130 
	}
}

1132 
__STRING_INLINE
 *
__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
,

1133 
__ac˚±2
, 
__ac˚±3
);

1134 
__STRING_INLINE
 *

1135 
	$__°Ωbrk_c3
 (
__c⁄°
 *
__s
, 
__ac˚±1
, 
__ac˚±2
,

1136 
__ac˚±3
)

1139 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1140 && *
__s
 !
__ac˚±3
)

1141 ++
__s
;

1142  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1143 
	}
}

1149 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1150 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1151 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1152 ? (((
__c⁄°
 *Ë(
√edÀ
))[0] == '\0' \

1153 ? (*Ë(
size_t
Ë(
hay°ack
) \

1154 : (((
__c⁄°
 *Ë(
√edÀ
))[1] == '\0' \

1155 ? 
	`°rchr
 (
hay°ack
, \

1156 ((
__c⁄°
 *Ë(
√edÀ
))[0]) \

1157 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1158 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1162 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1163 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1164 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1165 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1166 ? (((
__c⁄°
 *Ë(
£p
))[0] != '\0' \

1167 && ((
__c⁄°
 *Ë(
£p
))[1] == '\0' \

1168 ? 
	`__°πok_r_1c
 (
s
, ((
__c⁄°
 *Ë(
£p
))[0], 
√xç
) \

1169 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)) \

1170 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1173 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1174 
__STRING_INLINE
 *

1175 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1177 *
__ªsu…
;

1178 i‡(
__s
 =
NULL
)

1179 
__s
 = *
__√xç
;

1180 *
__s
 =
__£p
)

1181 ++
__s
;

1182 
__ªsu…
 = 
NULL
;

1183 i‡(*
__s
 != '\0')

1185 
__ªsu…
 = 
__s
++;

1186 *
__s
 != '\0')

1187 i‡(*
__s
++ =
__£p
)

1189 
__s
[-1] = '\0';

1192 *
__√xç
 = 
__s
;

1194  
__ªsu…
;

1195 
	}
}

1196 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1197 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1202 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1203 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1205 *
__°r£p_g
 (**
__°rögp
, 
__c⁄°
 *
__dñim
);

1206 
	#__°r£p
(
s
, 
ªje˘
) \

1207 
__exãnsi⁄__
 \

1208 ({ 
__r0
, 
__r1
, 
__r2
; \

1209 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1210 && (
__r0
 = ((
__c⁄°
 *Ë(
ªje˘
))[0], \

1211 ((
__c⁄°
 *Ë(
ªje˘
))[0] != '\0') \

1212 ? ((
__r1
 = ((
__c⁄°
 *Ë(
ªje˘
))[1], \

1213 ((
__c⁄°
 *Ë(
ªje˘
))[1] == '\0') \

1214 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1215 : ((
__r2
 = ((
__c⁄°
 *Ë(
ªje˘
))[2], __r2 == '\0') \

1216 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1217 : (((
__c⁄°
 *Ë(
ªje˘
))[3] == '\0' \

1218 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1219 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1220 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1223 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1224 
__STRING_INLINE
 *

1225 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1227 *
__ªtvÆ
 = *
__s
;

1228 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1229 *(*
__s
)++ = '\0';

1230  
__ªtvÆ
;

1231 
	}
}

1233 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1234 
__STRING_INLINE
 *

1235 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1237 *
__ªtvÆ
 = *
__s
;

1238 i‡(
__ªtvÆ
 !
NULL
)

1240 *
__˝
 = 
__ªtvÆ
;

1243 i‡(*
__˝
 == '\0')

1245 
__˝
 = 
NULL
;

1248 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1250 *
__˝
++ = '\0';

1253 ++
__˝
;

1255 *
__s
 = 
__˝
;

1257  
__ªtvÆ
;

1258 
	}
}

1260 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1261 
__ªje˘3
);

1262 
__STRING_INLINE
 *

1263 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1265 *
__ªtvÆ
 = *
__s
;

1266 i‡(
__ªtvÆ
 !
NULL
)

1268 *
__˝
 = 
__ªtvÆ
;

1271 i‡(*
__˝
 == '\0')

1273 
__˝
 = 
NULL
;

1276 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1278 *
__˝
++ = '\0';

1281 ++
__˝
;

1283 *
__s
 = 
__˝
;

1285  
__ªtvÆ
;

1286 
	}
}

1287 #ifde‡
__USE_BSD


1288 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1295 #ifde‡
__USE_MISC


1297 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1298 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1299 
	~<°dlib.h
>

1302 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1304 *
	$__°rdup
 (
__c⁄°
 *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1305 
	#__°rdup
(
s
) \

1306 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1307 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1308 ? (*Ë
	`ˇŒoc
 (1, 1) \

1309 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1310 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1311 i‡(
__ªtvÆ
 !
NULL
) \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1313 
__ªtvÆ
; 
	}
})) \

1314 : 
	`__°rdup
 (
s
)))

	)

1316 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1317 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1321 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1323 *
	$__°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

1324 
__THROW
 
__©åibuã_mÆloc__
;

1325 
	#__°∫dup
(
s
, 
n
) \

1326 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1327 ? (((
__c⁄°
 *Ë(
s
))[0] == '\0' \

1328 ? (*Ë
	`ˇŒoc
 (1, 1) \

1329 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1330 
size_t
 
__n
 = (
n
); \

1331 *
__ªtvÆ
; \

1332 i‡(
__n
 < 
__Àn
) \

1333 
__Àn
 = 
__n
 + 1; \

1334 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1335 i‡(
__ªtvÆ
 !
NULL
) \

1337 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1338 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1339 
__Àn
 - 1); \

1341 
__ªtvÆ
; 
	}
})) \

1342 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1344 #ifde‡
__USE_GNU


1345 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1351 #i‚de‡
_FORCE_INLINES


1352 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

19 #i‚de‡
_STRING_H


26 #unde‡
mem˝y


27 #unde‡
memmove


28 #unde‡
mem£t


29 #unde‡
°rˇt


30 #unde‡
°r˝y


31 #unde‡
°∫ˇt


32 #unde‡
°∫˝y


33 #ifde‡
__USE_GNU


34 #unde‡
memp˝y


35 #unde‡
°p˝y


37 #ifde‡
__USE_BSD


38 #unde‡
bc›y


39 #unde‡
bzîo


43 
	#mem˝y
(
de°
, 
§c
, 
Àn
) \

44 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

45 ? 
	`__buûtö___mem˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

46 : 
	`__mem˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

47 
__ölöe__
 *

48 
__©åibuã__
 ((
__Æways_ölöe__
))

49 
	$__mem˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

50 
size_t
 
__Àn
)

52  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

53 
	}
}

56 
	#memmove
(
de°
, 
§c
, 
Àn
) \

57 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

58 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

59 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
))

	)

60 
__ölöe__
 *

61 
__©åibuã__
 ((
__Æways_ölöe__
))

62 
	$__memmove_ichk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
)

64  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

65 
	}
}

68 #ifde‡
__USE_GNU


69 
	#memp˝y
(
de°
, 
§c
, 
Àn
) \

70 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

71 ? 
	`__buûtö___memp˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

72 : 
	`__memp˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

73 
__ölöe__
 *

74 
__©åibuã__
 ((
__Æways_ölöe__
))

75 
	$__memp˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

76 
size_t
 
__Àn
)

78  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

79 
	}
}

83 
	#mem£t
(
de°
, 
ch
, 
Àn
) \

84 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

85 ? 
	`__buûtö___mem£t_chk
 (
de°
, 
ch
, 
Àn
, 
	`__bos0
 (dest)) \

86 : 
	`__mem£t_ichk
 (
de°
, 
ch
, 
Àn
))

	)

87 
__ölöe__
 *

88 
__©åibuã__
 ((
__Æways_ölöe__
))

89 
	$__mem£t_ichk
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
)

91  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 #ifde‡
__USE_BSD


95 
	#bc›y
(
§c
, 
de°
, 
Àn
) (() \

96 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

97 ? 
	`__buûtö___memmove_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos0
 (dest)) \

98 : 
	`__memmove_ichk
 (
de°
, 
§c
, 
Àn
)))

	)

99 
	#bzîo
(
de°
, 
Àn
) (() \

100 ((
	`__bos0
 (
de°
Ë!(
size_t
) -1) \

101 ? 
	`__buûtö___mem£t_chk
 (
de°
, '\0', 
Àn
, 
	`__bos0
 (dest)) \

102 : 
	`__mem£t_ichk
 (
de°
, '\0', 
Àn
)))

	)

106 
	#°r˝y
(
de°
, 
§c
) \

107 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

108 ? 
	`__buûtö___°r˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

109 : 
	`__°r˝y_ichk
 (
de°
, 
§c
))

	)

110 
__ölöe__
 *

111 
__©åibuã__
 ((
__Æways_ölöe__
))

112 
	$__°r˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

114  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

115 
	}
}

118 #ifde‡
__USE_GNU


119 
	#°p˝y
(
de°
, 
§c
) \

120 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

121 ? 
	`__buûtö___°p˝y_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

122 : 
	`__°p˝y_ichk
 (
de°
, 
§c
))

	)

123 
__ölöe__
 *

124 
__©åibuã__
 ((
__Æways_ölöe__
))

125 
	$__°p˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

127  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

128 
	}
}

132 
	#°∫˝y
(
de°
, 
§c
, 
Àn
) \

133 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

134 ? 
	`__buûtö___°∫˝y_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

135 : 
	`__°∫˝y_ichk
 (
de°
, 
§c
, 
Àn
))

	)

136 
__ölöe__
 *

137 
__©åibuã__
 ((
__Æways_ölöe__
))

138 
	$__°∫˝y_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

139 
size_t
 
__Àn
)

141  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

142 
	}
}

145 
	#°rˇt
(
de°
, 
§c
) \

146 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

147 ? 
	`__buûtö___°rˇt_chk
 (
de°
, 
§c
, 
	`__bos
 (dest)) \

148 : 
	`__°rˇt_ichk
 (
de°
, 
§c
))

	)

149 
__ölöe__
 *

150 
__©åibuã__
 ((
__Æways_ölöe__
))

151 
	$__°rˇt_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

153  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

154 
	}
}

157 
	#°∫ˇt
(
de°
, 
§c
, 
Àn
) \

158 ((
	`__bos
 (
de°
Ë!(
size_t
) -1) \

159 ? 
	`__buûtö___°∫ˇt_chk
 (
de°
, 
§c
, 
Àn
, 
	`__bos
 (dest)) \

160 : 
	`__°∫ˇt_ichk
 (
de°
, 
§c
, 
Àn
))

	)

161 
__ölöe__
 *

162 
__©åibuã__
 ((
__Æways_ölöe__
))

163 
	$__°∫ˇt_ichk
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

164 
size_t
 
__Àn
)

166  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

167 
	}
}

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/syscall.h

3 #i‚de‡
_SYSCALL_H


7 
	#SYS__Œ£ek
 
__NR__Œ£ek


	)

8 
	#SYS__√w£À˘
 
__NR__√w£À˘


	)

9 
	#SYS__sys˘l
 
__NR__sys˘l


	)

10 
	#SYS_ac˚ss
 
__NR_ac˚ss


	)

11 
	#SYS_ac˘
 
__NR_ac˘


	)

12 
	#SYS_add_key
 
__NR_add_key


	)

13 
	#SYS_adjtimex
 
__NR_adjtimex


	)

14 
	#SYS_afs_sysˇŒ
 
__NR_afs_sysˇŒ


	)

15 
	#SYS_Æ¨m
 
__NR_Æ¨m


	)

16 
	#SYS_bdÊush
 
__NR_bdÊush


	)

17 
	#SYS_bªak
 
__NR_bªak


	)

18 
	#SYS_brk
 
__NR_brk


	)

19 
	#SYS_ˇpgë
 
__NR_ˇpgë


	)

20 
	#SYS_ˇp£t
 
__NR_ˇp£t


	)

21 
	#SYS_chdú
 
__NR_chdú


	)

22 
	#SYS_chmod
 
__NR_chmod


	)

23 
	#SYS_chown
 
__NR_chown


	)

24 
	#SYS_chown32
 
__NR_chown32


	)

25 
	#SYS_chroŸ
 
__NR_chroŸ


	)

26 
	#SYS_˛ock_gëªs
 
__NR_˛ock_gëªs


	)

27 
	#SYS_˛ock_gëtime
 
__NR_˛ock_gëtime


	)

28 
	#SYS_˛ock_«no¶ìp
 
__NR_˛ock_«no¶ìp


	)

29 
	#SYS_˛ock_£âime
 
__NR_˛ock_£âime


	)

30 
	#SYS_˛⁄e
 
__NR_˛⁄e


	)

31 
	#SYS_˛o£
 
__NR_˛o£


	)

32 
	#SYS_¸ót
 
__NR_¸ót


	)

33 
	#SYS_¸óã_moduÀ
 
__NR_¸óã_moduÀ


	)

34 
	#SYS_dñëe_moduÀ
 
__NR_dñëe_moduÀ


	)

35 
	#SYS_dup
 
__NR_dup


	)

36 
	#SYS_dup2
 
__NR_dup2


	)

37 
	#SYS_ïﬁl_¸óã
 
__NR_ïﬁl_¸óã


	)

38 
	#SYS_ïﬁl_˘l
 
__NR_ïﬁl_˘l


	)

39 
	#SYS_ïﬁl_waô
 
__NR_ïﬁl_waô


	)

40 
	#SYS_execve
 
__NR_execve


	)

41 
	#SYS_exô
 
__NR_exô


	)

42 
	#SYS_exô_group
 
__NR_exô_group


	)

43 
	#SYS_Ádvi£64
 
__NR_Ádvi£64


	)

44 
	#SYS_Ádvi£64_64
 
__NR_Ádvi£64_64


	)

45 
	#SYS_fchdú
 
__NR_fchdú


	)

46 
	#SYS_fchmod
 
__NR_fchmod


	)

47 
	#SYS_fchown
 
__NR_fchown


	)

48 
	#SYS_fchown32
 
__NR_fchown32


	)

49 
	#SYS_f˙é
 
__NR_f˙é


	)

50 
	#SYS_f˙é64
 
__NR_f˙é64


	)

51 
	#SYS_fd©async
 
__NR_fd©async


	)

52 
	#SYS_fgëx©å
 
__NR_fgëx©å


	)

53 
	#SYS_Êi°x©å
 
__NR_Êi°x©å


	)

54 
	#SYS_Êock
 
__NR_Êock


	)

55 
	#SYS_f‹k
 
__NR_f‹k


	)

56 
	#SYS_‰emovex©å
 
__NR_‰emovex©å


	)

57 
	#SYS_f£tx©å
 
__NR_f£tx©å


	)

58 
	#SYS_f°©
 
__NR_f°©


	)

59 
	#SYS_f°©64
 
__NR_f°©64


	)

60 
	#SYS_f°©fs
 
__NR_f°©fs


	)

61 
	#SYS_f°©fs64
 
__NR_f°©fs64


	)

62 
	#SYS_fsync
 
__NR_fsync


	)

63 
	#SYS_·ime
 
__NR_·ime


	)

64 
	#SYS_·runˇã
 
__NR_·runˇã


	)

65 
	#SYS_·runˇã64
 
__NR_·runˇã64


	)

66 
	#SYS_fuãx
 
__NR_fuãx


	)

67 
	#SYS_gë_kî√l_syms
 
__NR_gë_kî√l_syms


	)

68 
	#SYS_gë_mempﬁicy
 
__NR_gë_mempﬁicy


	)

69 
	#SYS_gë_thªad_¨ó
 
__NR_gë_thªad_¨ó


	)

70 
	#SYS_gëcwd
 
__NR_gëcwd


	)

71 
	#SYS_gëdíts
 
__NR_gëdíts


	)

72 
	#SYS_gëdíts64
 
__NR_gëdíts64


	)

73 
	#SYS_gëegid
 
__NR_gëegid


	)

74 
	#SYS_gëegid32
 
__NR_gëegid32


	)

75 
	#SYS_gëeuid
 
__NR_gëeuid


	)

76 
	#SYS_gëeuid32
 
__NR_gëeuid32


	)

77 
	#SYS_gëgid
 
__NR_gëgid


	)

78 
	#SYS_gëgid32
 
__NR_gëgid32


	)

79 
	#SYS_gëgroups
 
__NR_gëgroups


	)

80 
	#SYS_gëgroups32
 
__NR_gëgroups32


	)

81 
	#SYS_gëôimî
 
__NR_gëôimî


	)

82 
	#SYS_gëpgid
 
__NR_gëpgid


	)

83 
	#SYS_gëpgΩ
 
__NR_gëpgΩ


	)

84 
	#SYS_gëpid
 
__NR_gëpid


	)

85 
	#SYS_gëpmsg
 
__NR_gëpmsg


	)

86 
	#SYS_gëµid
 
__NR_gëµid


	)

87 
	#SYS_gë¥i‹ôy
 
__NR_gë¥i‹ôy


	)

88 
	#SYS_gëªsgid
 
__NR_gëªsgid


	)

89 
	#SYS_gëªsgid32
 
__NR_gëªsgid32


	)

90 
	#SYS_gëªsuid
 
__NR_gëªsuid


	)

91 
	#SYS_gëªsuid32
 
__NR_gëªsuid32


	)

92 
	#SYS_gëæimô
 
__NR_gëæimô


	)

93 
	#SYS_gërußge
 
__NR_gërußge


	)

94 
	#SYS_gësid
 
__NR_gësid


	)

95 
	#SYS_gëtid
 
__NR_gëtid


	)

96 
	#SYS_gëtimeofday
 
__NR_gëtimeofday


	)

97 
	#SYS_gëuid
 
__NR_gëuid


	)

98 
	#SYS_gëuid32
 
__NR_gëuid32


	)

99 
	#SYS_gëx©å
 
__NR_gëx©å


	)

100 
	#SYS_gây
 
__NR_gây


	)

101 
	#SYS_idÀ
 
__NR_idÀ


	)

102 
	#SYS_öô_moduÀ
 
__NR_öô_moduÀ


	)

103 
	#SYS_io_ˇn˚l
 
__NR_io_ˇn˚l


	)

104 
	#SYS_io_de°roy
 
__NR_io_de°roy


	)

105 
	#SYS_io_gëevíts
 
__NR_io_gëevíts


	)

106 
	#SYS_io_£tup
 
__NR_io_£tup


	)

107 
	#SYS_io_submô
 
__NR_io_submô


	)

108 
	#SYS_io˘l
 
__NR_io˘l


	)

109 
	#SYS_i›îm
 
__NR_i›îm


	)

110 
	#SYS_i›l
 
__NR_i›l


	)

111 
	#SYS_ùc
 
__NR_ùc


	)

112 
	#SYS_key˘l
 
__NR_key˘l


	)

113 
	#SYS_kûl
 
__NR_kûl


	)

114 
	#SYS_lchown
 
__NR_lchown


	)

115 
	#SYS_lchown32
 
__NR_lchown32


	)

116 
	#SYS_lgëx©å
 
__NR_lgëx©å


	)

117 
	#SYS_lök
 
__NR_lök


	)

118 
	#SYS_li°x©å
 
__NR_li°x©å


	)

119 
	#SYS_Œi°x©å
 
__NR_Œi°x©å


	)

120 
	#SYS_lock
 
__NR_lock


	)

121 
	#SYS_lookup_dcookõ
 
__NR_lookup_dcookõ


	)

122 
	#SYS_Ãemovex©å
 
__NR_Ãemovex©å


	)

123 
	#SYS_l£ek
 
__NR_l£ek


	)

124 
	#SYS_l£tx©å
 
__NR_l£tx©å


	)

125 
	#SYS_l°©
 
__NR_l°©


	)

126 
	#SYS_l°©64
 
__NR_l°©64


	)

127 
	#SYS_madvi£
 
__NR_madvi£


	)

128 
	#SYS_madvi£1
 
__NR_madvi£1


	)

129 
	#SYS_mböd
 
__NR_mböd


	)

130 
	#SYS_möc‹e
 
__NR_möc‹e


	)

131 
	#SYS_mkdú
 
__NR_mkdú


	)

132 
	#SYS_mknod
 
__NR_mknod


	)

133 
	#SYS_mlock
 
__NR_mlock


	)

134 
	#SYS_mlockÆl
 
__NR_mlockÆl


	)

135 
	#SYS_mm≠
 
__NR_mm≠


	)

136 
	#SYS_mm≠2
 
__NR_mm≠2


	)

137 
	#SYS_modify_ldt
 
__NR_modify_ldt


	)

138 
	#SYS_mou¡
 
__NR_mou¡


	)

139 
	#SYS_m¥Ÿe˘
 
__NR_m¥Ÿe˘


	)

140 
	#SYS_mpx
 
__NR_mpx


	)

141 
	#SYS_mq_gë£èâr
 
__NR_mq_gë£èâr


	)

142 
	#SYS_mq_nŸify
 
__NR_mq_nŸify


	)

143 
	#SYS_mq_›í
 
__NR_mq_›í


	)

144 
	#SYS_mq_timedª˚ive
 
__NR_mq_timedª˚ive


	)

145 
	#SYS_mq_timed£nd
 
__NR_mq_timed£nd


	)

146 
	#SYS_mq_u∆ök
 
__NR_mq_u∆ök


	)

147 
	#SYS_mªm≠
 
__NR_mªm≠


	)

148 
	#SYS_msync
 
__NR_msync


	)

149 
	#SYS_mu∆ock
 
__NR_mu∆ock


	)

150 
	#SYS_mu∆ockÆl
 
__NR_mu∆ockÆl


	)

151 
	#SYS_munm≠
 
__NR_munm≠


	)

152 
	#SYS_«no¶ìp
 
__NR_«no¶ìp


	)

153 
	#SYS_nfs£rv˘l
 
__NR_nfs£rv˘l


	)

154 
	#SYS_ni˚
 
__NR_ni˚


	)

155 
	#SYS_ﬁdf°©
 
__NR_ﬁdf°©


	)

156 
	#SYS_ﬁdl°©
 
__NR_ﬁdl°©


	)

157 
	#SYS_ﬁdﬁdu«me
 
__NR_ﬁdﬁdu«me


	)

158 
	#SYS_ﬁd°©
 
__NR_ﬁd°©


	)

159 
	#SYS_ﬁdu«me
 
__NR_ﬁdu«me


	)

160 
	#SYS_›í
 
__NR_›í


	)

161 
	#SYS_∑u£
 
__NR_∑u£


	)

162 
	#SYS_≥rs⁄Æôy
 
__NR_≥rs⁄Æôy


	)

163 
	#SYS_pùe
 
__NR_pùe


	)

164 
	#SYS_pivŸ_roŸ
 
__NR_pivŸ_roŸ


	)

165 
	#SYS_pﬁl
 
__NR_pﬁl


	)

166 
	#SYS_¥˘l
 
__NR_¥˘l


	)

167 
	#SYS_¥ód64
 
__NR_¥ód64


	)

168 
	#SYS_¥of
 
__NR_¥of


	)

169 
	#SYS_¥ofû
 
__NR_¥ofû


	)

170 
	#SYS_±ø˚
 
__NR_±ø˚


	)

171 
	#SYS_puçmsg
 
__NR_puçmsg


	)

172 
	#SYS_pwrôe64
 
__NR_pwrôe64


	)

173 
	#SYS_quîy_moduÀ
 
__NR_quîy_moduÀ


	)

174 
	#SYS_quŸa˘l
 
__NR_quŸa˘l


	)

175 
	#SYS_ªad
 
__NR_ªad


	)

176 
	#SYS_ªadahód
 
__NR_ªadahód


	)

177 
	#SYS_ªaddú
 
__NR_ªaddú


	)

178 
	#SYS_ªadlök
 
__NR_ªadlök


	)

179 
	#SYS_ªadv
 
__NR_ªadv


	)

180 
	#SYS_ªboŸ
 
__NR_ªboŸ


	)

181 
	#SYS_ªm≠_fûe_∑ges
 
__NR_ªm≠_fûe_∑ges


	)

182 
	#SYS_ªmovex©å
 
__NR_ªmovex©å


	)

183 
	#SYS_ª«me
 
__NR_ª«me


	)

184 
	#SYS_ªque°_key
 
__NR_ªque°_key


	)

185 
	#SYS_ª°¨t_sysˇŒ
 
__NR_ª°¨t_sysˇŒ


	)

186 
	#SYS_rmdú
 
__NR_rmdú


	)

187 
	#SYS_π_siga˘i⁄
 
__NR_π_siga˘i⁄


	)

188 
	#SYS_π_sig≥ndög
 
__NR_π_sig≥ndög


	)

189 
	#SYS_π_sig¥ocmask
 
__NR_π_sig¥ocmask


	)

190 
	#SYS_π_sigqueueöfo
 
__NR_π_sigqueueöfo


	)

191 
	#SYS_π_sigªtu∫
 
__NR_π_sigªtu∫


	)

192 
	#SYS_π_sigsu•íd
 
__NR_π_sigsu•íd


	)

193 
	#SYS_π_sigtimedwaô
 
__NR_π_sigtimedwaô


	)

194 
	#SYS_sched_gë_¥i‹ôy_max
 
__NR_sched_gë_¥i‹ôy_max


	)

195 
	#SYS_sched_gë_¥i‹ôy_mö
 
__NR_sched_gë_¥i‹ôy_mö


	)

196 
	#SYS_sched_gëafföôy
 
__NR_sched_gëafföôy


	)

197 
	#SYS_sched_gë∑øm
 
__NR_sched_gë∑øm


	)

198 
	#SYS_sched_gëscheduÀr
 
__NR_sched_gëscheduÀr


	)

199 
	#SYS_sched_º_gë_öãrvÆ
 
__NR_sched_º_gë_öãrvÆ


	)

200 
	#SYS_sched_£èfföôy
 
__NR_sched_£èfföôy


	)

201 
	#SYS_sched_£ç¨am
 
__NR_sched_£ç¨am


	)

202 
	#SYS_sched_£tscheduÀr
 
__NR_sched_£tscheduÀr


	)

203 
	#SYS_sched_yõld
 
__NR_sched_yõld


	)

204 
	#SYS_£À˘
 
__NR_£À˘


	)

205 
	#SYS_£ndfûe
 
__NR_£ndfûe


	)

206 
	#SYS_£ndfûe64
 
__NR_£ndfûe64


	)

207 
	#SYS_£t_mempﬁicy
 
__NR_£t_mempﬁicy


	)

208 
	#SYS_£t_thªad_¨ó
 
__NR_£t_thªad_¨ó


	)

209 
	#SYS_£t_tid_addªss
 
__NR_£t_tid_addªss


	)

210 
	#SYS_£tdomaö«me
 
__NR_£tdomaö«me


	)

211 
	#SYS_£tfsgid
 
__NR_£tfsgid


	)

212 
	#SYS_£tfsgid32
 
__NR_£tfsgid32


	)

213 
	#SYS_£tfsuid
 
__NR_£tfsuid


	)

214 
	#SYS_£tfsuid32
 
__NR_£tfsuid32


	)

215 
	#SYS_£tgid
 
__NR_£tgid


	)

216 
	#SYS_£tgid32
 
__NR_£tgid32


	)

217 
	#SYS_£tgroups
 
__NR_£tgroups


	)

218 
	#SYS_£tgroups32
 
__NR_£tgroups32


	)

219 
	#SYS_£tho°«me
 
__NR_£tho°«me


	)

220 
	#SYS_£tôimî
 
__NR_£tôimî


	)

221 
	#SYS_£çgid
 
__NR_£çgid


	)

222 
	#SYS_£çri‹ôy
 
__NR_£çri‹ôy


	)

223 
	#SYS_£åegid
 
__NR_£åegid


	)

224 
	#SYS_£åegid32
 
__NR_£åegid32


	)

225 
	#SYS_£åesgid
 
__NR_£åesgid


	)

226 
	#SYS_£åesgid32
 
__NR_£åesgid32


	)

227 
	#SYS_£åesuid
 
__NR_£åesuid


	)

228 
	#SYS_£åesuid32
 
__NR_£åesuid32


	)

229 
	#SYS_£åeuid
 
__NR_£åeuid


	)

230 
	#SYS_£åeuid32
 
__NR_£åeuid32


	)

231 
	#SYS_£ålimô
 
__NR_£ålimô


	)

232 
	#SYS_£tsid
 
__NR_£tsid


	)

233 
	#SYS_£âimeofday
 
__NR_£âimeofday


	)

234 
	#SYS_£tuid
 
__NR_£tuid


	)

235 
	#SYS_£tuid32
 
__NR_£tuid32


	)

236 
	#SYS_£tx©å
 
__NR_£tx©å


	)

237 
	#SYS_sgëmask
 
__NR_sgëmask


	)

238 
	#SYS_siga˘i⁄
 
__NR_siga˘i⁄


	)

239 
	#SYS_sigÆt°ack
 
__NR_sigÆt°ack


	)

240 
	#SYS_sig«l
 
__NR_sig«l


	)

241 
	#SYS_sig≥ndög
 
__NR_sig≥ndög


	)

242 
	#SYS_sig¥ocmask
 
__NR_sig¥ocmask


	)

243 
	#SYS_sigªtu∫
 
__NR_sigªtu∫


	)

244 
	#SYS_sigsu•íd
 
__NR_sigsu•íd


	)

245 
	#SYS_sockëˇŒ
 
__NR_sockëˇŒ


	)

246 
	#SYS_s£tmask
 
__NR_s£tmask


	)

247 
	#SYS_°©
 
__NR_°©


	)

248 
	#SYS_°©64
 
__NR_°©64


	)

249 
	#SYS_°©fs
 
__NR_°©fs


	)

250 
	#SYS_°©fs64
 
__NR_°©fs64


	)

251 
	#SYS_°ime
 
__NR_°ime


	)

252 
	#SYS_°ty
 
__NR_°ty


	)

253 
	#SYS_sw≠off
 
__NR_sw≠off


	)

254 
	#SYS_sw≠⁄
 
__NR_sw≠⁄


	)

255 
	#SYS_symlök
 
__NR_symlök


	)

256 
	#SYS_sync
 
__NR_sync


	)

257 
	#SYS_sys_kexec_lﬂd
 
__NR_sys_kexec_lﬂd


	)

258 
	#SYS_sysfs
 
__NR_sysfs


	)

259 
	#SYS_sysöfo
 
__NR_sysöfo


	)

260 
	#SYS_sy¶og
 
__NR_sy¶og


	)

261 
	#SYS_tgkûl
 
__NR_tgkûl


	)

262 
	#SYS_time
 
__NR_time


	)

263 
	#SYS_timî_¸óã
 
__NR_timî_¸óã


	)

264 
	#SYS_timî_dñëe
 
__NR_timî_dñëe


	)

265 
	#SYS_timî_gëovîrun
 
__NR_timî_gëovîrun


	)

266 
	#SYS_timî_gëtime
 
__NR_timî_gëtime


	)

267 
	#SYS_timî_£âime
 
__NR_timî_£âime


	)

268 
	#SYS_times
 
__NR_times


	)

269 
	#SYS_tkûl
 
__NR_tkûl


	)

270 
	#SYS_åunˇã
 
__NR_åunˇã


	)

271 
	#SYS_åunˇã64
 
__NR_åunˇã64


	)

272 
	#SYS_ugëæimô
 
__NR_ugëæimô


	)

273 
	#SYS_ulimô
 
__NR_ulimô


	)

274 
	#SYS_umask
 
__NR_umask


	)

275 
	#SYS_umou¡
 
__NR_umou¡


	)

276 
	#SYS_umou¡2
 
__NR_umou¡2


	)

277 
	#SYS_u«me
 
__NR_u«me


	)

278 
	#SYS_u∆ök
 
__NR_u∆ök


	)

279 
	#SYS_u£lib
 
__NR_u£lib


	)

280 
	#SYS_u°©
 
__NR_u°©


	)

281 
	#SYS_utime
 
__NR_utime


	)

282 
	#SYS_utimes
 
__NR_utimes


	)

283 
	#SYS_vf‹k
 
__NR_vf‹k


	)

284 
	#SYS_vh™gup
 
__NR_vh™gup


	)

285 
	#SYS_vm86
 
__NR_vm86


	)

286 
	#SYS_vm86ﬁd
 
__NR_vm86ﬁd


	)

287 
	#SYS_v£rvî
 
__NR_v£rvî


	)

288 
	#SYS_waô4
 
__NR_waô4


	)

289 
	#SYS_waôid
 
__NR_waôid


	)

290 
	#SYS_waôpid
 
__NR_waôpid


	)

291 
	#SYS_wrôe
 
__NR_wrôe


	)

292 
	#SYS_wrôev
 
__NR_wrôev


	)

	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

55 
	#TIMER_ABSTIME
 1

	)

61 #ifde‡
__√ed_timevÆ


62 #unde‡
__√ed_timevÆ


63 #i‚de‡
_STRUCT_TIMEVAL


64 
	#_STRUCT_TIMEVAL
 1

	)

65 
	~<bôs/ty≥s.h
>

69 
	stimevÆ


71 
__time_t
 
	mtv_£c
;

72 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

30 
	#__√ed_size_t


	)

31 
	~<°ddef.h
>

34 
	t__u_ch¨
;

35 
	t__u_sh‹t
;

36 
	t__u_öt
;

37 
	t__u_l⁄g
;

40 sig√d 
	t__öt8_t
;

41 
	t__uöt8_t
;

42 sig√d 
	t__öt16_t
;

43 
	t__uöt16_t
;

44 sig√d 
	t__öt32_t
;

45 
	t__uöt32_t
;

46 #i‡
__WORDSIZE
 == 64

47 sig√d 
	t__öt64_t
;

48 
	t__uöt64_t
;

49 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


50 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

51 
__exãnsi⁄__
 
	t__uöt64_t
;

55 #i‡
__WORDSIZE
 == 64

56 
	t__quad_t
;

57 
	t__u_quad_t
;

58 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


59 
__exãnsi⁄__
 
	t__quad_t
;

60 
__exãnsi⁄__
 
	t__u_quad_t
;

64 
	m__vÆ
[2];

65 } 
	t__quad_t
;

68 
__u_l⁄g
 
	m__vÆ
[2];

69 } 
	t__u_quad_t
;

102 
	#__S16_TYPE
 

	)

103 
	#__U16_TYPE
 

	)

104 
	#__S32_TYPE
 

	)

105 
	#__U32_TYPE
 

	)

106 
	#__SLONGWORD_TYPE
 

	)

107 
	#__ULONGWORD_TYPE
 

	)

108 #i‡
__WORDSIZE
 == 32

109 
	#__SQUAD_TYPE
 
__quad_t


	)

110 
	#__UQUAD_TYPE
 
__u_quad_t


	)

111 
	#__SWORD_TYPE
 

	)

112 
	#__UWORD_TYPE
 

	)

113 
	#__SLONG32_TYPE
 

	)

114 
	#__ULONG32_TYPE
 

	)

115 
	#__S64_TYPE
 
__quad_t


	)

116 
	#__U64_TYPE
 
__u_quad_t


	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	#__SQUAD_TYPE
 

	)

119 
	#__UQUAD_TYPE
 

	)

120 
	#__SWORD_TYPE
 

	)

121 
	#__UWORD_TYPE
 

	)

122 
	#__SLONG32_TYPE
 

	)

123 
	#__ULONG32_TYPE
 

	)

124 
	#__S64_TYPE
 

	)

125 
	#__U64_TYPE
 

	)

129 
	~<bôs/ty≥sizes.h
>

133 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

136 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

137 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

138 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

139 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

140 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

141 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

142 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

143 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

144 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

145 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

146 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

147 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

148 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

149 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

150 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

151 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

152 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

153 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

155 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

156 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

157 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

160 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

163 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

166 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

171 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

172 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

175 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

176 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

179 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

180 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

182 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

186 
__off64_t
 
	t__loff_t
;

187 
__quad_t
 *
	t__qaddr_t
;

188 *
	t__ˇddr_t
;

191 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

194 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

197 #unde‡
__STD_TYPE


	@/usr/include/bits/waitflags.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


26 
	#WNOHANG
 1

	)

27 
	#WUNTRACED
 2

	)

30 
	#WSTOPPED
 2

	)

31 
	#WEXITED
 4

	)

32 
	#WCONTINUED
 8

	)

33 
	#WNOWAIT
 0x01000000

	)

35 
	#__WALL
 0x40000000

	)

36 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

20 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


29 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

32 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

35 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

38 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

41 
	#__WIFSIGNALED
(
°©us
) \

42 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

45 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

49 #ifde‡
WCONTINUED


50 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

54 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

57 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

58 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

59 
	#__W_CONTINUED
 0xffff

	)

60 
	#__WCOREFLAG
 0x80

	)

63 #ifdef 
__USE_BSD


65 
	~<ídün.h
>

67 
	uwaô


69 
	mw_°©us
;

72 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


73 
	m__w_ãrmsig
:7;

74 
	m__w_c‹edump
:1;

75 
	m__w_ªtcode
:8;

78 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


80 
	m__w_ªtcode
:8;

81 
	m__w_c‹edump
:1;

82 
	m__w_ãrmsig
:7;

84 } 
	m__waô_ãrmö©ed
;

87 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


88 
	m__w_°›vÆ
:8;

89 
	m__w_°›sig
:8;

92 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


94 
	m__w_°›sig
:8;

95 
	m__w_°›vÆ
:8;

97 } 
	m__waô_°›≥d
;

100 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

101 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

102 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

103 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

104 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wordsize.h

19 
	#__WORDSIZE
 32

	)

	@/usr/include/bits/xopen_lim.h

30 #i‚de‡
_XOPEN_LIM_H


31 
	#_XOPEN_LIM_H
 1

	)

33 
	#__√ed_IOV_MAX


	)

34 
	~<bôs/°dio_lim.h
>

66 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

71 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

74 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

77 
	#NL_MSGMAX
 
INT_MAX


	)

81 
	#NL_NMAX
 
INT_MAX


	)

84 
	#NL_SETMAX
 
INT_MAX


	)

87 
	#NL_TEXTMAX
 
INT_MAX


	)

90 
	#NZERO
 20

	)

94 #ifde‡
INT_MAX


95 #i‡
INT_MAX
 == 32767

96 
	#WORD_BIT
 16

	)

98 #i‡
INT_MAX
 == 2147483647

99 
	#WORD_BIT
 32

	)

102 
	#WORD_BIT
 64

	)

105 #ñi‡
deföed
 
__INT_MAX__


106 #i‡
__INT_MAX__
 == 32767

107 
	#WORD_BIT
 16

	)

109 #i‡
__INT_MAX__
 == 2147483647

110 
	#WORD_BIT
 32

	)

113 
	#WORD_BIT
 64

	)

117 
	#WORD_BIT
 32

	)

121 #ifde‡
LONG_MAX


122 #i‡
LONG_MAX
 == 2147483647

123 
	#LONG_BIT
 32

	)

126 
	#LONG_BIT
 64

	)

128 #ñi‡
deföed
 
__LONG_MAX__


129 #i‡
__LONG_MAX__
 == 2147483647

130 
	#LONG_BIT
 32

	)

133 
	#LONG_BIT
 64

	)

136 
	~<bôs/w‹dsize.h
>

137 #i‡
__WORDSIZE
 == 64

138 
	#LONG_BIT
 64

	)

140 
	#LONG_BIT
 32

	)

	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

90 #unde‡
__USE_ISOC99


91 #unde‡
__USE_POSIX


92 #unde‡
__USE_POSIX2


93 #unde‡
__USE_POSIX199309


94 #unde‡
__USE_POSIX199506


95 #unde‡
__USE_XOPEN


96 #unde‡
__USE_XOPEN_EXTENDED


97 #unde‡
__USE_UNIX98


98 #unde‡
__USE_XOPEN2K


99 #unde‡
__USE_LARGEFILE


100 #unde‡
__USE_LARGEFILE64


101 #unde‡
__USE_FILE_OFFSET64


102 #unde‡
__USE_BSD


103 #unde‡
__USE_SVID


104 #unde‡
__USE_MISC


105 #unde‡
__USE_GNU


106 #unde‡
__USE_REENTRANT


107 #unde‡
__USE_FORTIFY_LEVEL


108 #unde‡
__FAVOR_BSD


109 #unde‡
__KERNEL_STRICT_NAMES


113 #i‚de‡
_LOOSE_KERNEL_NAMES


114 
	#__KERNEL_STRICT_NAMES


	)

118 
	#__USE_ANSI
 1

	)

127 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


128 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

129 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

131 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

136 #i‡
deföed
 
_BSD_SOURCE
 && \

137 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

138 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_XOPEN_SOURCE_EXTENDED
 || \

139 
deföed
 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

140 
	#__FAVOR_BSD
 1

	)

144 #ifde‡
_GNU_SOURCE


145 #unde‡
_ISOC99_SOURCE


146 
	#_ISOC99_SOURCE
 1

	)

147 #unde‡
_POSIX_SOURCE


148 
	#_POSIX_SOURCE
 1

	)

149 #unde‡
_POSIX_C_SOURCE


150 
	#_POSIX_C_SOURCE
 199506L

	)

151 #unde‡
_XOPEN_SOURCE


152 
	#_XOPEN_SOURCE
 600

	)

153 #unde‡
_XOPEN_SOURCE_EXTENDED


154 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

155 #unde‡
_LARGEFILE64_SOURCE


156 
	#_LARGEFILE64_SOURCE
 1

	)

157 #unde‡
_BSD_SOURCE


158 
	#_BSD_SOURCE
 1

	)

159 #unde‡
_SVID_SOURCE


160 
	#_SVID_SOURCE
 1

	)

165 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

166 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

167 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_XOPEN_SOURCE_EXTENDED
 && \

168 !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

169 
	#_BSD_SOURCE
 1

	)

170 
	#_SVID_SOURCE
 1

	)

177 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

178 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

179 
	#__USE_ISOC99
 1

	)

184 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

185 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

186 
	#_POSIX_SOURCE
 1

	)

187 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

188 
	#_POSIX_C_SOURCE
 2

	)

190 
	#_POSIX_C_SOURCE
 199506L

	)

194 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


195 
	#__USE_POSIX
 1

	)

198 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


199 
	#__USE_POSIX2
 1

	)

202 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

203 
	#__USE_POSIX199309
 1

	)

206 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

207 
	#__USE_POSIX199506
 1

	)

210 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

211 
	#__USE_XOPEN2K
 1

	)

214 #ifdef 
_XOPEN_SOURCE


215 
	#__USE_XOPEN
 1

	)

216 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

217 
	#__USE_XOPEN_EXTENDED
 1

	)

218 
	#__USE_UNIX98
 1

	)

219 #unde‡
_LARGEFILE_SOURCE


220 
	#_LARGEFILE_SOURCE
 1

	)

221 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

222 
	#__USE_XOPEN2K
 1

	)

223 #unde‡
__USE_ISOC99


224 
	#__USE_ISOC99
 1

	)

227 #ifde‡
_XOPEN_SOURCE_EXTENDED


228 
	#__USE_XOPEN_EXTENDED
 1

	)

233 #ifde‡
_LARGEFILE_SOURCE


234 
	#__USE_LARGEFILE
 1

	)

237 #ifde‡
_LARGEFILE64_SOURCE


238 
	#__USE_LARGEFILE64
 1

	)

241 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

242 
	#__USE_FILE_OFFSET64
 1

	)

245 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


246 
	#__USE_MISC
 1

	)

249 #ifdef 
_BSD_SOURCE


250 
	#__USE_BSD
 1

	)

253 #ifdef 
_SVID_SOURCE


254 
	#__USE_SVID
 1

	)

257 #ifdef 
_GNU_SOURCE


258 
	#__USE_GNU
 1

	)

261 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


262 
	#__USE_REENTRANT
 1

	)

265 #i‡
_FORTIFY_SOURCE
 > 0 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
(
__OPTIMIZE__
)

266 #i‡
_FORTIFY_SOURCE
 == 1

267 
	#__USE_FORTIFY_LEVEL
 1

	)

268 #ñi‡
_FORTIFY_SOURCE
 > 1

269 
	#__USE_FORTIFY_LEVEL
 2

	)

274 
	#__STDC_IEC_559__
 1

	)

275 
	#__STDC_IEC_559_COMPLEX__
 1

	)

278 
	#__STDC_ISO_10646__
 200009L

	)

286 #unde‡
__GNU_LIBRARY__


287 
	#__GNU_LIBRARY__
 6

	)

291 
	#__GLIBC__
 2

	)

292 
	#__GLIBC_MINOR__
 3

	)

294 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

295 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

298 #i‡
deföed
 
__GNUC__
 \

299 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

300 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

301 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L) \

302 && !(
deföed
(
__DECC
Ë|| 
	$deföed
(
__DECCXX
))

303 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

307 #i‚de‡
__ASSEMBLER__


308 #i‚de‡
_SYS_CDEFS_H


309 
	~<sys/cdefs.h
>

314 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


315 
	#__USE_LARGEFILE
 1

	)

316 
	#__USE_LARGEFILE64
 1

	)

322 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

323 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__


324 
	#__USE_EXTERN_INLINES
 1

	)

332 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 
gë›t
 ();

158 #i‚de‡
__√ed_gë›t


159 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
,

161 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

162 
__THROW
;

163 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
,

165 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

166 
__THROW
;

170 #ifdef 
__˝lu•lus


175 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

147 
	#_IO_SKIPWS
 01

	)

148 
	#_IO_LEFT
 02

	)

149 
	#_IO_RIGHT
 04

	)

150 
	#_IO_INTERNAL
 010

	)

151 
	#_IO_DEC
 020

	)

152 
	#_IO_OCT
 040

	)

153 
	#_IO_HEX
 0100

	)

154 
	#_IO_SHOWBASE
 0200

	)

155 
	#_IO_SHOWPOINT
 0400

	)

156 
	#_IO_UPPERCASE
 01000

	)

157 
	#_IO_SHOWPOS
 02000

	)

158 
	#_IO_SCIENTIFIC
 04000

	)

159 
	#_IO_FIXED
 010000

	)

160 
	#_IO_UNITBUF
 020000

	)

161 
	#_IO_STDIO
 040000

	)

162 
	#_IO_DONT_CLOSE
 0100000

	)

163 
	#_IO_BOOLALPHA
 0200000

	)

166 
_IO_jump_t
; 
	g_IO_FILE
;

169 #ifde‡
_IO_MTSAFE_IO


170 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

171 
	~<bôs/°dio-lock.h
>

176 
	t_IO_lock_t
;

182 
	s_IO_m¨kî
 {

183 
_IO_m¨kî
 *
	m_√xt
;

184 
_IO_FILE
 *
	m_sbuf
;

188 
	m_pos
;

190 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

191 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

192 
	mpublic
:

193 
°ªamm¨kî
(
°ªambuf
 *
sb
);

194 ~
°ªamm¨kî
();

195 
ßvög
(Ë{  
	m_•os
 == -2; }

196 
dñè
(
°ªamm¨kî
&);

197 
dñè
();

202 
	e__codecvt_ªsu…


204 
	m__codecvt_ok
,

205 
	m__codecvt_∑πül
,

206 
	m__codecvt_îr‹
,

207 
	m__codecvt_noc⁄v


210 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


213 
	s_IO_codecvt


215 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

216 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

217 
	m__mb°©e_t
 *,

218 c⁄° 
	mwch¨_t
 *,

219 c⁄° 
	mwch¨_t
 *,

220 c⁄° 
	mwch¨_t
 **, *,

222 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *, *,

225 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

226 
	m__mb°©e_t
 *,

228 c⁄° **, 
	mwch¨_t
 *,

229 
	mwch¨_t
 *, wchar_t **);

230 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

231 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

232 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

233 c⁄° *, c⁄° *, 
	m_IO_size_t
);

234 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

236 
_IO_ic⁄v_t
 
	m__cd_ö
;

237 
_IO_ic⁄v_t
 
	m__cd_out
;

241 
	s_IO_wide_d©a


243 
wch¨_t
 *
	m_IO_ªad_±r
;

244 
wch¨_t
 *
	m_IO_ªad_íd
;

245 
wch¨_t
 *
	m_IO_ªad_ba£
;

246 
wch¨_t
 *
	m_IO_wrôe_ba£
;

247 
wch¨_t
 *
	m_IO_wrôe_±r
;

248 
wch¨_t
 *
	m_IO_wrôe_íd
;

249 
wch¨_t
 *
	m_IO_buf_ba£
;

250 
wch¨_t
 *
	m_IO_buf_íd
;

252 
wch¨_t
 *
	m_IO_ßve_ba£
;

253 
wch¨_t
 *
	m_IO_backup_ba£
;

255 
wch¨_t
 *
	m_IO_ßve_íd
;

257 
__mb°©e_t
 
	m_IO_°©e
;

258 
__mb°©e_t
 
	m_IO_œ°_°©e
;

259 
_IO_codecvt
 
	m_codecvt
;

261 
wch¨_t
 
	m_sh‹tbuf
[1];

263 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

267 
	s_IO_FILE
 {

268 
	m_Êags
;

269 
	#_IO_fûe_Êags
 
_Êags


	)

273 * 
	m_IO_ªad_±r
;

274 * 
	m_IO_ªad_íd
;

275 * 
	m_IO_ªad_ba£
;

276 * 
	m_IO_wrôe_ba£
;

277 * 
	m_IO_wrôe_±r
;

278 * 
	m_IO_wrôe_íd
;

279 * 
	m_IO_buf_ba£
;

280 * 
	m_IO_buf_íd
;

282 *
	m_IO_ßve_ba£
;

283 *
	m_IO_backup_ba£
;

284 *
	m_IO_ßve_íd
;

286 
_IO_m¨kî
 *
	m_m¨kîs
;

288 
_IO_FILE
 *
	m_chaö
;

290 
	m_fûío
;

292 
	m_blksize
;

294 
	m_Êags2
;

296 
_IO_off_t
 
	m_ﬁd_off£t
;

298 
	#__HAVE_COLUMN


	)

300 
	m_cur_cﬁumn
;

301 sig√d 
	m_vèbÀ_off£t
;

302 
	m_sh‹tbuf
[1];

306 
_IO_lock_t
 *
	m_lock
;

307 #ifde‡
_IO_USE_OLD_IO_FILE


310 
	s_IO_FILE_com∂ëe


312 
_IO_FILE
 
	m_fûe
;

314 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

315 
_IO_off64_t
 
	m_off£t
;

316 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


318 
_IO_codecvt
 *
	m_codecvt
;

319 
_IO_wide_d©a
 *
	m_wide_d©a
;

321 *
	m__∑d1
;

322 *
	m__∑d2
;

324 
	m_mode
;

326 
	m_unu£d2
[15 *  () - 2 *  (*)];

330 #i‚de‡
__˝lu•lus


331 
_IO_FILE
 
	t_IO_FILE
;

334 
	g_IO_FILE_∂us
;

336 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

337 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

338 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

339 #i‚de‡
_LIBC


340 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

341 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

342 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

344 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

345 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

346 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

354 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

362 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

363 
	tsize_t
 
	t__n
);

371 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

374 
	t__io_˛o£_‚
 (*
	t__cookõ
);

377 #ifde‡
_GNU_SOURCE


379 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

380 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

381 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

382 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

387 
__io_ªad_‚
 *
	mªad
;

388 
__io_wrôe_‚
 *
	mwrôe
;

389 
__io_£ek_‚
 *
	m£ek
;

390 
__io_˛o£_‚
 *
	m˛o£
;

391 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

392 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

394 
	g_IO_cookõ_fûe
;

397 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

398 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

402 #ifde‡
__˝lu•lus


406 
__undîÊow
 (
_IO_FILE
 *Ë
__THROW
;

407 
__uÊow
 (
_IO_FILE
 *Ë
__THROW
;

408 
__ovîÊow
 (
_IO_FILE
 *, Ë
__THROW
;

409 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *Ë
__THROW
;

410 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *Ë
__THROW
;

411 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wöt_tË
__THROW
;

413 #i‡ 
__GNUC__
 >= 3

414 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (ex¥,Ñes)

	)

416 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

419 
	#_IO_gëc_u∆ocked
(
_Â
) \

420 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

421 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

422 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

423 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

424 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

425 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

426 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

427 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

428 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

429 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

431 
	#_IO_gëwc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 >(_Â)->_wide_d©a->
_IO_ªad_íd
,\

434 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

435 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

436 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

437 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
, 0) \

438 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

439 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

441 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

442 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

444 
_IO_gëc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

445 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

446 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

447 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

449 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

452 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

453 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

455 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

456 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

457 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

459 #ifde‡
_IO_MTSAFE_IO


460 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

461 
	#_IO_Êockfûe
(
_Â
) \

462 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

463 
	#_IO_fu∆ockfûe
(
_Â
) \

464 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

466 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

467 
	#_IO_Êockfûe
(
_Â
Ë

	)

468 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

469 
	#_IO_·rylockfûe
(
_Â
Ë

	)

470 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

471 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

474 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

475 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

476 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

477 
_IO_va_li°
Ë
__THROW
;

478 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_tË
__THROW
;

479 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_tË
__THROW
;

481 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , Ë
__THROW
;

482 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, Ë
__THROW
;

484 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

486 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


487 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

488 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
Ë
__THROW
;

489 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

490 #i‡
__GNUC__
 >= 2

493 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


494 
	~<shlib-com∑t.h
>

495 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

496 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

497 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

498 c⁄° 
_IO_°dö_u£d
;

499 
wók_exã∫
 (
_IO_°dö_u£d
);

502 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


503 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

507 
	#_IO_fwide
(
__Â
, 
__mode
) \

508 ({ 
__ªsu…
 = (
__mode
); \

509 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

511 i‡((
__Â
)->
_mode
 == 0) \

513 (
__Â
)->
_mode
 = -1; \

514 
__ªsu…
 = (
__Â
)->
_mode
; \

516 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

517 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

519 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

520 
__ªsu…
; })

	)

523 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

524 
_IO_va_li°
, *
__ª°ri˘
Ë
__THROW
;

525 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

526 
_IO_va_li°
Ë
__THROW
;

527 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_tË
__THROW
;

528 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

531 #ifde‡
__˝lu•lus


	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#CHILD_MAX
 999

	)

9 
	#OPEN_MAX
 256

	)

10 
	#LINK_MAX
 127

	)

11 
	#MAX_CANON
 255

	)

12 
	#MAX_INPUT
 255

	)

13 
	#NAME_MAX
 255

	)

14 
	#PATH_MAX
 4096

	)

15 
	#PIPE_BUF
 4096

	)

16 
	#XATTR_NAME_MAX
 255

	)

17 
	#XATTR_SIZE_MAX
 65536

	)

18 
	#XATTR_LIST_MAX
 65536

	)

20 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë¯## 
U


	)

301 
	#UINT16_C
(
c
Ë¯## 
U


	)

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/sysmacros.h

20 #i‚de‡
_SYS_SYSMACROS_H


21 
	#_SYS_SYSMACROS_H
 1

	)

23 
	~<„©uªs.h
>

28 #ifde‡
__GLIBC_HAVE_LONG_LONG


29 
__exãnsi⁄__


30 
__ölöe
 
	$gnu_dev_maj‹
 (
__dev
)

31 
__THROW
;

32 
__exãnsi⁄__


33 
__ölöe
 
	$gnu_dev_mö‹
 (
__dev
)

34 
__THROW
;

35 
__exãnsi⁄__


36 
__ölöe
 
	$gnu_dev_makedev
 (
__maj‹
,

37 
__mö‹
)

38 
__THROW
;

40 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

41 
__exãnsi⁄__
 
__ölöe
 

42 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

44  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

45 
	}
}

47 
__exãnsi⁄__
 
__ölöe
 

48 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

50  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

51 
	}
}

53 
__exãnsi⁄__
 
__ölöe
 

54 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

56  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

57 | (((Ë(
__mö‹
 & ~0xff)) << 12)

58 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

59 
	}
}

64 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

65 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

66 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

19 #i‚de‡
_SYS_UCONTEXT_H


20 
	#_SYS_UCONTEXT_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sig«l.h
>

27 
	~<bôs/sigc⁄ãxt.h
>

31 
	tgªg_t
;

34 
	#NGREG
 19

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_GS
 = 0,

44 
	#REG_GS
 
REG_GS


	)

45 
	mREG_FS
,

46 
	#REG_FS
 
REG_FS


	)

47 
	mREG_ES
,

48 
	#REG_ES
 
REG_ES


	)

49 
	mREG_DS
,

50 
	#REG_DS
 
REG_DS


	)

51 
	mREG_EDI
,

52 
	#REG_EDI
 
REG_EDI


	)

53 
	mREG_ESI
,

54 
	#REG_ESI
 
REG_ESI


	)

55 
	mREG_EBP
,

56 
	#REG_EBP
 
REG_EBP


	)

57 
	mREG_ESP
,

58 
	#REG_ESP
 
REG_ESP


	)

59 
	mREG_EBX
,

60 
	#REG_EBX
 
REG_EBX


	)

61 
	mREG_EDX
,

62 
	#REG_EDX
 
REG_EDX


	)

63 
	mREG_ECX
,

64 
	#REG_ECX
 
REG_ECX


	)

65 
	mREG_EAX
,

66 
	#REG_EAX
 
REG_EAX


	)

67 
	mREG_TRAPNO
,

68 
	#REG_TRAPNO
 
REG_TRAPNO


	)

69 
	mREG_ERR
,

70 
	#REG_ERR
 
REG_ERR


	)

71 
	mREG_EIP
,

72 
	#REG_EIP
 
REG_EIP


	)

73 
	mREG_CS
,

74 
	#REG_CS
 
REG_CS


	)

75 
	mREG_EFL
,

76 
	#REG_EFL
 
REG_EFL


	)

77 
	mREG_UESP
,

78 
	#REG_UESP
 
REG_UESP


	)

79 
	mREG_SS


80 
	#REG_SS
 
REG_SS


	)

85 
	s_libc_Âªg


87 
	msignifiˇnd
[4];

88 
	mexp⁄ít
;

91 
	s_libc_Â°©e


93 
	mcw
;

94 
	msw
;

95 
	mèg
;

96 
	mùoff
;

97 
	mcs£l
;

98 
	md©aoff
;

99 
	md©a£l
;

100 
_libc_Âªg
 
	m_°
[8];

101 
	m°©us
;

105 
_libc_Â°©e
 *
	tÂªg£t_t
;

110 
gªg£t_t
 
	mgªgs
;

113 
Âªg£t_t
 
	mÂªgs
;

114 
	mﬁdmask
;

115 
	m¸2
;

116 } 
	tmc⁄ãxt_t
;

119 
	suc⁄ãxt


121 
	muc_Êags
;

122 
uc⁄ãxt
 *
	muc_lök
;

123 
°ack_t
 
	muc_°ack
;

124 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

125 
__sig£t_t
 
	muc_sigmask
;

126 
_libc_Â°©e
 
	m__Âªgs_mem
;

127 } 
	tuc⁄ãxt_t
;

	@/usr/include/sys/uio.h

19 #i‚de‡
_SYS_UIO_H


20 
	#_SYS_UIO_H
 1

	)

22 
	~<„©uªs.h
>

24 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/uio.h
>

40 
ssize_t
 
ªadv
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

50 
ssize_t
 
wrôev
 (
__fd
, 
__c⁄°
 
iovec
 *
__iovec
, 
__cou¡
);

52 
	g__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 
	#__√ed_wch¨_t


	)

12 
	#__√ed_wöt_t


	)

13 
	#__√ed_NULL


	)

14 
	~<°ddef.h
>

15 #i‚de‡
_WINT_T


20 
	#_WINT_T


	)

21 
	twöt_t
;

23 
	#__√ed_mb°©e_t


	)

24 
	~<wch¨.h
>

25 
	#_G_size_t
 
size_t


	)

28 
__off_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos_t
;

33 
__off64_t
 
	m__pos
;

34 
__mb°©e_t
 
	m__°©e
;

35 } 
	t_G_Âos64_t
;

36 
	#_G_ssize_t
 
__ssize_t


	)

37 
	#_G_off_t
 
__off_t


	)

38 
	#_G_off64_t
 
__off64_t


	)

39 
	#_G_pid_t
 
__pid_t


	)

40 
	#_G_uid_t
 
__uid_t


	)

41 
	#_G_wch¨_t
 
wch¨_t


	)

42 
	#_G_wöt_t
 
wöt_t


	)

43 
	#_G_°©64
 
°©64


	)

44 
	~<gc⁄v.h
>

47 
__gc⁄v_öfo
 
	m__cd
;

50 
__gc⁄v_öfo
 
	m__cd
;

51 
__gc⁄v_°ï_d©a
 
	m__d©a
;

52 } 
	m__comböed
;

53 } 
	t_G_ic⁄v_t
;

55 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

57 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

58 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

60 
	#_G_HAVE_BOOL
 1

	)

64 
	#_G_HAVE_ATEXIT
 1

	)

65 
	#_G_HAVE_SYS_CDEFS
 1

	)

66 
	#_G_HAVE_SYS_WAIT
 1

	)

67 
	#_G_NEED_STDARG_H
 1

	)

68 
	#_G_va_li°
 
__gnuc_va_li°


	)

70 
	#_G_HAVE_PRINTF_FP
 1

	)

71 
	#_G_HAVE_MMAP
 1

	)

72 
	#_G_HAVE_MREMAP
 1

	)

73 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

74 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

75 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

77 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

79 
	#_G_OPEN64
 
__›í64


	)

80 
	#_G_LSEEK64
 
__l£ek64


	)

81 
	#_G_MMAP64
 
__mm≠64


	)

82 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

85 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

87 
	#_G_BUFSIZ
 8192

	)

90 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

91 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

92 
	#_G_USING_THUNKS
 1

	)

93 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

94 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

97 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


98 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

100 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/asm/param.h

1 #i‚de‡
_ASMi386_PARAM_H


2 
	#_ASMi386_PARAM_H


	)

4 #ifde‡
__KERNEL__


5 
	#HZ
 1000

	)

6 
	#USER_HZ
 100

	)

7 
	#CLOCKS_PER_SEC
 (
USER_HZ
Ë

	)

10 #i‚de‡
HZ


11 
	#HZ
 100

	)

14 #i‚de‡
USER_HZ


15 
	#USER_HZ
 100

	)

18 
	#EXEC_PAGESIZE
 4096

	)

20 #i‚de‡
NOGROUP


21 
	#NOGROUP
 (-1)

	)

24 
	#MAXHOSTNAMELEN
 64

	)

25 
	#COMMAND_LINE_SIZE
 256

	)

	@/usr/include/asm/ptrace.h

1 #i‚de‡
_I386_PTRACE_H


2 
	#_I386_PTRACE_H


	)

4 
	#EBX
 0

	)

5 
	#ECX
 1

	)

6 
	#EDX
 2

	)

7 
	#ESI
 3

	)

8 
	#EDI
 4

	)

9 
	#EBP
 5

	)

10 
	#EAX
 6

	)

11 
	#DS
 7

	)

12 
	#ES
 8

	)

13 
	#FS
 9

	)

14 
	#GS
 10

	)

15 
	#ORIG_EAX
 11

	)

16 
	#EIP
 12

	)

17 
	#CS
 13

	)

18 
	#EFL
 14

	)

19 
	#UESP
 15

	)

20 
	#SS
 16

	)

21 
	#FRAME_SIZE
 17

	)

26 
	s±_ªgs
 {

27 
	mebx
;

28 
	mecx
;

29 
	medx
;

30 
	mesi
;

31 
	medi
;

32 
	mebp
;

33 
	móx
;

34 
	mxds
;

35 
	mxes
;

36 
	m‹ig_óx
;

37 
	meù
;

38 
	mxcs
;

39 
	meÊags
;

40 
	me•
;

41 
	mxss
;

45 
	#PTRACE_GETREGS
 12

	)

46 
	#PTRACE_SETREGS
 13

	)

47 
	#PTRACE_GETFPREGS
 14

	)

48 
	#PTRACE_SETFPREGS
 15

	)

49 
	#PTRACE_GETFPXREGS
 18

	)

50 
	#PTRACE_SETFPXREGS
 19

	)

52 
	#PTRACE_OLDSETOPTIONS
 21

	)

54 
	#PTRACE_GET_THREAD_AREA
 25

	)

55 
	#PTRACE_SET_THREAD_AREA
 26

	)

57 #ifde‡
__KERNEL__


58 
	gèsk_°ru˘
;

59 
£nd_sigå≠
(
èsk_°ru˘
 *
tsk
, 
±_ªgs
 *
ªgs
, 
îr‹_code
);

60 
	#u£r_mode
(
ªgs
Ë((
VM_MASK
 & (ªgs)->
eÊags
Ë|| (3 & (ªgs)->
xcs
))

	)

61 
	#ö°ru˘i⁄_poöãr
(
ªgs
Ë(‘egs)->
eù
)

	)

62 #i‡
deföed
(
CONFIG_SMP
Ë&& deföed(
CONFIG_FRAME_POINTER
)

63 
¥ofûe_pc
(
±_ªgs
 *
ªgs
);

65 
	#¥ofûe_pc
(
ªgs
Ë
	`ö°ru˘i⁄_poöãr
‘egs)

	)

	@/usr/include/asm/sigcontext.h

1 #i‚de‡
_ASMi386_SIGCONTEXT_H


2 
	#_ASMi386_SIGCONTEXT_H


	)

4 
	~<löux/compûî.h
>

20 
	s_Âªg
 {

21 
	msignifiˇnd
[4];

22 
	mexp⁄ít
;

25 
	s_Âxªg
 {

26 
	msignifiˇnd
[4];

27 
	mexp⁄ít
;

28 
	m∑ddög
[3];

31 
	s_xmmªg
 {

32 
	mñemít
[4];

35 
	s_Â°©e
 {

37 
	mcw
;

38 
	msw
;

39 
	mèg
;

40 
	mùoff
;

41 
	mcs£l
;

42 
	md©aoff
;

43 
	md©a£l
;

44 
_Âªg
 
	m_°
[8];

45 
	m°©us
;

46 
	mmagic
;

49 
	m_fx§_ív
[6];

50 
	mmxc§
;

51 
	mª£rved
;

52 
_Âxªg
 
	m_fx§_°
[8];

53 
_xmmªg
 
	m_xmm
[8];

54 
	m∑ddög
[56];

57 
	#X86_FXSR_MAGIC
 0x0000

	)

59 
	ssigc⁄ãxt
 {

60 
	mgs
, 
	m__gsh
;

61 
	mfs
, 
	m__fsh
;

62 
	mes
, 
	m__esh
;

63 
	mds
, 
	m__dsh
;

64 
	medi
;

65 
	mesi
;

66 
	mebp
;

67 
	me•
;

68 
	mebx
;

69 
	medx
;

70 
	mecx
;

71 
	móx
;

72 
	må≠no
;

73 
	mîr
;

74 
	meù
;

75 
	mcs
, 
	m__csh
;

76 
	meÊags
;

77 
	me•_©_sig«l
;

78 
	mss
, 
	m__ssh
;

79 
_Â°©e
 
__u£r
 * 
	mÂ°©e
;

80 
	mﬁdmask
;

81 
	m¸2
;

	@/usr/include/asm/socket.h

1 #i‚de‡
_ASM_SOCKET_H


2 
	#_ASM_SOCKET_H


	)

4 
	~<asm/sockios.h
>

7 
	#SOL_SOCKET
 1

	)

9 
	#SO_DEBUG
 1

	)

10 
	#SO_REUSEADDR
 2

	)

11 
	#SO_TYPE
 3

	)

12 
	#SO_ERROR
 4

	)

13 
	#SO_DONTROUTE
 5

	)

14 
	#SO_BROADCAST
 6

	)

15 
	#SO_SNDBUF
 7

	)

16 
	#SO_RCVBUF
 8

	)

17 
	#SO_KEEPALIVE
 9

	)

18 
	#SO_OOBINLINE
 10

	)

19 
	#SO_NO_CHECK
 11

	)

20 
	#SO_PRIORITY
 12

	)

21 
	#SO_LINGER
 13

	)

22 
	#SO_BSDCOMPAT
 14

	)

24 
	#SO_PASSCRED
 16

	)

25 
	#SO_PEERCRED
 17

	)

26 
	#SO_RCVLOWAT
 18

	)

27 
	#SO_SNDLOWAT
 19

	)

28 
	#SO_RCVTIMEO
 20

	)

29 
	#SO_SNDTIMEO
 21

	)

32 
	#SO_SECURITY_AUTHENTICATION
 22

	)

33 
	#SO_SECURITY_ENCRYPTION_TRANSPORT
 23

	)

34 
	#SO_SECURITY_ENCRYPTION_NETWORK
 24

	)

36 
	#SO_BINDTODEVICE
 25

	)

39 
	#SO_ATTACH_FILTER
 26

	)

40 
	#SO_DETACH_FILTER
 27

	)

42 
	#SO_PEERNAME
 28

	)

43 
	#SO_TIMESTAMP
 29

	)

44 
	#SCM_TIMESTAMP
 
SO_TIMESTAMP


	)

46 
	#SO_ACCEPTCONN
 30

	)

48 
	#SO_PEERSEC
 31

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/local_lim.h

25 #i‚de‡
NR_OPEN


26 
	#__undef_NR_OPEN


	)

28 #i‚de‡
LINK_MAX


29 
	#__undef_LINK_MAX


	)

31 #i‚de‡
OPEN_MAX


32 
	#__undef_OPEN_MAX


	)

36 
	~<löux/limôs.h
>

39 #ifde‡
__undef_NR_OPEN


40 #unde‡
NR_OPEN


41 #unde‡
__undef_NR_OPEN


44 #ifde‡
__undef_LINK_MAX


45 #unde‡
LINK_MAX


46 #unde‡
__undef_LINK_MAX


49 #ifde‡
__undef_OPEN_MAX


50 #unde‡
OPEN_MAX


51 #unde‡
__undef_OPEN_MAX


55 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

57 
	#PTHREAD_KEYS_MAX
 1024

	)

60 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

62 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

65 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

67 
	#PTHREAD_THREADS_MAX
 16384

	)

71 
	#AIO_PRIO_DELTA_MAX
 20

	)

74 
	#PTHREAD_STACK_MIN
 16384

	)

77 
	#TIMER_MAX
 256

	)

80 
	#DELAYTIMER_MAX
 2147483647

	)

83 
	#TTY_NAME_MAX
 32

	)

86 
	#LOGIN_NAME_MAX
 256

	)

89 
	#HOST_NAME_MAX
 64

	)

92 
	#MQ_PRIO_MAX
 32768

	)

	@/usr/include/bits/sched.h

21 #i‚de‡
__√ed_sched∑øm


23 #i‚de‡
_SCHED_H


29 
	#SCHED_OTHER
 0

	)

30 
	#SCHED_FIFO
 1

	)

31 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_MISC


35 
	#CSIGNAL
 0x000000f‡

	)

36 
	#CLONE_VM
 0x00000100

	)

37 
	#CLONE_FS
 0x00000200

	)

38 
	#CLONE_FILES
 0x00000400

	)

39 
	#CLONE_SIGHAND
 0x00000800

	)

40 
	#CLONE_PTRACE
 0x00002000

	)

41 
	#CLONE_VFORK
 0x00004000

	)

43 
	#CLONE_PARENT
 0x00008000

	)

45 
	#CLONE_THREAD
 0x00010000

	)

46 
	#CLONE_NEWNS
 0x00020000

	)

47 
	#CLONE_SYSVSEM
 0x00040000

	)

48 
	#CLONE_SETTLS
 0x00080000

	)

49 
	#CLONE_PARENT_SETTID
 0x00100000

	)

51 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

53 
	#CLONE_DETACHED
 0x00400000

	)

54 
	#CLONE_UNTRACED
 0x00800000

	)

56 
	#CLONE_CHILD_SETTID
 0x01000000

	)

58 
	#CLONE_STOPPED
 0x02000000

	)

62 
	ssched_∑øm


64 
	m__sched_¥i‹ôy
;

67 
	g__BEGIN_DECLS


70 #ifde‡
__USE_MISC


71 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

72 
__Êags
, *
__¨g
Ë
__THROW
;

75 
__END_DECLS


79 #i‡!
deföed
 
__deföed_sched∑øm
 \

80 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

81 
	#__deföed_sched∑øm
 1

	)

83 
	s__sched_∑øm


85 
__sched_¥i‹ôy
;

87 #unde‡
__√ed_sched∑øm


91 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


92 
	#__˝u_£t_t_deföed


	)

94 
	#__CPU_SETSIZE
 1024

	)

95 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

98 
	t__˝u_mask
;

101 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

102 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

107 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

108 } 
	t˝u_£t_t
;

111 
	#__CPU_ZERO
(
˝u£ç
) \

113 
__i
; \

114 
˝u_£t_t
 *
__¨r
 = (
˝u£ç
); \

115 
__i
 = 0; __ò<  (
˝u_£t_t
Ë/  (
__˝u_mask
); ++__i) \

116 
__¨r
->
__bôs
[
__i
] = 0; \

117 
	}
} 0)

	)

118 
	#__CPU_SET
(
˝u
, 
˝u£ç
) \

119 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] |
	`__CPUMASK
 (˝u))

	)

120 
	#__CPU_CLR
(
˝u
, 
˝u£ç
) \

121 ((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] &~
	`__CPUMASK
 (˝u))

	)

122 
	#__CPU_ISSET
(
˝u
, 
˝u£ç
) \

123 (((
˝u£ç
)->
__bôs
[
	`__CPUELT
 (
˝u
)] & 
	`__CPUMASK
 (˝u)Ë!0)

	)

	@/usr/include/bits/sockaddr.h

24 #i‚de‡
_BITS_SOCKADDR_H


25 
	#_BITS_SOCKADDR_H
 1

	)

29 
	tß_Ámûy_t
;

35 
	#__SOCKADDR_COMMON
(
ß_¥efix
) \

36 
ß_Ámûy_t
 
ß_¥efix
##
Ámûy


	)

38 
	#__SOCKADDR_COMMON_SIZE
 ( ())

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

25 
	$__libc_lock_deföe_ªcursive
 (, 
_IO_lock_t
)

28 #ifde‡
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


29 
	t_IO_lock_öôülizî
 
	t_LIBC_LOCK_RECURSIVE_INITIALIZER


	)

30 #ñi‡
	t_IO_MTSAFE_IO


31 #îr‹ 
	tlibio
 
	t√eds
 
	tªcursive
 
	tmuãxes
 
	t_IO_MTSAFE_IO


34 
	t_IO_lock_öô
(
	t_«me
Ë
	t__libc_lock_öô_ªcursive
 (_«me)

	)

35 
	t_IO_lock_föi
(
	t_«me
Ë
	t__libc_lock_föi_ªcursive
 (_«me)

	)

36 
	t_IO_lock_lock
(
	t_«me
Ë
	t__libc_lock_lock_ªcursive
 (_«me)

	)

37 
	t_IO_lock_åylock
(
	t_«me
Ë
	t__libc_lock_åylock_ªcursive
 (_«me)

	)

38 
	t_IO_lock_u∆ock
(
	t_«me
Ë
	t__libc_lock_u∆ock_ªcursive
 (_«me)

	)

41 
	t_IO_˛ónup_ªgi⁄_°¨t
(
	t_f˘
, 
	t_Â
) \

42 
	t__libc_˛ónup_ªgi⁄_°¨t
 (((
	t_Â
)->
	t_Êags
 & 
	t_IO_USER_LOCK
Ë=0, 
	t_f˘
, _Â)

	)

43 
	t_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
	t_f˘
) \

44 
	t__libc_˛ónup_ªgi⁄_°¨t
 (1, 
	t_f˘
, 
	tNULL
)

	)

45 
	t_IO_˛ónup_ªgi⁄_íd
(
	t_doô
) \

46 
	t__libc_˛ónup_ªgi⁄_íd
 (
	t_doô
)

	)

48 #i‡
	tdeföed
 
	t_LIBC
 && !deföed 
	tNOT_IN_libc


49 
	t_IO_acquúe_lock
(
	t_Â
) \

50 
	t_IO_˛ónup_ªgi⁄_°¨t
 (((*Ë(*)Ë
	t_IO_fu∆ockfûe
, (
	t_Â
)); \

51 
	`_IO_Êockfûe
 (
_Â
)

	)

53 
	#_IO_ªÀa£_lock
(
_Â
) \

54 
	`_IO_fu∆ockfûe
 (
_Â
); \

55 
	`_IO_˛ónup_ªgi⁄_íd
 (0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 
__S32_TYPE


	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/uio.h

19 #i‚de‡
_SYS_UIO_H


24 
	~<sys/ty≥s.h
>

38 
	#UIO_MAXIOV
 1024

	)

42 
	siovec


44 *
	miov_ba£
;

45 
size_t
 
	miov_Àn
;

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

23 
	#__WCHAR_MIN
 (-2147483647»- 1l)

	)

24 
	#__WCHAR_MAX
 (2147483647l)

	)

	@/usr/include/gnu/stubs.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_lutimes


	)

20 
	#__°ub_ªvoke


	)

21 
	#__°ub_£éogö


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/compiler.h

1 #i‚de‡
__LINUX_COMPILER_H


2 
	#__LINUX_COMPILER_H


	)

4 #i‚de‡
__ASSEMBLY__


6 #ifde‡
__CHECKER__


7 
	#__u£r
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(1)))

	)

8 
	#__kî√l


	)

9 
	#__ß„
 
	`__©åibuã__
((
ß„
))

	)

10 
	#__f‹˚
 
	`__©åibuã__
((
f‹˚
))

	)

11 
	#__iomem
 
	`__©åibuã__
((
nodîef
, 
	`addªss_•a˚
(2)))

	)

12 
	#__acquúes
(
x
Ë
	`__©åibuã__
((
	`c⁄ãxt
(0,1)))

	)

13 
	#__ªÀa£s
(
x
Ë
	`__©åibuã__
((
	`c⁄ãxt
(1,0)))

	)

14 
	#__acquúe
(
x
Ë
	`__c⁄ãxt__
(1)

	)

15 
	#__ªÀa£
(
x
Ë
	`__c⁄ãxt__
(-1)

	)

16 
	#__c⁄d_lock
(
x
Ë((xË? ({ 
	`__c⁄ãxt__
(1); 1; }Ë: 0)

	)

17 
__chk_u£r_±r
(
__u£r
 *);

18 
__chk_io_±r
(
__iomem
 *);

20 
	#__u£r


	)

21 
	#__kî√l


	)

22 
	#__ß„


	)

23 
	#__f‹˚


	)

24 
	#__iomem


	)

25 
	#__chk_u£r_±r
(
x
Ë()0

	)

26 
	#__chk_io_±r
(
x
Ë()0

	)

27 
	#__buûtö_w¨nög
(
x
, 
y
...Ë(1)

	)

28 
	#__acquúes
(
x
)

	)

29 
	#__ªÀa£s
(
x
)

	)

30 
	#__acquúe
(
x
Ë()0

	)

31 
	#__ªÀa£
(
x
Ë()0

	)

32 
	#__c⁄d_lock
(
x
Ë(x)

	)

35 #i‡(
__GNUC__
 > 3Ë|| (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)

36 
	#ölöe
 
__ölöe__


	)

37 
	#__ölöe__
 
__ölöe__


	)

38 
	#__ölöe
 
__ölöe__


	)

39 #i‚de‡
asm


40 
	#asm
 
__asm__


	)

43 vﬁ©ûê
__vﬁ©ûe__


	)

47 #ifde‡
__KERNEL__


48 #i‡
__GNUC__
 > 3

49 
	~<löux/compûî-gcc+.h
>

50 #ñi‡
__GNUC__
 == 3

51 
	~<löux/compûî-gcc3.h
>

52 #ñi‡
__GNUC__
 == 2

53 
	~<löux/compûî-gcc2.h
>

55 #îr‹ 
S‹ry
, 
your
 
compûî
 
is
 
too
 
ﬁd
/
nŸ
 
ªcognized
.

62 #ifde‡
__INTEL_COMPILER


63 
	~<löux/compûî-öãl.h
>

72 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

73 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

76 #i‚de‡
b¨rõr


77 #ifde‡
mb


78 
	#b¨rõr
(Ë
	`mb
()

	)

80 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("" : : : "mem‹y")

	)

84 #i‚de‡
RELOC_HIDE


85 
	#RELOC_HIDE
(
±r
, 
off
) \

86 ({ 
__±r
; \

87 
__±r
 = (Ë(
±r
); \

88 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

99 #i‚de‡
__dïªˇãd


100 
	#__dïªˇãd


	)

103 #i‚de‡
__mu°_check


104 
	#__mu°_check


	)

118 #i‚de‡
__©åibuã_u£d__


119 
	#__©åibuã_u£d__


	)

132 #i‚de‡
__©åibuã_puª__


133 
	#__©åibuã_puª__


	)

150 #i‚de‡
__©åibuã_c⁄°__


151 
	#__©åibuã_c⁄°__


	)

154 #i‚de‡
__Æways_ölöe


155 
	#__Æways_ölöe
 
ölöe


	)

158 #ifde‡
__˝lu•lus


159 
	#__ˇ°__
(
_to
Ë(_to)

	)

161 
	#__ˇ°__
(
_to
)

	)

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

6 #ifde‡
__KERNEL__


9 
	#ERESTARTSYS
 512

	)

10 
	#ERESTARTNOINTR
 513

	)

11 
	#ERESTARTNOHAND
 514

	)

12 
	#ENOIOCTLCMD
 515

	)

13 
	#ERESTART_RESTARTBLOCK
 516

	)

16 
	#EBADHANDLE
 521

	)

17 
	#ENOTSYNC
 522

	)

18 
	#EBADCOOKIE
 523

	)

19 
	#ENOTSUPP
 524

	)

20 
	#ETOOSMALL
 525

	)

21 
	#ESERVERFAULT
 526

	)

22 
	#EBADTYPE
 527

	)

23 
	#EJUKEBOX
 528

	)

24 
	#EIOCBQUEUED
 529

	)

25 
	#EIOCBRETRY
 530

	)

	@/usr/include/linux/linkage.h

1 #i‚de‡
_LINUX_LINKAGE_H


2 
	#_LINUX_LINKAGE_H


	)

4 
	~<löux/c⁄fig.h
>

5 
	~<asm/lökage.h
>

7 #ifde‡
__˝lu•lus


8 
	#CPP_ASMLINKAGE
 "C"

	)

10 
	#CPP_ASMLINKAGE


	)

13 #i‚de‡
asmlökage


14 
	#asmlökage
 
CPP_ASMLINKAGE


	)

17 #i‚de‡
¥evít_èû_ˇŒ


18 
	#¥evít_èû_ˇŒ
(
ªt
Ëdÿ{ } 0)

	)

21 #i‚de‡
__ALIGN


22 
	#__ALIGN
 .
Æign
 4,0x90

	)

23 
	#__ALIGN_STR
 ".Æig¿4,0x90"

	)

26 #ifde‡
__ASSEMBLY__


28 
	#ALIGN
 
__ALIGN


	)

29 
	#ALIGN_STR
 
__ALIGN_STR


	)

31 
	#ENTRY
(
«me
) \

32 .
globl
 
«me
; \

33 
ALIGN
; \

34 
«me
:

	)

38 
	#NORET_TYPE


	)

39 
	#ATTRIB_NORET
 
	`__©åibuã__
((
n‹ëu∫
))

	)

40 
	#NORET_AND
 
n‹ëu∫
,

	)

42 #i‚de‡
FASTCALL


43 
	#FASTCALL
(
x
Ë
	)
x

44 
	#Á°ˇŒ


	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 #ifdef 
__KERNEL__


5 
	~<löux/c⁄fig.h
>

7 
	#BITS_TO_LONGS
(
bôs
) \

8 (((
bôs
)+
BITS_PER_LONG
-1)/BITS_PER_LONG)

	)

9 
	#DECLARE_BITMAP
(
«me
,
bôs
) \

10 
«me
[
	`BITS_TO_LONGS
(
bôs
)]

	)

13 
	~<löux/posix_ty≥s.h
>

14 
	~<asm/posix_ty≥s.h
>

15 
	~<asm/ty≥s.h
>

17 #i‚de‡
__KERNEL_STRICT_NAMES


19 
__u32
 
	t__kî√l_dev_t
;

21 #i‚de‡
_SYS_SELECT_H


22 
__kî√l_fd_£t
 
	tfd_£t
;

24 #i‚de‡
__dev_t_deföed


25 
__kî√l_dev_t
 
	tdev_t
;

27 #i‚de‡
__öo_t_deföed


28 
__kî√l_öo_t
 
	töo_t
;

30 #i‚de‡
__mode_t_deföed


31 
__kî√l_mode_t
 
	tmode_t
;

33 #i‚de‡
__∆ök_t_deföed


34 
__kî√l_∆ök_t
 
	t∆ök_t
;

36 #i‚de‡
__off_t_deföed


37 
__kî√l_off_t
 
	toff_t
;

39 
__kî√l_pid_t
 
	tpid_t
;

40 
__kî√l_daddr_t
 
	tdaddr_t
;

41 
__kî√l_key_t
 
	tkey_t
;

42 
__kî√l_su£c⁄ds_t
 
	tsu£c⁄ds_t
;

43 
__kî√l_timî_t
 
	ttimî_t
;

44 
__kî√l_˛ockid_t
 
	t˛ockid_t
;

45 
__kî√l_mqd_t
 
	tmqd_t
;

47 #ifde‡
__KERNEL__


48 
__kî√l_uid32_t
 
	tuid_t
;

49 
	#__uid_t_deföed


	)

50 
__kî√l_gid32_t
 
	tgid_t
;

51 
	#__gid_t_deföed


	)

52 
__kî√l_uid16_t
 
	tuid16_t
;

53 
__kî√l_gid16_t
 
	tgid16_t
;

55 #ifde‡
CONFIG_UID16


57 
__kî√l_ﬁd_uid_t
 
	tﬁd_uid_t
;

58 
__kî√l_ﬁd_gid_t
 
	tﬁd_gid_t
;

65 
__kî√l_uid_t
 
	tuid_t
;

66 
	#__uid_t_deföed


	)

67 
__kî√l_gid_t
 
	tgid_t
;

68 
	#__gid_t_deföed


	)

71 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

72 
__kî√l_loff_t
 
	tloff_t
;

79 #i‚de‡
_SIZE_T


80 
	#_SIZE_T


	)

81 
__kî√l_size_t
 
	tsize_t
;

84 #i‚de‡
_SSIZE_T


85 
	#_SSIZE_T


	)

86 
__kî√l_ssize_t
 
	tssize_t
;

89 #i‚de‡
_PTRDIFF_T


90 
	#_PTRDIFF_T


	)

91 
__kî√l_±rdiff_t
 
	t±rdiff_t
;

94 #i‚de‡
_TIME_T


95 
	#_TIME_T


	)

96 
__kî√l_time_t
 
	ttime_t
;

99 #i‚de‡
_CLOCK_T


100 
	#_CLOCK_T


	)

101 
__kî√l_˛ock_t
 
	t˛ock_t
;

104 #i‚de‡
_CADDR_T


105 
	#_CADDR_T


	)

106 
__kî√l_ˇddr_t
 
	tˇddr_t
;

110 
	tu_ch¨
;

111 
	tu_sh‹t
;

112 
	tu_öt
;

113 
	tu_l⁄g
;

116 
	tunch¨
;

117 
	tush‹t
;

118 
	tuöt
;

119 
	tul⁄g
;

121 #i‚de‡
__BIT_TYPES_DEFINED__


122 
	#__BIT_TYPES_DEFINED__


	)

124 
__u8
 
	tu_öt8_t
;

125 
__s8
 
	töt8_t
;

126 
__u16
 
	tu_öt16_t
;

127 
__s16
 
	töt16_t
;

128 
__u32
 
	tu_öt32_t
;

129 
__s32
 
	töt32_t
;

133 
__u8
 
	tuöt8_t
;

134 
__u16
 
	tuöt16_t
;

135 
__u32
 
	tuöt32_t
;

137 #i‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

138 
__u64
 
	tuöt64_t
;

139 
__u64
 
	tu_öt64_t
;

140 
__s64
 
	töt64_t
;

148 #i‚de‡
HAVE_SECTOR_T


149 
	t£˘‹_t
;

153 
	~<time.h
>

160 #i‚de‡
pgoff_t


161 
	#pgoff_t
 

	)

169 #ifde‡
__CHECKER__


170 
	#__bôwi£
 
	`__©åibuã__
((
bôwi£
))

	)

172 
	#__bôwi£


	)

175 
__u16
 
	t__bôwi£
 
	t__À16
;

176 
__u16
 
	t__bôwi£
 
	t__be16
;

177 
__u32
 
	t__bôwi£
 
	t__À32
;

178 
__u32
 
	t__bôwi£
 
	t__be32
;

179 
__u64
 
	t__bôwi£
 
	t__À64
;

180 
__u64
 
	t__bôwi£
 
	t__be64
;

182 #i‚de‡
_SYS_TYPES_H


183 
	su°©
 {

184 
__kî√l_daddr_t
 
	mf_t‰ì
;

185 
__kî√l_öo_t
 
	mf_töode
;

186 
	mf_‚ame
[6];

187 
	mf_Âack
[6];

	@/usr/include/sys/cdefs.h

19 #i‚def 
_SYS_CDEFS_H


20 
	#_SYS_CDEFS_H
 1

	)

23 #i‚de‡
_FEATURES_H


24 
	~<„©uªs.h
>

30 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


35 #unde‡
__P


36 #unde‡
__PMT


38 #ifde‡
__GNUC__


45 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

46 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

47 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

49 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

50 
	#__THROW
 
	`throw
 ()

	)

51 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

53 
	#__THROW


	)

54 
	#__NTH
(
f˘
Ë
	)
fct

60 
	#__ölöe


	)

62 
	#__THROW


	)

63 
	#__NTH
(
f˘
Ë
	)
fct

65 
	#__c⁄°
 c⁄°

	)

66 
	#__sig√d
 sig√d

	)

67 
	#__vﬁ©ûe
 vﬁ©ûe

	)

73 
	#__P
(
¨gs
Ë
	)
args

74 
	#__PMT
(
¨gs
Ë
	)
args

79 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

80 
	#__STRING
(
x
Ë#x

	)

83 
	#__±r_t
 *

	)

84 
	#__l⁄g_doubÀ_t
 

	)

88 #ifdef 
__˝lu•lus


89 
	#__BEGIN_DECLS
 "C" {

	)

90 
	#__END_DECLS
 }

	)

92 
	#__BEGIN_DECLS


	)

93 
	#__END_DECLS


	)

102 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


103 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

104 
	#__END_NAMESPACE_STD
 }

	)

105 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

106 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

107 
	#__END_NAMESPACE_C99
 }

	)

108 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

113 
	#__BEGIN_NAMESPACE_STD


	)

114 
	#__END_NAMESPACE_STD


	)

115 
	#__USING_NAMESPACE_STD
(
«me
)

	)

116 
	#__BEGIN_NAMESPACE_C99


	)

117 
	#__END_NAMESPACE_C99


	)

118 
	#__USING_NAMESPACE_C99
(
«me
)

	)

123 #i‚de‡
__BOUNDED_POINTERS__


124 
	#__bounded


	)

125 
	#__unbounded


	)

126 
	#__±rvÆue


	)

131 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

132 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

136 #i‡
__GNUC_PREREQ
 (2,97)

138 
	#__Êex¨r
 []

	)

140 #ifde‡
__GNUC__


141 
	#__Êex¨r
 [0]

	)

143 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

144 
	#__Êex¨r
 []

	)

147 
	#__Êex¨r
 [1]

	)

163 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

165 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

166 #ifde‡
__˝lu•lus


167 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

168 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

170 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

171 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

173 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

174 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

187 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

188 
	#__©åibuã__
(
xyz
Ë

	)

194 #i‡
__GNUC_PREREQ
 (2,96)

195 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

197 
	#__©åibuã_mÆloc__


	)

203 #i‡
__GNUC_PREREQ
 (2,96)

204 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

206 
	#__©åibuã_puª__


	)

212 #i‡
__GNUC_PREREQ
 (3,1)

213 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

214 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

216 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

217 
	#__©åibuã_noölöe__


	)

221 #i‡
__GNUC_PREREQ
 (3,2)

222 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

224 
	#__©åibuã_dïªˇãd__


	)

233 #i‡
__GNUC_PREREQ
 (2,8)

234 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

236 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

243 #i‡
__GNUC_PREREQ
 (2,97)

244 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

245 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

247 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

252 #i‡
__GNUC_PREREQ
 (3,3)

253 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

255 
	#__n⁄nuŒ
(
∑øms
)

	)

262 #i‡!
__GNUC_PREREQ
 (2,8)

263 
	#__exãnsi⁄__


	)

267 #i‡!
__GNUC_PREREQ
 (2,92)

268 
	#__ª°ri˘


	)

274 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


275 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

277 #ifde‡
__GNUC__


278 
	#__ª°ri˘_¨r


	)

280 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

281 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

284 
	#__ª°ri˘_¨r


	)

	@/usr/include/asm/errno.h

1 #i‚de‡
_I386_ERRNO_H


2 
	#_I386_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/linkage.h

1 #i‚de‡
__ASM_LINKAGE_H


2 
	#__ASM_LINKAGE_H


	)

4 
	#asmlökage
 
CPP_ASMLINKAGE
 
	`__©åibuã__
((
	`ªg∑rm
(0)))

	)

5 
	#FASTCALL
(
x
Ëx 
	`__©åibuã__
((
	`ªg∑rm
(3)))

	)

6 
	#Á°ˇŒ
 
	`__©åibuã__
((
	`ªg∑rm
(3)))

	)

8 #ifde‡
CONFIG_REGPARM


9 
	#¥evít_èû_ˇŒ
(
ªt
Ë
	`__asm__
 ("" : "Ù" (ªtË: "0" (ªt))

	)

12 #ifde‡
CONFIG_X86_ALIGNMENT_16


13 
	#__ALIGN
 .
Æign
 16,0x90

	)

14 
	#__ALIGN_STR
 ".Æig¿16,0x90"

	)

	@/usr/include/asm/posix_types.h

1 #i‚de‡
__ARCH_I386_POSIX_TYPES_H


2 
	#__ARCH_I386_POSIX_TYPES_H


	)

10 
	t__kî√l_öo_t
;

11 
	t__kî√l_mode_t
;

12 
	t__kî√l_∆ök_t
;

13 
	t__kî√l_off_t
;

14 
	t__kî√l_pid_t
;

15 
	t__kî√l_ùc_pid_t
;

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	t__kî√l_size_t
;

19 
	t__kî√l_ssize_t
;

20 
	t__kî√l_±rdiff_t
;

21 
	t__kî√l_time_t
;

22 
	t__kî√l_su£c⁄ds_t
;

23 
	t__kî√l_˛ock_t
;

24 
	t__kî√l_timî_t
;

25 
	t__kî√l_˛ockid_t
;

26 
	t__kî√l_daddr_t
;

27 * 
	t__kî√l_ˇddr_t
;

28 
	t__kî√l_uid16_t
;

29 
	t__kî√l_gid16_t
;

30 
	t__kî√l_uid32_t
;

31 
	t__kî√l_gid32_t
;

33 
	t__kî√l_ﬁd_uid_t
;

34 
	t__kî√l_ﬁd_gid_t
;

35 
	t__kî√l_ﬁd_dev_t
;

37 #ifde‡
__GNUC__


38 
	t__kî√l_loff_t
;

42 #i‡
deföed
(
__KERNEL__
Ë|| deföed(
__USE_ALL
)

43 
	mvÆ
[2];

45 
	m__vÆ
[2];

47 } 
	t__kî√l_fsid_t
;

49 #i‡
deföed
(
__KERNEL__
Ë|| !deföed(
__GLIBC__
) || (__GLIBC__ < 2)

51 #unde‡
__FD_SET


52 
	#__FD_SET
(
fd
,
fd£ç
) \

53 
__asm__
 
	`__vﬁ©ûe__
("btsl %1,%0": \

54 "=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

56 #unde‡
__FD_CLR


57 
	#__FD_CLR
(
fd
,
fd£ç
) \

58 
__asm__
 
	`__vﬁ©ûe__
("btrl %1,%0": \

59 "=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)):"r" ((Ë(
fd
)))

	)

61 #unde‡
__FD_ISSET


62 
	#__FD_ISSET
(
fd
,
fd£ç
Ë(
	`__exãnsi⁄__
 ({ \

63 
__ªsu…
; \

64 
__asm__
 
	`__vﬁ©ûe__
("btl %1,%2 ; setb %0" \

65 :"=q" (
__ªsu…
Ë:"r" ((Ë(
fd
)), \

66 "m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
))); \

67 
__ªsu…
; }))

	)

69 #unde‡
__FD_ZERO


70 
	#__FD_ZERO
(
fd£ç
) \

72 
__d0
, 
__d1
; \

73 
__asm__
 
	`__vﬁ©ûe__
("cld ;Ñep ; stosl" \

74 :"=m" (*(
__kî√l_fd_£t
 *Ë(
fd£ç
)), \

75 "=&c" (
__d0
), "=&D" (
__d1
) \

76 :"a" (0), "1" (
__FDSET_LONGS
), \

77 "2" ((
__kî√l_fd_£t
 *Ë(
fd£ç
)) : "memory"); \

78 } 0)

	)

	@/usr/include/asm/sockios.h

1 #i‚de‡
__ARCH_I386_SOCKIOS__


2 
	#__ARCH_I386_SOCKIOS__


	)

5 
	#FIOSETOWN
 0x8901

	)

6 
	#SIOCSPGRP
 0x8902

	)

7 
	#FIOGETOWN
 0x8903

	)

8 
	#SIOCGPGRP
 0x8904

	)

9 
	#SIOCATMARK
 0x8905

	)

10 
	#SIOCGSTAMP
 0x8906

	)

	@/usr/include/asm/types.h

1 #i‚de‡
_I386_TYPES_H


2 
	#_I386_TYPES_H


	)

4 #i‚de‡
__ASSEMBLY__


6 
	tumode_t
;

13 
__sig√d__
 
	t__s8
;

14 
	t__u8
;

16 
__sig√d__
 
	t__s16
;

17 
	t__u16
;

19 
__sig√d__
 
	t__s32
;

20 
	t__u32
;

22 #i‚de‡
__GNUC__


23 #i‚de‡
__exãnsi⁄__


24 
	#__exãnsi⁄__


	)

28 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

29 
__exãnsi⁄__
 
	t__u64
;

36 #ifde‡
__KERNEL__


38 
	#BITS_PER_LONG
 32

	)

40 #i‚de‡
__ASSEMBLY__


42 
	~<löux/c⁄fig.h
>

44 sig√d 
	ts8
;

45 
	tu8
;

47 sig√d 
	ts16
;

48 
	tu16
;

50 sig√d 
	ts32
;

51 
	tu32
;

53 sig√d 
	ts64
;

54 
	tu64
;

58 #ifde‡
CONFIG_HIGHMEM64G


59 
u64
 
	tdma_addr_t
;

61 
u32
 
	tdma_addr_t
;

63 
u64
 
	tdma64_addr_t
;

65 #ifde‡
CONFIG_LBD


66 
u64
 
	t£˘‹_t
;

67 
	#HAVE_SECTOR_T


	)

70 
	tkmem_buf˘l_t
;

	@/usr/include/bits/libc-lock.h

21 #i‚de‡
_BITS_LIBC_LOCK_H


22 
	#_BITS_LIBC_LOCK_H
 1

	)

24 
	~<±hªad.h
>

26 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


27 
	~<löuxthªads/öã∫Æs.h
>

31 #i‡
deföed
(
_LIBC
Ë|| deföed(
_IO_MTSAFE_IO
)

32 
±hªad_muãx_t
 
	t__libc_lock_t
;

33 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

34 #ifde‡
__USE_UNIX98


35 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

37 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

39 
__libc_lock_ªcursive_t
 
	t__πld_lock_ªcursive_t
;

41 
__libc_lock_›aque__
 
	t__libc_lock_t
;

42 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

43 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

47 
±hªad_key_t
 
	t__libc_key_t
;

56 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

57 
CLASS
 
__libc_lock_t
 
NAME
;

	)

58 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

59 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

60 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

62 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

63 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

74 #i‡
__LT_SPINLOCK_INIT
 == 0

75 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_lock_t
 
NAME
;

	)

78 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

79 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

82 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

83 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

87 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

88 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

89 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

90 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

92 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

93 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

94 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

95 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

97 #i‡
deföed
 
_LIBC
 && deföed 
IS_IN_lib±hªad


98 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
ËFUNC 
	)
ARGS

100 #i‡
deföed
 
__PIC__
 || (deföed 
_LIBC
 && deföed 
SHARED
)

101 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

102 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

103 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

105 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

106 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

109 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


110 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
) \

111 ({
	`__buûtö_ex≥˘
 (
__libc_±hªad_fun˘i⁄s
.
±r_
##
FUNC
 !
NULL
, 0) \

112 ? 
__libc_±hªad_fun˘i⁄s
.
±r_
##
FUNC
 
ARGS
 : 
ELSE
; })

	)

114 
	#__libc_maybe_ˇŒ2
(
FUNC
, 
ARGS
, 
ELSE
Ë
	`__libc_maybe_ˇŒ
 (
__
##FUNC, ARGS, ELSE)

	)

119 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


120 
	#__libc_lock_öô
(
NAME
) \

122 (
NAME
).
__m_cou¡
 = 0; \

123 (
NAME
).
__m_ow√r
 = 
NULL
; \

124 (
NAME
).
__m_köd
 = 
PTHREAD_MUTEX_TIMED_NP
; \

125 (
NAME
).
__m_lock
.
__°©us
 = 0; \

126 (
NAME
).
__m_lock
.
__•ölock
 = 
__LT_SPINLOCK_INIT
; \

127 0; })

	)

129 
	#__libc_lock_öô
(
NAME
) \

130 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0))

	)

132 
	#__libc_rwlock_öô
(
NAME
) \

133 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0));

	)

136 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc
 && deföed 
SHARED


137 
	#__libc_lock_öô_ªcursive
(
NAME
) \

139 (
NAME
).
muãx
.
__m_cou¡
 = 0; \

140 (
NAME
).
muãx
.
__m_ow√r
 = 
NULL
; \

141 (
NAME
).
muãx
.
__m_köd
 = 
PTHREAD_MUTEX_RECURSIVE_NP
; \

142 (
NAME
).
muãx
.
__m_lock
.
__°©us
 = 0; \

143 (
NAME
).
muãx
.
__m_lock
.
__•ölock
 = 
__LT_SPINLOCK_INIT
; \

144 0; })

	)

146 
	#__libc_lock_öô_ªcursive
(
NAME
) \

148 i‡(
__±hªad_muãx_öô
 !
NULL
) \

150 
±hªad_muãx©å_t
 
__©å
; \

151 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

152 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

153 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

154 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

156 } 0);

	)

158 
	#__πld_lock_öô_ªcursive
(
NAME
) \

159 
	`__libc_lock_öô_ªcursive
 (
NAME
)

	)

164 
	#__libc_lock_föi
(
NAME
) \

165 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_de°roy
, (&(
NAME
)), 0));

	)

166 
	#__libc_rwlock_föi
(
NAME
) \

167 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0));

	)

170 
	#__libc_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi
 ((NAME).
muãx
)

	)

171 
	#__πld_lock_föi_ªcursive
(
NAME
Ë
	`__libc_lock_föi_ªcursive
 (NAME)

	)

174 
	#__libc_lock_lock
(
NAME
) \

175 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_lock
, (&(
NAME
)), 0));

	)

176 
	#__libc_rwlock_rdlock
(
NAME
) \

177 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0));

	)

178 
	#__libc_rwlock_wæock
(
NAME
) \

179 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0));

	)

182 
	#__libc_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock
 ((NAME).
muãx
)

	)

185 
	#__libc_lock_åylock
(
NAME
) \

186 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_åylock
, (&(
NAME
)), 0))

	)

187 
	#__libc_rwlock_åyrdlock
(
NAME
) \

188 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0))

	)

189 
	#__libc_rwlock_åywæock
(
NAME
) \

190 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0))

	)

193 
	#__libc_lock_åylock_ªcursive
(
NAME
Ë
	`__libc_lock_åylock
 ((NAME).
muãx
)

	)

194 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

195 
	`__libc_lock_åylock_ªcursive
 (
NAME
)

	)

198 
	#__libc_lock_u∆ock
(
NAME
) \

199 (
	`__libc_maybe_ˇŒ2
 (
±hªad_muãx_u∆ock
, (&(
NAME
)), 0));

	)

200 
	#__libc_rwlock_u∆ock
(
NAME
) \

201 (
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0));

	)

204 
	#__libc_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock
 ((NAME).
muãx
)

	)

206 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


207 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

208 ++((
±hªad_muãx_t
 *)(
lock
))->
__m_cou¡
;

	)

210 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

211 --((
±hªad_muãx_t
 *)(
lock
))->
__m_cou¡
;

	)

213 
	#__πld_lock_lock_ªcursive
(
NAME
) \

214 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

216 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

217 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

219 
	#__πld_lock_lock_ªcursive
(
NAME
Ë
	`__libc_lock_lock_ªcursive
 (NAME)

	)

220 
	#__πld_lock_u∆ock_ªcursive
(
NAME
Ë
	`__libc_lock_u∆ock_ªcursive
 (NAME)

	)

224 #i‡
PTHREAD_ONCE_INIT
 == 0

227 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

228 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

230 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

231 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

235 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

237 i‡(
__±hªad_⁄˚
 !
NULL
) \

238 
	`__±hªad_⁄˚
 (&(
ONCE_CONTROL
), (
INIT_FUNCTION
)); \

239 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

240 
	`INIT_FUNCTION
 (); \

241 (
ONCE_CONTROL
) = 2; \

243 } 0)

	)

247 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

248 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

249 
_avaû
 = (
DOIT
Ë&& 
_±hªad_˛ónup_push_de„r
 !
NULL
; \

250 i‡(
_avaû
) { \

251 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
FCT
), (
ARG
)); \

252 }

	)

255 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

256 i‡(
_avaû
) { \

257 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

259 }

	)

262 
	#__libc_˛ónup_íd
(
DOIT
) \

263 i‡(
_avaû
) { \

264 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
DOIT
)); \

265 }

	)

267 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

268 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

269 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_push
, (&
_buf„r
, (
f˘
), (
¨g
)), 0)

	)

271 
	#__libc_˛ónup_p›
(
execuã
) \

272 
	`__libc_maybe_ˇŒ
 (
_±hªad_˛ónup_p›
, (&
_buf„r
, 
execuã
), 0); \

273 }

	)

276 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

277 (
	`__libc_maybe_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1))

	)

280 
	#__libc_gë•ecific
(
KEY
) \

281 (
	`__libc_maybe_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
))

	)

284 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

285 (
	`__libc_maybe_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0))

	)

289 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

290 (
	`__libc_maybe_ˇŒ
 (
__±hªad_©f‹k
, (
PREPARE
, 
PARENT
, 
CHILD
), 0))

	)

295 
__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

296 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

298 
__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

300 
__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

302 
__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

304 
__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

306 
__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

308 
__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

310 
__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

311 
__köd
);

313 #ifde‡
__USE_UNIX98


314 
__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

315 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

317 
__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

319 
__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

321 
__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

323 
__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

325 
__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

327 
__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

330 
__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

331 (*
__de°r_fun˘i⁄
) (*));

333 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

334 
__c⁄°
 *
__poöãr
);

336 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

338 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

339 (*
__öô_routöe
) ());

341 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

342 (*
__∑ª¡
) (),

343 (*
__chûd
) ());

349 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


350 #ifde‡
wók_exã∫


351 #i‡
_LIBC


352 
	~<bp-sym.h
>

354 
	#BP_SYM
 (
sym
Ë
	)
sym

356 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

357 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

358 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

359 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

360 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

361 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

362 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

363 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

364 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

365 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

366 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

367 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

368 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

369 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

370 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

371 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

372 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

373 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

374 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

375 
	$wók_exã∫
 (
__±hªad_öôülize
)

376 
	$wók_exã∫
 (
__±hªad_©f‹k
)

377 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push
))

378 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›
))

379 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

380 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

382 #¥agm®
wók
 
__±hªad_muãx_öô


383 #¥agm®
wók
 
__±hªad_muãx_de°roy


384 #¥agm®
wók
 
__±hªad_muãx_lock


385 #¥agm®
wók
 
__±hªad_muãx_åylock


386 #¥agm®
wók
 
__±hªad_muãx_u∆ock


387 #¥agm®
wók
 
__±hªad_muãx©å_öô


388 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


389 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


390 #¥agm®
wók
 
__±hªad_rwlock_de°roy


391 #¥agm®
wók
 
__±hªad_rwlock_rdlock


392 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


393 #¥agm®
wók
 
__±hªad_rwlock_wæock


394 #¥agm®
wók
 
__±hªad_rwlock_åywæock


395 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


396 #¥agm®
wók
 
__±hªad_key_¸óã


397 #¥agm®
wók
 
__±hªad_£t•ecific


398 #¥agm®
wók
 
__±hªad_gë•ecific


399 #¥agm®
wók
 
__±hªad_⁄˚


400 #¥agm®
wók
 
__±hªad_öôülize


401 #¥agm®
wók
 
__±hªad_©f‹k


402 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


403 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


404 #¥agm®
wók
 
_±hªad_˛ónup_push


405 #¥agm®
wók
 
_±hªad_˛ónup_p›


411 
	#__libc_muãx_u∆ock
 
__±hªad_muãx_u∆ock


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

63 
	g__gc⁄v_°ï
;

64 
	g__gc⁄v_°ï_d©a
;

65 
	g__gc⁄v_lﬂded_obje˘
;

66 
	g__gc⁄v_å™s_d©a
;

70 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

71 
	t__c⁄°
 **, __const *,

72 **, 
	tsize_t
 *, , );

75 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

78 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

79 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

83 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

84 
	t__gc⁄v_°ï_d©a
 *, *,

85 
	t__c⁄°
 *,

86 
	t__c⁄°
 **,

87 
	t__c⁄°
 *, **,

88 
	tsize_t
 *);

91 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

92 
	t__c⁄°
 *,

96 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

97 
	tsize_t
 *);

100 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

101 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

103 
	s__gc⁄v_å™s_d©a


106 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

107 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

108 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

109 *
__d©a
;

110 
__gc⁄v_å™s_d©a
 *
__√xt
;

115 
	s__gc⁄v_°ï


117 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

118 
__c⁄°
 *
__mod«me
;

120 
__cou¡î
;

122 *
__‰om_«me
;

123 *
__to_«me
;

125 
__gc⁄v_f˘
 
__f˘
;

126 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

127 
__gc⁄v_öô_f˘
 
__öô_f˘
;

128 
__gc⁄v_íd_f˘
 
__íd_f˘
;

132 
__mö_√eded_‰om
;

133 
__max_√eded_‰om
;

134 
__mö_√eded_to
;

135 
__max_√eded_to
;

138 
__°©eful
;

140 *
__d©a
;

145 
	s__gc⁄v_°ï_d©a


147 *
__outbuf
;

148 *
__outbu„nd
;

152 
__Êags
;

156 
__övoˇti⁄_cou¡î
;

160 
__öã∫Æ_u£
;

162 
__mb°©e_t
 *
__°©ï
;

163 
__mb°©e_t
 
__°©e
;

167 
__gc⁄v_å™s_d©a
 *
__å™s
;

172 
	s__gc⁄v_öfo


174 
size_t
 
__n°ïs
;

175 
__gc⁄v_°ï
 *
__°ïs
;

176 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

177 } *
	t__gc⁄v_t
;

	@/usr/include/linux/compiler-gcc+.h

7 
	~<löux/compûî-gcc.h
>

9 
	#ölöe
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

10 
	#__ölöe__
 
__ölöe__
 
	`__©åibuã__
((
Æways_ölöe
))

	)

11 
	#__ölöe
 
__ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

12 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

13 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__u£d__
))

	)

14 
	#__©åibuã_puª__
 
	`__©åibuã__
((
puª
))

	)

15 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
((
__c⁄°__
))

	)

16 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

	@/usr/include/linux/compiler-gcc2.h

9 
	~<löux/compûî-gcc.h
>

11 #i‡
__GNUC_MINOR__
 < 96

12 
	#__buûtö_ex≥˘
(
x
, 
ex≥˘ed_vÆue
Ë(x)

	)

15 #i‚de‡
__©åibuã_u£d__


16 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__unu£d__
))

	)

23 #i‡
__GNUC_MINOR__
 >= 96

24 
	#__©åibuã_puª__
 
	`__©åibuã__
((
puª
))

	)

25 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
((
__c⁄°__
))

	)

	@/usr/include/linux/compiler-gcc3.h

4 
	~<löux/compûî-gcc.h
>

6 #i‡
__GNUC_MINOR__
 > 0

7 
	#__dïªˇãd
 
	`__©åibuã__
((
dïªˇãd
))

	)

10 #i‡
__GNUC_MINOR__
 >= 3

11 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__u£d__
))

	)

13 
	#__©åibuã_u£d__
 
	`__©åibuã__
((
__unu£d__
))

	)

16 
	#__©åibuã_puª__
 
	`__©åibuã__
((
puª
))

	)

17 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
((
__c⁄°__
))

	)

19 #i‡
__GNUC_MINOR__
 >= 1

20 
	#noölöe
 
	`__©åibuã__
((
noölöe
))

	)

22 #i‡
__GNUC_MINOR__
 >= 4

23 
	#__mu°_check
 
	`__©åibuã__
((
w¨n_unu£d_ªsu…
))

	)

26 #i‡
__GNUC_MINOR__
 >= 5

27 
	#__compûî_off£tof
(
a
,
b
Ë
	`__buûtö_off£tof
◊,b)

	)

	@/usr/include/linux/compiler-intel.h

3 #ifde‡
__ECC


9 
	~<asm/öåösics.h
>

14 #unde‡
b¨rõr


15 #unde‡
RELOC_HIDE


17 
	#b¨rõr
(Ë
	`__mem‹y_b¨rõr
()

	)

19 
	#RELOC_HIDE
(
±r
, 
off
) \

20 ({ 
__±r
; \

21 
__±r
 = (Ë(
±r
); \

22 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

	@/usr/include/linux/config.h

1 #i‚de‡
_LINUX_CONFIG_H


2 
	#_LINUX_CONFIG_H


	)

4 
	~<löux/autoc⁄f.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‚de‡
__√ed_mb°©e_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #ifde‡
__USE_UNIX98


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

43 
	#__√ed_size_t


	)

44 
	#__√ed_wch¨_t


	)

45 
	#__√ed_NULL


	)

47 
	#__√ed_wöt_t


	)

48 
	~<°ddef.h
>

50 
	~<bôs/wch¨.h
>

54 #i‚de‡
_WINT_T


59 
	#_WINT_T


	)

60 
	twöt_t
;

64 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

65 && 
deföed
 
__WINT_TYPE__


66 
__BEGIN_NAMESPACE_STD


67 
__WINT_TYPE__
 
	twöt_t
;

68 
	g__END_NAMESPACE_STD


73 #i‚de‡
__mb°©e_t_deföed


74 
	#__mb°©e_t_deföed
 1

	)

78 
	m__cou¡
;

81 
wöt_t
 
	m__wch
;

82 
	m__wchb
[4];

83 } 
	m__vÆue
;

84 } 
	t__mb°©e_t
;

86 #unde‡
__√ed_mb°©e_t


91 #ifde‡
_WCHAR_H


93 
__BEGIN_NAMESPACE_C99


95 
__mb°©e_t
 
	tmb°©e_t
;

96 
	g__END_NAMESPACE_C99


97 #ifde‡
__USE_GNU


98 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

101 #i‚de‡
WCHAR_MIN


103 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

104 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

107 #i‚de‡
WEOF


108 
	#WEOF
 (0xffffffffu)

	)

113 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


114 
	~<w˘y≥.h
>

118 
__BEGIN_DECLS


120 
__BEGIN_NAMESPACE_STD


123 
tm
;

127 
	$__USING_NAMESPACE_STD
(
tm
)

128 
__END_NAMESPACE_STD


131 
__BEGIN_NAMESPACE_C99


133 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

134 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

136 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

137 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

138 
__THROW
;

141 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

142 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

144 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
;

149 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

150 
__THROW
 
__©åibuã_puª__
;

152 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

153 
__THROW
 
__©åibuã_puª__
;

154 
__END_NAMESPACE_C99


156 #ifde‡
__USE_GNU


158 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

161 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

162 
size_t
 
__n
Ë
__THROW
;

166 
	~<xloˇÀ.h
>

168 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

169 
__loˇÀ_t
 
__loc
Ë
__THROW
;

171 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

172 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

175 
__BEGIN_NAMESPACE_C99


178 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

182 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

184 
__END_NAMESPACE_C99


186 #ifde‡
__USE_GNU


192 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

193 
__loˇÀ_t
 
__loc
Ë
__THROW
;

198 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

199 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

202 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

205 
__BEGIN_NAMESPACE_C99


207 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

208 
__THROW
 
__©åibuã_puª__
;

210 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

211 
__THROW
 
__©åibuã_puª__
;

212 
__END_NAMESPACE_C99


214 #ifde‡
__USE_GNU


217 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

218 
__THROW
 
__©åibuã_puª__
;

221 
__BEGIN_NAMESPACE_C99


224 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

225 
__THROW
 
__©åibuã_puª__
;

228 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

229 
__THROW
 
__©åibuã_puª__
;

231 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

232 
__THROW
 
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

235 
__THROW
 
__©åibuã_puª__
;

238 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

240 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

243 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

244 
__END_NAMESPACE_C99


246 #ifde‡
__USE_XOPEN


248 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

249 
__THROW
 
__©åibuã_puª__
;

252 #ifde‡
__USE_GNU


254 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

255 
__THROW
 
__©åibuã_puª__
;

259 
__BEGIN_NAMESPACE_C99


261 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

262 
__THROW
 
__©åibuã_puª__
;

265 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

266 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

267 
__THROW
 
__©åibuã_puª__
;

270 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

271 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

275 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

276 
__THROW
;

279 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

280 
__END_NAMESPACE_C99


282 #ifde‡
__USE_GNU


285 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

286 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

287 
__THROW
;

291 
__BEGIN_NAMESPACE_C99


294 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

298 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

302 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

306 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

307 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

308 
mb°©e_t
 *
__p
Ë
__THROW
;

311 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

312 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

315 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

317 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

318 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

319 
__END_NAMESPACE_C99


321 #ifde‡
__USE_EXTERN_INLINES


323 
__ölöe
 
size_t


324 
	`__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

325 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

326 {  (
__ps
 !
NULL


327 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

330 
__BEGIN_NAMESPACE_C99


333 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

334 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

335 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

339 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

340 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

341 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

342 
__END_NAMESPACE_C99


345 #ifdef 
__USE_GNU


348 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

349 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

350 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

354 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

355 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

356 
size_t
 
__nwc
, size_à
__Àn
,

357 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

362 #ifde‡
__USE_XOPEN


364 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

368 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

372 
__BEGIN_NAMESPACE_C99


375 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

376 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

378 #ifde‡
__USE_ISOC99


380 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

381 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

382 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

383 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

389 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

390 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

394 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

395 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

396 
__THROW
;

398 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

401 
__exãnsi⁄__


402 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

403 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

404 
__THROW
;

408 
__exãnsi⁄__


409 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

410 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

411 
__ba£
Ë
__THROW
;

413 
__END_NAMESPACE_C99


415 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


418 
__exãnsi⁄__


419 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

420 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

421 
__THROW
;

425 
__exãnsi⁄__


426 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

427 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

428 
__ba£
Ë
__THROW
;

431 #ifde‡
__USE_GNU


445 
	~<xloˇÀ.h
>

449 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

450 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

451 
__loˇÀ_t
 
__loc
Ë
__THROW
;

453 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

455 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

457 
__exãnsi⁄__


458 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

459 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

460 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

462 
__exãnsi⁄__


463 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

464 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

465 
__ba£
, 
__loˇÀ_t
 
__loc
)

466 
__THROW
;

468 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

470 
__THROW
;

472 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

473 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

474 
__THROW
;

476 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

478 
__loˇÀ_t
 
__loc
Ë
__THROW
;

484 
	$__wc°od_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

485 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

486 
__THROW
;

487 
	$__wc°of_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__group
)

489 
__THROW
;

490 
	$__wc°ﬁd_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__group
Ë
__THROW
;

494 #i‚de‡
__wc°ﬁ_öã∫Æ_deföed


495 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

496 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

497 
__ba£
, 
__group
Ë
__THROW
;

498 
	#__wc°ﬁ_öã∫Æ_deföed
 1

	)

500 #i‚de‡
__wc°oul_öã∫Æ_deföed


501 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈t
,

502 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

503 
__ba£
, 
__group
Ë
__THROW
;

504 
	#__wc°oul_öã∫Æ_deföed
 1

	)

506 #i‚de‡
__wc°ﬁl_öã∫Æ_deföed


507 
__exãnsi⁄__


508 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

509 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

510 
__ba£
, 
__group
Ë
__THROW
;

511 
	#__wc°ﬁl_öã∫Æ_deföed
 1

	)

513 #i‚de‡
__wc°ouŒ_öã∫Æ_deföed


514 
__exãnsi⁄__


515 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
wch¨_t
 *

516 
__ª°ri˘
 
__≈å
,

517 
wch¨_t
 **

518 
__ª°ri˘
 
__íd±r
,

519 
__ba£
,

520 
__group
Ë
__THROW
;

521 
	#__wc°ouŒ_öã∫Æ_deföed
 1

	)

525 #i‡
deföed
 
__OPTIMIZE__
 && 
__GNUC__
 >= 2

527 
__BEGIN_NAMESPACE_C99


529 
__ölöe
 

530 
	`__NTH
 (
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

532 {  
	`__wc°od_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

533 
__ölöe
 

534 
__NTH
 (
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

536 {  
	`__wc°ﬁ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

537 
__ölöe
 

538 
__NTH
 (
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

539 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

540 {  
	`__wc°oul_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

541 
__END_NAMESPACE_C99


543 #ifde‡
__USE_GNU


544 
__ölöe
 

545 
__NTH
 (
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

546 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

547 {  
	`__wc°of_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

548 
__ölöe
 

549 
__NTH
 (
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
))

551 {  
	`__wc°ﬁd_öã∫Æ
 (
__≈å
, 
__íd±r
, 0); 
	}
}

554 
__exãnsi⁄__


555 
__ölöe
 

556 
__NTH
 (
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

558 {  
	`__wc°ﬁl_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

559 
__exãnsi⁄__


560 
__ölöe
 

561 
__NTH
 (
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

562 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
))

563 {  
	`__wc°ouŒ_öã∫Æ
 (
__≈å
, 
__íd±r
, 
__ba£
, 0); 
	}
}

568 #ifdef 
__USE_GNU


571 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

575 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

576 
__THROW
;

581 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_C99


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 
__END_NAMESPACE_C99


650 #ifde‡
__USE_ISOC99


651 
__BEGIN_NAMESPACE_C99


657 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

658 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

659 
__gnuc_va_li°
 
__¨g
)

665 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

666 
__gnuc_va_li°
 
__¨g
)

669 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

671 
__gnuc_va_li°
 
__¨g
)

672 
__THROW
 ;

674 
__END_NAMESPACE_C99


678 
__BEGIN_NAMESPACE_C99


683 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

684 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

690 
wöt_t
 
	`gëwch¨
 ();

697 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

698 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

704 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

712 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

713 
__FILE
 *
__ª°ri˘
 
__°ªam
);

719 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

720 
__FILE
 *
__ª°ri˘
 
__°ªam
);

727 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

728 
__END_NAMESPACE_C99


731 #ifde‡
__USE_GNU


739 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

740 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

748 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

756 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

765 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

775 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

776 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
__BEGIN_NAMESPACE_C99


793 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

794 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

795 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

796 
__END_NAMESPACE_C99


798 #ifde‡
__USE_GNU


799 
	~<xloˇÀ.h
>

803 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

804 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

805 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

806 
__loˇÀ_t
 
__loc
Ë
__THROW
;

815 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


816 
	#__√ed_iswxxx


	)

817 
	~<w˘y≥.h
>

820 
__END_DECLS


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

	@/usr/include/linux/autoconf.h

6 
	#AUTOCONF_INCLUDED


	)

7 
	#CONFIG_X86
 1

	)

8 
	#CONFIG_MMU
 1

	)

9 
	#CONFIG_UID16
 1

	)

10 
	#CONFIG_GENERIC_ISA_DMA
 1

	)

11 
	#CONFIG_GENERIC_IOMAP
 1

	)

16 
	#CONFIG_EXPERIMENTAL
 1

	)

17 
	#CONFIG_CLEAN_COMPILE
 1

	)

18 
	#CONFIG_LOCK_KERNEL
 1

	)

23 
	#CONFIG_LOCALVERSION
 ""

	)

24 
	#CONFIG_SWAP
 1

	)

25 
	#CONFIG_SYSVIPC
 1

	)

26 
	#CONFIG_POSIX_MQUEUE
 1

	)

27 #unde‡
CONFIG_BSD_PROCESS_ACCT


28 
	#CONFIG_SYSCTL
 1

	)

29 
	#CONFIG_AUDIT
 1

	)

30 
	#CONFIG_AUDITSYSCALL
 1

	)

31 
	#CONFIG_LOG_BUF_SHIFT
 15

	)

32 
	#CONFIG_HOTPLUG
 1

	)

33 
	#CONFIG_KOBJECT_UEVENT
 1

	)

34 #unde‡
CONFIG_IKCONFIG


35 #unde‡
CONFIG_EMBEDDED


36 
	#CONFIG_KALLSYMS
 1

	)

37 #unde‡
CONFIG_KALLSYMS_EXTRA_PASS


38 
	#CONFIG_FUTEX
 1

	)

39 
	#CONFIG_EPOLL
 1

	)

40 #unde‡
CONFIG_CC_OPTIMIZE_FOR_SIZE


41 
	#CONFIG_SHMEM
 1

	)

42 
	#CONFIG_CC_ALIGN_FUNCTIONS
 0

	)

43 
	#CONFIG_CC_ALIGN_LABELS
 0

	)

44 
	#CONFIG_CC_ALIGN_LOOPS
 0

	)

45 
	#CONFIG_CC_ALIGN_JUMPS
 0

	)

46 #unde‡
CONFIG_TINY_SHMEM


51 
	#CONFIG_MODULES
 1

	)

52 #unde‡
CONFIG_MODULE_UNLOAD


53 
	#CONFIG_OBSOLETE_MODPARM
 1

	)

54 #unde‡
CONFIG_MODVERSIONS


55 #unde‡
CONFIG_MODULE_SRCVERSION_ALL


56 
	#CONFIG_KMOD
 1

	)

61 
	#CONFIG_X86_PC
 1

	)

62 #unde‡
CONFIG_X86_ELAN


63 #unde‡
CONFIG_X86_VOYAGER


64 #unde‡
CONFIG_X86_NUMAQ


65 #unde‡
CONFIG_X86_SUMMIT


66 #unde‡
CONFIG_X86_BIGSMP


67 #unde‡
CONFIG_X86_VISWS


68 #unde‡
CONFIG_X86_GENERICARCH


69 #unde‡
CONFIG_X86_ES7000


70 #unde‡
CONFIG_M386


71 #unde‡
CONFIG_M486


72 #unde‡
CONFIG_M586


73 #unde‡
CONFIG_M586TSC


74 #unde‡
CONFIG_M586MMX


75 #unde‡
CONFIG_M686


76 #unde‡
CONFIG_MPENTIUMII


77 #unde‡
CONFIG_MPENTIUMIII


78 #unde‡
CONFIG_MPENTIUMM


79 
	#CONFIG_MPENTIUM4
 1

	)

80 #unde‡
CONFIG_MK6


81 #unde‡
CONFIG_MK7


82 #unde‡
CONFIG_MK8


83 #unde‡
CONFIG_MCRUSOE


84 #unde‡
CONFIG_MEFFICEON


85 #unde‡
CONFIG_MWINCHIPC6


86 #unde‡
CONFIG_MWINCHIP2


87 #unde‡
CONFIG_MWINCHIP3D


88 #unde‡
CONFIG_MCYRIXIII


89 #unde‡
CONFIG_MVIAC3_2


90 #unde‡
CONFIG_X86_GENERIC


91 
	#CONFIG_X86_CMPXCHG
 1

	)

92 
	#CONFIG_X86_XADD
 1

	)

93 
	#CONFIG_X86_L1_CACHE_SHIFT
 7

	)

94 
	#CONFIG_RWSEM_XCHGADD_ALGORITHM
 1

	)

95 
	#CONFIG_GENERIC_CALIBRATE_DELAY
 1

	)

96 
	#CONFIG_X86_WP_WORKS_OK
 1

	)

97 
	#CONFIG_X86_INVLPG
 1

	)

98 
	#CONFIG_X86_BSWAP
 1

	)

99 
	#CONFIG_X86_POPAD_OK
 1

	)

100 
	#CONFIG_X86_GOOD_APIC
 1

	)

101 
	#CONFIG_X86_INTEL_USERCOPY
 1

	)

102 
	#CONFIG_X86_USE_PPRO_CHECKSUM
 1

	)

103 #unde‡
CONFIG_HPET_TIMER


104 
	#CONFIG_SMP
 1

	)

105 
	#CONFIG_NR_CPUS
 8

	)

106 
	#CONFIG_SCHED_SMT
 1

	)

107 
	#CONFIG_PREEMPT
 1

	)

108 
	#CONFIG_PREEMPT_BKL
 1

	)

109 
	#CONFIG_X86_LOCAL_APIC
 1

	)

110 
	#CONFIG_X86_IO_APIC
 1

	)

111 
	#CONFIG_X86_TSC
 1

	)

112 
	#CONFIG_X86_MCE
 1

	)

113 
	#CONFIG_X86_MCE_NONFATAL
 1

	)

114 
	#CONFIG_X86_MCE_P4THERMAL
 1

	)

115 #unde‡
CONFIG_TOSHIBA


116 #unde‡
CONFIG_I8K


117 #unde‡
CONFIG_MICROCODE


118 #unde‡
CONFIG_X86_MSR


119 #unde‡
CONFIG_X86_CPUID


124 #unde‡
CONFIG_EDD


125 
	#CONFIG_NOHIGHMEM
 1

	)

126 #unde‡
CONFIG_HIGHMEM4G


127 #unde‡
CONFIG_HIGHMEM64G


128 #unde‡
CONFIG_MATH_EMULATION


129 
	#CONFIG_MTRR
 1

	)

130 #unde‡
CONFIG_EFI


131 
	#CONFIG_IRQBALANCE
 1

	)

132 
	#CONFIG_HAVE_DEC_LOCK
 1

	)

133 #unde‡
CONFIG_REGPARM


138 
	#CONFIG_PM
 1

	)

139 #unde‡
CONFIG_PM_DEBUG


140 
	#CONFIG_SOFTWARE_SUSPEND
 1

	)

141 
	#CONFIG_PM_STD_PARTITION
 ""

	)

146 
	#CONFIG_ACPI
 1

	)

147 
	#CONFIG_ACPI_BOOT
 1

	)

148 
	#CONFIG_ACPI_INTERPRETER
 1

	)

149 
	#CONFIG_ACPI_SLEEP
 1

	)

150 
	#CONFIG_ACPI_SLEEP_PROC_FS
 1

	)

151 
	#CONFIG_ACPI_AC
 1

	)

152 
	#CONFIG_ACPI_BATTERY
 1

	)

153 
	#CONFIG_ACPI_BUTTON
 1

	)

154 
	#CONFIG_ACPI_VIDEO_MODULE
 1

	)

155 
	#CONFIG_ACPI_FAN
 1

	)

156 
	#CONFIG_ACPI_PROCESSOR
 1

	)

157 
	#CONFIG_ACPI_THERMAL
 1

	)

158 #unde‡
CONFIG_ACPI_ASUS


159 
	#CONFIG_ACPI_IBM_MODULE
 1

	)

160 #unde‡
CONFIG_ACPI_TOSHIBA


161 
	#CONFIG_ACPI_BLACKLIST_YEAR
 0

	)

162 #unde‡
CONFIG_ACPI_DEBUG


163 
	#CONFIG_ACPI_BUS
 1

	)

164 
	#CONFIG_ACPI_EC
 1

	)

165 
	#CONFIG_ACPI_POWER
 1

	)

166 
	#CONFIG_ACPI_PCI
 1

	)

167 
	#CONFIG_ACPI_SYSTEM
 1

	)

168 #unde‡
CONFIG_X86_PM_TIMER


169 #unde‡
CONFIG_ACPI_CONTAINER


174 #unde‡
CONFIG_APM


179 #unde‡
CONFIG_CPU_FREQ


184 
	#CONFIG_PCI
 1

	)

185 #unde‡
CONFIG_PCI_GOBIOS


186 #unde‡
CONFIG_PCI_GOMMCONFIG


187 #unde‡
CONFIG_PCI_GODIRECT


188 
	#CONFIG_PCI_GOANY
 1

	)

189 
	#CONFIG_PCI_BIOS
 1

	)

190 
	#CONFIG_PCI_DIRECT
 1

	)

191 
	#CONFIG_PCI_MMCONFIG
 1

	)

192 #unde‡
CONFIG_PCIEPORTBUS


193 #unde‡
CONFIG_PCI_MSI


194 
	#CONFIG_PCI_LEGACY_PROC
 1

	)

195 
	#CONFIG_PCI_NAMES
 1

	)

196 
	#CONFIG_ISA
 1

	)

197 #unde‡
CONFIG_EISA


198 #unde‡
CONFIG_MCA


199 #unde‡
CONFIG_SCx200


204 #unde‡
CONFIG_PCCARD


209 
	#CONFIG_PCMCIA_PROBE
 1

	)

214 #unde‡
CONFIG_HOTPLUG_PCI


219 
	#CONFIG_BINFMT_ELF
 1

	)

220 
	#CONFIG_BINFMT_AOUT
 1

	)

221 
	#CONFIG_BINFMT_MISC
 1

	)

230 
	#CONFIG_STANDALONE
 1

	)

231 
	#CONFIG_PREVENT_FIRMWARE_BUILD
 1

	)

232 
	#CONFIG_FW_LOADER_MODULE
 1

	)

237 #unde‡
CONFIG_MTD


242 
	#CONFIG_PARPORT
 1

	)

243 
	#CONFIG_PARPORT_PC
 1

	)

244 
	#CONFIG_PARPORT_PC_CML1
 1

	)

245 #unde‡
CONFIG_PARPORT_SERIAL


246 #unde‡
CONFIG_PARPORT_PC_FIFO


247 #unde‡
CONFIG_PARPORT_PC_SUPERIO


248 #unde‡
CONFIG_PARPORT_OTHER


249 #unde‡
CONFIG_PARPORT_1284


254 
	#CONFIG_PNP
 1

	)

255 #unde‡
CONFIG_PNP_DEBUG


260 #unde‡
CONFIG_ISAPNP


261 #unde‡
CONFIG_PNPBIOS


262 
	#CONFIG_PNPACPI
 1

	)

267 
	#CONFIG_BLK_DEV_FD
 1

	)

268 #unde‡
CONFIG_BLK_DEV_XD


269 #unde‡
CONFIG_PARIDE


270 #unde‡
CONFIG_BLK_CPQ_DA


271 #unde‡
CONFIG_BLK_CPQ_CISS_DA


272 #unde‡
CONFIG_BLK_DEV_DAC960


273 #unde‡
CONFIG_BLK_DEV_UMEM


274 #unde‡
CONFIG_BLK_DEV_COW_COMMON


275 #unde‡
CONFIG_BLK_DEV_LOOP


276 #unde‡
CONFIG_BLK_DEV_NBD


277 #unde‡
CONFIG_BLK_DEV_SX8


278 #unde‡
CONFIG_BLK_DEV_UB


279 #unde‡
CONFIG_BLK_DEV_RAM


280 
	#CONFIG_BLK_DEV_RAM_COUNT
 16

	)

281 
	#CONFIG_INITRAMFS_SOURCE
 ""

	)

282 
	#CONFIG_LBD
 1

	)

283 #unde‡
CONFIG_CDROM_PKTCDVD


288 
	#CONFIG_IOSCHED_NOOP
 1

	)

289 
	#CONFIG_IOSCHED_AS
 1

	)

290 
	#CONFIG_IOSCHED_DEADLINE
 1

	)

291 
	#CONFIG_IOSCHED_CFQ
 1

	)

292 #unde‡
CONFIG_ATA_OVER_ETH


297 
	#CONFIG_IDE
 1

	)

298 
	#CONFIG_BLK_DEV_IDE
 1

	)

303 #unde‡
CONFIG_BLK_DEV_IDE_SATA


304 #unde‡
CONFIG_BLK_DEV_HD_IDE


305 
	#CONFIG_BLK_DEV_IDEDISK
 1

	)

306 
	#CONFIG_IDEDISK_MULTI_MODE
 1

	)

307 
	#CONFIG_BLK_DEV_IDECD
 1

	)

308 #unde‡
CONFIG_BLK_DEV_IDETAPE


309 #unde‡
CONFIG_BLK_DEV_IDEFLOPPY


310 #unde‡
CONFIG_BLK_DEV_IDESCSI


311 #unde‡
CONFIG_IDE_TASK_IOCTL


316 
	#CONFIG_IDE_GENERIC
 1

	)

317 
	#CONFIG_BLK_DEV_CMD640
 1

	)

318 #unde‡
CONFIG_BLK_DEV_CMD640_ENHANCED


319 #unde‡
CONFIG_BLK_DEV_IDEPNP


320 
	#CONFIG_BLK_DEV_IDEPCI
 1

	)

321 
	#CONFIG_IDEPCI_SHARE_IRQ
 1

	)

322 #unde‡
CONFIG_BLK_DEV_OFFBOARD


323 
	#CONFIG_BLK_DEV_GENERIC
 1

	)

324 #unde‡
CONFIG_BLK_DEV_OPTI621


325 
	#CONFIG_BLK_DEV_RZ1000
 1

	)

326 
	#CONFIG_BLK_DEV_IDEDMA_PCI
 1

	)

327 #unde‡
CONFIG_BLK_DEV_IDEDMA_FORCED


328 
	#CONFIG_IDEDMA_PCI_AUTO
 1

	)

329 #unde‡
CONFIG_IDEDMA_ONLYDISK


330 #unde‡
CONFIG_BLK_DEV_AEC62XX


331 #unde‡
CONFIG_BLK_DEV_ALI15X3


332 #unde‡
CONFIG_BLK_DEV_AMD74XX


333 #unde‡
CONFIG_BLK_DEV_ATIIXP


334 #unde‡
CONFIG_BLK_DEV_CMD64X


335 #unde‡
CONFIG_BLK_DEV_TRIFLEX


336 #unde‡
CONFIG_BLK_DEV_CY82C693


337 #unde‡
CONFIG_BLK_DEV_CS5520


338 #unde‡
CONFIG_BLK_DEV_CS5530


339 #unde‡
CONFIG_BLK_DEV_HPT34X


340 #unde‡
CONFIG_BLK_DEV_HPT366


341 #unde‡
CONFIG_BLK_DEV_SC1200


342 
	#CONFIG_BLK_DEV_PIIX
 1

	)

343 #unde‡
CONFIG_BLK_DEV_NS87415


344 #unde‡
CONFIG_BLK_DEV_PDC202XX_OLD


345 #unde‡
CONFIG_BLK_DEV_PDC202XX_NEW


346 #unde‡
CONFIG_BLK_DEV_SVWKS


347 #unde‡
CONFIG_BLK_DEV_SIIMAGE


348 #unde‡
CONFIG_BLK_DEV_SIS5513


349 #unde‡
CONFIG_BLK_DEV_SLC90E66


350 #unde‡
CONFIG_BLK_DEV_TRM290


351 #unde‡
CONFIG_BLK_DEV_VIA82CXXX


352 #unde‡
CONFIG_IDE_ARM


353 #unde‡
CONFIG_IDE_CHIPSETS


354 
	#CONFIG_BLK_DEV_IDEDMA
 1

	)

355 #unde‡
CONFIG_IDEDMA_IVB


356 
	#CONFIG_IDEDMA_AUTO
 1

	)

357 #unde‡
CONFIG_BLK_DEV_HD


362 
	#CONFIG_SCSI
 1

	)

363 
	#CONFIG_SCSI_PROC_FS
 1

	)

368 
	#CONFIG_BLK_DEV_SD
 1

	)

369 #unde‡
CONFIG_CHR_DEV_ST


370 #unde‡
CONFIG_CHR_DEV_OSST


371 #unde‡
CONFIG_BLK_DEV_SR


372 
	#CONFIG_CHR_DEV_SG
 1

	)

377 #unde‡
CONFIG_SCSI_MULTI_LUN


378 #unde‡
CONFIG_SCSI_CONSTANTS


379 #unde‡
CONFIG_SCSI_LOGGING


384 #unde‡
CONFIG_SCSI_SPI_ATTRS


385 #unde‡
CONFIG_SCSI_FC_ATTRS


386 #unde‡
CONFIG_SCSI_ISCSI_ATTRS


391 #unde‡
CONFIG_BLK_DEV_3W_XXXX_RAID


392 #unde‡
CONFIG_SCSI_3W_9XXX


393 #unde‡
CONFIG_SCSI_7000FASST


394 #unde‡
CONFIG_SCSI_ACARD


395 #unde‡
CONFIG_SCSI_AHA152X


396 #unde‡
CONFIG_SCSI_AHA1542


397 #unde‡
CONFIG_SCSI_AACRAID


398 #unde‡
CONFIG_SCSI_AIC7XXX


399 #unde‡
CONFIG_SCSI_AIC7XXX_OLD


400 #unde‡
CONFIG_SCSI_AIC79XX


401 
	#CONFIG_SCSI_DPT_I2O_MODULE
 1

	)

402 #unde‡
CONFIG_SCSI_IN2000


403 #unde‡
CONFIG_MEGARAID_NEWGEN


404 #unde‡
CONFIG_MEGARAID_LEGACY


405 
	#CONFIG_SCSI_SATA
 1

	)

406 #unde‡
CONFIG_SCSI_SATA_AHCI


407 #unde‡
CONFIG_SCSI_SATA_SVW


408 
	#CONFIG_SCSI_ATA_PIIX
 1

	)

409 #unde‡
CONFIG_SCSI_SATA_NV


410 #unde‡
CONFIG_SCSI_SATA_PROMISE


411 #unde‡
CONFIG_SCSI_SATA_QSTOR


412 
	#CONFIG_SCSI_SATA_SX4_MODULE
 1

	)

413 #unde‡
CONFIG_SCSI_SATA_SIL


414 
	#CONFIG_SCSI_SATA_SIS_MODULE
 1

	)

415 #unde‡
CONFIG_SCSI_SATA_ULI


416 #unde‡
CONFIG_SCSI_SATA_VIA


417 #unde‡
CONFIG_SCSI_SATA_VITESSE


418 #unde‡
CONFIG_SCSI_BUSLOGIC


419 #unde‡
CONFIG_SCSI_DMX3191D


420 #unde‡
CONFIG_SCSI_DTC3280


421 #unde‡
CONFIG_SCSI_EATA


422 #unde‡
CONFIG_SCSI_EATA_PIO


423 #unde‡
CONFIG_SCSI_FUTURE_DOMAIN


424 #unde‡
CONFIG_SCSI_GDTH


425 #unde‡
CONFIG_SCSI_GENERIC_NCR5380


426 #unde‡
CONFIG_SCSI_GENERIC_NCR5380_MMIO


427 #unde‡
CONFIG_SCSI_IPS


428 #unde‡
CONFIG_SCSI_INITIO


429 #unde‡
CONFIG_SCSI_INIA100


430 #unde‡
CONFIG_SCSI_PPA


431 #unde‡
CONFIG_SCSI_IMM


432 #unde‡
CONFIG_SCSI_NCR53C406A


433 #unde‡
CONFIG_SCSI_SYM53C8XX_2


434 
	#CONFIG_SCSI_IPR_MODULE
 1

	)

435 #unde‡
CONFIG_SCSI_IPR_TRACE


436 #unde‡
CONFIG_SCSI_IPR_DUMP


437 #unde‡
CONFIG_SCSI_PAS16


438 #unde‡
CONFIG_SCSI_PSI240I


439 #unde‡
CONFIG_SCSI_QLOGIC_FAS


440 #unde‡
CONFIG_SCSI_QLOGIC_ISP


441 #unde‡
CONFIG_SCSI_QLOGIC_FC


442 #unde‡
CONFIG_SCSI_QLOGIC_1280


443 
	#CONFIG_SCSI_QLA2XXX
 1

	)

444 #unde‡
CONFIG_SCSI_QLA21XX


445 #unde‡
CONFIG_SCSI_QLA22XX


446 #unde‡
CONFIG_SCSI_QLA2300


447 #unde‡
CONFIG_SCSI_QLA2322


448 #unde‡
CONFIG_SCSI_QLA6312


449 #unde‡
CONFIG_SCSI_SYM53C416


450 #unde‡
CONFIG_SCSI_DC395x


451 #unde‡
CONFIG_SCSI_DC390T


452 #unde‡
CONFIG_SCSI_T128


453 #unde‡
CONFIG_SCSI_U14_34F


454 #unde‡
CONFIG_SCSI_ULTRASTOR


455 #unde‡
CONFIG_SCSI_NSP32


456 #unde‡
CONFIG_SCSI_DEBUG


461 #unde‡
CONFIG_CD_NO_IDESCSI


466 #unde‡
CONFIG_MD


471 #unde‡
CONFIG_FUSION


476 
	#CONFIG_IEEE1394
 1

	)

481 #unde‡
CONFIG_IEEE1394_VERBOSEDEBUG


482 #unde‡
CONFIG_IEEE1394_OUI_DB


483 #unde‡
CONFIG_IEEE1394_EXTRA_CONFIG_ROMS


492 
	#CONFIG_IEEE1394_OHCI1394
 1

	)

497 #unde‡
CONFIG_IEEE1394_VIDEO1394


498 #unde‡
CONFIG_IEEE1394_SBP2


499 #unde‡
CONFIG_IEEE1394_ETH1394


500 #unde‡
CONFIG_IEEE1394_DV1394


501 
	#CONFIG_IEEE1394_RAWIO
 1

	)

502 #unde‡
CONFIG_IEEE1394_CMP


507 #unde‡
CONFIG_I2O


512 
	#CONFIG_NET
 1

	)

517 
	#CONFIG_PACKET
 1

	)

518 #unde‡
CONFIG_PACKET_MMAP


519 #unde‡
CONFIG_NETLINK_DEV


520 
	#CONFIG_UNIX
 1

	)

521 #unde‡
CONFIG_NET_KEY


522 
	#CONFIG_INET
 1

	)

523 
	#CONFIG_IP_MULTICAST
 1

	)

524 #unde‡
CONFIG_IP_ADVANCED_ROUTER


525 #unde‡
CONFIG_IP_PNP


526 #unde‡
CONFIG_NET_IPIP


527 #unde‡
CONFIG_NET_IPGRE


528 #unde‡
CONFIG_IP_MROUTE


529 #unde‡
CONFIG_ARPD


530 #unde‡
CONFIG_SYN_COOKIES


531 #unde‡
CONFIG_INET_AH


532 #unde‡
CONFIG_INET_ESP


533 #unde‡
CONFIG_INET_IPCOMP


534 #unde‡
CONFIG_INET_TUNNEL


535 
	#CONFIG_IP_TCPDIAG
 1

	)

536 #unde‡
CONFIG_IP_TCPDIAG_IPV6


541 #unde‡
CONFIG_IP_VS


542 #unde‡
CONFIG_IPV6


543 
	#CONFIG_NETFILTER
 1

	)

544 #unde‡
CONFIG_NETFILTER_DEBUG


549 
	#CONFIG_IP_NF_CONNTRACK
 1

	)

550 #unde‡
CONFIG_IP_NF_CT_ACCT


551 #unde‡
CONFIG_IP_NF_CONNTRACK_MARK


552 #unde‡
CONFIG_IP_NF_CT_PROTO_SCTP


553 #unde‡
CONFIG_IP_NF_FTP


554 #unde‡
CONFIG_IP_NF_IRC


555 #unde‡
CONFIG_IP_NF_TFTP


556 #unde‡
CONFIG_IP_NF_AMANDA


557 
	#CONFIG_IP_NF_QUEUE
 1

	)

558 
	#CONFIG_IP_NF_IPTABLES
 1

	)

559 
	#CONFIG_IP_NF_MATCH_LIMIT
 1

	)

560 
	#CONFIG_IP_NF_MATCH_IPRANGE
 1

	)

561 
	#CONFIG_IP_NF_MATCH_MAC
 1

	)

562 
	#CONFIG_IP_NF_MATCH_PKTTYPE
 1

	)

563 
	#CONFIG_IP_NF_MATCH_MARK
 1

	)

564 
	#CONFIG_IP_NF_MATCH_MULTIPORT
 1

	)

565 
	#CONFIG_IP_NF_MATCH_TOS
 1

	)

566 
	#CONFIG_IP_NF_MATCH_RECENT
 1

	)

567 
	#CONFIG_IP_NF_MATCH_ECN
 1

	)

568 
	#CONFIG_IP_NF_MATCH_DSCP
 1

	)

569 
	#CONFIG_IP_NF_MATCH_AH_ESP
 1

	)

570 
	#CONFIG_IP_NF_MATCH_LENGTH
 1

	)

571 
	#CONFIG_IP_NF_MATCH_TTL
 1

	)

572 
	#CONFIG_IP_NF_MATCH_TCPMSS
 1

	)

573 
	#CONFIG_IP_NF_MATCH_HELPER
 1

	)

574 
	#CONFIG_IP_NF_MATCH_STATE
 1

	)

575 
	#CONFIG_IP_NF_MATCH_CONNTRACK
 1

	)

576 
	#CONFIG_IP_NF_MATCH_OWNER
 1

	)

577 #unde‡
CONFIG_IP_NF_MATCH_ADDRTYPE


578 #unde‡
CONFIG_IP_NF_MATCH_REALM


579 #unde‡
CONFIG_IP_NF_MATCH_SCTP


580 #unde‡
CONFIG_IP_NF_MATCH_COMMENT


581 #unde‡
CONFIG_IP_NF_MATCH_HASHLIMIT


582 
	#CONFIG_IP_NF_FILTER
 1

	)

583 
	#CONFIG_IP_NF_TARGET_REJECT
 1

	)

584 
	#CONFIG_IP_NF_TARGET_LOG
 1

	)

585 
	#CONFIG_IP_NF_TARGET_ULOG
 1

	)

586 
	#CONFIG_IP_NF_TARGET_TCPMSS
 1

	)

587 
	#CONFIG_IP_NF_NAT
 1

	)

588 
	#CONFIG_IP_NF_NAT_NEEDED
 1

	)

589 
	#CONFIG_IP_NF_TARGET_MASQUERADE
 1

	)

590 
	#CONFIG_IP_NF_TARGET_REDIRECT
 1

	)

591 
	#CONFIG_IP_NF_TARGET_NETMAP
 1

	)

592 
	#CONFIG_IP_NF_TARGET_SAME
 1

	)

593 #unde‡
CONFIG_IP_NF_NAT_SNMP_BASIC


594 
	#CONFIG_IP_NF_MANGLE
 1

	)

595 
	#CONFIG_IP_NF_TARGET_TOS
 1

	)

596 
	#CONFIG_IP_NF_TARGET_ECN
 1

	)

597 
	#CONFIG_IP_NF_TARGET_DSCP
 1

	)

598 
	#CONFIG_IP_NF_TARGET_MARK
 1

	)

599 
	#CONFIG_IP_NF_TARGET_CLASSIFY
 1

	)

600 
	#CONFIG_IP_NF_RAW_MODULE
 1

	)

601 
	#CONFIG_IP_NF_TARGET_NOTRACK_MODULE
 1

	)

602 
	#CONFIG_IP_NF_ARPTABLES
 1

	)

603 
	#CONFIG_IP_NF_ARPFILTER
 1

	)

604 
	#CONFIG_IP_NF_ARP_MANGLE
 1

	)

609 #unde‡
CONFIG_IP_SCTP


610 #unde‡
CONFIG_ATM


611 #unde‡
CONFIG_BRIDGE


612 #unde‡
CONFIG_VLAN_8021Q


613 #unde‡
CONFIG_DECNET


614 #unde‡
CONFIG_LLC2


615 #unde‡
CONFIG_IPX


616 #unde‡
CONFIG_ATALK


617 #unde‡
CONFIG_X25


618 #unde‡
CONFIG_LAPB


619 #unde‡
CONFIG_NET_DIVERT


620 #unde‡
CONFIG_ECONET


621 #unde‡
CONFIG_WAN_ROUTER


626 #unde‡
CONFIG_NET_SCHED


627 #unde‡
CONFIG_NET_CLS_ROUTE


632 #unde‡
CONFIG_NET_PKTGEN


633 #unde‡
CONFIG_NETPOLL


634 #unde‡
CONFIG_NET_POLL_CONTROLLER


635 #unde‡
CONFIG_HAMRADIO


636 #unde‡
CONFIG_IRDA


637 #unde‡
CONFIG_BT


638 
	#CONFIG_NETDEVICES
 1

	)

639 
	#CONFIG_DUMMY_MODULE
 1

	)

640 #unde‡
CONFIG_BONDING


641 #unde‡
CONFIG_EQUALIZER


642 #unde‡
CONFIG_TUN


643 #unde‡
CONFIG_NET_SB1000


648 #unde‡
CONFIG_ARCNET


653 
	#CONFIG_NET_ETHERNET
 1

	)

654 
	#CONFIG_MII
 1

	)

655 #unde‡
CONFIG_HAPPYMEAL


656 #unde‡
CONFIG_SUNGEM


657 #unde‡
CONFIG_NET_VENDOR_3COM


658 #unde‡
CONFIG_LANCE


659 #unde‡
CONFIG_NET_VENDOR_SMC


660 #unde‡
CONFIG_NET_VENDOR_RACAL


665 #unde‡
CONFIG_NET_TULIP


666 #unde‡
CONFIG_AT1700


667 #unde‡
CONFIG_DEPCA


668 #unde‡
CONFIG_HP100


669 #unde‡
CONFIG_NET_ISA


670 
	#CONFIG_NET_PCI
 1

	)

671 #unde‡
CONFIG_PCNET32


672 #unde‡
CONFIG_AMD8111_ETH


673 #unde‡
CONFIG_ADAPTEC_STARFIRE


674 #unde‡
CONFIG_AC3200


675 #unde‡
CONFIG_APRICOT


676 #unde‡
CONFIG_B44


677 #unde‡
CONFIG_FORCEDETH


678 #unde‡
CONFIG_CS89x0


679 #unde‡
CONFIG_DGRS


680 #unde‡
CONFIG_EEPRO100


681 #unde‡
CONFIG_E100


682 #unde‡
CONFIG_FEALNX


683 #unde‡
CONFIG_NATSEMI


684 #unde‡
CONFIG_NE2K_PCI


685 #unde‡
CONFIG_8139CP


686 
	#CONFIG_8139TOO
 1

	)

687 
	#CONFIG_8139TOO_PIO
 1

	)

688 #unde‡
CONFIG_8139TOO_TUNE_TWISTER


689 #unde‡
CONFIG_8139TOO_8129


690 #unde‡
CONFIG_8139_OLD_RX_RESET


691 #unde‡
CONFIG_SIS900


692 #unde‡
CONFIG_EPIC100


693 #unde‡
CONFIG_SUNDANCE


694 #unde‡
CONFIG_TLAN


695 #unde‡
CONFIG_VIA_RHINE


696 #unde‡
CONFIG_NET_POCKET


701 #unde‡
CONFIG_ACENIC


702 #unde‡
CONFIG_DL2K


703 #unde‡
CONFIG_E1000


704 #unde‡
CONFIG_NS83820


705 #unde‡
CONFIG_HAMACHI


706 #unde‡
CONFIG_YELLOWFIN


707 #unde‡
CONFIG_R8169


708 #unde‡
CONFIG_SK98LIN


709 #unde‡
CONFIG_VIA_VELOCITY


710 #unde‡
CONFIG_TIGON3


715 #unde‡
CONFIG_IXGB


716 
	#CONFIG_S2IO_MODULE
 1

	)

717 #unde‡
CONFIG_S2IO_NAPI


718 #unde‡
CONFIG_2BUFF_MODE


723 #unde‡
CONFIG_TR


728 #unde‡
CONFIG_NET_RADIO


733 #unde‡
CONFIG_WAN


734 #unde‡
CONFIG_FDDI


735 #unde‡
CONFIG_HIPPI


736 #unde‡
CONFIG_PLIP


737 #unde‡
CONFIG_PPP


738 #unde‡
CONFIG_SLIP


739 #unde‡
CONFIG_NET_FC


740 #unde‡
CONFIG_SHAPER


741 #unde‡
CONFIG_NETCONSOLE


746 #unde‡
CONFIG_ISDN


751 #unde‡
CONFIG_PHONE


756 
	#CONFIG_INPUT
 1

	)

761 
	#CONFIG_INPUT_MOUSEDEV
 1

	)

762 
	#CONFIG_INPUT_MOUSEDEV_PSAUX
 1

	)

763 
	#CONFIG_INPUT_MOUSEDEV_SCREEN_X
 1024

	)

764 
	#CONFIG_INPUT_MOUSEDEV_SCREEN_Y
 768

	)

765 #unde‡
CONFIG_INPUT_JOYDEV


766 #unde‡
CONFIG_INPUT_TSDEV


767 #unde‡
CONFIG_INPUT_EVDEV


768 #unde‡
CONFIG_INPUT_EVBUG


773 #unde‡
CONFIG_GAMEPORT


774 
	#CONFIG_SOUND_GAMEPORT
 1

	)

775 
	#CONFIG_SERIO
 1

	)

776 
	#CONFIG_SERIO_I8042
 1

	)

777 #unde‡
CONFIG_SERIO_SERPORT


778 #unde‡
CONFIG_SERIO_CT82C710


779 #unde‡
CONFIG_SERIO_PARKBD


780 #unde‡
CONFIG_SERIO_PCIPS2


781 
	#CONFIG_SERIO_LIBPS2
 1

	)

782 #unde‡
CONFIG_SERIO_RAW


787 
	#CONFIG_INPUT_KEYBOARD
 1

	)

788 
	#CONFIG_KEYBOARD_ATKBD
 1

	)

789 #unde‡
CONFIG_KEYBOARD_SUNKBD


790 #unde‡
CONFIG_KEYBOARD_LKKBD


791 #unde‡
CONFIG_KEYBOARD_XTKBD


792 #unde‡
CONFIG_KEYBOARD_NEWTON


793 
	#CONFIG_INPUT_MOUSE
 1

	)

794 
	#CONFIG_MOUSE_PS2
 1

	)

795 #unde‡
CONFIG_MOUSE_SERIAL


796 #unde‡
CONFIG_MOUSE_INPORT


797 #unde‡
CONFIG_MOUSE_LOGIBM


798 #unde‡
CONFIG_MOUSE_PC110PAD


799 #unde‡
CONFIG_MOUSE_VSXXXAA


800 #unde‡
CONFIG_INPUT_JOYSTICK


801 #unde‡
CONFIG_INPUT_TOUCHSCREEN


802 #unde‡
CONFIG_INPUT_MISC


807 
	#CONFIG_VT
 1

	)

808 
	#CONFIG_VT_CONSOLE
 1

	)

809 
	#CONFIG_HW_CONSOLE
 1

	)

810 #unde‡
CONFIG_SERIAL_NONSTANDARD


815 
	#CONFIG_SERIAL_8250
 1

	)

816 #unde‡
CONFIG_SERIAL_8250_CONSOLE


817 #unde‡
CONFIG_SERIAL_8250_ACPI


818 
	#CONFIG_SERIAL_8250_NR_UARTS
 4

	)

819 #unde‡
CONFIG_SERIAL_8250_EXTENDED


824 
	#CONFIG_SERIAL_CORE
 1

	)

825 
	#CONFIG_UNIX98_PTYS
 1

	)

826 
	#CONFIG_LEGACY_PTYS
 1

	)

827 
	#CONFIG_LEGACY_PTY_COUNT
 256

	)

828 
	#CONFIG_PRINTER
 1

	)

829 #unde‡
CONFIG_LP_CONSOLE


830 #unde‡
CONFIG_PPDEV


831 #unde‡
CONFIG_TIPAR


836 #unde‡
CONFIG_IPMI_HANDLER


841 #unde‡
CONFIG_WATCHDOG


842 #unde‡
CONFIG_HW_RANDOM


843 #unde‡
CONFIG_NVRAM


844 #unde‡
CONFIG_RTC


845 #unde‡
CONFIG_GEN_RTC


846 #unde‡
CONFIG_DTLK


847 #unde‡
CONFIG_R3964


848 #unde‡
CONFIG_APPLICOM


849 #unde‡
CONFIG_SONYPI


854 
	#CONFIG_AGP
 1

	)

855 #unde‡
CONFIG_AGP_ALI


856 #unde‡
CONFIG_AGP_ATI


857 #unde‡
CONFIG_AGP_AMD


858 #unde‡
CONFIG_AGP_AMD64


859 
	#CONFIG_AGP_INTEL
 1

	)

860 
	#CONFIG_AGP_INTEL_MCH_MODULE
 1

	)

861 #unde‡
CONFIG_AGP_NVIDIA


862 #unde‡
CONFIG_AGP_SIS


863 #unde‡
CONFIG_AGP_SWORKS


864 #unde‡
CONFIG_AGP_VIA


865 #unde‡
CONFIG_AGP_EFFICEON


866 
	#CONFIG_DRM
 1

	)

867 #unde‡
CONFIG_DRM_TDFX


868 #unde‡
CONFIG_DRM_R128


869 #unde‡
CONFIG_DRM_RADEON


870 #unde‡
CONFIG_DRM_I810


871 #unde‡
CONFIG_DRM_I830


872 #unde‡
CONFIG_DRM_I915


873 #unde‡
CONFIG_DRM_MGA


874 #unde‡
CONFIG_DRM_SIS


875 #unde‡
CONFIG_MWAVE


876 #unde‡
CONFIG_RAW_DRIVER


877 #unde‡
CONFIG_HPET


878 #unde‡
CONFIG_HANGCHECK_TIMER


883 #unde‡
CONFIG_I2C


888 #unde‡
CONFIG_W1


893 #unde‡
CONFIG_IBM_ASM


898 #unde‡
CONFIG_VIDEO_DEV


903 #unde‡
CONFIG_DVB


908 #unde‡
CONFIG_FB


909 #unde‡
CONFIG_VIDEO_SELECT


914 
	#CONFIG_VGA_CONSOLE
 1

	)

915 #unde‡
CONFIG_MDA_CONSOLE


916 
	#CONFIG_DUMMY_CONSOLE
 1

	)

921 
	#CONFIG_SOUND
 1

	)

926 
	#CONFIG_SND
 1

	)

927 
	#CONFIG_SND_TIMER
 1

	)

928 
	#CONFIG_SND_PCM
 1

	)

929 
	#CONFIG_SND_SEQUENCER
 1

	)

930 #unde‡
CONFIG_SND_SEQ_DUMMY


931 
	#CONFIG_SND_OSSEMUL
 1

	)

932 
	#CONFIG_SND_MIXER_OSS
 1

	)

933 
	#CONFIG_SND_PCM_OSS
 1

	)

934 
	#CONFIG_SND_SEQUENCER_OSS
 1

	)

935 #unde‡
CONFIG_SND_VERBOSE_PRINTK


936 #unde‡
CONFIG_SND_DEBUG


941 #unde‡
CONFIG_SND_DUMMY


942 #unde‡
CONFIG_SND_VIRMIDI


943 #unde‡
CONFIG_SND_MTPAV


944 #unde‡
CONFIG_SND_SERIAL_U16550


945 #unde‡
CONFIG_SND_MPU401


950 #unde‡
CONFIG_SND_AD1848


951 #unde‡
CONFIG_SND_CS4231


952 #unde‡
CONFIG_SND_CS4232


953 #unde‡
CONFIG_SND_CS4236


954 #unde‡
CONFIG_SND_ES1688


955 #unde‡
CONFIG_SND_ES18XX


956 #unde‡
CONFIG_SND_GUSCLASSIC


957 #unde‡
CONFIG_SND_GUSEXTREME


958 #unde‡
CONFIG_SND_GUSMAX


959 #unde‡
CONFIG_SND_INTERWAVE


960 #unde‡
CONFIG_SND_INTERWAVE_STB


961 #unde‡
CONFIG_SND_OPTI92X_AD1848


962 #unde‡
CONFIG_SND_OPTI92X_CS4231


963 #unde‡
CONFIG_SND_OPTI93X


964 #unde‡
CONFIG_SND_SB8


965 #unde‡
CONFIG_SND_SB16


966 #unde‡
CONFIG_SND_SBAWE


967 #unde‡
CONFIG_SND_WAVEFRONT


968 #unde‡
CONFIG_SND_CMI8330


969 #unde‡
CONFIG_SND_OPL3SA2


970 #unde‡
CONFIG_SND_SGALAXY


971 #unde‡
CONFIG_SND_SSCAPE


976 
	#CONFIG_SND_AC97_CODEC
 1

	)

977 #unde‡
CONFIG_SND_ALI5451


978 #unde‡
CONFIG_SND_ATIIXP


979 #unde‡
CONFIG_SND_ATIIXP_MODEM


980 #unde‡
CONFIG_SND_AU8810


981 #unde‡
CONFIG_SND_AU8820


982 #unde‡
CONFIG_SND_AU8830


983 #unde‡
CONFIG_SND_AZT3328


984 #unde‡
CONFIG_SND_BT87X


985 #unde‡
CONFIG_SND_CS46XX


986 #unde‡
CONFIG_SND_CS4281


987 #unde‡
CONFIG_SND_EMU10K1


988 #unde‡
CONFIG_SND_EMU10K1X


989 #unde‡
CONFIG_SND_CA0106


990 #unde‡
CONFIG_SND_KORG1212


991 #unde‡
CONFIG_SND_MIXART


992 #unde‡
CONFIG_SND_NM256


993 #unde‡
CONFIG_SND_RME32


994 #unde‡
CONFIG_SND_RME96


995 #unde‡
CONFIG_SND_RME9652


996 #unde‡
CONFIG_SND_HDSP


997 #unde‡
CONFIG_SND_TRIDENT


998 #unde‡
CONFIG_SND_YMFPCI


999 #unde‡
CONFIG_SND_ALS4000


1000 #unde‡
CONFIG_SND_CMIPCI


1001 #unde‡
CONFIG_SND_ENS1370


1002 #unde‡
CONFIG_SND_ENS1371


1003 #unde‡
CONFIG_SND_ES1938


1004 #unde‡
CONFIG_SND_ES1968


1005 #unde‡
CONFIG_SND_MAESTRO3


1006 #unde‡
CONFIG_SND_FM801


1007 #unde‡
CONFIG_SND_ICE1712


1008 #unde‡
CONFIG_SND_ICE1724


1009 
	#CONFIG_SND_INTEL8X0
 1

	)

1010 #unde‡
CONFIG_SND_INTEL8X0M


1011 #unde‡
CONFIG_SND_SONICVIBES


1012 #unde‡
CONFIG_SND_VIA82XX


1013 #unde‡
CONFIG_SND_VIA82XX_MODEM


1014 #unde‡
CONFIG_SND_VX222


1019 #unde‡
CONFIG_SND_USB_AUDIO


1020 #unde‡
CONFIG_SND_USB_USX2Y


1025 #unde‡
CONFIG_SOUND_PRIME


1030 
	#CONFIG_USB
 1

	)

1031 #unde‡
CONFIG_USB_DEBUG


1036 
	#CONFIG_USB_DEVICEFS
 1

	)

1037 #unde‡
CONFIG_USB_BANDWIDTH


1038 #unde‡
CONFIG_USB_DYNAMIC_MINORS


1039 #unde‡
CONFIG_USB_SUSPEND


1040 #unde‡
CONFIG_USB_OTG


1041 
	#CONFIG_USB_ARCH_HAS_HCD
 1

	)

1042 
	#CONFIG_USB_ARCH_HAS_OHCI
 1

	)

1047 
	#CONFIG_USB_EHCI_HCD
 1

	)

1048 #unde‡
CONFIG_USB_EHCI_SPLIT_ISO


1049 #unde‡
CONFIG_USB_EHCI_ROOT_HUB_TT


1050 #unde‡
CONFIG_USB_OHCI_HCD


1051 
	#CONFIG_USB_UHCI_HCD
 1

	)

1052 #unde‡
CONFIG_USB_SL811_HCD


1057 #unde‡
CONFIG_USB_AUDIO


1058 #unde‡
CONFIG_USB_BLUETOOTH_TTY


1059 #unde‡
CONFIG_USB_MIDI


1060 #unde‡
CONFIG_USB_ACM


1061 
	#CONFIG_USB_PRINTER
 1

	)

1066 
	#CONFIG_USB_STORAGE
 1

	)

1067 #unde‡
CONFIG_USB_STORAGE_DEBUG


1068 #unde‡
CONFIG_USB_STORAGE_RW_DETECT


1069 #unde‡
CONFIG_USB_STORAGE_DATAFAB


1070 #unde‡
CONFIG_USB_STORAGE_FREECOM


1071 #unde‡
CONFIG_USB_STORAGE_ISD200


1072 #unde‡
CONFIG_USB_STORAGE_DPCM


1073 #unde‡
CONFIG_USB_STORAGE_HP8200e


1074 #unde‡
CONFIG_USB_STORAGE_SDDR09


1075 #unde‡
CONFIG_USB_STORAGE_SDDR55


1076 #unde‡
CONFIG_USB_STORAGE_JUMPSHOT


1081 
	#CONFIG_USB_HID
 1

	)

1082 
	#CONFIG_USB_HIDINPUT
 1

	)

1083 #unde‡
CONFIG_HID_FF


1084 #unde‡
CONFIG_USB_HIDDEV


1085 #unde‡
CONFIG_USB_AIPTEK


1086 #unde‡
CONFIG_USB_WACOM


1087 #unde‡
CONFIG_USB_KBTAB


1088 #unde‡
CONFIG_USB_POWERMATE


1089 #unde‡
CONFIG_USB_MTOUCH


1090 
	#CONFIG_USB_EGALAX_MODULE
 1

	)

1091 #unde‡
CONFIG_USB_XPAD


1092 #unde‡
CONFIG_USB_ATI_REMOTE


1097 #unde‡
CONFIG_USB_MDC800


1098 #unde‡
CONFIG_USB_MICROTEK


1103 #unde‡
CONFIG_USB_DABUSB


1112 #unde‡
CONFIG_USB_CATC


1113 #unde‡
CONFIG_USB_KAWETH


1114 #unde‡
CONFIG_USB_PEGASUS


1115 #unde‡
CONFIG_USB_RTL8150


1116 #unde‡
CONFIG_USB_USBNET


1121 #unde‡
CONFIG_USB_USS720


1126 #unde‡
CONFIG_USB_SERIAL


1131 #unde‡
CONFIG_USB_EMI62


1132 #unde‡
CONFIG_USB_EMI26


1133 #unde‡
CONFIG_USB_AUERSWALD


1134 #unde‡
CONFIG_USB_RIO500


1135 #unde‡
CONFIG_USB_LEGOTOWER


1136 #unde‡
CONFIG_USB_LCD


1137 #unde‡
CONFIG_USB_LED


1138 
	#CONFIG_USB_CYTHERM_MODULE
 1

	)

1139 #unde‡
CONFIG_USB_PHIDGETKIT


1140 
	#CONFIG_USB_PHIDGETSERVO_MODULE
 1

	)

1141 #unde‡
CONFIG_USB_IDMOUSE


1142 #unde‡
CONFIG_USB_TEST


1151 #unde‡
CONFIG_USB_GADGET


1156 #unde‡
CONFIG_MMC


1161 #unde‡
CONFIG_INFINIBAND


1166 
	#CONFIG_EXT2_FS
 1

	)

1167 #unde‡
CONFIG_EXT2_FS_XATTR


1168 
	#CONFIG_EXT3_FS
 1

	)

1169 
	#CONFIG_EXT3_FS_XATTR
 1

	)

1170 #unde‡
CONFIG_EXT3_FS_POSIX_ACL


1171 #unde‡
CONFIG_EXT3_FS_SECURITY


1172 
	#CONFIG_JBD
 1

	)

1173 #unde‡
CONFIG_JBD_DEBUG


1174 
	#CONFIG_FS_MBCACHE
 1

	)

1175 #unde‡
CONFIG_REISERFS_FS


1176 #unde‡
CONFIG_JFS_FS


1181 #unde‡
CONFIG_XFS_FS


1182 #unde‡
CONFIG_MINIX_FS


1183 #unde‡
CONFIG_ROMFS_FS


1184 #unde‡
CONFIG_QUOTA


1185 
	#CONFIG_DNOTIFY
 1

	)

1186 #unde‡
CONFIG_AUTOFS_FS


1187 
	#CONFIG_AUTOFS4_FS
 1

	)

1192 
	#CONFIG_ISO9660_FS
 1

	)

1193 
	#CONFIG_JOLIET
 1

	)

1194 #unde‡
CONFIG_ZISOFS


1195 
	#CONFIG_UDF_FS
 1

	)

1196 
	#CONFIG_UDF_NLS
 1

	)

1201 
	#CONFIG_FAT_FS
 1

	)

1202 
	#CONFIG_MSDOS_FS
 1

	)

1203 
	#CONFIG_VFAT_FS
 1

	)

1204 
	#CONFIG_FAT_DEFAULT_CODEPAGE
 437

	)

1205 
	#CONFIG_FAT_DEFAULT_IOCHARSET
 "iso8859-1"

	)

1206 #unde‡
CONFIG_NTFS_FS


1211 
	#CONFIG_PROC_FS
 1

	)

1212 
	#CONFIG_PROC_KCORE
 1

	)

1213 
	#CONFIG_SYSFS
 1

	)

1214 #unde‡
CONFIG_DEVFS_FS


1215 #unde‡
CONFIG_DEVPTS_FS_XATTR


1216 
	#CONFIG_TMPFS
 1

	)

1217 #unde‡
CONFIG_TMPFS_XATTR


1218 #unde‡
CONFIG_HUGETLBFS


1219 #unde‡
CONFIG_HUGETLB_PAGE


1220 
	#CONFIG_RAMFS
 1

	)

1225 #unde‡
CONFIG_ADFS_FS


1226 #unde‡
CONFIG_AFFS_FS


1227 #unde‡
CONFIG_HFS_FS


1228 #unde‡
CONFIG_HFSPLUS_FS


1229 #unde‡
CONFIG_BEFS_FS


1230 #unde‡
CONFIG_BFS_FS


1231 #unde‡
CONFIG_EFS_FS


1232 #unde‡
CONFIG_CRAMFS


1233 #unde‡
CONFIG_VXFS_FS


1234 #unde‡
CONFIG_HPFS_FS


1235 #unde‡
CONFIG_QNX4FS_FS


1236 #unde‡
CONFIG_SYSV_FS


1237 #unde‡
CONFIG_UFS_FS


1242 
	#CONFIG_NFS_FS
 1

	)

1243 #unde‡
CONFIG_NFS_V3


1244 #unde‡
CONFIG_NFS_V4


1245 #unde‡
CONFIG_NFS_DIRECTIO


1246 
	#CONFIG_NFSD
 1

	)

1247 #unde‡
CONFIG_NFSD_V3


1248 
	#CONFIG_NFSD_TCP
 1

	)

1249 
	#CONFIG_LOCKD
 1

	)

1250 
	#CONFIG_EXPORTFS
 1

	)

1251 
	#CONFIG_SUNRPC
 1

	)

1252 #unde‡
CONFIG_RPCSEC_GSS_KRB5


1253 #unde‡
CONFIG_RPCSEC_GSS_SPKM3


1254 #unde‡
CONFIG_SMB_FS


1255 #unde‡
CONFIG_CIFS


1256 #unde‡
CONFIG_NCP_FS


1257 #unde‡
CONFIG_CODA_FS


1258 #unde‡
CONFIG_AFS_FS


1263 #unde‡
CONFIG_PARTITION_ADVANCED


1264 
	#CONFIG_MSDOS_PARTITION
 1

	)

1269 
	#CONFIG_NLS
 1

	)

1270 
	#CONFIG_NLS_DEFAULT
 "iso8859-1"

	)

1271 
	#CONFIG_NLS_CODEPAGE_437
 1

	)

1272 #unde‡
CONFIG_NLS_CODEPAGE_737


1273 #unde‡
CONFIG_NLS_CODEPAGE_775


1274 #unde‡
CONFIG_NLS_CODEPAGE_850


1275 #unde‡
CONFIG_NLS_CODEPAGE_852


1276 #unde‡
CONFIG_NLS_CODEPAGE_855


1277 #unde‡
CONFIG_NLS_CODEPAGE_857


1278 #unde‡
CONFIG_NLS_CODEPAGE_860


1279 #unde‡
CONFIG_NLS_CODEPAGE_861


1280 #unde‡
CONFIG_NLS_CODEPAGE_862


1281 #unde‡
CONFIG_NLS_CODEPAGE_863


1282 #unde‡
CONFIG_NLS_CODEPAGE_864


1283 #unde‡
CONFIG_NLS_CODEPAGE_865


1284 #unde‡
CONFIG_NLS_CODEPAGE_866


1285 #unde‡
CONFIG_NLS_CODEPAGE_869


1286 #unde‡
CONFIG_NLS_CODEPAGE_936


1287 #unde‡
CONFIG_NLS_CODEPAGE_950


1288 #unde‡
CONFIG_NLS_CODEPAGE_932


1289 #unde‡
CONFIG_NLS_CODEPAGE_949


1290 #unde‡
CONFIG_NLS_CODEPAGE_874


1291 #unde‡
CONFIG_NLS_ISO8859_8


1292 #unde‡
CONFIG_NLS_CODEPAGE_1250


1293 #unde‡
CONFIG_NLS_CODEPAGE_1251


1294 #unde‡
CONFIG_NLS_ASCII


1295 
	#CONFIG_NLS_ISO8859_1
 1

	)

1296 #unde‡
CONFIG_NLS_ISO8859_2


1297 #unde‡
CONFIG_NLS_ISO8859_3


1298 #unde‡
CONFIG_NLS_ISO8859_4


1299 #unde‡
CONFIG_NLS_ISO8859_5


1300 #unde‡
CONFIG_NLS_ISO8859_6


1301 #unde‡
CONFIG_NLS_ISO8859_7


1302 #unde‡
CONFIG_NLS_ISO8859_9


1303 #unde‡
CONFIG_NLS_ISO8859_13


1304 #unde‡
CONFIG_NLS_ISO8859_14


1305 #unde‡
CONFIG_NLS_ISO8859_15


1306 #unde‡
CONFIG_NLS_KOI8_R


1307 #unde‡
CONFIG_NLS_KOI8_U


1308 #unde‡
CONFIG_NLS_UTF8


1313 
	#CONFIG_PROFILING
 1

	)

1314 
	#CONFIG_OPROFILE
 1

	)

1319 #unde‡
CONFIG_DEBUG_KERNEL


1320 
	#CONFIG_DEBUG_PREEMPT
 1

	)

1321 
	#CONFIG_DEBUG_BUGVERBOSE
 1

	)

1322 #unde‡
CONFIG_FRAME_POINTER


1323 
	#CONFIG_EARLY_PRINTK
 1

	)

1324 
	#CONFIG_4KSTACKS
 1

	)

1325 
	#CONFIG_X86_FIND_SMP_CONFIG
 1

	)

1326 
	#CONFIG_X86_MPPARSE
 1

	)

1331 #unde‡
CONFIG_KEYS


1332 #unde‡
CONFIG_SECURITY


1337 #unde‡
CONFIG_CRYPTO


1346 #unde‡
CONFIG_CRC_CCITT


1347 
	#CONFIG_CRC32
 1

	)

1348 
	#CONFIG_LIBCRC32C_MODULE
 1

	)

1349 
	#CONFIG_GENERIC_HARDIRQS
 1

	)

1350 
	#CONFIG_GENERIC_IRQ_PROBE
 1

	)

1351 
	#CONFIG_X86_SMP
 1

	)

1352 
	#CONFIG_X86_HT
 1

	)

1353 
	#CONFIG_X86_BIOS_REBOOT
 1

	)

1354 
	#CONFIG_X86_TRAMPOLINE
 1

	)

1355 
	#CONFIG_PC
 1

	)

	@/usr/include/linux/compiler-gcc.h

10 
	#b¨rõr
(Ë
__asm__
 
	`__vﬁ©ûe__
("": : :"mem‹y")

	)

14 
	#RELOC_HIDE
(
±r
, 
off
) \

15 ({ 
__±r
; \

16 
	`__asm__
 ("" : "=g"(
__±r
Ë: "0"(
±r
)); \

17 (
	`ty≥of
(
±r
)Ë(
__±r
 + (
off
)); })

	)

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

4 
	~<löux/compûî.h
>

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

13 #unde‡
off£tof


14 #ifde‡
__compûî_off£tof


15 
	#off£tof
(
TYPE
,
MEMBER
Ë
	`__compûî_off£tof
(TYPE,MEMBER)

	)

17 
	#off£tof
(
TYPE
, 
MEMBER
Ë((
size_t
Ë&((TYPE *)0)->MEMBER)

	)

	@/usr/include/pthread.h

15 #i‚de‡
_PTHREAD_H


16 
	#_PTHREAD_H
 1

	)

18 
	~<„©uªs.h
>

20 
	~<sched.h
>

21 
	~<time.h
>

23 
	#__√ed_sig£t_t


	)

24 
	~<sig«l.h
>

25 
	~<bôs/±hªadty≥s.h
>

26 
	~<bôs/öô•ö.h
>

29 
	g__BEGIN_DECLS


33 
	#PTHREAD_MUTEX_INITIALIZER
 \

34 {0, 0, 0, 
PTHREAD_MUTEX_TIMED_NP
, 
__LOCK_INITIALIZER
}

	)

35 #ifde‡
__USE_GNU


36 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

37 {0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__LOCK_INITIALIZER
}

	)

38 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

39 {0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__LOCK_INITIALIZER
}

	)

40 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

41 {0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__LOCK_INITIALIZER
}

	)

44 
	#PTHREAD_COND_INITIALIZER
 {
__LOCK_INITIALIZER
, 0, "", 0}

	)

46 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


47 
	#PTHREAD_RWLOCK_INITIALIZER
 \

48 { 
__LOCK_INITIALIZER
, 0, 
NULL
, NULL, NULL, \

49 
PTHREAD_RWLOCK_DEFAULT_NP
, 
PTHREAD_PROCESS_PRIVATE
 }

	)

51 #ifde‡
__USE_GNU


52 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

53 { 
__LOCK_INITIALIZER
, 0, 
NULL
, NULL, NULL, \

54 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, 
PTHREAD_PROCESS_PRIVATE
 }

	)

61 
	mPTHREAD_CREATE_JOINABLE
,

62 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

63 
	mPTHREAD_CREATE_DETACHED


64 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

69 
	mPTHREAD_INHERIT_SCHED
,

70 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

71 
	mPTHREAD_EXPLICIT_SCHED


72 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

77 
	mPTHREAD_SCOPE_SYSTEM
,

78 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

79 
	mPTHREAD_SCOPE_PROCESS


80 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

85 
	mPTHREAD_MUTEX_TIMED_NP
,

86 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

87 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

88 
	mPTHREAD_MUTEX_ADAPTIVE_NP


89 #ifde‡
__USE_UNIX98


91 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

92 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

93 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

94 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


96 #ifde‡
__USE_GNU


98 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_ADAPTIVE_NP


104 
	mPTHREAD_PROCESS_PRIVATE
,

105 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

106 
	mPTHREAD_PROCESS_SHARED


107 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

110 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


113 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

114 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

115 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

116 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_WRITER_NP


120 
	#PTHREAD_ONCE_INIT
 0

	)

124 #ifde‡
__USE_XOPEN2K


126 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

131 
	s_±hªad_˛ónup_buf„r


133 (*
	m__routöe
) (*);

134 *
	m__¨g
;

135 
	m__ˇn˚…y≥
;

136 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

143 
	mPTHREAD_CANCEL_ENABLE
,

144 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

145 
	mPTHREAD_CANCEL_DISABLE


146 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

150 
	mPTHREAD_CANCEL_DEFERRED
,

151 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

152 
	mPTHREAD_CANCEL_ASYNCHRONOUS


153 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

155 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

163 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__thªadp
,

164 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

165 *(*
__°¨t_routöe
) (*),

166 *
__ª°ri˘
 
__¨g
Ë
__THROW
;

169 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
;

172 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

175 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

180 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

186 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

194 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

197 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
;

200 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

201 
__dëach°©e
Ë
__THROW
;

204 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

205 *
__dëach°©e
Ë
__THROW
;

208 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

209 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


210 
__∑øm
Ë
__THROW
;

213 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


214 
__©å
,

215 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

216 
__THROW
;

219 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

220 
__THROW
;

223 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


224 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

225 
__THROW
;

228 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

229 
__öhîô
Ë
__THROW
;

232 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


233 
__©å
, *
__ª°ri˘
 
__öhîô
)

234 
__THROW
;

237 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

238 
__THROW
;

241 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

242 *
__ª°ri˘
 
__sc›e
Ë
__THROW
;

244 #ifde‡
__USE_UNIX98


246 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

247 
size_t
 
__gu¨dsize
Ë
__THROW
;

250 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


251 
__©å
, 
size_t
 *
__ª°ri˘
 
__gu¨dsize
)

252 
__THROW
;

259 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

260 *
__°ackaddr
Ë
__THROW
;

263 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


264 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

265 
__THROW
;

267 #ifde‡
__USE_XOPEN2K


271 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

272 
size_t
 
__°acksize
Ë
__THROW
;

275 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

276 **
__ª°ri˘
 
__°ackaddr
,

277 
size_t
 *
__ª°ri˘
 
__°acksize
Ë
__THROW
;

283 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

284 
size_t
 
__°acksize
Ë
__THROW
;

287 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


288 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

289 
__THROW
;

291 #ifde‡
__USE_GNU


295 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
Ë
__THROW
;

302 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

303 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

304 
__THROW
;

307 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

308 *
__ª°ri˘
 
__pﬁicy
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
;

312 #ifde‡
__USE_UNIX98


314 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

317 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

320 #ifde‡
__USE_GNU


325 
	$±hªad_yõld
 (Ë
__THROW
;

332 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

333 
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


334 
__muãx_©å
Ë
__THROW
;

337 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

340 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

343 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

345 #ifde‡
__USE_XOPEN2K


347 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

348 
__c⁄°
 
time•ec
 *
__ª°ri˘


349 
__ab°ime
Ë
__THROW
;

353 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
Ë
__THROW
;

360 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

363 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
Ë
__THROW
;

366 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

367 
__ª°ri˘
 
__©å
,

368 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

371 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

372 
__psh¨ed
Ë
__THROW
;

374 #ifde‡
__USE_UNIX98


378 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

379 
__THROW
;

382 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


383 
__©å
, *
__ª°ri˘
 
__köd
Ë
__THROW
;

391 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

392 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


393 
__c⁄d_©å
Ë
__THROW
;

396 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

399 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

402 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
Ë
__THROW
;

406 
	`±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

407 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
);

413 
	`±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

414 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

415 
__c⁄°
 
time•ec
 *
__ª°ri˘


416 
__ab°ime
);

421 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

424 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
Ë
__THROW
;

427 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

428 
__ª°ri˘
 
__©å
,

429 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

432 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

433 
__psh¨ed
Ë
__THROW
;

436 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


441 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

442 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


443 
__©å
Ë
__THROW
;

446 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

449 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

452 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

454 #ifde‡
__USE_XOPEN2K


456 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

457 
__c⁄°
 
time•ec
 *
__ª°ri˘


458 
__ab°ime
Ë
__THROW
;

462 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

465 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

467 #ifde‡
__USE_XOPEN2K


469 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

470 
__c⁄°
 
time•ec
 *
__ª°ri˘


471 
__ab°ime
Ë
__THROW
;

475 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
Ë
__THROW
;

481 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

484 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
Ë
__THROW
;

487 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

488 
__ª°ri˘
 
__©å
,

489 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

492 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

493 
__psh¨ed
Ë
__THROW
;

496 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
,

497 *
__¥ef
Ë
__THROW
;

500 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

501 
__¥ef
Ë
__THROW
;

504 #ifde‡
__USE_XOPEN2K


510 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

511 
__THROW
;

514 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

517 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

520 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

523 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
Ë
__THROW
;

528 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

529 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


530 
__©å
, 
__cou¡
Ë
__THROW
;

532 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

534 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

536 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
Ë
__THROW
;

538 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

539 
__ª°ri˘
 
__©å
,

540 *
__ª°ri˘
 
__psh¨ed
Ë
__THROW
;

542 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

543 
__psh¨ed
Ë
__THROW
;

545 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
Ë
__THROW
;

557 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

558 (*
__de°r_fun˘i⁄
Ë(*)Ë
__THROW
;

561 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

564 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

565 
__c⁄°
 *
__poöãr
Ë
__THROW
;

568 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

580 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

581 (*
__öô_routöe
) ());

588 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

592 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

595 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__ˇn˚…hªad
);

600 
	`±hªad_ã°ˇn˚l
 ();

610 
	#±hªad_˛ónup_push
(
routöe
,
¨g
) \

611 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

612 
	`_±hªad_˛ónup_push
 (&
_buf„r
, (
routöe
), (
¨g
));

	)

614 
	`_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

615 (*
__routöe
) (*),

616 *
__¨g
Ë
__THROW
;

621 
	#±hªad_˛ónup_p›
(
execuã
) \

622 
	`_±hªad_˛ónup_p›
 (&
_buf„r
, (
execuã
)); 
	}

	)
}

624 
	$_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

625 
__execuã
Ë
__THROW
;

630 #ifde‡
__USE_GNU


631 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
,
¨g
) \

632 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

633 
	`_±hªad_˛ónup_push_de„r
 (&
_buf„r
, (
routöe
), (
¨g
));

	)

635 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

636 (*
__routöe
) (*),

637 *
__¨g
Ë
__THROW
;

643 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

644 
	`_±hªad_˛ónup_p›_ª°‹e
 (&
_buf„r
, (
execuã
)); 
	}

	)
}

646 
	$_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
__buf„r
,

647 
__execuã
Ë
__THROW
;

651 #ifde‡
__USE_XOPEN2K


653 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

654 
__˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

659 
	~<bôs/sigthªad.h
>

675 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

676 (*
__∑ª¡
) (),

677 (*
__chûd
Ë()Ë
__THROW
;

682 
	$±hªad_kûl_Ÿhî_thªads_≈
 (Ë
__THROW
;

684 
__END_DECLS


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

34 
	#__√ed_wöt_t


	)

35 
	~<°ddef.h
>

36 #i‚de‡
_WINT_T


41 
	#_WINT_T


	)

42 
	twöt_t
;

44 #ifde‡
__USE_ISOC99


45 
	$__USING_NAMESPACE_C99
(
wöt_t
)

47 
__END_NAMESPACE_C99


52 #i‚de‡
WEOF


53 
	#WEOF
 (0xffffffffu)

	)

56 #unde‡
__√ed_iswxxx


61 #i‚de‡
__iswxxx_deföed


62 
	#__iswxxx_deföed
 1

	)

64 
__BEGIN_NAMESPACE_C99


67 
	tw˘y≥_t
;

68 
__END_NAMESPACE_C99


70 #i‚de‡
_ISwbô


75 
	~<ídün.h
>

76 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


77 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

79 
	#_ISwbô
(
bô
) \

80 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

81 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

82 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

83 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

88 
__ISwuµî
 = 0,

89 
__ISwlowî
 = 1,

90 
__ISwÆpha
 = 2,

91 
__ISwdigô
 = 3,

92 
__ISwxdigô
 = 4,

93 
__ISw•a˚
 = 5,

94 
__ISw¥öt
 = 6,

95 
__ISwgøph
 = 7,

96 
__ISwbœnk
 = 8,

97 
__ISw˙ål
 = 9,

98 
__ISwpun˘
 = 10,

99 
__ISwÆnum
 = 11,

101 
_ISwuµî
 = 
	`_ISwbô
 (
__ISwuµî
),

102 
_ISwlowî
 = 
	`_ISwbô
 (
__ISwlowî
),

103 
_ISwÆpha
 = 
	`_ISwbô
 (
__ISwÆpha
),

104 
_ISwdigô
 = 
	`_ISwbô
 (
__ISwdigô
),

105 
_ISwxdigô
 = 
	`_ISwbô
 (
__ISwxdigô
),

106 
_ISw•a˚
 = 
	`_ISwbô
 (
__ISw•a˚
),

107 
_ISw¥öt
 = 
	`_ISwbô
 (
__ISw¥öt
),

108 
_ISwgøph
 = 
	`_ISwbô
 (
__ISwgøph
),

109 
_ISwbœnk
 = 
	`_ISwbô
 (
__ISwbœnk
),

110 
_ISw˙ål
 = 
	`_ISwbô
 (
__ISw˙ål
),

111 
_ISwpun˘
 = 
	`_ISwbô
 (
__ISwpun˘
),

112 
_ISwÆnum
 = 
	`_ISwbô
 (
__ISwÆnum
)

117 
__BEGIN_DECLS


119 
__BEGIN_NAMESPACE_C99


126 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

132 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

135 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

139 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

143 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

148 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

161 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

166 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

176 #ifde‡
__USE_ISOC99


177 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

186 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

190 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

191 
__END_NAMESPACE_C99


198 
__BEGIN_NAMESPACE_C99


201 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

202 
__END_NAMESPACE_C99


203 #ifde‡
__USE_GNU


204 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

207 
__BEGIN_NAMESPACE_C99


209 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

212 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

213 
__END_NAMESPACE_C99


215 
__END_DECLS


222 #ifde‡
_WCTYPE_H


228 
__BEGIN_DECLS


230 
__BEGIN_NAMESPACE_C99


233 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

236 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

237 
__END_NAMESPACE_C99


239 #ifde‡
__USE_GNU


241 
	~<xloˇÀ.h
>

245 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

251 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

254 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

258 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

262 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

267 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

290 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

295 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

299 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

300 
__THROW
;

304 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

305 
__THROW
;

313 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

316 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

320 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

321 
__THROW
;

324 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

325 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

329 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/initspin.h

23 
	#__LT_SPINLOCK_INIT
 0

	)

26 
	#__LOCK_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

27 
	#__ALT_LOCK_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

28 
	#__ATOMIC_INITIALIZER
 { 0, 
__LT_SPINLOCK_INIT
 }

	)

	@/usr/include/sched.h

20 #i‚def 
_SCHED_H


21 
	#_SCHED_H
 1

	)

23 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	#__√ed_time•ec


	)

29 
	~<time.h
>

32 
	~<bôs/sched.h
>

34 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

37 
__BEGIN_DECLS


40 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

41 
__THROW
;

44 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

47 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

48 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

51 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

54 
	$sched_yõld
 (Ë
__THROW
;

57 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

60 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

63 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

66 #ifde‡
__USE_GNU


68 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

69 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET
 (˝u, cpu£ç)

	)

70 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR
 (˝u, cpu£ç)

	)

71 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET
 (˝u, cpu£ç)

	)

72 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO
 (˝u£ç)

	)

76 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

77 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

80 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

81 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

84 
__END_DECLS


	@
1
.
1
/usr/include
324
6906
_build.h
alloc.h
ansi.h
attrcache.h
attrs.h
autoconf.h
btech/aero.bomb.h
btech/artillery.h
btech/autopilot.h
btech/btconfig.h
btech/btechstats.h
btech/btechstats_global.h
btech/btmacros.h
btech/chargen_commands.h
btech/chargen_menus.h
btech/coolmenu.h
btech/coolmenu_interface.h
btech/coolmenu_interface2.h
btech/create.h
btech/debug.h
btech/extern.h
btech/failures.h
btech/floatsim.h
btech/glue.h
btech/glue_types.h
btech/hudinfo.h
btech/macros.h
btech/map.coding.h
btech/map.los.h
btech/maps.h
btech/mech.avail.h
btech/mech.combat.h
btech/mech.custom.h
btech/mech.ecm.h
btech/mech.events.h
btech/mech.h
btech/mech.ice.h
btech/mech.lostracer.h
btech/mech.notify.h
btech/mech.partnames.h
btech/mech.physical.h
btech/mech.sensor.h
btech/mech.stat.h
btech/mech.tech.damages.h
btech/mech.tech.h
btech/mech.tic.h
btech/mechrep.h
btech/mine.h
btech/mux_tree.h
btech/muxevent.h
btech/mycool.h
btech/myfifo.h
btech/mymath.h
btech/p.aero.bomb.h
btech/p.aero.move.h
btech/p.ai.h
btech/p.artillery.h
btech/p.autogun.h
btech/p.autopilot.h
btech/p.autopilot_command.h
btech/p.autopilot_commands.h
btech/p.bsuit.h
btech/p.btech.h
btech/p.btechstats.h
btech/p.btspath.h
btech/p.chargen.h
btech/p.coolmenu.h
btech/p.crit.h
btech/p.debug.h
btech/p.ds.bay.h
btech/p.ds.turret.h
btech/p.econ.h
btech/p.econ_cmds.h
btech/p.eject.h
btech/p.event.h
btech/p.event_test.h
btech/p.events.h
btech/p.failures.h
btech/p.glue.h
btech/p.glue.hcode.h
btech/p.glue.scode.h
btech/p.luck.h
btech/p.map.bits.h
btech/p.map.build.functions.h
btech/p.map.coding.h
btech/p.map.conditions.h
btech/p.map.dynamic.h
btech/p.map.h
btech/p.map.obj.h
btech/p.map.weather.h
btech/p.mech.advanced.h
btech/p.mech.ammodump.h
btech/p.mech.avail.h
btech/p.mech.bth.h
btech/p.mech.build.h
btech/p.mech.c3.h
btech/p.mech.c3.misc.h
btech/p.mech.c3i.h
btech/p.mech.combat.h
btech/p.mech.combat.misc.h
btech/p.mech.combat.missile.h
btech/p.mech.consistency.h
btech/p.mech.contacts.h
btech/p.mech.custom.h
btech/p.mech.damage.h
btech/p.mech.ecm.h
btech/p.mech.enhanced.criticals.h
btech/p.mech.events.h
btech/p.mech.fire.h
btech/p.mech.hitloc.h
btech/p.mech.ice.h
btech/p.mech.lite.h
btech/p.mech.los.h
btech/p.mech.lostracer.h
btech/p.mech.maps.h
btech/p.mech.mechref_ident.h
btech/p.mech.move.h
btech/p.mech.notify.h
btech/p.mech.ood.h
btech/p.mech.partnames.h
btech/p.mech.physical.h
btech/p.mech.pickup.h
btech/p.mech.restrict.h
btech/p.mech.scan.h
btech/p.mech.sensor.functions.h
btech/p.mech.sensor.h
btech/p.mech.spot.h
btech/p.mech.startup.h
btech/p.mech.stat.h
btech/p.mech.status.h
btech/p.mech.tag.h
btech/p.mech.tech.commands.h
btech/p.mech.tech.damages.h
btech/p.mech.tech.do.h
btech/p.mech.tech.events.h
btech/p.mech.tech.h
btech/p.mech.tech.repairs.h
btech/p.mech.tech.saverepair.h
btech/p.mech.tic.h
btech/p.mech.update.h
btech/p.mech.utils.h
btech/p.mechfile.h
btech/p.mechrep.h
btech/p.mine.h
btech/p.mux_tree.h
btech/p.pcombat.h
btech/p.scen.h
btech/p.spath.h
btech/p.template.h
btech/p.tree.h
btech/pcombat.h
btech/scen.h
btech/spath.h
btech/tree.h
btech/turret.h
btech/vixie.h
btech/weapons.fasa.h
btech/weapons.h
btech/weapons.vrt.h
command.h
comsys.h
config.h
copyright.h
crypt/crypt-private.h
crypt/crypt.h
crypt/patchlevel.h
crypt/ufc-crypt.h
db.h
externs.h
file_c.h
flags.h
functions.h
funmath.h
help.h
htab.h
interface.h
levels.h
mail.h
match.h
mguests.h
misc.h
mudconf.h
muxcli.h
pcre.h
powers.h
python.h
sha1.h
slave.h
sqlshared.h
stringutil.h
svdhash.h
svdrand.h
svdreport.h
timeutil.h
tools/announce.c
tools/dbpuller.c
vattr.h
/usr/include/arpa/inet.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/memory.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/fcntl.h
/usr/include/sys/file.h
/usr/include/sys/param.h
/usr/include/sys/resource.h
/usr/include/sys/select.h
/usr/include/sys/socket.h
/usr/include/sys/stat.h
/usr/include/sys/syscall.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/sys/wait.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/asm/unistd.h
/usr/include/bits/byteswap.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/huge_val.h
/usr/include/bits/huge_valf.h
/usr/include/bits/huge_vall.h
/usr/include/bits/in.h
/usr/include/bits/inf.h
/usr/include/bits/mathcalls.h
/usr/include/bits/mathdef.h
/usr/include/bits/mathinline.h
/usr/include/bits/nan.h
/usr/include/bits/netdb.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/resource.h
/usr/include/bits/select.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/socket.h
/usr/include/bits/stat.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/syscall.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wordsize.h
/usr/include/bits/xopen_lim.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/sys/uio.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/asm/param.h
/usr/include/asm/ptrace.h
/usr/include/asm/sigcontext.h
/usr/include/asm/socket.h
/usr/include/bits/endian.h
/usr/include/bits/local_lim.h
/usr/include/bits/sched.h
/usr/include/bits/sockaddr.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/uio.h
/usr/include/bits/wchar.h
/usr/include/gnu/stubs.h
/usr/include/linux/compiler.h
/usr/include/linux/errno.h
/usr/include/linux/linkage.h
/usr/include/linux/types.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/asm/linkage.h
/usr/include/asm/posix_types.h
/usr/include/asm/sockios.h
/usr/include/asm/types.h
/usr/include/bits/libc-lock.h
/usr/include/gconv.h
/usr/include/linux/compiler-gcc+.h
/usr/include/linux/compiler-gcc2.h
/usr/include/linux/compiler-gcc3.h
/usr/include/linux/compiler-intel.h
/usr/include/linux/config.h
/usr/include/linux/posix_types.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/linux/autoconf.h
/usr/include/linux/compiler-gcc.h
/usr/include/linux/stddef.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/initspin.h
/usr/include/sched.h
