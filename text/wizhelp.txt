 
& @addcommand
 
  Syntax: @addcommand <name>=<thing>/<attribute>
  
  This command has permits the addition of softcoded commands to the 
  MUX's built-in command table. 
  
  NOTE - if the specified name already exists as a hardcoded command 
  then the new command being added will replace the functionality of 
  the original.
  
  Example: 
  In the case of using @addcommand to add a command 'look' - this 
  command will replace the hardcoded look and all aliases that 
  currently point to it ie: the aliases 'l', 'lo', and 'loo', 
  and the main command 'look' will all point to the softcoded 
  command specified by the @addcommand. 
  
  The syntax of <thing>/<attribute> is like any normal $command. 
 
  Continued in @addcommand2
 
& @addcommand2
 
   Example:

  > &LOOK me=$look:say I looked here!
  > &LOOK_WITH_ARG me=$look *:say I looked at %0!
  > &LOOK_OUTSIDE me=$look/outside *:say I looked outside at %0!
  > @addcommand look=me/look
  > @addcommand look=me/look_with_arg
  > @addcommand look=me/look_outside
 
  As shown above more than one attribute can be specified with <name>. 
  When you type 'look' or 'look sofa', the game will execute all 
  attributes that match what you have typed. Aliases such as 'l' are 
  expanded to 'look' eliminating the need to deal with such when 
  taking command matching into consideration. If none of the 
  attributes attached match (the attribute *must* begin with $<name> 
  in order to match at all!), no output will be generated.
 
  Another use is to speed up use of a particular global command. 
  Commands in the built-in table are accessed much more quickly 
  than otherwise.
 
  See also: @delcommand, @listcommands.
  
& @admin
 
  Syntax: @admin <config param> <value>
  
  This command permits you to set config parameters at runtime.
  
  See also: config_parameters
  
& @allowance
 
  Syntax: @allowance <amount>
  Attribute: allowance
  
  This command sets the allowance attribute, which when set on a 
  player, overrides the default config paramenter 'paycheck', 
  therefore determining the amount of money that player receives each 
  day he connects.
  
  See Also: @allowance
  
& @boot
 
  Syntax: @boot[/switches] <name|portnum> 
  
  This command permits you to forcibly disconnect a player from the 
  MUX.
  
  The following switches are available:
     /port  - permits you to specifiy the port that the player you 
              wish to @boot is connected to, rather than the player 
              name.
     /quiet - does not display to the booted player than the reason 
              for the disconnection was a @boot
  
  Arguments:
  * <name> - specifies the name of the player to be booted
  * <port> - when using the /port switch specifies the port the player 
             is connected to.
 
& @comment

  Syntax: @comment <object> = <text>
  Attribute: comment

  This attribute can only be set by wizards. It is used to contain any
  comments about the player which the wizard may wish to set.
  
& @cut
 
  Syntax: @cut <object/exit>
  
  This command cuts off the object or exit list for the current 
  location at the indicated object or exit by setting [next(thing)] 
  to NOTHING. Objects or exits that follow in the chain are not moved 
  or otherwise changed, and are only accessable by object number.  
  
  This command is intended for performing database repair, and 
  should be used only with extreme caution.
  
& @damage
 
  Syntax: @damage <num> <cluster> <isrear> <iscrit>
 
  This command causes damage to be done to a random locaion of the RS 
  Unit you are in.
 
  Arguments:
  * <num> - the amount of damage to be done
  * <cluster> - the amount of damage per impact point
  * <isrear> - a boolean argument. If true (eg 1) the damage is to the 
               rear arc of the RS Unit.
  * <iscrit> - a boolean argument. If true (eg 1) the command will 
               attempt a critical hit
 
  Errors:
  * if <num> is an invalid amount the command will return "Invalid 
    damage!". Valid arguments are > 0 and <=1000.
  * if <cluster> is an invalid amount the command will return "Invalid 
    cluster size!". Valie arguments are > 0.
  * if <isrear> is an invalid argument (ie a non numeric arg) the 
    command will return "Invalid isrear flag!"
  * if <iscrit> is an invalid argument (ie a non numeric arg) the 
    command will return "Invalide iscritical flag!"
  
  NOTE - The command does not check to verify that the ammount of 
  damage specified by <num> is greater than the clustersize.
 
  See also: btdamagemech()
  
& @dbck
 
  Syntax:  @dbck
  
  This command performs a scan of the database looking for 
  inconsistencies in the object chains, disconnected rooms, rooms 
  waiting to be destroyed, and problems in the object free list.  
  
  Problems that are found are reported to the 
  log file, disconnected rooms are reported to their owners, and 
  players are credited for rooms destroyed.  
  
  Database checks are automatically run periodically, so there is 
  usually no need to use this command.
  
  See also: @admin, @disable, @enable, @list.
  
& @delcommand
 
  Syntax: @delcommand <name>[=<thing>/<attribute>]
  
  This command deletes a command which has been added to the MUX's 
  built-in command table using the @addcommand command.
  
  Arguments:
  * name - deletes all commands under <name>
  * 
  
   . When you specify 
  <thing> and <attribute>, it only deletes that specific entry. If the 
  command or commands you are deleting had replaced a built-in 
  command, the built-in command and all
  aliases are restored to their normal names and actions.
 
  See also: @addcommand, @listcommands.
   
& @disable
 
  Syntax: @disable <option>
  
  Turns off the indicated MUX runtime parameter.  The following 
  parameters may be turned off:
  
    building      - Allows players to use the building commands.
    checkpointing - Enables periodic database checkpoint dumping.
    cleaning      - Enables periodic scanning of the database for 
                    rooms to be destroyed.
    dequeueing    - Allows commands to be removed from the queue and
                    executed.
    idlechecking  - Enables periodic checking for and booting of idle
                    players.
    interpret     - Enables execution of commands that place commands
                    on the queue.
    logins        - Allows nonwizard players to connect to their 
                    characters.
    eventchecking - Enables certain attribute events (@daily, etc) to 
                    occur.
 
  These parameters are all enabled by default.
  
  See also: @enable, @list.
  
& @dump
 
  Syntax: @dump[/<switches>]
  
  Writes a checkpoint dump of the database to disk.  Checkpoint dumps 
  are automatically performed periodically, so there is usually no 
  need to use this command.  
  
  Switches may be used to either dump 
  just the structure portion of the database to a flat file, or to 
  ensure that all changes to the text database are written out to 
  disk.  The default is to write out both files.
  
  The following options are available:
     structure  - Dump the structure portion of the database to a flat 
                  file.
     text       - Ensure that all changes to the text portion of the
                  database are written out to disk.
     optimize   - Rewrites the gdbm hash table out to disk, compressing
                  unused space. Should be used sparingly, and only when
                  there has been a lot of shuffling in the database.
 
  Note that the structure and text options will cause your database and
  certain caches to be out of sync. They should NOT be used in the course
  of normal operation.
 
  See also: @admin, @disable, @enable, @list, @shutdown.
  
& @enable
 
  Syntax: @enable <option>
  
  Turns on the indicated MUX runtime parameter.  The following 
  parameters may be turned on:
  
    building      - Allows players to use the building commands.
    checkpointing - Enables periodic database checkpoint dumping.
    cleaning      - Enables periodic scanning of the database for rooms
                    to be destroyed.
    dequeueing    - Allows commands to be removed from the queue and
                    executed.
    idlechecking  - Enables periodic checking for and booting of idle
                    players.
    interpret     - Enables execution of commands that place commands
                    on the queue.
    logins        - Allows nonwizard players to connect to their characters.
    eventchecking - Enables certain attribute events (@daily, etc) to occur.
 
  These parameters are all enabled by default.
  
  See also: @disable, @list.
  
& @kick
 
  Syntax: @kick <count>
  
  This command immediately executes the first <count> commands from 
  the top of the queue.
  
  See also: @disable, @enable, @timewarp.
  
& @list_file
 
  @list_file <file>

  Lists the contents of one of the message files that are shown during 
  the connect/create/disconnect process as conditions warrant.  The 
  following files may be listed:
  
     badsite_connect - shown when a connection is opened from a 
                       forbidden site.
     connect          - shown when a connection is opened from a site 
                        for which registration is not enforced.
     create_register  - shown when the 'create' command is used from a 
                        site for which registration is enforced.
     down             - shown when a non-wizard attempts to connect to 
                        or create a character when logins are 
                        disabled.
     full             - shown when a non-wizard attempts to connect to 
                        or create a character when the maximum 
                        number of connected players are connected.  
                        Note that this is different from what happens 
                        when someone tries to  connect but there are 
                        no free descriptors, which is machine-
                        dependent (usually the connect attempt hangs 
                        or is rejected).
 
  Continued in @list_files2
 
& @list_file2
 

     guest_motd       - shown to guest characters immediately after 
                        they connect.
     motd             - shown to all players immediately after they 
                        connect. (except guests and players connecting 
                        for the first time)
     newuser          - shown to players the first time they connect 
                        in place of the motd file.
     quit             - shown to players when they disconnect from the 
                        game. 
     register_connect - shown when a connection is opened from a site 
                        for which registration is enforced.
     wizard_motd      - shown to wizards when they connect in addition 
                        to the motd file.
 
  See also: @readcache, badsite_file, connect_file, connect_reg_file,
            down_file, guest_file, motd_file, newuser_file, quit_file,
            register_create_file, wizard_motd_file.
 
& @listcommands
 
  Syntax: @listcommands [<name>]
  
  This command lists the commands which have been added to the MUX 
  built-in command table using  @addcommand. 
  
  Arguments:
  none - lists all added commands
  * name - lists all commands with that particular name
  
  See also: @addcommand, @listcommands.
  
& @log
 
  Syntax: @log <logfile>=<logtext>
  
  This command logs text to the specified logfile in your /game/logs 
  directory. 
  
  NOTE - <logfile> must already exist - the command will not create 
  it.
  
  Errors:
  * if <logtext> is blank the command returns "Nothing to log!"
  * if <logfile> does not exist the command returns "Invalid logfile."
  
& @losemit
 
  RS Command: @losemit <message>

  This command causes everyone within LOS of the RS Unit to see the 
  emitted message.
  
  Example:
  Given that you are in a Naga-Prime with a UnitID of PW
  
  >@losemit shakes it's booty
  
  Other units on the map within LOS will see:
  
  T1 Naga [pw] shakes it's booty
  
& @motd
 
  Syntax: @motd[/<switches>] <message>
 
  This command sets or lists short messages that are displayed to 
  players after they successfully log in to the game (or after they 
  fail because logins are not allowed).  These messages are displayed 
  in addition to the contents of the motd.txt and wizmotd.txt files.
 
  The following switches are available:
     (No switches)   - Sets the message that all players see when they connect.
     /wizard         - Sets the message that wizards see when they connect.
     /down           - Sets the message the players see when they try to
                       connect, but fail because logins are disabled.
     /full           - Sets the message that players see when they try to
                       connect, but fail because there are too many players
                       already connected.
     /list           - Lists the current messages.

  See also: @listmotd
  
& @newpassword
 
  Syntax: @newpassword <player>[=<newpassword>]
  
  This command gives <player> the new password <newpassword>.  If 
  <newpassword> is not specified, the player is given a null 
  password.  If logged in, the player is notified that his password 
  has been changed.
  
  See also: @password
  
& @ood
 
  RS Command: @ood <x> <y> [<z>]
  
  This command initiates an Orbital Drop at the specified location. 
  
  Errors:
  * if <x> or <y> are out of bounds the command returns "Invalid co-
    ordinates!"
  * if <x> is not a valid argument (eg non-numeric) the command 
    returns "Invalid number! (x)"
  * if <y> is not a valid argument (eg non-numeric) the command 
    returns "Invalid number! (y)"
  * if the RS Unit is fallen (ie not standing) the command returns 
    "You'll have to get up first."
  * if the RS Unit is currently digging-in the command returns "You're 
    too busy digging in."
  
  Arguments:
  * <z> - if specified the RS Unit will drop from a height of z
  
& @pcreate
 
  Syntax: @pcreate <player>=<password>
  
  This command creates a new player with the indicated password.  This 
  command is equivalent to typing 'create <player> <password>' from 
  the connection screen, and is normally only used when registration 
  is enabled.
  
& @poor
 
  Syntax: @poor <amount>
  
  Sets the wealth of all players to <amount>.
  
& @power
 
  Syntax: @power <object>=[!]<power>
 
  This is a command that allows the granting of special powers to
  objects of any type.
 
  See also: POWERS LIST
  
& @python

  Currently the implementation of this command is incomplete.
  
& @readcache
 
  Syntax: @readcache
  
  This command reads the commonly-used text files and help indexes on 
  the game directory into an internal cache, destroying the prior 
  contents of the cache.
  
  Use this command whenever you change one of the text of index files 
  in the game directory. 
  
  NOTE - Be sure and run mkindx to produce new index files before 
  running @readcache.
  
& @restart
 
  Syntax: @restart
  
  This command literally restarts the game. To the players, it appears 
  as merely a short pause in the action. There are many reasons to 
  @restart, including updating the source code, freeing built-up 
  memory, etc.
  
  @restart dumps and reloads the database, so you cannot use it to 
  change the database. You may recompile and use @restart to 
  implement the changes without having to @shutdown.
  
  See Also: @shutdown
  
& @setmap
 
  Syntax: @setmap <name> <value>
  
  This command permits you to set <value> on the xcodevalue <name>
  on a map object.
  
  This is the equivalent of the btsetxcodevalue() function.
  
  NOTE - the command does not return any message to indicate success.
  
  Errors:
  * if argumments !=2 the command returns "Invalid arguments!"
  * if <name> is not a valid value for a MAP object the command 
    returns "Error: No xcode values for this type of object found."
  
  See Also: btsetxcodevalue
  
& @setmech
 
  Syntax: @setmech <name> <value>
  
  This command permits you to set <value> on the xcodevalue <name>
  on a mech object.
  
  This is the equivalent of the btsetxcodevalue() function.
  
  NOTE - the command does not return any message to indicate success.
  
  Errors:
  * if argumments !=2 the command returns "Invalid arguments!"
  * if <name> is not a valid value for a mech object the command 
    returns "Error: No xcode values for this type of object found."
  
  See Also: btsetxcodevalue
  
& @setxcode
 
  Syntax: @setxcode <name> <value>
  
  This command permits you to set <value> on the xcodevalue <name>
  on a xcode object.
  
  This is the equivalent of the btsetxcodevalue() function.
  
  NOTE - the command does not return any message to indicate success.
  
  Errors:
  * if argumments !=2 the command returns "Invalid arguments!"
  * if <name> is not a valid value for a xcode object the command 
    returns "Error: No xcode values for this type of object found."
  
  See Also: btsetxcodevalue()
  
& @shutdown
 
  Syntax: @shutdown <text>
  
  This command disconnects all connected players, saves the database 
  to disk, and shuts down the game.  The game is unavailable until 
  it is restarted.  
  
  If an argument is specified, it is written to the file named by 
  the status_file config directive.
  
  See also: @restart, status_file
  
& @timewarp
 
  Syntax: @timewarp[/<switches>] <secs>
  
  This command subtracts (or adds if negative) <secs> to one or more 
  internal timers, depending on the switches specified from the 
  following list:
     /check    - The time left until the next consistency check and 
                 database cleaning.
     /dump     - The time left until the next automatic checkpoint 
                 dump.
     /idle     - The time left until the next check for idle users.
     /queue    - (default) Adjusts the time-to-execute for all entries 
                 in the wait and semaphore queues. Entries whose time-
                 to- execute becomes less than the  current time are 
                 then ready for execution. The contents of the object 
                 queue are also appended to the  player queue.
 
  Note: these flags may be specified together if desired.
  
  See also: @list options.
  
& @toad
 
  Syntax: @toad[/<switches>] <victim>[=<recipient>]
  Turns the victim into an object (a slimy toad) and disconnects them 
  from the game.  The named recipient (or the @toading wizard) get 
  ownership of all the victim's things, rooms, and exits, as well as 
  of the toad object itself.
 
  The following switches are available:
    /no_chown - Don't change the ownership of the victim or his 
    objects.
    
  See also: @boot, @chownall, @destroy.
  
& @viewxcode
 
  Syntax: @viewxcode
  
  This command lists the xcodevalues for the object you are in.
  
  Example:
------------------------------------------------------------------------------
                             Data for Hangar (MAP)                            
------------------------------------------------------------------------------
buildflag                          0   buildonmap                         0   
cf                               500   cfmax                              0   
gravity                           99   firstfree                          0   
mapheight                         10   maplight                           2   
mapname                   hangar.map   mapvis                            30   
mapwidth                          10   maxvis                            60   
temperature                       20   winddir                            0   
windspeed                          0   cloudbase                        200   
flags                              -   sensorflags                        -   
------------------------------------------------------------------------------
  
  See Also: @setxcode, btsetxcodevalue, btgetxcodevalue
  
& @weight
 
  Syntax: @weight
  
  This command checks the weight allocated in an RS Unit.
  
  Example:
  Given that you are in an EXT-4D
  
  >@weight
------------------------------------------------------------------------------
                            Weight totals for  [CX]                           
------------------------------------------------------------------------------
Engine (XL) (390 rating)                       23.0                           
Cockpit                                         3.0                           
Gyro                                            3.9                           
Internals                                       6.5                           
Armor                                    168   10.5                           
IS.Anti-MissileSystem                      1    0.5                           
IS.LRM-10                                  1    5.0                           
IS.MediumLaser                             4    4.0                           
IS.SmallLaser                              1    0.5                           
Ammo_Anti-MissileSystem                    2    1.0                           
Ammo_LRM-10                                2    1.0                           
JumpJet                                    6    6.0                           
------------------------------------------------------------------------------
Total: 64.9 tons (offset: 0.1)                                                
------------------------------------------------------------------------------
  
& C3iNetworkSize
 
  xcodevalue: C3iNetworkSize <int_ro>
  XTYPE: MECH
  
  This xcode value stores the current size of the C3iNetwork the unit 
  is a member of.
  
  NOTE - This value only includes the other units.
  
  Example:
  Given 2 units in a C3i Network:
  >@viewxcode
  C3iNetworkSi                       1 
  
  See Also: @viewxcode, c3i
  
& MaxSuits
 
  xcodevalue: MaxSuits <int>
  XTYPE: MECH
  
  This xcode value stores the templated number of Battlesuits in a 
  squad.
  
  See Also: @viewxcode
  
& MechPrefs
 
  xcodevalue: MechPrefs <bv>
  XTYPE: MECH
  
  This xcode value stores the non-default preference settings.
  
  Flags:
  *  - = mechprefs are set to default values
  * a = MechWarrior Safety is set to OFF
  * b = SearchLight Warning is set to ON
  * c = AutoFall is set to OFF
  * d = Low Armor warnings are set to OFF
  * e = Low Ammo warnings are set to OFF
  * g = Autoconshutdown is ON
  * h = FFSafety is OFF 
  
  See also: mechprefs, @viewxcode
 
& access

  Config parameter: access <command> <permlist>

  Modifies the permissions needed to execute the indicated command.

  Specifying a permission adds it to the list of permissions required;
  to remove a permission prefix it with a ! character.

  See also: PERMISSIONS, @list.
  
& addfire
 
  Map Command: addfire <x> <y> <duration>
  
  This command adds fire to the hex specified at <x> <y> for 
  <duration> seconds.
  
  To run this command you must be within the mapobject to which the 
  map you wish to modify is attached.
  
  Error Messages:
  * if args !=3 the command returns "Error: Invalid number of 
    attributes to addfire command"
   
& addinftech
 
  Mechrep Command: addinftech <tech>
  
  This command adds the specified advanced infantry technology to the 
  targetted RS Unit.
  
  NOTE - the command currently does not check to verify that the 
  targetted unit is a bsuit.
  
  Arguments:
  * tech - Valid infantry technologies are:
        Swarm_Attack_Tech
        Mount_Friends_Tech
        AntiLeg_Attack_Tech
        CS_Purifier_Stealth_Tech
        DC_Kage_Stealth_Tech
        FWL_Achileus_Stealth_Tech
        FC_Infiltrator_Stealth_Tech
        FC_InfiltratorII_Stealth_Tech
        Must_Jettison_Pack_Tech
        Can_Jettison_Pack_Tech
  
  See Also: settarget
  
& addmine
 
  Map Command: addmin <x> <y> <type> <strength> [option]
  
  This command adds a mine to the map.
  
  To run this command you must be within the mapobject to which the 
  map you wish to modify is attached.
  
  Arguments:
  * <x> <y> - the location of the mine
  * <type> - the type of mine to be placed on the map
    Valid types are:
    * standard - This mine will explode when an RS Unit enters the hex
    * inferno - As per standard, but adds heat instead of damage
    * vibra - This mine is is triggered by the weight of RS Units. The 
              [option] argument provides the required weight to 
              trigger the  mine. 
         Vibra detonation calculations:
         * RS Unit tonnage < required weight = no detonation
         * RS Unit tonnage => required weight = detonation when 
           entering hex (except where the next calculation applies)
         * RS Unit tonnage * n => required weight = detonation where n 
           is the number of hexes distant from the target hex
    * CD - Command detonated. This mine will only explode when it 
           recieves a transmission on the assigned frequency. The 
           [option] argument provides the freq.
    * trigger - this mine reports on the MineTriggers channel that a 
                unit has moved into the target hex.
    * scentrigger - as per trigger but currently not fully 
                    implemented.
  * <strength> - the number of points of damage the mine will do upon 
                 detonation.
    
  Examples:
  
  This command adds a strength 1 Command detonated mine to 10,10 which 
  will detonate when it receives a transmission on freq 123
  >addmine 10 10 cd 1 123
  
  This command adds a strength 3 standard mine to 4,6 
  > addmine 4 6 standard 3
  
  This command adds a strength 10 vibra mine to 1,1 which will 
  detonate at a weight of 20 tons or more
  > addmine 1 1 vibra 10 20
  Note - a 55 ton RS Unit will trigger this mine from over 3 hexes 
  away.
  
& addsmoke
 
  Map Command: addsmoke <x> <y> <duration>
  
  This command adds smoke to the hex specified at <x> <y> for 
  <duration> seconds.
  
  To run this command you must be within the mapobject to which the 
  map you wish to modify is attached.
  
  Error Messages:
  * if args !=3 the command returns "Error: Invalid number of 
    attributes to addsmoke command"
   
& addsp
 
  Mechrep Command: addsp <item> <loc> <critslot> [<data>]
  
  This command adds <item> in <loc> at <critslot> 
  
  Arguments:
  * item - the name of the item to add. (See addsp2)
  * loc - the section to install the item in
  * critslot - the slot to install the item at
  * data - provides additional data for any items which require it. 
           EG: in the case of adding an ArtemisIV the data indicates 
           the first critslot of the weapon the ArtemisIV is 
           controlling.
  
  Continued in addsp2
  
& addsp2
 
  Special Items
 
ShoulderOrHip             UpperActuator             LowerActuator
HandOrFootActuator        LifeSupport               Sensors
Cockpit                   Engine                    Gyro
HeatSink                  JumpJet                   Case
FerroFibrous              EndoSteel                 TripleStrengthMyomer
TargetingComputer         Masc                      C3Master
C3Slave                   BeagleProbe               ArtemisIV
Ecm                       Axe                       Sword
Mace                      Claw                      DSAeroDoor
DSMechDoor                Fuel_Tank                 TAG
DSVehicleDoor             DSCargoDoor               LAM_Equipment
CaseII                    StealthArmor              NullSig_Device
C3i                       AngelEcm                  HvyFerroFibrous
LtFerroFibrous            BloodhoundProbe           PurifierArmor
KageStealthUnit           AchileusStealthUnit       InfiltratorStealthUnit
InfiltratorIIStealthUnit  SuperCharger              Dual_Saw
 
  Continued in addsp3
  
& addsp3
 
  
  Example:
  To add a Targeting Computer to the RS Unit in the left torso at 
  critslot 1
  
  >addsp targetingcomputer lt 1 
  Critical slot filled.
  
  >critstatus lt
-----------------------------------------------------------------------------
                             Left Torso Criticals                             
------------------------------------------------------------------------------
 1 TargetingComputer                    7 Empty                               
 2 Empty                                8 Empty                               
 3 Empty                                9 Empty                               
 4 Empty                               10 Empty                               
 5 Empty                               11 Empty                               
 6 Empty                               12 Empty                               
------------------------------------------------------------------------------
 
  See Also: attarget
  
& addstuff
 
  RS Command: addstuff <name> <num>
  
  This command permits you to add <num> of <name> to the manifest 
  of an RS Unit or the stores of a bay.
  
  Arguments:
  <name> This argument can be either a specifie name or alternatively 
         the command accepts the use of wildcards.
  
  NOTE - Only the God character (#1) can add more than 20 items (using 
  wildcarding) at a time.
  
  Errors:
  * if arguments < 2 the command returns "Invalid number of 
    arguments!"
  * if <num> is <=0 the command returns "Invalid amount!"
  * if <name> is not a valid partname the command returns "Nothing 
    matches <name>!"
  * if the location is not an RS Unit or hangar/bay the command 
    returns "You ain't in your 'mech!" or "You ain't in hangar!"
  * if the <name> argument uses wildcards and resolves to > 20 
    different parts and/or commodities the command returns "Wizards 
    can't add more than 20 different objtypes at a time."
  
  Example:
  >addstuff se* 10
  You add 10 SearchLights.
  You add 10 Seedss.
  You add 10 Sensorss.
  
  See Also: removestuff, clearstuff, stores, manifest
  
& addtech
 
  Mechrep Command: addtech <technology>
  
  This command adds the specified advanced technology to the targetted 
  RS Unit.
  
  See Also: settarget, @viewxcode
  
& addweap
 
  Mechrep Command: addweap <name> <loc> <critslots> [r|t|o] 
 
  This command adds the weapon specified in <name> to the 
  targetted RS Unit at <loc> using <crit secs> with the specified 
  flags.
  
  Arguments:
  * name - this argument requires the long version of the weapon name.
  * loc - specifies the section for the weapon (eg CT, LA)
  * critslots - a space delimited list of the critslots to put the 
                weapon into
  * 0 - weapon is a one-shot type
  * R - weapon is rear mounted
  * T - weapon is 'targetting computer'
  
  Continued in addweap2
  
& addweap2
 
  Examples:
  To add an IS AC/10 to the LT on a mech:
  
  >addweap IS.AC/10 lt 1 2 3 4 5 6 7
  Weapon added.
  
  See Also: settarget
 
& alias

  Config parameter: alias <new> <old>

  Defines the command <new> to be an alias of the command <old>.


& allow_chanlurking

  Config parameter: allow_chanlurking <on/off>
  Default: off

  Permits use of the 'who' and 'last' commands on a channel that you
  currently do not have 'on'
 
& allow_unloggedwho

  Config parameter: allow_unloggedwho <0/1>
  Default: 0

  Determines whether to permit clients who have not logged in to use
  the WHO, DOING, and SESSION commands from the login screen.

  See Also: WHO, DOING, SESSION.
  
& allowance
 
  Attribute: allowance
  
  This attribute, when set on a player, overrides the default config 
  paramenter 'paycheck', therefore determining the amount of money 
  that player receives each day he connects.
  
  See Also: @allowance
& amechdest
 
  Attribute: amechdest
  
  This attribute is triggered on the destruction of an RS Unit.
   
& announce
 
  Power: announce
  
  This power permits the player to use the @wall command.
 
  See Also: @power, @list powers, @wall
 
& attr_access

  Config parameter: attr_access

  Changes the access rights to the named attribute.

  The following privileges may be used:
  private     - The attribute is visible only to those who can examine
                the object.
  internal    - The attribute is not visible to anyone.
  wizard      - Only wizards may change the attribute.
  hidden      - The attribute is visible only to wizards.
 
& attr_alias

  Config parameter: attr_alias <alias> <attr>

  Makes <alias> an alias for the attribute <attr>.
 
& attr_cmd_access

  Config parameter: attr_cmd_access [!]<privilege> [[!]<privilege>]...

  Changes the access rights on all attribute-setting commands in
  parallel.

  Use this parameter to allow or deny access to the attribute-setting
  commands as a group.  This directive should normally be followed
  by access directives to properly set access to restricted
  attributes.

  See also: access, PERMISSIONS.
 
& bad_name

  Config parameter: bad_name <wildcarded-name>

  Specifies that any name that matches <wildcarded-name> may not be
  used as a player name.  Attempts to create a player with a
  disallowed name (or to rename to a disallowed name) will be
  rejected.  Normally, words that lead off messages from MUX are
  disallowed, some sites may wish to disallow some obscene names as
  well.
 
& badsite_file

  Config parameter: badsite_file <path>
  Default: text/badsite.txt

  Specifies the name of the file that is sent to new net connections
  from sites that have been blocked from accessing the server.  The
  connection is closed immediately after the file is sent.

  See also: forbid_site, permit_site.
  
& baserunspeed
 
  xcodevalue: baserunspeed <int>
  XTYPE: MECH
  
  This xcodevalue is currently not in use.
  
  See Also: @viewxcode
  
& basewalkspeed
 
  xcodevalue: basewalkspeed <int>
  XTYPE: MECH
  
  This xcode value is currently not in use.
  
  See Also: @viewxcode
  
& bay0
 
  xcodevalue: bay0 <DBref>
  XTYPE: MECH
  
  This xcode value is used to store the #DBREF for Bay 0 on a 
  Dropship.
  
  Note - the value is entered without the preceding hash (#)
  
  See also: createbays, @viewxcode
  
& bay1
 
  xcodevalue: bay1 <DBref>
  XTYPE: MECH
  
  This xcode value is used to store the #DBREF for Bay 1 on a 
  Dropship.
  
  Note - the value is entered without the preceding hash (#)
  
  See also: createbays, @viewxcode
  
& bay2
 
  xcodevalue: bay2 <DBref>
  XTYPE: MECH
  
  This xcode value is used to store the #DBREF for Bay 2 on a 
  Dropship.
  
  Note - the value is entered without the preceding hash (#)
  
  See also: createbays, @viewxcode
  
& bay3
 
  xcodevalue: bay3 <DBref>
  XTYPE: MECH
  
  This xcode value is used to store the #DBREF for Bay 3 on a 
  Dropship.
  
  Note - the value is entered without the preceding hash (#)
  
  See also: createbays, @viewxcode
    
& btdesignex()
 
  Syntax: btdesignex(<UnitRef>)
 
  This function returns '1' if the specified unit reference exists in
  the /mechs directory and '0' if it does not. Note that if you copy a
  template into the mechs directory, you may need to perform a
  @restart before it becomes visible.
 
  Example:
 
  > think btdesignex(AS7-D)
  1
  > think btdesignex(AS20-C)
  0
  
& boot
 
  Power: boot
  
  This power permits the player to use the @boot command.
  
  See Also: @power, @list powers, @boot
  
& bt-advanced-econ

  Compile option: --disable-bt-advanced-econ
 
  Disabled the advanced econ system
 
  See Also: btsetpartcost(), btgetpartcost(), btfasabasecost()

 
& bt-complexrepairs

  Compile option: --enable-bt-complexrepairs
  Default: disabled
 
  Enables per-tonnage parts for units. For example, you'd need a
  gyro built specifically for a 85 ton mech to replace an 85 ton
  mech's gyro. This is the case for most of the parts with this
  config directive enabled. You may need to rebuild your hcode.db
  file after enabling/disabling this.
  
& bt-freetechtime

  Compile option: --enable-bt-freetechtime
  Default: disabled
 
  Enables carrying out of repairs and tech activities virtually
  instantly.
  
& bt-mechfreqs

  Compile option: --disable-bt-mwfreqs
  Default: enabled
 
  Disabled the code which copies a units frequencies to a disembarking
  player.
  
& bt-movement-modes

  Config option: --disable-bt-movement-modes
  Default: enabled
 
  Disabled advanced movement modes such as spring, dodge, and evade
  
& bt-mw3stats

  Compile option: --disable-mw3-stats
  Default: enabled
 
  Disables the use of a MUX implementation of MW3 stats
  
& bt-overspeeding

  Compile option: --enable-bt-overspeeding
  Default: disabled
 
  Enables units to exceed than their max speed as they lose armor and
  expend ammunition and thereby lose weight.
  
& bt-scaled-infrared

  Compile option: --disable-scaled-infrared
  Default: enabled
 
  Use a scaled BTH system that increases chance to hit on infrared
  sensors as targets get hotter. When disabled, a unit is either hot
  (-1 BTH) or not (>= +0 BTH).
  
& btaddstores()
 
  Syntax: btaddstores(<ObjectDB>,<partname>,<quantity>)
 
  This function adds <quantity> of part <partname> to the unit or
  hangar specifed in <ObjectDB>.
 
  The function returns the amount of <partname> in the object at the
  completion of the event.
 
  Error Messages:
 
  * If <ObjectDB> is not a valid unit or hangar the function returns
    #-1
  * If <quantity> is a null string or not numerical the function
    returns #-2 Illegal Value
  * If <partname> is not a valid partname or commodity the function
    returns #-1 INVALID PART NAME
 
  Example:
  Given that #dbref 62 is a valid bay with 1000 units of armor in
  store:
 
  > think btaddstores(#62,armor,1000)
  2000
  
& btarmorstatus()
 
  Syntax: btarmorstatus(<UnitDB>,<location>)
 
  This function returns a list detailing the status of the armor in
  the specified <location> on <UnitDB>. The format of the string is:
 
  <current front armor>/<templated front armor>|<current
  internal>/<templated internal>|<current rear armor>/<templated rear
  armor>
 
  Error Messages:
 
  * if <UnitDB> is not a valid RS unit the function will return #-1
    NOT A MECH
  * if <location> is not valid the function returns #-1 INVALID
    SECTION
  * Any other errors will return #-1 ERROR
 
  Example:
 
  Given that #1234 is a mech which has taken 5 damage to the front
  armor of it's Left Torso
 
  > think btarmorstatus(#1234,lt)
  13/18|14/14|6/6
 
  See Also: btarmorstatus_ref()
 
  
& btarmorstatus_ref()
 
  Syntax: btarmorstatus_ref(<UnitRef>,<location|All>)
 
  This function returns a list detailing the status of the armor in
  the specified <location> (or 'All' for the totals for the unit) on
  a reference unit ie the default templated value. The format of the
  string is:
 
  <current front armor>/<templated front armor>|
  <current internal>/<templated internal>|<current rear
  armor>/<templated rear armor>
 
  Note: As this is a reference function, the return string will show
  no damage unless the unit was actually templated with damage.
 
  Error Messages:
 
    * If <UnitRef> is not a valid unit the function returns #-1 NO
      SUCH MECH
    * If <location> is not a valid location the function returns #-1
      INVALID SECTION
    * Any other errors will return #-1 ERROR
 
  Continued in btarmourstatus_ref()2
  
& btarmorstatus_ref()2
 
  Example:
 
  Given that EXT-4D is valid mech reference
 
  > think btarmorstatus_ref(EXT-4D,ct)
  21/21|21/21|8/8
  > think btarmorstatus_ref(EXT-4D,all)
  168/168|104/104
  
&  btcharlist()
 
  Syntax:
  btcharlist(<skills|advantages|attributes>[,<playername>|playerDB>])
 
  This function returns the a space delimited list of all the
  specified criteria (ie skills, advantages or attributes). The
  function accepts an optional argument of a playername or #dbref,
  which case it returns only those which that character possesses.
 
  Note: If the initial argument is attributes, all players will return
  the full list as characters all have them
 
  Error Messages:
 
    * If the initial argument is not one of skills, advantages or
      attributes the function will return #-1 INVALID VALUE
    * If the optional argument specified is not a valid player name or
      #dbref the function returns #-1 INVALID TARGET
 
  Continued in btcharlist()2
  
& btcharlist()2
 
  Example:
  Given that #dbref 1234 is a valid player
 
  > think btcharlist(skills,#1234)
  Blade Comm-Conventional Computer Gunnery-Artillery Gunnery-Flamer
  Gunnery-Laser Gunnery-Missile Gunnery-Spotting Medtech Perception
  Piloting-Aerospace Piloting-Biped Piloting-BSuit Piloting-Hover
  Piloting-Naval Piloting-Quad Piloting-Spacecraft Piloting-Tracked
  Piloting-Wheeled
  > think btcharlist(advantages)
  Ambidextrous Bloodname Combat_Sense Contact Dropship EI_Implant
  Exceptional_Attribute Extra_Edge Land_Grant Reputation Sixth_Sense
  Title Toughness Wealth Well-Connected Well_Equipped Dodge_Maneuver
  Maneuvering_Ace Melee_Specialist Pain_Resistance Speed_Demon
  Tech_Aptitud
  
& btcritslot()
 
  Syntax: btcritslot(<UnitDB>,<location>,<critslot>,<typeflag>)
 
  This function returns the details about the contents of the
  specified <critslot> in <location> on <UnitDB>.
 
  Arguments:
  <typeflag> can be one of the following:
 
  * name will return the name of the item at that critslot
  * status will return the condition of the part - either Operational
    or Destroyed
  * data will return the amount of ammo in an ammobin, the remaining
    recharge time for a weapon which has been fired
  * maxammo will return the maximum capacity of an ammobin
  * mode will return the weapon mode
  * any other argument will return the same as the name arg.
 
  Note: If the <typeflag> argument is mode and the weapon is set to
  normal mode, the function returns a blank string
 
 Continued in btcritslot()2
  
& btcritslot()2
 
  Error Messages:
 
  * If <UnitDB> is not a valid unit the function returns #1-NOT A
    MECH
  * if <location> is not valid the function returns #-1 INVALID
    SECTION
  * If <critslot> is not valid the function returns #-1 INVALID
    CRITICAL
  * If <typeflag> is maxammo and the slot is not an ammobin the
    function returns #-1 NOT AMMO
  * if <typeflag> is mode and the slot is not ammo or weapon the
    function returns #-1 NOT AMMO OR WEAPON
 
  Example:
  Given that #1234 is a valid unit:
  * with a recently fired srm-6 set to fire artemis in slot 1 of
    the Left Torso,
  * an ammobin in slot 3 of the Left Torso:
 
  > think btcritslot(#1234,lt,1,name)
  IS.SRM-6
  > think btcritslot(#1234,lt,1,status)
  Operational
  > think btcritslot(#1234,lt,1,data)
  15
  > think btcritslot(#1234,lt,1,mode)
  A
  > think btcritslot(#1234,lt,3,maxammo)
  15
  
& btcritslot_ref()
 
  Syntax: btcritslot_ref(<UnitRef>,<location>,<critslot>,<typeflag>)
 
  This function returns the details about the contents of the
  specified <critslot> in <location> on a reference unit ie the
  default templated value.
 
  Note: As this is a reference function, the return string will show
  no damage unless the unit was actually templated with damage.
 
  Arguments:
  <typeflag> can be one of the following:
 
    * name will return the name of the item at that critslot
    * status will return the condition of the part - either
      Operational or Destroyed
    * data will return the amount of ammo in an ammobin
    * maxammo will return the maximum capacity of an ammobin
    * mode will return the weapon mode
    * any other argument will return the same as the name arg.
 
  Note: If the <typeflag> argument is mode and the weapon is set to
  normal mode, the function returns a blank string
 
  Continued in btcritslot_ref()2
  
& btcritslot_ref()2
  
  Error Messages:
 
  * If <UnitRef> is not a valid reference the function returns
    #1-NOT A MECH
  * if <location> is not valid the function returns
    #-1 INVALID SECTION
  * If <critslot> is not valid the function returns
    #-1 INVALID CRITICAL
  * If <typeflag> is maxammo and the slot is not an ammobin the
    function returns #-1 NOT AMMO
  * if <typeflag> is mode and the slot is not ammo or weapon the
    function returns #-1 NOT AMMO OR WEAPON
 
  Example: Given that CHP-1N is a valid unit:
 
  > think btcritslot_ref(CHP-1N,lt,1,name)
  IS.SRM-6
  > think btcritslot_ref(CHP-1N,lt,1,status)
  Operational
  > think btcritslot_ref(CHP-1N,lt,1,data)
  0
  > think btcritslot_ref(CHP-1N,lt,1,mode)
 
  > think btcritslot_ref(CHP-1N,lt,3,maxammo)
  15
 
  
& btcritstatus()
 
  Syntax: btcritstatus(<UnitDB>,<location>)
 
  This function returns a string displaying the status of the
  criticals in <location> on <UnitDB>
 
  The string returned is formatted"
  <critslot>|<?>|<partname>|<operational>|<crittype>
  
  Note: The element denoted <?> is used for the brand of partnames,
  however brands are not implemented on this codebase, so will return
  empty
 
  <operational> returns 0 if the <critslot> is functional, -1 if the
  part at <critslot> is destroyed
 
  <crittype> returns a value indicating the type of item stored at
  that <critslot>
 
  * 1 = Weapon
  * 2 = Ammo
  * 3 = Actuator
  * 4 = Cargo
  * 5 = Empty
  * 0 = Other (eg Cockpit, LifeSupport)
 
  Note: if <critslot> refers to a location where missiles are stored,
  <crittype> will return 4, indicating a cargo crittype
 
 Continued in btcritstatus()2
  
& btcritstatus()2
 
  Error Messages:
 
  * If <UnitDB> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If <location> is a null string or very invalid the function
    returns #-1 INVALID SECTION
 
  Note: <location> is not checked extensively - eg a 'location' of l
  will pass error checking. Therefore it is the programmers 
  responsibility to ensure a   correct argument

  Example:
  Given that #1234 is an EXT-4D with a destroyed Upper Actuator and
  MediumLaser in the left arm

  > think btcritstatus(#1234, la)
  1||ShoulderOrHip|0|3,2||UpperActuator|-
  1|3,3||LowerActuator|0|3,4||HandOrFootActuator|0|3,5
  ||MediumLaser|0|1,6||MediumLaser|-
  1|1,7||Empty|0|5,8||Empty|0|5,9||Empty|0|5,10||Empty|0|5,
  11||Empty|0|5,12||Empty|0|5
  
& btcritstatus_ref()
 
  Syntax: btcritstatus_ref(<UnitRef>,<location>)
 
  This function returns a string displaying the status of the
  criticals in <location> on a reference unit ie the default
  templated value.
 
  The string returned is formatted
 <critslot>|<?>|<partname>|<operational>|<crittype>
 
  Note: As this is a reference function, the return string will show
  no damage unless the unit was actually templated with damage.
 
  Note: The element denoted <?> is used for the brand of partnames,
  however brands are not implemented on this codebase, so will return
  empty
 
  <operational> returns 0 if the <critslot> is functional, -1 if the
  part at <critslot> is destroyed
 
  Continued in btcritstatus_ref()2
  
& btcritstatus_ref()2
 
  <crittype> returns a value indicating the type of item stored at
  that <critslot>
 
    * 1 = Weapon
    * 2 = Ammo
    * 3 = Actuator
    * 4 = Cargo
    * 5 = Empty
    * 0 = Other (eg Cockpit, LifeSupport)
 
  Note: if <critslot> refers to a location where missiles are
  stored, <crittype> will return 4, indicating a cargo crittype

  Error Messages:
 
  * If <UnitRef> is not a valid reference the function returns
    #-1 NO SUCH MECH
  * If <location> is a null string or very invalid the function
    returns #-1 INVALID SECTION
 
  Note: <location> is not checked extensively - eg a 'location' of l
  will pass error checking. Therefore it is the programmers
  responsibility to ensure a correct argument
 
  Continued in btcritstatus_ref()3
  
& btcritstatus_ref()3
 
  Example:
 
  Given that EXT-4D is a valid reference:
 
  > think btcritstatus_ref(EXT-4D, la)
  1||ShoulderOrHip|0|3,2||UpperActuator|0|3,3||LowerActuator|0|3,4|
  |HandOrFootActuator|0|3,5||MediumLaser|0|1,6||MediumLaser|0|1,7|
  |Empty|0|5,8||Empty|0|5,9||Empty|0|5,10||Empty|0|5,11||Empty|0|5,12|
  |Empty|0|5
  
& btdamagemech()
 
  Syntax:
  btdamagemech(<UnitDB>,<totaldamage>,<clustersize>,<direction>
  ,<attemptcrit>,<message to unit>,<message to LOS>)
 
  This function inflicts <totaldamage> upon the unit specified in
  <UnitDB> from <direction> and will attempt to crit the unit in
  response to <attemptcrit>. <message to unit> will be sent to the
  occupant(s) of <UnitDB> and <message to LOS>, prepended by the unit
  name, be sent to those units within line of sight.
 
  The function returns 1 if successful, 0 if failed.
  
  Note: Arguments for <totaldamage>, <clustersize>, <direction>, and
  <attemptcrit> must be numerical.
 
  Direction arguments
 
    * 0-7 = Specific front hitlocation
    * 8-15 = Specific rear hitlocation
    * 16-18 = Random front hitlocation
    * 19-21 = Random rear hitlocation
 
Continued in btdamagemech()2
  
& btdamagemech()2
 
  Hit Locations
 
  MECHS
  * 0 = Left Arm
  * 1 = Right Arm
  * 2 = Left Torso
  * 3 = Right Torso
  * 4 = Center Torso
  * 5 = Left Leg
  * 6 = Right Leg
  * 7 = Head
  * 8 = Left Arm (Rear)
  * 9 = Right Arm (Rear)
  * 10 = Left Torso (Rear)
  * 11 = Right Torso (Rear)
  * 12 = Center Torso (Rear)
  * 13 = Left Leg (Rear)
  * 14 = Right Leg (Rear)
  * 15 = Head (Rear)
 
  VEHICLES
  * 0 = Left Side
  * 1 = Right Side
  * 2 = Front
  * 3 = Aft
  * 4 = Turret
  * 5 = Rotor
 
  BATTLESUITS
 
  * 0 = Suit 1
  * 1 = Suit 2
  * 2 = Suit 3
  * 3 = Suit 4
  * 4-7 = Random suit
  * 8 = Suit 1
  * 9 = Suit 2
  * 10 = Suit 4
  * 11 = Suit 4
  * 12-21 = Random suit 
  
& btdamagemech()3
 
  AttemptCrit arguments
  This argument is boolean: 0=no 1=yes
 
  Error Messages:
 
  * Invalid <UnitDB> results in #-1 NOT A MECH
  * Invalid <totaldamage> results in #-1 INVALID 2ND ARG
  * Invalid <clustersize> results in #-1 INVALID 3RD ARG
  * Invalid <direction> results in #-1 INVALID 4TH ARG
  * Invalid <attemptcrit> results in #-1 INVALID 5TH ARG
 
  Example:
 
  Given that #1234 is a unit
 
  > think btdamagemech(#1234, 2, 2, 0, 0, BANG, GETS BANGED)
  1
 
  The occupant(s) of the unit will see:
 
  BANG
  You have been hit for 2 points of damage in the left arm
 
  The occupants of any units within LOS will see:
 
  unit name [ID] GETS BANGED
  
& btdamages()
 
  Syntax: btdamages(<UnitDB>)
 
  This function returns a list of the damages on <UnitDB>.
  The function returns nothing if the unilt has no damage.
 
  The format of the list is:
  <repairnum>|<location>|<typenum>|<data>|<fixing>,
 
  <typenum>
  Displays the damage type
  * <typenum> 0 requires a reattach
  * <typenum> 1 and 2 requires a part replacement
  * <typenum> 3 to 9 requires an enhancedcrit repair
  * <typenum> 10 requires a weapon replacement
  * <typenum> 11 requires an ammo reload
  * <typenum> 12 requires an armor patch
  * <typenum> 13 requires an armor patch to the rear
  * <typenum> 14 requires repair of an internal
  * <typenum> 15 requires a detatch
  * <typenum> 16 and 17 requires scrapping
  * <typenum> 18 requires an unload
  * <typenum> 19 requires a reseal
  * <typenum> 20 requires a replacesuit
 
Continued in btdamages()2
  
& btdamages()2
 
  Note: <typenum> complies with the damages defined in
  src/hcode/btech/mech.tech.damages.h
 
  <data>
  * If <typenum>=0 then <data> shows the section to be reattached
  * If <typenum>=1 or 2, then <data> shows the partname to be
     replaced
  * If <typenum>=10 then <data> shows the weaponname to be replaced
  * if <typenum>=11 then <data> shows the ammoname and amount to be
    reloaded (format: <ammoname>:amount>)
  * If <typenum>=12 or 13, then <data> shows the amount of armor to
    be replaced.
  * If <typenum>=14 then <data> shows the internal to be replaced
  * If <typenum>=16 or 17, then <data> shows the item to be scrapped
  * if <typenum>=18 then <data> shows the ammoname and amount to be
    unloaded (format: <ammoname>:amount>)
  * If <typenum>=19 then <data> shows section to be resealed
 
  <fixing> returns 1 if the damage is being repaired, 0 if otherwise

  Error Messages:

  * Invalid <UnitDB> results in #-1 NOT A MECH
  * Other errores result in #-1 ERROR
 
Continued in btdamgaes()3
  
& btdamages()3
 
  Example:
 
  Given that #1234 is a THE-N which has been cored
 
  >think btdamages(#1234) 1|RA|16|Shoulder|0,2|RA|16|Upper
  Actuator|0,3|RA|17|LRM-5|0,4|LA|16|Shoulder|0,5|LA|16|Upper
  Actuator|0,6|LA|16|Lower Actuator|0,7|LA|16|Hand
  Actuator|0,8|LA|17|MediumLaser|0,9|RL|16|Hip|0,10|RL|16|Upper
  Actuator|0,11|RL|16|Lower Actuator|0,12|RL|16|Foot
  Actuator|0,13|RL|16|HeatSink|0,14|RL|16|HeatSink|0,15|LL|16|Hip|
  0,16|LL|16|Upper Actuator|0,17|LL|16|Lower Actuator|0,18|LL|16|Foot
  Actuator|0,19|LL|16|HeatSink|0,20|LL|16|HeatSink|0,21|H|16|Life
  Support|0,22|H|16|Sensors|0,23|H|16|Cockpit|0,24|H|17|MediumLaser|
  0,25|H|16|Sensors|0,26|H|16|Life Support|0
 
& btech_afterlife_dbref

  Config parameter: btech_afterlife_dbref <#dbref>
  Default: 220

  The room to which a player is moved after suffering death
 
& btech_complexrepair

  Config parameter: btech_complexrepair <0/1>
  Default: 0

  Determines if complex repairs are to be implemented on the Mux. When
  enabled parts for RS units will be weight specific - ie a hand
  actuator for a 70 ton mech cannot be used to repair an 80 ton mech.

  See Also: bt-complexrepairs.
& btech_critlevel

  Config parameter: btech_critlevel <number>
  Default: 100

  Specifies the percentage of armor below which TAC's can occur.
& btech_defaultweapbv

  Config parameter: btech_defaultweapbv <num>
  Default: 120

  Weapons with a BV higher than the specified figure give less XP than
  those weapons with a BV which is lower.
 
& btech_defaultweapdam

  Config parameter: btech_defaultweapdam <num>
  Default: 5

  Modifies the default weapon BV
  
& btech_dig_only_fs
 
  Config parameter: btech_dig_only_fs <0/1>
  Default: 0
  
  When true, btech_dig_only_fs will only apply the bth modifier for 
  dug in vehicles if the bth is being calculated against the 
  vehicles' front side."
 
& btech_divrotordamage

  Config parameter: btech_divrotordamage <num>
  Default: 0

  Provides an amount to divide damage to vtol rotors by, should it be
  desired.
 
& btech_exile_stun_code

  Config parameter: btech_exile_stun_code <0/1>
  Default: 0

  Enables the head hit stun code originally implemented on Exile Mux.
 
& btech_explode_ammo

  Config parameter: btech_explode_ammo <0/1>
  Default: 1

  Determines if players are permitted to use the 'explode ammo'
  command.

  See Also: btech_explode_reactor, btech_explode_stop,
            btech_explode_time.
 
& btech_explode_reactor

  Config parameter: btech_explode_reactor <0/1>
  Default: 1

  Determines if players are able to use the 'explode reactor' command
  to self-destruct their unit.

  See Also: btech_explode_stop, btech_explode_ammo.
 
& btech_explode_stop

  Config parameter: btech_explode_stop <0/1>
  Default: 0

  Determines if players are able to use the 'explode stop' command to
  abort their self-destruct sequences.

  See Also: btech_explode_reactor, btech_explode_ammo,
            btech_explode_time.
 
& btech_explode_time

  Config parameter: btech_explode_time <secs>
  Default: 120

  Determined the number of seconds which will be counted down for the
  command 'explode reactor'.

  The command 'explode ammo' will take one half the number of seconds
  specified.

  See Also: btech_explode_reactor, btech_explode_ammo,
            btech_explode_stop. 
& btech_extendedmovemod
 
  Config parameter: btech_extendedmovemod <0/1>
  Default: 1
  
  Determines whether to use the Maxtech extended target movement 
  modifiers.
 
& btech_failures

  Config parameter: btech-failures <0/1>
  Default: 1

  Determines if RS units will suffer random failure of components.
 
& btech_fasaadvvhlcrit

  Config parameter: btech_fasaadvvhlcrit <0/1>
  Default: 0

  Enables FASA Level 3 ground vehicle crits and hit locations.
 
& btech_fasaadvvhlfire

  Config parameter: btech_fasaadvvhlfire <0/1>
  Default: 0

  Enables FASA Level 3 ground vehicle fire rules
 
& btech_fasaadvvtolcrit

  Config parameter: btech_fasaadvvtolcrit <0/1>
  Default: 0

  Enable FASA Level 3 rules for VTOL crits and hit locations.
 
& btech_fasacrit

  Config parameter: btech_fasacrit <-1/0/1>
  Default: -1

  Select crit system to use.

  Arguments:
  Maxtech       -1
  Semi-FASA      0
  FASA           1
  
& btech_freetechtime
 
  Config paramater: btech_freetechtime <0/1>
  Default: 0
  
  Enables carrying out of repairs and tech activities virtually
  instantly.
  
  See Also: bt-freetechtime
 
& btech_glancing_blows

  Config parameter: btech_glancing_blows <0/1/2>
  Default: 1

  Arguments:
  0   Don't permit glancing blows
  1   Use Maxtech rules (BTH)
  2   Use Exile rules (BTH-1)
& btech_hotloadaddshalfbthmod

  Config parameter: btech_hotloadaddshalfbthmod <0/1>
  Default: 0

  When enabled the BTH for hotloaded LRM's is reduced to 50 percent
  of that BTH which would apply to the same weapon if it were NOT
  hotloaded.
 
& btech_ic

  Config parameter: btech_ic <0/1>
  Default 1

  Determines if the Mux is 'in character' and therefore if a player
  can disembark a unit onto the map.

  Arguments:
  * 0 - The player cannot disembark
  * 1 - The player can disembark
  
& btech_idf_requires_spotter
 
  Config parameters: btech_idf_requires_spotter <0/1>
  Default: 1
  
  Enable code which requires a spotter for Indirect Fire
  
& btech_inferno_penalty
 
  Config parameter: btech_inferno_penalty <0/1>
  Default: 1
  
  Apply the FASA Inferno Ammo penalty (+30 heat and ammo explodes)
 
& btech_limited_repairs

  Config parameter: btech_limited_repairs <0/1>
  Default: 0
  
  When enabled requires that all tech activities be carried out in 
  stalls, otherwise armor fixes and ammo reloads can be carried out on 
  the Repair Bay floor.
 
& btech_moddamagewithrange

  Config parameter: btech_moddamagewithrange <0/1>
  Default: 0
 
  Enables a modifier which varies damage from energy weapons by
  range.

  When enabled damage is increased by +1 for ranges <=1 hex and
  reduced by -1 for ranges which are 'long' for that weapon.
 
& btech_moddamagewithwoods

  Config parameter: btech_moddamagewithrange <0/1>
  Default: 0

  Enables a modifier which varies damage to a unit if it occupies
  a hex with light or heavy woods.

  When enabled damage is reduced by -2 for light woods and
  by -4 for heavy woods.

  Note: The modifier does not affect the BTH for the shot. Nor does
  the terrain type of any intervening hexes (ie hexes the shot must
  pass through to reach the target).
  
& btech_mw_losmap
 
  Config parameter: btech_mw_losmap <0/1>
  Default: 1
  
  Determines if MechWarriors always get a LOS map.
  
& btech_newterrain
 
  Config parameter: btech_newterrain <0/1>
  Default: 0
  
  When true, wheeled and tracked vehicles are required to perform a 
  piloting skill roll when entering a hex with Heavy Forrest.
  
& btech_nofusionvtolfuel
 
  Config parameter: btech_nofusionvtolfuel <0/1>
  Default: 0
  
  When true, units of mechtype:VTOL which are not equipped with 
  ICE_TECH are exempted from the impact of fuel calculations.
  
& btech_ooc_comsys
 
  Config parameter: btech_occ_comsys <0/1>
  Default: 0
  
  Enables code which bypasses checks to block use of the comsys from 
  IC locations
   
& oldxpsystem
 
  Config parameter: oldxpsystem <0/1>
  Default: 0
  
  Depreciated. To be eliminated.
 
& btech_phys_use_pskill

  Config parameter: btech_phys_use_pskill <0/1>
  Default 1

  Determines if the game rolls against the players piloting skill for
  physical attacks
  
& btech_roll_on_backwalk
 
  Config parameter: btech_roll_on_backwalk <0/1>
  Default: 1
  
  Determines if a piloting skill roll is made when a mech is walking 
  backwards over a change in elevation.
   
& btech_seismic_see_stopped
 
  Config parameter: btech_seismic_see_stopped
  Default: 0
  
  Determines if seismic sensors can detect a unit which is not moving.
   
& btech_stackdamage
 
  Config parameter: btech_stackdamage <num>
  Default: 100
  
  Sets the damage modifier for units stacking
   
& btech_stacking
 
  Config parameter: btech_stacking <0/2>
  Default: 2
  
  Determines if the mux checks for stacking.
  
& btech_stackpole

  Config parameter: btech_stackpole <0/1>
  Default: 1
 
  Determines if a unit will explode on triple engine crits
 
& btech_tankfriendly

  Config paramater: btech_tankfriendly <>
  Default: 0

  Reduces speed rather than immobilising the vehicle for most crits.
 
& btech_tankshield

  Config paramaters: btech_tankshield <>
  Default 0

  Save tanks from crash damage
 
& btech_usedmechstore

  Config parameter: btech_usedmechstore <#dbref>
  Default 0

  #dbref of the room/object used to store destroyed RS units.
   
& btech_vcrit
 
  Config parameter: btech_vcrit <num>
  Default: 2
  
  If btech_vcrit is <=1 then vehicles will not suffer critical damage.
  
& btech_ice_causes_fire
  
  Config parameter: btech_ice_causes_fire <0/1>
  Default: 1
  
  Enables code which causes VTOL's with ICE engines to cause fire upon 
  crash or explosion of that unit.
 
& bt_xp_ammomod

  Config parameter: bt_xp_ammomod <num>
  Default: 100
  
  Modifies the XP gained from ammunition based weapons.
  
  Note - Does not include missile based weapons
 
& btech_xp_missilemod

  Config parameter: bt_xp_missilemod <>
  Default: 100
  
  Modifies the XP gained from missile based weapons.
    
& btech_xp_usepilotbvmod
 
  Config parameter: btech_xp_usePilotBVmod <0/1>
  Default: 1
  
  Use the pilot's skills to modify the BV of the RS unit.
  
& btengrate()
 
  Syntax: btengrate(<UnitDB>)
 
  This function returns a space delimited string detailing the
  enginesize and susp_factor for <UnitDB>.
 
  Error Messages:
 
  * If the object specified in <UnitDB> is not an RS unit the
   function returns #-1 NOT A MECH
 
  Example:
  Given that #dbref 1234 is a valid RS unit (an EXT-4D)
 
  > think btengrate(#1234)
  390 0
 
  See Also: btengrate_ref()
  
& btengrate_ref()
 
  Syntax: btengrate_ref(<UnitRef>)
 
  This function returns a space delimited string detailing the
  enginesize and susp_factor for the specified 'reference' unit - ie
  the default templated value.
 
  Error Messages:
 
  * If the object specified in <UnitRef> is not a valid reference
    then function returns #-1 INVALID REF
 
  Example:
  Given that EXT-4D is a valid reference:
 
  > think btengrate_ref(EXT-4D)
  390 0
 
  See Also: btengrate()
  
& btfasabasecost_ref()
 
  Syntax: btfasabasecost_ref(<UnitRef>)
 
  This function calculates the FASA cost for the reference unit
  <UnitRef> - ie the default templated unit.
 
  Note: The information returned by this function requires the bt-
  advanced-econ compile-time directive.
  
  Note: The base cost is calculated based on a number of factors,
  including the part costs set via btsetpartcost(). Make sure these
  prices are intact before using the FASA cost function.
 
  Error Messages:
 
  * If <UnitRef> is not a valid reference the function returns
    #-1 INVALID REF
  * If the mux was compiled without the bt-advanced-econ directive
    the function returns #-1 NO ECONDB SUPPORT
 
  Example: Given that EXT-4D is a valid refernce
  > think btfasabasecost_ref(ext-4d)
  15315135
 
  See also: btgetpartcost(), btsetpartcost()
  
& btgetbv()
 
  Syntax: btgetbv(<UnitDB>)
 
  This function returns the Battle Value for <UnitDB>
 
  Note: This function calculates the Battle Value dymanically - a
  damaged unit will return a recalculated BV.
 
  Error Messages:
 
  * If <UnitDB> is not a valid unit the function returns
    #-1 NOT A MECH
 
  Example:
  Given that #1234 is a valid RS unit (an EXT-4D)
 
  > think btgetbv(#1234)
  878
 
  Given the same unit as above after incurring 5 points of damage in
  the Right Arm
 
  > think btgetbv(#1234)
  866
 
  See also: btgetbv_ref
  
& btgetbv_ref()
 
  Syntax: btgetbv_ref(<UnitRef>)
 
  This function returns the Battle Value for the specified 'reference'
  unit - ie the default templated unit.
 
  Error Messages:
 
  * If <UnitRef> is not a valid unit reference the function returns
    #-1 NO SUCH MECH
 
  Example:
  Given that EXT-4D is a valid unit reference:
 
  > think btgetbv_ref(EXT-4D)
  925
 
  See also: btgetbv
  
& btgetcharvalue()
 
  Syntax: btgetcharvalue(<ObjectDB>,<skill/attribute>,<mode>)
 
  This function returns the value of the specified skill or attribute
  on the specified object (player). The mode argument indicates which
  aspect of the skill/attribute to return:
 
    * 0 returns the skill/attribute base level
    * 1 returns the skill/attribute BTH
    * 2 returns the skill XP
 
  Error Messages:
 
    * If <ObjectDB> is not valid the function returns 
      #-1 INVALID TARGET
    * If <skill/attribute> is not valid the function returns 
    #-1 INVALID VALUE
 
  Example:
  Given a player #dbref 1234 with a Perception of 1(6+):
 
  > think btgetcharvalue(#1234, perception, 0)
  1
  > think btgetcharvalue(#1234, perception, 1)
  6
  > think btgetcharvalue(#1234, perception, 2)
  16
  
& btgetpartcost()
 
  Syntax: btgetpartcost(<partname>)
 
  This function returns the cost of the specified part.
 
  Note: The cost defaults to 0 and must be set via btsetpartcost()
 
  Note: The information returned by this function requires the bt-
  advanced-econ compile-time directive.
 
  Error Messages:
 
  * If <partname> is not valid the function returns
    #-1 INVALID PART NAME
  * If the mux was compiled without the bt-advanced-econ directive
    the function returns #-1 NO ECONDB SUPPORT
 
  Example:
  Given that VTOL_FUEL is a valid part and costs 500
 
  > think btgetpartcost(vtol_fuel)
  500
 
  See Also: btsetpartcost(), btfasabasecost_ref()
  
& btgetrange()
 
  Syntax: btgetrange(<MapOBJ>,<arg1>,<arg2>[,<arg3>[,<arg4>[,<arg5>
          [,<arg6>[,<arg7>]]]]])
 
  This function returns the distance (in hexes) between the specified
  objects or hexes.
 
  Arguments:
 
  * The function requires between 3 and 7 arguments. Acceptable
  arguments are either 2 UnitDB's, 1 UnitDB and an xy[z] set, or 2
  xy[z] sets.
 
  Note: If you specify the z (altitude) element of one xy[z] set you
  must specify it for both 'locations' - either with another xy[z] set
  or implicitly with a unit.)
 
 Continued in btgetrange()2
  
& btgetrange()2
 
  Error Messages:
  * If insufficient arguments are provided the function will return #
    -1 FUNCTION (BTGETRANGE) EXPECTS BETWEEN 3 AND 7 ARGUMENTS
  * If <MapObj> is not a object with the XCODE flag the function
    will return #-1 INVALID MAPDB
  * If <MapObj> is an object with the XCODE flag but not a map
    object the function will return #-1 OBJECT NOT HCODE
  * If an argument of xy[z] sets is outside the boundaries of the
    map the function will return #-1 INVALID COORDS
  * If an argument of a UnitDB is invalid the function will return #
    -1 INVALID MECHDBREF
  * If an argyment of a UnitDB is not on the map specified in
    <MapObj> the function will return #-1 MECH NOT ON MAP
  * If one xy[z] set specifies the z argument, but the other does
    not the function will return #-1 INVALID ARGUMENTS
  * Any other error will return #-1 GENERAL ERROR
 
  Example:
  Given that #1234 and #2345 are valid units. Given that both units
  are on MapObj #62, located at 0,0 and 10,10.
   > think btgetrange(#217,#1234,#2345)
  13.228762
   > think btgetrange(#217,#1234,7,12)
  13.000007
   > think btgetrange(#62,14,1,10,10)
  9.643657
  
& btgetrealmaxspeed()
 
  Syntax: btgetrealmaxspeed(<UnitDB>)
 
  This function returns the maximum speed of the specified unit.
 
  Note: The function returns a dynamically calculated value, taking
  into account damage and cargo weight.
 
  Error Messages:
 
  * If <UnitDB> is not a valid RS unit the function returns #-1 NOT A
    MECH
 
  Example:
  Given that #1234 is a valid unit
 
  > think btgetrealmaxspeed(#1234)
  86.000000
  
& btgetweight()
 
  Syntax: btgetweight(<partname>)
 
  This function returns the weight of the specified part.
 
  Error Messages:
 
  * If <partname> is not valid the function returns
    #-1 INVALID PART NAME
 
  Example:
  Given that XXL_ENGINE is a valid part and weighs 1
 
  > think btgetweight(xxl_engine)
  1.000
 
  See Also: btpartweight()
  
& btgetxcodevalue()
 
  Syntax: btgetxcodevalue(<ObjectDB>,<xcodevalue>)
 
  This function returns the value stored in <xcodevalue> on the
  specified object.
 
  Error Messages:
 
  * If <ObjectDB> is not valid the function returns #-1
  * If <xcodevalue> is not valid the function returns #-1
 
  Example:
  Given a map #dbref 62:
 
  > think btgetxcodevalue(#62, mapvis)
  30
  
& btgetxcodevalue_ref()
 
  Syntax: btgetxcodevalue_ref(<UnitRef>,<xcodevalue>)
 
  This function returns the value stored in <xcodevalue> on the
  specified 'reference' unit - ie the default templated value.
 
  Note: Unlike btgetxcodevalue this function will only work on objects
  which are set XTYPE:MECH
 
  Error Messages:
 
  * If <UnitDB> is not a valid unit the function returns
  #-1 NO SUCH MECH
  * If <xcodevalue> is not valid the function returns #-1
 
  Example:
  Given that THE-N is a valid unit:
 
  > think btgetxcodevalue_ref(THE-N, maxspeed)
  96.75
 
  See Also: btgetxcodevalue()
  
& bthexemit()
 
  Syntax: bthexemit(<MapDB>,<x>,<y>,<message>)
 
  This function emits <message> which will be seen by the occupant(s)
  of any unit within line of site of the hex specified in <x> <y>:
 
  The function returns 1 if successful, or an error message.
 
  Error Messages:
 
  * If <MapDB> is not a valid map the function returns
    #-1 INVALID MAP
  * If <message> is invalid (eg a null string) the function returns
    #-1 INVALID MESSAGE
  * If the hex specified by <x> <y> is outside the boundaries of the
    map the function returns #-1 INVALID COORDINATES
 
  Example:
  Given a map #dbref 62:
 
  > think bthexmit(#62, 10, 10, Fascinating emit)
  1
 
  The occupants of any units within LOS will see:
 
  Fascinating emit
  
& bthexinblz()
 
  Syntax: bthexinblz(<MapOBJ>,<x>,<y>)
 
  The function determines if the hex designated by <x>,<y> on <MapOBJ>
  is within a blocked landingzone
 
  The function returns 1 if the hex is blocked, and 0 otherwise.
 
  Error Messages:
 
  * If <MapObj> is not valid the function returns #-1 INVALID MAP
  * If <x> or <y> are outside the boundaries of the map the function
    returns #-1 INVALID COORDS
 
  Example:
  Given that #62 is a valid MapObj and that hex 10,11 IS within a
  blocked landingzone:
 
  >think bthexinblz(#62,10,11)
  1
  
& bthexlos()
 
  Syntax: bthexlos(<UnitDB>,<x>,<y>)
 
  This function determines if <UnitDB> is within line of site of the
  hex specified by <x> <y>.
 
  The function returns 1 if the unit is within LOS of the hex, and 0
  if it is not.
 
  Error Messages:
 
  * If <UnitDB> is not an RS unit the function returns
  #-1 INVALID MECH
  * If <x> <y> are outside the boundaries of the map the function
    returns #-1 INVALID COORDINATES
 
  Example:
  Given a unit #dbref 1234 within LOS of 10,10 but NOT within LOS of
  20,20:
 
  > think bthexlos(#1234,10,10)
  1
  > think bthexlos(#1234,20,20)
  0
  
& btid2db()
 
  Syntax: btid2db(<UnitDB>,<target ID>)
 
  This function returns the #dbref of the unit bearing the <target ID>
  specified. The function requires that <target ID> be within line of
  sight of the unit specified in <UnitDB>.
 
  Note: <target ID> is not case sensitive
 
  Error Messages:
 
  * If the object specified in <UnitDB> is not an RS unit the
    function returns #-1 INVALID MECH/MAP
  * If the <target ID> specified is not within LOS of <UnitDB> the
    function returns #-1 INVALID TARGETID
 
  Example:
  Given that #dbref 1234 and #dbref 2345 are both valid RS units
  within LOS of each other and that the Target ID of #2345 is FL
 
  > think btid2db(#1234,FL)
  #2345
  
& btlag()
 
  Syntax: btlag()
 
  This function will return a '1' if the MUX event scheduler is out of
  sync (IE: Lagging), and a '0' if all is well. This is pretty much
  useless on even a semi-quazi-modern machine.
 
  Example:
 
  > think btlag()
  0
  > think btlag()
  1
  
& btlistblz()
 
  Syntax: btlistblz(<MapDB>)
 
  This function lists those hexes on <MapDB> which are blocked landing
  zones.
 
  The lists is formated <x> <y> <z> and delimited with the | character
 
  Error Messages:
 
  * if <MapDB> is not a valid Map the function will return
    #-1 INVALID MAP.
 
  Example:
 
  Given that #1234 is a valid Map Object with 4 bases at 20 20,
  20 40, 40 20, and 40 40.
 
  > think btlistblz(#1234)
  20 20 0|20 40 0|40 20 0|40 40 0
  
& btloadmap()
 
  Syntax: btloadmap(<MapOBJ>,<mapname>[,<clear>])
 
  This function loads <mapname> on <MapOBJ> and optionally clears the
  map of RS units.
 
  The function returns 1 if successful.
 
  Arguments:
 
  * If <clear> > 0 the function will clear the map of units.
  * If <clear> = 0 the function will not clear the map of units.
 
  Note: The <clear> argument is optional, and if not stated the
  default is to not clear the map.
 
  Note: The argument for <mapname> is case sensitive.
 
  Continued in btloadmap()2
  
& btloadmap()2
 
  Error Messages:
 
  * If <MapOBJ> is not a valid map object the function will return #-
    1 INVALID TARGET
  * If <mapname> is not a valid map the function will return #-1 MAP
     NOT FOUND
 
  Example:
  Given that #100 is a valid Map Object, FAL.hills is a valid map, and
  2 units #1234 and #2345 are on the map before the command is run:
 
  > think btloadmap(#100,FAL.hills,1)
  Shutting down Mech #1234 and restting map index to -1....
  Shutting down Mech #2345 and restting map index to -1....
  1
  
& btloadmech()
 
  Syntax: btloadmech(<MechOBJ>,<mechref>)
 
  This function loads <mechref> onto <MechOBJ>.
 
  The function returns 1 if successful.
 
  Note: To be considered a 'valide mech object' the object must be
  set with the XCODE flag and have the XTYPE:MECH attribute set
  
  Note: This function loads the appropriate xcode values for <mechref>
  on <MechOBJ>, but it does not make a complete unit.
 
  Error Messages:
 
  * If <MechOBJ> is not a valid mech object the function will return
    #-1 INVALID TARGET
  * If <mechref> is not a valid mech reference the function will
    return #-1 UNABLE TO LOAD TEMPLATE
  *
 
  Example:
  Given that #1234 is a valid Mech Object and EXT-4D is a valid mech
  reference:
 
  > think btloadmech(#1234,EXT-4D)
  1
  
& btlosm2m()
 
  Syntax: btlosm2m(<UnitDB>,<TargetUnitDB>)
 
  This function determines if the unit <TargetUnitDB> is within line
  of site of <UnitDB>.
 
  The function returns 1 if <TargetUnitDB> is within LOS of <UnitDB>,
  otherwise it returns 0
 
  Error Messages:
 
  * If the object specified in <UnitDB> or <TargetUnitDB> is not an
    RS unit the function returns #-1 INVALID MECH
 
  Example:
  Given that #dbref 1234, #dbref 2345 and #dbref 3456 are all valid RS
  units and that #2345 is within LOS of #1234 but #3456 is not:
 
  > think btlosm2m(#1234,#2345)
  1
  > think btlosm2m(#1234,#3456)
  0
  
& btmakemechs()
 
  Syntax: btmakemechs(<faction>,<totaltons>,[<types>,[<opttonnage>,
          [<maxvariation>]]])
 
  This function returns a space delimited list of mech references.
 
  Note: This function does NOT create mechs
 
  The function creates a mechsub for the 3025 era for <faction>,
  weighing <totaltons>. Arguments for <types>, <opttonnage> and
  <maxvariation> are optional.
 
  Arguments:
  <faction> must be the short name of a faction.
 
  <totaltons> must be a number not less than 20 and not greater than
  4000.
 
  <types> selects the types of units included in the mechsub:
 
  * If <types> = 1 then the function returns only mechs
  * If <types> = 2 then the function returns only aeros
  * If <types> = 3 then the function returns a mix of both mechs and
   aeros
 
  <opttonnage> is the optimum tonnage for units in the mechsub.
 
  <maxvariation> is the maximum variation past <opttonnage>.
 
  Continued in btmakemechs()2
  
& btmakemechs()2
 
  Error Messages:
 
  * If the number of arguments is < 2 the function returns #-1
    Insufficient arguments!
  * If the number of arguments is > 5 the function returns #-1 Too
     many arguments!
  * If <Faction> is not a valid faction the function returns #-1
    Invalid faction name!
  * if <type> is a null string the function returns #-1 Invalid type
    bitvector!
  * if <type> is not a valid <type> the function returns #-1 NO
    UNITS WITH FLAG <type> FOUND
  * If <tonnage> is > 4000 the function returns #-1 Max of 4000 tons
    of mecha at once! Sowwy!
  * if <opttonnage> is < 20 the function returns #-1 Invalid
    tonnage!
  * if <maxvariation> is < 5 the function returns #-1 Invalid
    MaxDifference!
 
  Example:
  Given that Draconis Combine is a valid faction with a short name of
  DC
 
  > think btmakemechs(dc,500,1,60,10)
  CRD-3R DRG-1C DRG-1C DRG-1N DV-6M HBK-4J SHD-2K TBT-5J
  
& btmakepilotroll()
 
  Syntax: btmakepilotroll(<UnitDB>,<roll modifier>,<damage modifer>)
 
  This function causes the pilot of <UnitDB> to make a pilot roll.
 
  The <roll modifier> is added to the applicable pilot-skill base of
  the pilot to provide the base-to-hit of the roll.
 
  If the pilot makes the roll, ie rolls higher than the base-to-hit,
  the event is complete.
 
  If the pilot fails the roll, ie rolls lower than the base-to-hit,
  then the <damage modifier> is added to the pilot-skill base to
  provide the base-to-hit of a roll to determine if the player will
  suffer damage.
 
  If the pilot makes the damage roll, the unit is damaged but not the
  player, and the event is complete.
 
  If the pilot fails the damage roll, both the unit and player suffer
  damage. The player makes a further roll to determine if he/she will
  retain consciousness and the event is complete.
  
  Note: A consciousness roll does not use the modifiers stated in the
  btmakepilotroll function.
 
    * If the pilot passes the initial roll the function returns 1.
    * If the pilot fails the initial roll the function returns 0.
 
  Continued in btmakpilotroll()2
  
& btmakepilotroll()2
 
  Error Messages:
 
    * If <UnitDB> is not a unit, the function returns #-1 INVALID MECH
 
  Example: Given that #1234 is a unit piloted by a player with +4
  pilot stats
 
  think btmakepilotroll(#1234,1,1)
  1 <Or 0 if the pilot fails the roll>
 
  In the event that the pilot makes the roll, he/she will see:
 
  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 6
 
  In the event that the pilot fails the roll, but makes the damage
  roll, he/she will see:
 
  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 4
  You try to avoid taking damage in the fall.
  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 8
  <Further messages indicating damage to the unit>
 
  Continued in btmakepilotroll()3
  
& btmakepilotroll()3
 
  In the event that the pilot fails the roll, and fails the damage
  roll, he/she will see:
 
  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 4
  You try to avoid taking damage in the fall
  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 3
  You take personal injury from the fall!
  You attempt to keep consciousness!
  Retain Conciousness on: 3       Roll: 8
  <Further messages indicating damage to the unit>
  
& btmapelev()
 
  Syntax: btmapelev(<MapDB>,<x>,<y>)
 
  This function returns the elvation of the specified hex on the
  specified map. This can be a number between -9 and 9. Negative
  numbers denote water, positive may be any other terrain.
 
  Error Messages:
 
  * If <MapDB> is not valid the function will return #-1
  * If <x> <y> are not numerical the function will return #-2
  * If <x> <y> are outside the boundaries of the map the function
    will return ?
 
  Example:
  Given that #62 is a map of 50 x 50
 
  > think btmapelev(#62,5,9)
  1
  > think btmapelev(#62,10,10)
  -3
  > think btmapelev(#62,27,61)
  ?
  
& btmapemit()
 
  Syntax: btmapemit(<MapDB>,[x, y, z, range,]<message>)
 
  This function emits <message> to all appropriate units on <MapDB>.
 
  The function returns 1 if successful, 0 if failed.
 
  Arguments:
  There are 3 valid forms:
 
  * btmapemit(<MapOBJ>) - emits the message to all units on the map
  * btmapunits(<MapOBJ>,<x>,<y>,<range>) - emits the message to units
    within <range> of <x>, <y>
  * btmapunits(<MapOBJ>,<x>,<y>,<z>,<range>) - emits the message to
    all units within <range> of <x>,<y>,<z>
 
  Note: The function does not take the altitude of a unit into
  consideration when ascertaining if it is within range UNLESS the
  third form is used (ie the <z> argument is included)
 
  Continued in btmapemit()2
  
& btmapemit()
 
  Error Messages:
 
  * If <MapDB> is not valid the function returns #-1 INVALID MAP
  * If <message> is not valid (eg a null string) the function returns
    #-1 INVALID MESSAGE
 
  Example:
  Given that #62 is a valid mapobject
 
  > think btmapemit(#62, Fascinating Message)
  1
 
  The occupant(s) of any units on the map will see:

  Fascinating Message
  
& btmapterr()
 
  Syntax: btmapterr(<MapDB>,<x>,<y>)
 
  This function returns a one-character string that represents the
  terrain in the specified hex on the specified map.
 
  Possible output:
  .   Clear       #   Road       ~   Water
  @   Building    =   Wall       -   Ice
  ^   Mountain    }   Desert     &   Fire
  %   Rough
 
  Error Messages:
  * If <MapDB> is not valid the function will return #-1
  * If <x> <y> are not numeric the function will return #-2
  * If <x> <y> are outside the boundaries of the map the function
   will return ?
 
  Example:
  Given that #62 is a map of 50 x 50
  > think btmapterr(#62,5,9)
  .
  > think btmapterr(#62,10,10)
  #
  > think btmapterr(#62,10,60)
  ?
  
& btmapunits()
 
  Syntax: btmapunits(<MapOBJ>,[<x>,<y>,<z>,<range>])
 
  This function returns a space delimited list of the dbrefs of
  objects of XTYPE:MECH on <MapOBJ>.
 
  Arguments:
  There are 3 valid forms:
 
  * btmapunits(<MapOBJ>) - lists all appropriate units on the map
  * btmapunits(<MapOBJ>,<x>,<y>,<range>) - lists all appropriate
    units within <range> of <x>, <y>
  * btmapunits(<MapOBJ>,<x>,<y>,<z>,<range>) - lists all appropriate
    units within <range> of <x>,<y>,<z>
 
  Note: The function does not take the altitude of a unit into
  consideration when ascertaining if it is within range UNLESS the
  third form is used (ie the <z> argument is included)
 
  Continued in btmapunits()2
  
& btmapunits()2
 
  Error Messages:
 
  * If <MapOBJ> is not a valid map the function returns #-1 INVALID
    MAP
  * If <x> falls outside the boundaries of the map the function
    returns #-1 INVALID X COORD
  * If <y> falls outside the boundaries of the map the function
    returns #-1 INVALID Y COORD
  * If <range> is < 0 the function returns #-1 INVALID RANGE
  * For other errors the function returns #-1 INVALID ARGUMENTS
 
  Example:
  Given that #62 is a valid MapOBJ, with 2 units #1234 (at 10,10) and
  #2345 (10,10,10) on it
 
  think btmapunits(#62)
  #1234 #2345
  think btmapunits(#62,0,0,14)
  #1234 #2345
  think btmapunits(#62,0,0,0,14)
  #1234
  
& btmechfreqs()
 
  Syntax: btmechfreqs(<UnitDB>)
 
  This function returns a string containing the frequencies and
  channelmodes set on <UnitDB>.
 
  The format of the string is <channelnumber>|<freq>|<mode>|<color>,
 
  <mode> returns:
  * a = Digital
  * b = Mute
  * c = Relay
  * d = Info
  * - = Analog
 
  Error Messages:
  * If <UnitDB> is not a valid RS unit the function returns #-1
    INVALID TARGET
 
  Continued in btmechfreqs()2
  
& btmechfreqs()2
 
  Example: Given a unit #1234 with the following listchannels:
  # --   Mode --   Frequency --   Comtitle
  A   DR-G   123   Title A
  B   A---   234   Title B
  C   D-Mb   345   Title C
  D   D--w   456   Title D
  E   D--r   567   Title E
  F   A---   678   Title F
  G   D--y   789   Title G
  H   A---   0   Title H
 
  > think btmechfreqs(#1234)
  1|123|ac|G,2|234|-|-,3|345|ab|b,4|456|a|w,5|567|a|r,6|678|-|-
  ,7|789|a|y,8|0|-|-
  
& btnumrepjobs()
 
  Syntax: btnumrepjobs(<UnitDB>)
 
  This function returns the number of repair jobs on the unit
  specified by <UnitDB>
 
  Error Messages:
 
  * If <UnitDB> is not a valid unit the function returns #-1
 
  Example:
  Given that #1234 is mech with damaged armor on the Left Torso and
  Right Arm
 
  > think btmumrepjobs(#1234)
  2
  
& btpartmatch()
 
  Syntax: btpartmatch(<PartName>)
 
  This function returns the unique part number(s) for the given part.
  Each part has a unique number that may be used to easily convert
  between part names and numbers. A number is returned for each type
  of the weapon or part you specify (if applicable). This can be
  converted back to a name using btpartname().
 
  This function will accept wildcards in the PartName.
 
  Error Messages:
 
 * If <partname> is not valid the the function will return #-1
   INVALID PARTNAME
 * If <partname> is > 399 characters long the function will return
    #-1 PARTNAME TOO LONG
 
  Continued in btpartmatch()2
  
& btpartmatch()2
 
  Example:
  > think btpartmatch(IS.LRM-5)
  40
  > think btpartmatch(LRM-5)
  16 40
  > think btpartmatch(LRM*)
  13 37 14 38 15 39 16 40
 
  Notice how the LRM-5 returned two values. This is due to the fact
  that there is a CL (Clan) LRM-5 and an IS (Inner Sphere) LRM-5.
 
  LRM* matched 8 items: The CL and IS versions of LRM-10, LRM-15, LRM-
  20, LRM-5.
 
  Note: Placement position of wildcards is extremely critical. *LRM
  does not equal LRM* or *LRM*
  
& btpartname()
 
  Syntax: btpartname(<PartNum>,<nametype>)
 
  This function returns the part name for the part number specified.
 
  Arguments:
  <nametype>
 
    * short
    * long
    * vlong
 
  Note: See the listforms command for a complete list of partnumbers
  and partnames.
 
  Error Messages:
 
  * If <partnum> is not valid the function will return #-1 INVALID
    PART NUMBER
  * If <nametype> is not valid the function will return #-1 INVALID
    NAME TYPE
 
  Example:
 
  > think btpartname(53,Short)
  A_CLSLRM10
  > think btpartname(16,Long)
  Ammo_StreakLRM-10
  > think btpartname(16,VLong)
  Ammo_CL.StreakLRM-10
 
  See Also: btpartmatch()
  
& btparttype()
 
  Syntax: btparttype(<partname>)
 
  This function returns the type for the specified <partname>.
 
  Arguments:
  <Parttypes>
 
  * WEAP
  * AMMO
  * BOMB
  * PART
  * CARG
  * OTHER
 
  Error Messages:
 
  * If <partname> is not a valid part the function returns #-1
    INVALID PART NAME
 
  Example:
 
  Given that CL.ERPPC is a valid partname
 
  > think btparttype(cl.erppc)
  WEAP
  
& btpartweight()
 
  Syntax: btpartweight (<partname>)
 
  This function returns the weight of <partname>.
 
  Error Messages:
 
  * If <partname> is not valid the function returns #-1 INVALID PART
    NAME
 
  Example:
  Given that XXL_ENGINE is a valid part and weighs 1
 
  > think btgetweight(xxl_engine)
  1.000
  
& btpayload_ref()
 
  Syntax: btpayload_ref(<UnitRef>)
 
  This function displays a string detailing the weapons and ammunition
  payload of a reference unit, ie the default templated unit.
 
  The string is formatted <itemname>:<quantity>|
 
  Note: This function does not display melee weapons.
 
  Error Messages:
 
  * If <UnitRef> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If the function fails for any other reason the function returns
    #-1
 
  Example:
  Given that EXT-4D is valid mech reference
 
  > think btpayload_ref(ext-4d)
  IS.MediumLaser:4|IS.LRM-10:1|IS.Anti-MissileSystem:1
  |IS.SmallLaser:1|Ammo_IS.Anti-MissileSystem:1|Ammo_IS.LRM-10:1
  
& btremovestores()
 
  Syntax: btremovestores(<ObjectDB>,<partname>,<quantity>)
 
  This function removes <quantity> of part <partname> from the unit or
  hangar specifed in <ObjectDB>.
 
  The function returns the amount of <partname> in the object at the
  completion of the event.
 
  Error Messages:
 
  * If <ObjectDB> is not a valid unit or hangar the function
    returns #-1
  * If <quantity> is a null string or not numerical the function
    returns #-2 Illegal Value
  * If <partname> is not a valid partname or commodity the function
    returns #-1 INVALID PART NAME
 
  Example:
  Given that #dbref 62 is a valid bay with 2000 units of armor in
  store:
 
  > think btremovestores(#62,armor,1000)
  1000
  
& btsetarmorstatus()
 
  Syntax: btsetarmorstatus(<UnitDB>,<location>,<armortype>,<amount>)
 
  This function sets the armor on <UnitDB>'s <location> to <amount>.
  <armortype> determines which armor for the specified location is
  set:
    * 0 - Front armor
    * 1 - Internal armor
    * 2 - Rear armor (where applicable)
 
  This function permits <amounts> in excess of the templated value
  
  Note: Esnure that <amount> is numeric. Using a non-numeric argument
        will result in the armor value being set to 0
  Note: This function only impacts on <UnitDB> and has no effect on
        the template for a unit
 
  Continued in btsetarmorstats()2
  
& btsetarmorstatus()2
 
  Error Messages:
  * if <UnitDB> is not a valid RS unit the function will return
    #-1 NOT A MECH
  * if <location> is not valid the function returns
    #-1 INVALID SECTION
  * if <armortype> is not valid the function returns
    #-1 INVALID ARMORTYPE
  * if <value> is not valid (eg a negative number) the function will
    return #-1 INVALID ARMORVALUE
  * Any other errors will return #-1 ERROR
 
  Example:
  Given that #1234 is a valID RS Unit
 
  > think btsetarmorstatus(#1234,ct,2,7)
  1
  
& btsetcharvalue()
 
  Syntax: btsetcharvalue(<ObjectDB>,<skill/attribute>,<value>,<mode>)
 
  This function sets the value of the specified skill or attribute on
  the specified object (player). The mode argument indicates which
  aspect of the skill/attribute to set:
  
  Note: When setting the value of an attribute, <mode> MUST be set to
  0
  
  Note: If <value> is set to a non-numeric argument the
  <skill/attribute> will be set to 0
 
  Arguments:
  <mode>
  * 0 - set the actual value of <skill/attribute> to <value>
  * 1 - set the BTH of <skill> to <value> (increasing the skill level
    to the necessary extent)
  * 2 - adds <value> to the XP amount of <skill/attribute>
 
  Continued in btsetcharvalue()2
  
& btsetcharvalue()2
 
  Error Messages:
 
  * If <ObjectDB> is not valid the function will return #-1 INVALID
    TARGET
  * If <skill/attribute> is an attribute and <mode> does not equal 0
    the function will return #-1 ONLY SKILLS CAN HAVE FLAG
  * If <skill/attribute is not valie the function will return #-1
    INVALID VALUE
 
  Example:
 
  Given a player named Labrat (#dbref 1234):
 
  > think btsetcharvalue(#1234, medtech, 2, 0)
  Labrat's Medtech set to 2
  > think btsetcharvalue(#1234, medtech, 2, 1)
  Labrat's Medtech set to 5
  > think btsetcharvalue(#1234, medtech, 2, 2)
  Labrat gained 2 more Medtech XP.
  
& btsetmaxspeed()
 
  Syntax: btsetmaxspeed(<UnitDB>,<speed>)
 
  This function sets the running or flank speed for an RS unit to the
  valude specified. Consequently this sets the walk or cruise speed
  for the unit also.
 
  Note - the speed specified is expressed in kph, not movement points.
 
  Note - if <speed> is not a valid number the units max speed will be
  set to 0.
 
  Error Messages:
  * if <UnitDB> is not a valid RS unit the function will return
    #-1 NOT A MECH
 
  Example:
  Given that #1111 is a valid RS unit, and the desired speed is 222
  kph
 
  > think btsetmaxspeed(#1111,222)
  1
  
& btsetpartcost()
 
  Syntax: btsetpartcost(<partname>,<cost>)
 
  This function sets the cost of the specified part.
 
  The function returns the value that the cost was set to.
  
  Note: <cost> must be numeric. If a non-numeric argument is used the
  cost is set to 0.
  
  Note: The information manipulated by this function requires the bt-
  advanced-econ compile-time directive.
 
  Error Messages:
 
  * If <partname> is not valid the function returns #-1 INVALID PART
     NAME
  * If the mux was compiled without the bt-advanced-econ directive
    the function returns #-1 NO ECONDB SUPPORT
 
  Example:
  Given that VTOL_FUEL is a valid part
 
  > think btsetpartcost(vtol_fuel,500)
  500
  
& btsetxcodevalue()
 
  Syntax: btsetxcodevalue(<ObjectDB>,<xcodevalue>,<value>)
 
  This function stores <value> in <xcodevalue> on the specified
  object.
 
  The function returns 1 if successful, #-1 if failed
 
  Warning: Modification of xcodevalues can have serious implications.
  Familiarity with XCODE is strongly advised.
 
  Error Messages:
 
  * If <ObjectDB> is not valid the function will return #-1
  * If <xcodvalue> is not a valid value for <ObjectDB>'s XTYPE the
    function will return #-1
 
  Example:
  Given a map (#dbref 62):
 
  > think btsetxcodevalue(#62, mapvis,20)
  1
  
& btsetxy()
 
  Syntax: btsetxy(<UnitDB>,<MapDB>,<x>,<y>[,<z>])
 
  This function sets the position of <UnitDB> to hex <x>,<y> and
  optionally at an altitude of <z>.
 
  If the argument <z> is omitted, the function determines the
  elevation of the hex <x>,<y> and sets <z> to that value.
 
  Note: In that the function automatically ascertains the value of z,
  it is generally wisest to omit this argument.
 
  The function returns 1 if successful.
 
  Error Messages:
 
  * If <UnitDB> is not a valid RS unit the function returns #-1
     INVALID TARGET
  * If <MapDB> is not a valid map object the function returns #-1
    INVALID MAP
  * If <x> is outside the boundaries of the map the function returns
    #-1 X COORD
  * If <y> is outside the boundaries of the map the function returns
    #-1 Y COORD
  * If <z> is > 10000 the function returns #-1 Z COORD
 
  Example:
  Given that #1234 is a mech and #62 is a map object
 
  > think btsetxy(#1234,#62,10,10,0)
  1
  
& btshowcritstatus_ref()
 
  Syntax: btshowstatus_ref(<UnitRef>,<targetplayer>,<location>)
 
  This function displays the output of the 'critstatus <location>'
  command on a reference unit, ie the default templated unit, to
  <targetplayer>.
 
  The function will return 1 if successful.
 
  Note: This function does not verify if <targetplayer> is connected
  to the mux.
 
  Error Messages:
 
  * If <UnitRef> is not a valid unit the function returns #-1 NO
    SUCH MECH
  * If <targetplayer> is not a player the function returns #-1
  * If <location> is not valid the function returns Invalid Section!
 
  Example:
  Given that EXT-4D is valid mech reference and #99 is a player
 
  > think btshowcritstatus_ref(ext-4d,#99,ct)
  1
 
  Player #99 will see the same output as if he/she had run the command
  'critstatus ct' in an EXT-4D
  
& btshowstatus_ref()
 
  Syntax: btshowstatus_ref(<UnitRef>,<targetplayer>,<location>)
 
  This function displays the output of the 'critstatus <location>'
  command on a reference unit, ie the default templated unit, to
  <targetplayer>.
 
  The function will return 1 if successful.
 
  Note: This function does not verify if <targetplayer> is connected
  to the mux.
 
  Error Messages:
 
  * If <UnitRef> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If <targetplayer> is not a player the function returns #-1
  * If <location> is not valid the function returns Invalid Section!
 
  Example:
  Given that EXT-4D is valid mech reference and #99 is a player
 
  > think btshowcritstatus_ref(ext-4d,#99,ct)
  1
 
  Player #99 will see the same output as if he/she had run the command
  'critstatus ct' in an EXT-4D
  
& btshowwspecs_ref()
 
  Syntax: btshowwspecs_ref(<UnitRef>,<targetplayer>)
 
  This function displays the output of the weaponspecs command on a
  reference unit, ie the default templated unit, to <targetplayer>.
 
  The function will return 1 if successful.
 
  Note: This function does not verify if <targetplayer> is connected
  to the mux.
 
  Error Messages:
 
  * If <UnitRef> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If <targetplayer> is not a player the function returns #-1
 
  Example:
  Given that EXT-4D is valid mech reference and #99 is a player
 
  > think btshowwspecs_ref(ext-4d,#99)
  1
 
  Player #99 will see the same output as if he/she had run the command
  weaponspecs in an EXT-4D
  
& btstores()
 
  Syntax: btstores(<MapDB>[,<partname>])
 
  This function returns a list of parts in the specified unit or
  hangar.
 
  The format of the list is <partname>:<amount>|
 
  The function accepts an optional argument of a partname in which
  case it returns the amount of that part located in the unit/hangar
 
  Note: This will work on units to see their cargo manifest, useful
  for carriers and other things.
 
  Error Messages:
 
  * If <MapDB> is not valid the function will return #-1 INVALID
    TARGET
  * If <partname> optional argument is included and is not a valid
    partname the function will return #-1 INVALID PART NAME
 
  Example:
  Given that #62 is a valid bay
 
  > think btstores(#62)
  Armor:5|Engine:5|IS.LargeLaser:2
  > think btstores(#62,Armor)
  5
  
& bttechlist()
 
  Syntax: bttechlist(<UnitDB>)
 
  This function returns a string listing the special technologies that
  <UnitDB> is equipped with. The list indicates the technologies in
  short form, but, are generally easy to interperet.
 
  Error Messages:
    * if <UnitDB> is not a valid RS unit the function will return
      #-1 NOT A MECH
 
  Example:
  Given that #2299 is a valid RS unit
 
  > think bttechlist(#2299)
  DHS SS FUS MTOW
 
  See Also: bttechlist_ref()
  
& bttechlist_ref()
 
  Syntax: bttechlist_ref(<UnitREF>)
 
  This function returns a space delimited list of any 'special
  technologies' employed by <UnitREF>
 
  Error Messages:
 
  * If <UnitREF> is not valid the function will return
    #-1 NO SUCH MECH
  * Other errors will cause the function to return #-1 ERROR
 
  Example:
  Given that MAD-9S is a valid template
 
  > think bttechlist_ref(mad-9s)
  DHS ECM BAP SL ES LENG  CASE
 
  See also: bttechstatus(), bttechlist()
  
& bttechstatus()
 
  Syntax: bttechstatus(<UnitDB>)
 
  This function returns a space delimited list of any 'special
  technologies' installed on <UnitDB>
 
  Special Technologies:
 
    * AntiAircraft        * ArtemisV_Tech       * BeagleProbe
    * C3I_Tech            * C3MasterTech        * C3SlaveTech
    * CargoTech           * CL_AMS              * Clan
    * CompactEngine_Tech  * CritProof_Tech      * DoubleHS
    * ECM                 * EndoSteel_Tech  
    * FerroFibrous_Tech   * FlipArms            * ICEEngine_Tech
    * IS_AMS              * LightEngine_Tech    * Masc
    * OmniMech_Tech       * SalvageTech         * SearchLight
    * StealthArmor_Tech   * TAG_Tech            * TripleMyomerTech
    * XLEngine_Tech       * XXL_Tech
 
  Note: The above list is not comprehensive. It details the special
  technologies which are most frequently implemented within BT mux.
  For a detailed list of all special technologies see
  src/hcode/btech/template.c
 
  Continued in bttechstatus()2
  
& bttechstatus()2
 
  Error Messages:
 
  * If <UnitDb> is not valid the function will return #-1 NOT A MECH
  * If the function is uable to determine the technologies it will
    return #-1 UNABLE TO GET MECHDATA
 
  Example:
  Given that #1234 is a MAD-9S which is a valid template
 
  > think bttechstatus(#1234)
  DoubleHS ECM BeagleProbe SearchLight EndoSteel_Tech LightEngine_Tech
  
& bttechtime()
 
  Syntax: bttechtime()
 
  This function returns the techtime (ie the amount of time to
  complete current repairs) for the invoker.
 
  Example:
  Given that #1234 is player who has 27 minutes and 14 seconds of
  techtime remaining
 
  > think bttechtime(#1234)
  00:27:14
  
& btthreshold()
 
  Syntax: btthreshold(<skill>)
 
  This function returns the threshold constant. This constant is one
  of the factors used to calculate the number of points required in
  the XP pool of <skill> to improve the skill's base-to-hit by 1.
 
  Error Messages:
 
  * If <skill> is not valid the function will return #-1 ERROR
 
  Example:
 
  > think btthreshold(medtech)
  999999
 
  Note: The amount returned by btthreshold is NOT the only factor in
  determining if a player will 'level up'. Further calculations
  modify the required XP dynamically.
  
& btunderrepair()
 
  Syntax: btunderrepair(<UnitDB>)
 
  This function returns a value of '1' if the specified mech is under
  repair, and '0' if it is not.
 
  Error Messages:
 
  * If <UnitDB> is not a valid RS unit the function will return #-2
  * For any other error the function will return #-1
 
  Example:
 
  > think btunderrepair(#2983)
  1
  > think btunderrepair(#1024)
  0
  
& btunitfixable()
 
  Syntax: btunitfixable(<UnitDB>)
 
  This function determines if a unit is 'cored' - ie unrepairable. The
  function returns 1 if the unit is repairable, otherwise it returns
  0.
 
  Error Messages:
 
  * If <UnitDB> is not a valid RS unit the function returns #-1
    INVALID TARGET
 
  Example:
  Given that #1234 is a mech which is repairable, and #2345 is a mech
  which is unrepairable
 
  > think btunitfixable(#1234)
  1
  > think btunitfixable(#2345)
  0
  
& btweaponstatus()
 
  Syntax: btweaponstatus(<UnitDB>[,<location>])
 
  This function returns a list detailing the status of the weapon(s)
  on <UnitDB>. The list is delimited with | between fields and ,
  between records. The format of the string is:
 
  <weapon number>|<weapon name>|<number of crits>|<part
  quality>|<weapon recycle time>|<recycle time left>|<weapon
  type>|<weapon status>
 
  Argument:
 
  * If <location> is specified only the weapons for that location are
    returned, otherwise all weapons are listed.
 
  <Weapon Type> is listed as:
 
  Continued in btweaponstatus()2
  
& btweaponstatus()2
 
  * 0 = Beam Weapon
  * 1 = Missile Weapon
  * 2 = Artillery Weapon
  * 3 = Ammo Weapon
  * 4 = Hand Weapon
 
  <Weapon Status> is listed as:
 
  * 0 = Weapon Operational
  * 1 = Weapon (temporarily) glitched
  * 2 = Weapon destroyed/flooded
 
  Error Messages:
 
  * If <UnitDB> is not a valid RS unit the function will return #-1
    NO SUCH MECH
  * If <location> is not valid the function will return #-1 INVALID
    SECTION
 
  Example:
  Given that #1234 is an EXT-4D which fired 1 of it's left arm medium
  lasers 10 seconds ago:
 
  > think btweaponstatus(#1234,la)
  0|MediumLaser|1|0|20|10|0|0,1|MediumLaser|1|0|20|0|0|0
  
& btweaponstatus_ref()
 
  Syntax: btweaponstatus_ref(<UnitRef>[,<location>])
 
  This function returns a list detailing the status of the weapon(s)
  on a reference unit ie the default templated value. The list is
  delimited with | between fields and , between records. The format of
  the string is:
 
  <weapon number>|<weapon name>|<number of crits>|<part
  quality>|<weapon recycle time>|<recycle time left>|<weapon
  type>|<weapon status>
 
  Note: As this is a reference function, the return string will show
  no damage unless the unit was actually templated with damage.
  
  Note: As this is a reference function weapons will not have been
  fired.
 
  Continued in btweaponstatus_ref()2
  
& btweaponstatus_ref()2
 
  Argument:

  * If <location> is specified only the weapons for that location are
    returned, otherwise all weapons are listed.
 
  <Weapon Type> is listed as:
    * 0 = Beam Weapon
    * 1 = Missile Weapon
    * 2 = Artillery Weapon
    * 3 = Ammo Weapon
    * 4 = Hand Weapon
 
  <Weapon Status> is listed as:
    * 0 = Weapon Operational
    * 1 = Weapon (temporarily) glitched
    * 2 = Weapon destroyed/flooded
 
  Error Messages:
    * If <UnitRef> is not a valid RS unit the function will return
      #-1 NO SUCH MECH
    * If <location> is not valid the function will return
      #-1 INVALID SECTION
 
  Example:
  Given that EXT-4D is a valid reference:
 
 > think btweaponstatus_ref(#1234,la)
 0|MediumLaser|1|0|20|0|0|0,1|MediumLaser|1|0|20|0|0|0
  
& btweapstat()
 
  Syntax: btweapstat(<weaponname>,<stat>)
 
  This function returns the information requested by <stat> for
  <weaponname>
 
  Note: Be sure to use the long name for <weaponname> or results may
  be inaccurate.
 
  Arguments:
 
  * <stat> = VRT returns the Variable Reycled Time for the weapon
  * <stat> = TYPE returns the weapontype for the weapon
  * <stat> = HEAT returns the heat generated by the weapon
  * <stat> = DAMAGE returns the damage done by the weapon
  * <stat> = MIN returns the minium range of the weapon
  * <stat> = SR returns the short range of the weapon
  * <stat> = MR returns the medium range for the weapon
  * <stat> = LR returns the long range for the weapon
  * <stat> = CRIT returns the number of critslots required by the
    weapon
  * <stat> = AMMO returns the amount an ammobin can hold of the
    ammunition for that weapon
  * <stat> = WEIGHT the function returns the weight of the weapon
  * <stat> = BV returns the Battle Value of the weapon
 
  Continued in btweapstat()2
  
& btweapstat()2
 
  Note: <type> will return 0 for energy weapons, 1 for missile
  weapons, 2 for artillery weapons, 3 for ammo weapons and 4 for other
  weapons (eg sword)
 
  Error Messages:
 
  * If <weaponname> is not a valid partname the function returns #-1
    INVALID PART NAME
  * if <weaponname> is not a valid weaponname the function returns #
    -1 NOT A WEAPON
 
  Example:
 
  > think btweapstat(cl.erppc,bv)
  412
 
& buildcoord

  Attribute: buildcoord X,Y

  This attribute is set on an object holding a sub-map and details
  the coordinates of the entrance to that map from the map it is
  accessible from.
 
  Example:
  Given that #87 is a hangar with an entrance at 100,100 on #62 which
  is the main RS map.
 
  >ex #87/buildcoord
  Buildcoord: 100,100
 
 
  See Also: buildentrace, buildlinks, updatelinks.
   
& buildentrance

  Attribute: buildentrance [x,y] [x,y] [x,y] [x,y]

  This attribute is set on an object holding a sub-map and details
  the coordinates on that map that a unit will be placed at when
  entering.

  The attribute is a space delimited list of the coordinates in the
  order north, east, south, west

  Example:
  Given that #87 is a 10x10 hangar with entrances at the north (5,0),
  east (9,5), south (5,9) and west (0,5).

  >ex #87/buildentrance
  Buildentrance: 5,0 9,5 5,9 0,5
 
  A unit issuing the 'enterbase n' command would arrive on the hangar
  map at 5,0


  See Also: buildcoord, buildlinks, updatelinks.
  
& builder
 
  Power: builder
  
  This power permits the player to use the building-related commands 
  such as @dig and @open.
  
  See Also: @power, @list powers
  
& buildflag
 
  xcodevalue: buildflag <char>
  XTYPE: MAP
  
  This argument stored in this xcode value is a bitvector which 
  controls the following:
  
  * If the building representing the map on it's parent map is Combat 
    Safe.
  * If the map itself is Combat Safe. 
  * If information is provided when someone steps on the building 
    represting the map on it's parent map.
  * If the building can be broken in to.
  * If the building is hidden completely
  
  Values:
  * 1 - Externally CS 
  * 2 - Internally CS  
  * 4 - Hidden (no information shown when someone steps on the base)
  * 8 - Cannot be broken in to
  * 16 - Hidden (completely)
  
  Example:
  To set the map to be internally CS but !CS externally, given that 
  the mapobject is #1234
  
  >think btsetxcodevalue(#1234, buildflag, 3)
  
  See Also: @setxcode, btsetxcodevalue(), @viewxcode
 
& buildlinks
 
  Attribute: buildlinks [num] [num] ...
  
  This attribute contains a space delimited list of the #dbrefs of 
  objects holding submaps.
  
  Example:
  Given that #62 is a map object with 3 submaps, the dbrefs of which 
  are #75, #103, and #105.
  
  >ex #62/buildlinks
  Buildlinks: 75 103 105
  
  See Also: buildcoord, buildentrace, updatelinks
   
& buildonmap
 
  xcodevalue: buildonmap <DBref_ro>
  XTYPE: MAP
  
  This xcode value stores the dbref of the parent mapobject,  ie - 
  indicates the map which THIS  mapobject is represented upon as an 
  entrance.
  
  See Also: @viewxcode
  
& bv
 
  xcodevalue: bv <int>
  XTYPE: MECH
  
  This xcode value stores the BattleValue for the unit.
  
  The value returned is calculated dynamically taking into account 
  any damage the unit may have.
  
  See Also: @viewxcode
 
& cache_depth

  Config parameter: cache_depth <depth>.
  Default: 10

  Specifies the depth of the database cache.  Each bucket in the cache
  is allowed to have this many entries before it will try to remove
  old entries.

  See also: cache_width.
 
& cache_trim

  Config parameter: cache_trim <yes/no>
  Default: no

  When this parameter is 'yes', the cache will be periodically trimmed
  to eliminate unused space. It is especially useful when your cache
  tends to stretch because it cannot hold all the objects being
  accessed at once.
 
& cache_width

  Config parameter: cache_width <depth>
  Default: 20

  Specifies the number of buckets in the database cache.  A hashing
  function is used to assign objects or attributes to a particular
  bucket, where a linear search is performed.
  
& cargospace
 
  xcodevalue: cargospace <int>
  XTYPE: MECH
  
  This xcode value stores the amount of cargospace for the unit.
  
  NOTE - the value is an integer representation of a float. Therefore 
  100 tons would be shown as 10000
  
  Example:
  >setcargospace 500 75
  500.00 cargospace and 75 tons of maxton space set.
  
  >@viewxcode
  cargospace                     50000
  
  See Also: carmaxton, setcargospace, @viewxcode
  
& carmaxton
 
  xcodevalue: carmaxton <char_ro>
  XTYPE: MECH
  
  This xcode value stores the maximum tonnage of a single unit that 
  can be carried by the Unit.
  
  NOTE - the Unit must have carrier_tech
  
  Example
  >setcargospace 500 75
  500.00 cargospace and 75 tons of maxton space set.
  
  >@viewxcode
  cargospace                     50000
  
  See Also: cargospace, setcargospace, @viewxcode, carrier_tech
  
& centbearing
 
  xcodevalue: centbearing <>
  XTYPE: MECH
  
  This xcode value stores the direction to the center of the hex that 
  the Unit is in.
  
  NOTE - when the unit is at the center this value shows 180
  
  See Also: viewxcode, centdist
  
& centdist
 
  xcodevalue: centdist <>
  XTYPE: MECH
  
  This xcode value stores the distance from the center of the hex that 
  the Unit is in.
  
  See Also: @viewxcode, centbearing
  
& cf
 
  xcodevalue: cf <short>
  XTYPE: MAP
  
  This xcode value stores the current CF (Construction Factor) of the 
  building representing this map on the parent map.
  
  See Also: @viewxcode
  
& cfmax
 
  xcodevalue: cfmax <short>
  XTYPE: MAP
  
  This xcode value stores the maximum CF (Construction Factor) of the 
  building representing this map on the parent map.
  
  See Also: cf, @viewxcode
 
& check_interval

  Config parameter: check_interval <secs>
  Default: 600

  Specifies how often (in seconds) the database is to be automatically
  scanned for inconsistencies and purged of references to destroyed
  objects.

  Any inconsistencies found are either fixed or recorded in the log
  file.

  See also: check_offset, @dbck.
 
& check_offset

  Config parameter: check_offset <secs>
  Default: 300

  Specifies how long after startup the first automatic database check
  is to be performed.  Subsequent checks are performed every
  check_interval seconds.

  See also: check_interval, @dbck.
  
& chown_anything
 
  Power: chown_anything
  
  This power permits the player to @chown anything to anyone.
  
  See Also: @power, @list powers, @chown
  
& clearmechs
 
  Map Command: <#db>
  
  This command shuts down all RS Units on <#db> and resets their 
  mapindex xcode value to -1.
  
  The MECH objects remain within the MAP object.
  
  See Also: @viewxcode
  
& clearstuff
 
  RS Command: clearstuff
  
  This command permits you to remove all parts and commodities from 
  the manifest of an RS Unit or the stores of a bay.
  
  See Also: addstuff, removestuff, stores, manifest
 
& clone_copies_cost

  Config parameter: clone_copies_cost <yes/no>
  Default: NO

  Indicates whether or not @cloned objects inherit the cost of the
  original.

  If disabled, @cloned objects cost the same as a @create that doesn't
  specify the object cost.  The new owner is charged the correct
  amount in either case.

  See also: @clone.
  
& cloudbase
 
  xcodevalue: cloudbase <short>
  XTYPE: MAP
  
  This xcode value stores the height, in terms of the z coord, before 
  clouds are encountered.
  
  See Also: gravity, maplight, temperature, winddir, windspeed, 
  @viewxcode
  
& cocoon
 
  xcodevalue: cocoon <int_ro>
  XTYPE: MECH
  
  This xcode value stores a 1 if the Unit is in a coccon (ie 
  performing an OOD) or a 0 if it is not.
  
  See Also: @viewxcode, @ood
  
& comm_all
 
  Power: comm_all
  
  This power permits the player to all channel related commands.
  
  See Also: @power, @list powers, comsys
 
& command_quota_increment

  Config parameter: command_quota_increment <amount>
  Default: 5

  Specifies the number of commands by which the command quota for
  connected users each timeslice.  Each command a user types in
  (commands executed by machines do not count) decreases the quota
  by 1, and the user's commands are only executed if the quota is
  greater than zero.

  See also: command_quota_max, timeslice.
 
& command_quota_max

  Config parameter: command_quota_max <amount>
  Default: 100

  Specifies the maximum value for the command quota for connected
  users.

  A user's command quota is only increased if it is below this value.
  Each command a user types in (commands executed by machines do not
  count) decreases the quota by 1, and the user's commands are only
  executed if the quota is greater than zero.

  See also: command_quota_increment, timeslice.
 
& comment

  Syntax: @comment <object> = <text>
  Attribute: comment
 
  This attribute can only be set by wizards. It is used to contain any
  comments about the player which the wizard may wish to set.
 
& compress_program

  Config parameter: compress_program <path>
  Default: gzip

  Specifies the program to be run to compress the database file when
  it is written.  If database file compression is enabled, database
  dumps are piped through this program on their way out to disk.

  See also: compresion, uncompress_program.
 
& compression

  Config parameter: compress <yes/no>
  Default: no

  Indicates whether or not the database is to be compressed using the
  compress_program when it is written, and whether or not to check for
  a compressed database to uncompress at startup.

  See also: compress_program, uncompress_program.
 
& concentrator_port

  Config parameter: concentrator_port <port number>
  Default: 6251

  Specifies the port number that the MUX will expect the concentrator
  to use when it is active. This parameter is meaningless if you do
  not have concentrator support compiled into the server.
 
& config_access

  Config parameter: config_access <param> [!]<privilege>
  [[!]<privilege>]...

  Changes the privileges needed to change the specified configuration
  parameter.  The value 'disabled' indicates that the parameter may
  only be specified in the configuration file at startup.  Setting
  privileges to anything other than disabled or god is meaningless
  unless the restriction on the @admin command is weakened.

  See also: @admin, @list config_permissions, PERMISSIONS.
  
& config_parameters
 
  
  These are the parameters which can be set in the MUX configuration file:
 
 access                  alias                     allow_chanlurking 
 allow_unloggedwho       attr_access               attr_alias 
 attr_cmd_access         badsite_file              bad_name 
 btech_afterlife_dbref   btech_complexrepair       btech_critlevel 
 btech_defaultweapbv     btech_defaultweapdam      btech_dig_only_fs 
 btech_divrotordamage    btech_exile_stun_code     btech_explode_ammo 
 btech_explode_reactor   btech_explode_stop        btech_explode_time 
 btech_extendedmovemod   btech_failures            btech_fasaadvvhlcrit 
 btech_fasaadvvhlfire    btech_fasaadvvtolcrit     btech_fasacrit 
 btech_freetechtime      btech_glancing_blows      btech_hotloadaddshalfbthmod 
 btech_ic                btech_idf_requires_spotter 
 btech_inferno_penalty   btech_limitedrepairs      btech_moddamagewithrange 
 btech_moddamagewithwoods                          btech_mw_losmap 
 btech_newterrain        btech_nofusionvtolfuel    btech_occ_comsys 
 btech_oldxpsystem       btech_phys_use_pskill     btech_roll_on_backwalk 
 btech_seismic_see_stopped                         btech_stackdamage 
 btech_stacking          btech_stackpole           btech_tankfriendly 
 btech_tankshield        btech_usedmechstore       btech_vcrit 
 btech_vtol_ice_causes_fire                        btech_xp_ammomod 
 btech_xp_missilemod     btech_xp_modifier         btech_xp_usePilotBVMod 
 cache_depth             cache_trim                cache_width 
 check_interval          check_offset              clone_copies_cost 
 command_quota_increment command_quota_max         compression 
 compress_program        concentrator_port         config_access 
 connect_file            connect_reg_file          conn_timeout 
 crash_database          create_max_cost           create_min_cost 
 dark_sleepers           default_home              dig_cost 
 down_file               down_motd_message         dump_interval 
 dump_message            dump_offset               earn_limit events_
 daily_hour              examine_flags             examine_public_
 attrs exit_flags        exit_quota                fascist_teleport 
 find_money_chance       fixed_home_message        fixed_tel_message 
 flag_alias              forbid_site               fork_dump 
 fork_vfork              full_file full_motd_message 
 function_access         function_invocation_limit 
 function_recursion_limit                          gdbm_database 
 good_name               guests_channel            guest_char_num 
 guest_file              guest_nuker               have_comsys 
 have_macros             have_mailer               have_zones 
 help_file               help_index                hostnames 
 idle_interval           idle_timeout              idle_wiz_dark 
 include                 indent_desc               initial_size 
 input_database          kill_guarantee_cost       kill_max_cost 
 kill_min_cost           link_cost                 list_access 
 lock_recursion_limit    log                       logout_cmd_access 
 logout_cmd_alias        log_options               look_obey_terse 
 machine_command_cost    mail_database             mail_expiration 
 master_room             match_own_commands        max_players 
 money_name_plural       money_name_singular       motd_file 
 motd_message            mud_name                  news_file 
 news_index              newuser_file              notify_recursion_limit 
 number_guests           open_cost                 output_database 
 output_limit            page_cost                 paranoid_allocate 
 parent_recursion_limit  paycheck                  pemit_any_object 
 pemit_far_players       pemit_site                player_flags 
 player_listen           player_match_own_commands player_queue_limit 
 player_quota            player_starting_home      player_starting_room 
 plushelp_file           plushelp_index            port 
 postdump_message        public_channel            public_flags 
 queue_active_chunk      queue_idle_chunk          quiet_look 
 quiet_whisper           quit_file                 quotas 
 read_remote_desc        read_remote_name          register_create_file 
 register_site           retry_limit               robot_cost 
 robot_flags             robot_speech              room_flags 
 room_quota              sacrifice_adjust          sacrifice_factor 
 search_cost             see_owned_dark            signal_action 
 site_chars              space_compress            stack_limit 
 starting_money          starting_quota            status_file 
 suspect_site            sweep_dark                switch_default_all 
 terse_shows_contents    terse_shows_exits         terse_shows_move_messages 
 thing_flags             thing_quota               timeslice 
 trace_output_limit      trace_topdown             trust_site 
 uncompress_program      unowned_safe              user_attr_access 
 use_http                wait_cost                 wizard_help_file 
 wizard_help_index       wizard_motd_file          wizard_motd_message 
 wiznews_file            wiznews_index             zone_recursion_limit
 
& conn_timeout

  Config parameter: conn_timeout <num>
  Default: 120

  Specifies how many seconds a new network connection may remain open
  before connecting to a character before being automatically
  disconnected.
 
& connect_file

  Config parameter: connect_file <path>
  Default: text/connect.txt

  Specifies the name of the file that a user sees immediately after
  connecting to the MUX if registration is not enabled.  This file
  normally contains help on how to connect to or create a character,
  as well as the WHO and QUIT commands.

  See also: connect_reg_file
 
& connect_reg_file

  Config parameter: connect_reg_file <path>
  Default: text/register.txt

  Specifies the name of the file that a user sees immediately after
  connecting to the MUX if registration is enabled.  This file
  normally contains help on how to get a character (usually by
  sending e-mail to one of the wizards), how to connect to an
  existing character, as well as the WHO and QUIT commands.

  See also: connect_file
  
& control_all
 
  Power: control_all
  
  This power permits the player to modify any object in the database.
  
  See Also: @power, @list powers
 
& crash_database

  Config parameter: crash_database <path>
  Default: none

  Specifies the name of the database file that should be written when
  MUX detects an internal error and is about to crash.  Note that
  the database may contain corrupted links of the error occurs in
  the middle of moving links about.

  Dumping a crash database is currently not implemented.
 
& create_max_cost

  Config directive: create_max_cost <amount>
  Default: 505

  Specifies the maximum amount of money that is used in calculating
  the value of a created object.  Specifying more than this amount
  of money in a @create command will cause the excess to be wasted.

  See also: create_min_cost, sacrifice_adjust, sacrifice_factor.
 
& create_min_cost

  Config parameter: create_min_cost <amount>
  Default: 10

  Specifies the minimum (and default) cost for creating an object.

  See also: create_max_cost, sacrifice_adjust, sacrifice_factor.
  
& critstatus
 
  xcodevalue: critstatus <bv>
  XTYPE: MECH
  
  This xcode value stores flags detailing the condition of the RS 
  Unit.
  
  FLAGS:
  * a = Mech's gyro is destroyed (2+ crits)
  * b = Unit's sensors damaged (1 crit)
  * c = Unit's TAG is destroyed
  * d = BSuit is hidden.
  * e = Mech's gyro is damaged (1 crit)
  * f = Mech has a damaged hip
  * g = Unit's life support is destroyed
  * h = Unit's AngelECM is destroyed
  * i = Unit's C3I is destroyed
  * j = Unit's NSS is destroyed
  * k = Unit's slite is destroyed
  * l = Unit's slite is on.
  * m = LOAD_OK: Mech's cargo load checked.
  * n = OWEIGHT_OK: Mech's current weight (dested sections+cargo) is checked.
  * o = SPEED_OK: Mech's maxspeed is ok (modded for cargo/weight, etc)
  * p = heatcutoff
  * q = Unit is towable
  * r = Mech's hip is destroyed
  * s = Unit's tarcomp destroyed
  * t = Unit's C3 Destroyed
  * u = Unit's ECM destroyed.
  * v = Unit's Beagle probe destroyed
  * w = Unit is slimed by inferno
  * x = (PC_INITIALIZED): This is unused.
  * y = Aero is spinning out of control
  * z = CLAIRVOYANT - Mech never gets blocked LoS.
  * A = INVISIBLE - The almighty cloak. LoS checks against mech never succeed.
  * B = CHEAD: Basically, 'mech is turning'. Do Not Touch 
  * C = OBSERVATORIC - Unit is an OL
  * D = Unit's Bloodhouse probe is destoyed
  * E = Pilot stunned (Exile stun code)
  
  See Also: critstatus2, tankcritstatus, @viewxcode
  
& critstatus2
 
  xcodevalue: critstatus2 <bv>
  XTYPE: MECH
  
  This xcode value stores flags detailing the condition of the RS 
  Unit.
  
  Flags:
  * a = Unit's HeavyDuty Gyro is damaged (1 crit)
  
  See Also: critstatus, tankcritstatus, @viewxcode
 
& dark_sleepers

  Config parameter: dark_sleepers <yes/no>
  Default: yes

  Indicates whether or not disconnected players are to be considered
  'dark', so that they do not show up when a player looks in the
  room that they are in.  Disconnected players can still be found by
  examining the room or by using [next()] to follow the contents
  chain for the room.
 
& default_home

  Config parameter: default_home <location>
  Default (player_starting_home)

  Sets the home location for objects which have an invalid home
  (whether because the home location was deleted, or is owned by
  another player and is not set ABODE) and the home of their owner
  is also invalid.  If this parameter is not set, the value of
  player_starting_home is used instead.

  See also: player_starting_home.
  
& delinftech
 
  RS Command: delinftech
  
  Deletes the advanced infantry technology from the targetted RS Unit.
  
  Arguments:
  * tech - Valid infantry technologies are:
        Swarm_Attack_Tech
        Mount_Friends_Tech
        AntiLeg_Attack_Tech
        CS_Purifier_Stealth_Tech
        DC_Kage_Stealth_Tech
        FWL_Achileus_Stealth_Tech
        FC_Infiltrator_Stealth_Tech
        FC_InfiltratorII_Stealth_Tech
        Must_Jettison_Pack_Tech
        Can_Jettison_Pack_Tech
  
  See Also: settarget,
  
& delobj
 
  Map Command: delobj <type>
               delobj <x> <y>
               delobj <type> <x> <y>
  
  This command deletes objects from the map.
  
  Arguments:
  * <type> - deletes ALL objects of <type> from the map
  * <x> <y> - deletes all objects from <x> <y>
  * <type> <x> <y> - deletes objects of <type> from <x> <y>
  
  Valid types are:
  * blz
  * building
  * deco
  * entra
  * fire
  * leave
  * linked
  * mine
  * smoke
  * tbits
  
& deltech
 
  Mechrep Command: deltech <all|[<tech>]>
  
  This command deletes all, or the specified advanced technology from 
  the targetted RS Unit.
  
  See Also: settarget, @viewxcode
  
& destroyer
 
  Attribute: destroyer <#dbref>
  
  This attribute is created on a player object when it is being 
  destroyed (ie has the GOING flag set).
  
  The attribute stores the #dbref of the player who @destroy'ed the 
  player.
 
& dig_cost

  Config parameter: dig_cost <amount>
  Default: 10

  Specifies how much the @dig command costs.
  
& disabled_hs
 
  xcodevalue: disabled_hs <int_ro>
  XTYPE: MECH
  
  This xcode value stores the number of heatsinks which have been 
  disabled, as distinct from destroyed.
  
  See Also: @viewxcode
  
& display
 
  Mechrep Command: display <loc>
  
  This command displays all the items in the specified location on the 
  targetted RS Unit.
  
  This command is equivalent to 'critstatus'
  
  See Also: settarget, critstatus
  
& dissheat
 
  xcodevalue: dissheat <float>
  XTYPE: MECH
  
  This xcode value stores the heat dissipation rate for the RS Unit.
  
  See Also: @viewxcode
 
& down_file

  Config parameter: down_file <pathname>
  Default: text/down.txt

  Specifies the name of the file that is displayed when players
  attempt to connect to a non-wizard character when logins are
  disabled.

  See also: @disable, down_motd_message.
 
& down_motd_message

  Config parameter: down_motd_message <message>
  Default: none

  Sets the message that is displayed when a player attempts to connect
  to a non-wizard character when logins are disabled.  This message
  is displayed in addition to the contents of the down.txt file.

  See also: @disable, down_motd_file.
 
& dump_interval

  Config parameter: dump_interval <amount>
  Default: 3600

  Specifies the time in seconds between automatic database dumps.

  See also: dump_offset, output_database.
 
& dump_message

  Config parameter: dump_message <message>
  Default: none

  Sets the message that is sent to everyone before the database is
  being dumped to disk, whether automatically or via the @dump
  command.

  See also: @dump, postdump_message.
 
& dump_offset

  Config parameter: dump_offset <amount>
  Default: 0

  Specifies the time in seconds between startup and the first database
  dump.

  If zero, the value of the dump_interval parameter is used.

  See also: dump_interval.
 
& earn_limit

  Config parameter: earn_limit <amount>
  Default: 10000

  Specifies the threshold at which earning additional money becomes
  difficult. Specifically, players with more than this much money no
  longer receive a  paycheck for each day they connect, don't receive
  insurance payments for being killed, and don't find money lying in
  the streets.

  See also: find_money_chance, paycheck.
  
& enhanced-logging

  Compile option: --disable-enhanced-logging
  Default: enabled
 
  Disables support for arbitrary server logs
 
& events_daily_hour

  Config parameter: events_daily_hour <hour>
  Default: 3

  Specifies the hour that @daily is executed. No guarantee is made as
  to what time during this hour it is executed. This should be a
  number between 0 and 23.
 
& examine_flags

  Config parameter: examine_flags <yes/no>
  Default: yes

  Indicates whether or not the examine command should include an
  expanded flags list in the description of the object.

  See also: examine.
 
& examine_public_attrs

  Config parameter: examine_public_attrs <yes/no>
  Default: yes

  Indicate whether or not the examine command should display the
  public attributes of the object by default when used by a player
  who does not control the object.  Regardless of the setting of
  this parameter, the short form is available with examine/brief and
  the long form with examine/long.

  See also: examine.
 
& exit_flags

  Config parameter: exit_flags <flags>
  Default: none

  Modifies the set of flags that an exit receives when it is created
  via the @open command or via the optional exit creation parameters
  of the @dig or @link commands.  Flags prefixed by a ! remove the
  indicated flag from the set.

  See also: @list, player_flags, robot_flags, room_flags, thing_flags.
 
& exit_quota

  Config parameter: exit_quota <amount>
  Default: 1

  Sets how much quota it costs to create an exit (and also how much
  the remaining quota is increased when an exit is @destroyed.

  See also: @quota, player_quota, room_quota, thing_quota, QUOTAS.
  
& expanded_who
 
  This power permits the player to see the additional information that 
  a wizard can see using the WHO command.
 
  See Also: @power, @list powers, who
  
& faction
 
  Attribute: faction
  
  This attribute is set on a player to store the faction he is in.
 
& fascist_teleport

  Config parameter: fascist_teleport <yes/no>
  Default: no

  If this parameter is set to yes, then players (and objects) may not
  teleport out of locations that they do not control or which are not
  set JUMP_OK.  If the teleporting player is inside an object, the
  room that ultimately contains the object is checked.  Going home
  is unaffected.
 
& find_money_chance

  Config parameter: find_money_chance <amount>
  Default: 0

  Indicates the chance that players have of finding money when
  entering a new room.  The chance is 1 / find_money_chance, except
  that finding money is disabled if this parameter is set to zero.

  See also: earn_limit, paycheck.
  
& find_unfindable
 
  Power: find_unfindable
  
  This power permits the player to find players who have the 
  UNFINDABLE flag.
  
  See Also: @power, @list powers, unfindable
 
& fixed_home_message

  Config parameter: fixed_home_message <string>
  Default: none

  Specifies the string that is sent to a player when they try to go
  home while they are set with the FIXED flag.

  See also: fixed_tel_message.
 
& fixed_tel_message

  Config parameter: fixed_tel_message <string>
  Default: none

  Specifies the string that is sent to a player when they try to
  teleport while they are set with the FIXED flag.

  See also: fixed_home_message.
  
& fixstuff
 
 Syntax: fixstuff
 
  This command fixes consistency errors in econ data.
 
& flag_alias

  Config parameter: flag_alias <alias> <flagname>

  Defines <alias> as a synonym for the flag <flagname>.
  
& flags
 
  xcodevalue: flags <bv>
  XTYPE: MAP
  
  This xcode value stores flags pertaining to the map.
  
  Flags:
  * a = mapobjects - this map is parent to sub-maps
  * b = Special rules apply. eg Gravity or temp are non-standard
  * c = Map is in vacumn
  * d = Eternal fires burn on the map
  * e = Map is subterrainian - Jumping, VTOL takeoff are disabled
  * f = Map is dark - nothing if visible beyond sensor range
  * g = Bridges are CS - cannot be destroyed on this map
  * h = Roads do not convert to bridges 
  
  See Also: @viewxcode
 
& forbid_site

  Config parameter: forbid_site <addr> <mask>

  Indicates that connections are to be rejected from sites whose
  address  matches the specified address when ANDed with the mask.
  The contents of the file specified by badsite_file is sent
  immediately before closing the connection.  This directive may be
  used to restrict access to just the local network, or to prevent
  access from troublemaking sites.

  The default is for all sites to be allowed to connect, none
  forbidden.

  See also: badsite_file, permit_site, register_site, SITE LISTS.
 
& fork_dump

  Config parameter: fork_dump <yes/no>
  Default: yes

  Indicates whether or not database dumps are to be done by fork()ing
  off a separate process to perform the dump.  While enabling this
  parameter reduces the amount of time needed to perform the dump,
  it requires that the system  have enough free swap space to hold a
  second copy of the running game.

  See also: fork_vfork.
 
& fork_vfork

  Config parameter: fork_vfork <yes/no>
  Default: no

  Indicates whether or not the vfork() system call should be used in
  place of fork() when a database dump is to be performed.  This
  parameter is only checked if the fork_dump parameter is set to
  yes.

  See also: fork_dump.
  
& free_money
 
  Power: free_money
  
  This power provides the player with infinite money.
  
  See Also: @power, @list powers
  
& free_quota
 
  Power: free_quota
  
  This power gives the player infinite quota
  
  See Also: @power, @list powers
  
& fuel
 
  xcodevalue: fuel <int>
  XTYPE: MECH
  
  This xcode value stores the amount of fuel current in the vehicle.
  
  NOTE - This does not include cargo - only the vehicle's operating 
  fuel.
  
  See Also: fuel_orig, @viewxcode
  
& fuel_orig
 
  xcodevalue: fuel_orig <int>
  XTYPE: MECH
  
  This xcode value stores the amount of fuel originally in the 
  vehicle.
  
  NOTE - This does not include cargo - only the vehicle's operating 
  fuel.
  
  See Also: fuel, @viewxcode
 
& full_file

  Config parameter: down_file <pathname>
  Default: text/full.txt

  Specifies the name of the file that is displayed when players
  attempt to connect to a non-wizard character when the number of
  connected players is not less than the number of players allowed
  by the max_players directive.

  See also: full_motd_message, max_players.
 
& full_motd_message

  Config parameter: full_motd_message <message>
  Default: blank

  Sets the message that is displayed when a player attempts to connect
  to a non-wizard character when the number of connected players is
  not less than the number of players allowed by the max_players
  directive.  This message is displayed in addition to the contents
  of the full.txt file.

  See also: down_motd_file, max_players.
 
& function_access

  Config parameter: function_access <function> [!]<priv>
  [[!]<priv>]...

  Changes the privileges needed to call the MUX function <function>.
  If you do not have permission to call a function, the function
  returns the value "#-1 PERMISSION DENIED" instead of the value it
  would normally return.

  See also: @list functions, FUNCTION LIST, PERMISSIONS.
 
& function_invocation_limit

  Config parameter: function_invocation_limit <num>
  Default: 2500

  This directive sets the maximum number of times that a command may
  make function calls.  If the invocation limit is exceeded, the
  string '#-1 FUNCTION INVOCATION LIMIT EXCEEDED' is returned.  This
  limit is  intended to prevent long hangs from creative uses of u()
  and iter().

  Note: @search is treated specially, each object examined with the
  eval=<arg> parameter is treated as a separate command for the
  purposes of the function invocation limit.
 
& function_recursion_limit

  Config parameter: function_recursion_limit <num>
  Default: 50

  This directive sets the maximum number of nested function calls that
  may be made before the function call is aborted and the string
  '#-1 FUNCTION RECURSION LIMIT EXCEEDED' is returned.  Normally this
  is not a problem, but the u() function can be used to cause
  infinite recursion (unless blocked by a recursion limit)
  
& fx
 
  xcodevalue: fx <float>
  XTYPE: MECH
  
  This xcode valuse stores the exact x coordinate of the RS Unit.
  
  See Also: fy, fz, x, y, z, @viewxcode
  
& fy
 
  xcodevalue: fy <float>
  XTYPE: MECH
  
  This xcode valuse stores the exact y coordinate of the RS Unit.
  
  See Also: fx, fz, x, y, z, @viewxcode
  
& fz
 
  xcodevalue: fz <float>
  XTYPE: MECH
  
  This xcode valuse stores the exact z coordinate of the RS Unit.
  
  See Also: fx, fy, x, y, z, @viewxcode
 
& gdbm_database

  Config parameter: gdbm_database <path>
  Default: none

  Specifies the name of the file that stores the text portion of the
  database.  The text strings are stored in a binary format optimized
  for fast retrieval and storage rather than access with programs
  such as more.
 
& good_name

  Config parameter: good_name <name>

  Removes <name> from the list of names that may not be used as a
  player name, reversing the effect of a bad_name directive.  The
  name must match exactly (wildcard matching is not performed).
  
& gravity
 
  xcodevalue: gravity <char>
  XTYPE: MAP
  
  This xcode value stores the gravity on the map, expressed in .001 
  gravties. eg A gravity of 1 is expressed as 10 in the gravity xcode 
  value.
  
  See Also: cloudbase, maplight, temperature, winddir, windspeed, 
  @viewxcode
  
& guest
 
  Power: guest
  
  This power indicates that the player is a guest.
  
  See Also: @power, @list powers
 
& guest_char_num

  Config parameter: guest_char_num <number>
  Default: none

  Indicates the database number of the guest character.  If set, the
  specified guest character is subject to additional restrictions
  (such as not being allowed to create or destroy objects).  The
  actual restrictions can be changed with the access config
  parameter using the no_guest permission.

  See also: guest_prefix, guest_nuker, number_guests, access.
 
& guest_file

  Config parameter: guest_file <path>
  Default: text/guest.txt

  Specifies the file that is to be shown to people connecting to the
  guest character in place of the motd file.

  See also: guest_char_num.
 
& guest_nuker

  Config parameter: guest_nuker <dbref>
  Default: 1

  Specifies who is to nuke guests when they log off. If it is not a
  good object or a wizard, it defaults to #1.

  See also: guest_char_num, guest_prefix, number_guests.
 
& guests_channel

  Config parameter: guests_channel <name>
  Default: Guests

  Specifies the name of the channel that guests join when they
  connect. You must have created the channel already. To disable
  this feature, simply set this parameter to nothing.

  See also: public_channel.
  
& halt
 
  Power: halt
  
  This power permits a player to @halt objects he does not own.
  
  See Also: @power, @list powers, @halt
 
& have_comsys

  Config parameter: have_comsys <yes/no>
  Default: yes

  Specifies whether or not the comsystem should be active.

  See also: comsys_database, have_macros.
 
& have_macros

  Config parameter: have_macros <yes/no>
  Default: yes

  Specifies whether or not the macro system should be active.

  See also: comsys_database, have_comsys.
 
& have_mailer

  Config parameter: have_mailer <yes/no>
  Default: yes

  Specifies whether @mail and mail aliases should be active.

  See also: mail_database
 
& have_zones

  Config parameter: have_zones <yes/no>
  Default: yes

  Specifies whether zones should be active. If this is off, zone
  connects and disconnects, zone commands, and the control aspects
  will all be disabled.
  
& heading
 
  xcodevalue: heading <short>
  XTYPE: MECH
  
  This xcode value stores the current heading of the unit. 
  
  NOTE - Due to the code the heading is expressed according to the 
  formula 'degrees * 32'. eg a heading of 1 degree will return 32 in 
  @viewxcode and with btgetxcodevalue()
  
  See Also: @viewxcode
  
& heat
 
  xcodevalue: heat <float>
  XTYPE: MECH
  
  This xcode value stores the total heat for the RS Unit.
  
  NOTE - The amount displayed must be multiplied by 10 to return 
  degrees. eg a temp of 168 degrees will show as 16.80 in @viewxcode 
  and btgetxcodevalue().
  
  See Also: overheat, @viewxcode
  
& heatsinks
 
  xcodevalue: heatsinks <char_ro>
  XTYPE: MECH
  
  This xcode value stores the number of heatsinks on the unit. The 
  value returned is calculated dynamically taking into account any 
  damaged heatsinks the unit may have.
  
  See Also: @viewxcode
 
& help_file

  Config parameter: help_file <path>
  Default: text/help.txt

  Specifies the name of the file containing the text used by the help
  command.

  See also: help, help_index
 
& help_index

  Config parameter: help_index <path>
  Default: text/help.indx

  Specifies the name of the index file used by the help command.  This
  file must be generated by mkindx from the help file.  The contents
  of this file are read in to a hash table when the game is started
  and whenever a @readcache command is executed.

  See also: help, @readcache, help_file
  
& hhourly
 
  Attribute: hhourly
  
  The contents of attribute are executed once every hour.
  
  Example:
  >ex Main RS Map/hhourly
  HHourly: @fo me={FIXMAP};@tri me/SAVEMAP.T
  
& hide
 
  Power: hide
  
  This power permits the player to set the DARK flag upon himself.
  
  See Also: @power, @list powers, dark
 
& hostnames

  Config parameter: hostnames <yes/no>
  Default: yes

  Indicates whether or not IP addresses should be replaced with host
  names where possible in the log file and wizard WHO report.
  
& hudinfo-support

  Compile option: --disable-hudinfo-support
  Default: enabled

  Disables the HUDINFO protocol which supports clients using graphical
  HUDs
  
& idle
 
  Power: idle
  
  This power prevents the player from being subject to the idle 
  timeout.
 
  See Also: @power, @list powers
 
& idle_interval

  Config parameter: idle_interval <secs>
  Default: 60

  Sets the interval between checks for idle users.

  See also: conn_timeout, idle_timeout.
 
& idle_timeout

  Config parameter: idle_timeout <secs>
  Default: 3600 (one hour)

  Sets the amount of time that a player may remain idle before being
  automatically disconnected.  Players idle longer than this parameter
  are disconnected when the next check for idle players is done.

  See also: conn_timeout, idle_interval.
 
& idle_wiz_dark

  Config parameter: idle_wiz_dark <yes/no>
  Default: no

  Indicates whether or not wizards or players with the idle power who
  are idle for longer than the default timeout value are to
  automatically be set DARK, and then unDARKed when they type in
  their next command.

  Wizards  already set DARK are not automatically unDARKed. Any
  player who is set dark by this action will have a 'd' instead of a
  'D' by their idle time in the privileged WHO listing.
 
& include

  Config parameter: include <path>
  Default: none

  Reads and processes configuration directives from the named file.

  This directive is only valid during startup.
 
& indent_desc

  Config parameter: indent_desc <yes/no>
  Default: no

  Places a blank row before and after every room, object, and exit
  description when looked at.
 
& initial_size

  Config parameter: initial_size <number>
  Default: 1000

  This is the number of objects that can be created before the
  database structure has to be reallocated again. This is needed
  since MUX allocates space for the database in large chunks, the
  size of which depends on this parameter.
 
& input_database

  Config parameter: input_database
  Default: netmux.db

  Specifies the name of the database file that is read in at startup.

  This file is used only as an input file, the parameter
  output_database controls where updated copies of the database are
  written.

  See also: crash_database, gdbm_database, output_database.
  
& jumpheading
 
  xcodevalue: jumpheading <short>
  XTYPE: MECH
  
  This xcode value stores the heading of the RS Units most recent jump 
  (ie its current jump if it is actually jumping, or its last jump if 
  it is not)
  
  See Also: @viewxcode
 
& kill_guarantee_cost

  Config parameter: kill_guarantee_cost <amount>
  Default: 100

  Specifies the amount of money you have to spend (ie. kill target =
  <amount>) to have a 100% chance of killing them (assuming there
  are no other factors, such as the victim being immortal or in a
  HAVEN room, etc).  The chance of a successful kill is <amount
  spent> / <kill_guarantee_cost>.

  See also: kill, kill_max_cost, kill_min_cost, HAVEN, IMMORTAL,
            KILLING.
 
& kill_max_cost

  Config parameter: kill_max_cost <amount>
  Default: 100

  Specifies the maximum amount of money that may be usefully spent on
  a kill attempt.  Spending more than this amount does not improve
  the chance of success.  Setting this parameter to less than the
  kill_guarantee_cost parameter prevents 'automatic kills', as the
  kill will always have a chance of failing.

  See also: kill, kill_guarantee_cost, kill_min_cost, HAVEN, IMMORTAL,
            KILLING.
 
& kill_min_cost

  Config parameter: kill_min_cost <amount>
  Default: 10

  Specifies the minimum (and default) cost for attempting to kill
  someone or something.

  See also: kill, kill_guarantee_cost, kill_max_cost, HAVEN, IMMORTAL,
            KILLING.
  
& last_startup
 
  xcodevalue: last_startup <int>
  XTYPE: MECH
  
  This xcode value stores the timestamp of the last time the Unit was 
  started.
  
  The format of the string is compatible with the secs() and 
  convsecs() functions.
  
  See Also: secs(), convsecs(), @viewxcode
 
& link_cost

  Config parameter: link_cost <amount>
  Default: 1

  Specifies the cost of using the @link command to establish or change
  the link of an exit to its destination, the home of a player or an
  object, or the drop-to of a room.

  See also: @link.
  
& list
 
  Map Command: list <mechs|objs>
  
  This command lists the specified object-type on the map.
  
  To run this command you must be within the mapobject which the map 
  you are checking is attached to.
  
  Arguments:
  * mechs - displays details of the RS Units on the map
  * objs - displays details of other units (eg minds) on the map.
  
  Error Messages:
  * if arg < 1 the command returns "Supply target type too!"
 
& list_access

  Config parameter: list_access <param> [!]<privilege>
  [[!]<privilege>]...

  Changes the access needed to the <param> option of the @list
  command.

  See also: @list, PERMISSIONS.
  
& listforms
 
  Debug command: listforms
  
  This command displays the list of parts and commodities known to the 
  econ.
  
  The listforms display is formatted: 
  num   shortname   wildcardable-name   long name
  
  NOTE - the num reported is NOT the partnum as reflected by the 
  btgetpartmatch() function.
  
  Example:
  NOTE - this is a very abbreviated example.
  >listforms
  
Listing of forms:
  0 AC10                 AC/10                     IS.AC/10
  1 AC2                  AC/2                      IS.AC/2
  2 AC20                 AC/20                     IS.AC/20
  3 AC5                  AC/5                      IS.AC/5
  4 AE                   AngelEcm                  AngelEcm
  5 AIV                  ArtemisIV                 ArtemisIV
  6 AIVS                 ArrowIVSystem             IS.ArrowIVSystem
  7 AMS                  Anti-MissileSystem        IS.Anti-MissileSystem
  8 AP                   A-Pod                     IS.A-Pod
  9 ASU                  AchileusStealthUnit       AchileusStealthUnit
 10 AT                   AcidThrower               IS.AcidThrower
 11 A_AC10               Ammo_AC/10                Ammo_IS.AC/10
 
  See Also: btgetpartmatch(), btgetpartname()
  
& loadmap
 
  Map Command: loadmap <name>
  
  This command loads the map specified by <name> onto a mapobject. To 
  run this command you must be within the mapobject you wish to 
  attach the map to.
  
  Error Messages:
  * if args !=1 the command returns "Invalid number of arguments!"
  * if <name> is not a map the command returns "Map not found."
  * if <name> is not a valid map the command returns "Map invalid."
  * for other errrors the command returns "Unknown error while loading 
    map!"
  
& loadnew
 
  Mechrep Command: loadnew <templatename>
  
  This command loads the specified template onto the MECH object.
  
  Example:
  Given that #1234 is a valid MECH object:
  
  >settarget #1234
  >loadnew EXT-4D
  Template loaded.
  
  which is the equivalent of:
  
  think btloadmech(#1234, EXT-4D)
  
  See Also: settarget, btloadmech()
 
& lock_recursion_limit

  Config parameter: lock_recursion_limit <num>
  Default: 20

  Sets the maximum number of levels of indirection that may be used
  when using indirect locks.  If more than this many levels are
  used, the lock fails and the user gets an error message.
 
& log

  Config parameter: log [!]<logoption> [[!]<logoption>]...

  Specifies what types of events are to be logged to the logfile.

    accounting     - Write an accounting record to the log for each
                     player who disconnects.
    all_commands   - Record all commands executed.
    bad_commands   - Record commands entered that did not match
                     anything.
    buffer_alloc   - Record buffer allocates and frees.
    bugs           - Record internal inconsistencies found.
    checkpoints    - Record automatic database dumps.
    config_changes - Record uses of the @admin command.
    create         - Record creation of new players.
    killing        - Record uses of the kill and slay commands.
    logins         - Record connects to characters.
    network        - Record new and broken net connections.
    problems       - Record problems found with the database.
    security       - Record security-related events.
    shouts         - Record uses of the @wall command.
    startup        - Record information about game startup.
    wizard         - Record uses of dangerous commands like @toad.

  See also: log_options.
 
& log_options

  Config parameter: log_options [!]<option> [[!]<option>]...

  Specifies the type of information to be included in each log entry.

  The possible values are:
    flags       - Include the flags set on a player or object.
    location    - Include the location of referenced players and
                  objects.
    owner       - Include the owner of referenced players and objects.
    timestamp   - Include a timestamp in each log entry.

  See also: log.
 
& logout_cmd_access

  Config parameter: logout_cmd_access <command> <permlist>

  Specifies permission for logged-out commands, like WHO, DOING,
  SESSION, QUIT, OUTPUTPREFIX, and OUTPUTSUFFIX.

  See also: access.
 
& logout_cmd_alias

  Config parameter: logout_cmd_alias <alias> <command>

  Makes <alias> an alias for <command>, where <command> is one of WHO,
  DOING, SESSION, QUIT, OUTPUTPREFIX, and OUTPUTSUFFIX.
  
& long_fingers
 
  Power: long_fingers
  
  This power permits the player to use commands such as look, whisper, 
  and get on items not in his immediate prescence.
 
  See Also: @power, @list powers
 
& look_obey_terse

  Config parameter: look_obey_terse <yes/no>
  Default: Yes

  Indicates whether or not the 'look' command obeys the TERSE flag
  when deciding how much information to display.  If set to yes, the
  terse_shows_contents, terse_shows_exits, and
  terse_shows_move_messages config options control the amount of
  information displayed for TERSE players.

  See also: terse_shows_contents, terse_shows_exits,
            terse_shows_move_messages.
  
& lrsrange
 
  xcodevalue: lrsrange <char>
  XTYPE: MECH
  
  This xcode value stores the maximum range for LRS scans for the RS 
  Unit.
  
  See Also: scanrange, tacrange, @viewxcode
 
& machine_command_cost

  Config parameter: machine_command_cost <number>
  Default: 64

  Sets the cost for running a command from a machine, as opposed to
  running it interactively.  Each command run has a one in <number>
  chance of being charged one coin for machine overhead.
 
& mail_database

  Config parameter: mail_database <path>
  Default: mail.db

  Sets the file that @mail information is to be stored in. The
  database is only loaded or saved if have_mailer is set to yes.

  See also: have_mailer.
 
& mail_expiration

  Config parameter: mail_expiration <number of days>
  Default: 14

  Sets the number of days that a @mail message should last before it
  is automatically deleted by the system. If this parameter is set
  to a negative number, this feature will be disabled.
 
& mailcurf
 
  Attribute: mailcurf
  
  This attribute lists the current @mail folder. The attribute is 
  visible to wizards only.
  
  See Also: @mail
   
& makemechs
 
  Debug command: makemechs <faction> <tons> [<types> [<opt ton> [<variation>]]]
  
  This command returns a formatted list of mech references.
  
  Note: This command does NOT create mechs
 
  The command creates a mechsub for the 3025 era for <faction>, 
  weighing <totaltons>. Arguments for <types>, <opttonnage> and 
  <maxvariation> are optional.
 
  Arguments:
  * <faction> must be the short name of a faction.
  * <totaltons> must be a number not less than 20 and not greater than 
               4000.
  * <types> selects the types of units included in the mechsub:
    * If <types> = 1 then the function returns only mechs
    * If <types> = 2 then the function returns only aeros
    * If <types> = 3 then the function returns a mix of both mechs and aeros 
  * <opttonnage> is the optimum tonnage for units in the mechsub.
  * <maxvariation> is the maximum variation past <opttonnage>.
  
  Error Messages:
  * If the number of arguments is < 2 the command returns 
    "Insufficient arguments!"
  * If the number of arguments is > 5 the function returns "Too many 
    arguments!"
  * If <Faction> is not a valid faction the function returns "Invalid 
    faction name!"
  * if <type> is a null string the function returns "Invalid type 
    bitvector!"
  * if <type> is not a valid <type> the function returns "#-1 NO 
    UNITS WITH FLAG <type> FOUND"
  * If <tonnage> is > 4000 the function returns "Max of 4000 tons of 
    mecha at once! Sowwy!"
  * if <opttonnage> is < 20 the function returns "Invalid optTonnage!"
  * if <maxvariation> is < 5 the function returns "Invalid 
    MaxDifference!"
  
  
  Example:
  Given that Draconis Combine is a valid faction with a short name of 
  DC

> makemechs dc 1000
------------------------------------------------------------------------------
          Mechs/Aeros/Whatever made for Draconis Combine (1000 tons)          
------------------------------------------------------------------------------
Tons Ref        Name                 Chance Count                             
  70 ARC-2R     Archer                 1.39 1                                 
  65 CPLT-C1    Catapult               0.22 1                                 
  65 CRD-3K     Crusader               1.39 1                                 
  60 DRG-1C     Dragon                 0.83 1                                 
  55 DV-6M      Dervish                0.83 1                                 
  50 HBK-4G     Hunchback              1.39 2                                 
  30 JVN-10F    Javelin                1.39 2                                 
  30 JVN-10N    Javelin                1.67 1                                 
  20 LCT-1S     Locust                 0.56 1                                  
  20 LCT-1V     Locust                 1.67 1                                 
  60 OTL-4F     Ostsol                 0.44 1                                 
  45 PXH-1      Phoenix Hawk           1.67 2                                 
  50 TBT-7K     Trebuchet              0.83 1                                 
  30 UM-R60     Urbanmech              1.39 1                                 
  40 WTH-1      Whitworth              0.83 1                                 
  50 CSR-V20    Corsair                0.22 1                                 
  65 LCF-R15-2  Lucifer                0.56 1                                 
  30 SPR-K5     Sparrowhawk            0.83 2                                 
------------------------------------------------------------------------------
Avg weight: 45.00 Total tons: 990                                             
------------------------------------------------------------------------------
 
  See Also: btmakemechs()
  
& map
 
  Power: map
  
  This gives the user the ability to modify the map
  
  See Also: @power, @list powers
  
& mapheight
 
  xcodevalue: mapheight <short_ro>
  XTYPE: MAP
  
  This xcode value stores the height of the map - ie the number of 
  hexes on the y axis.
  
  See Also: mapwidth, @viewxcode
  
& mapindex
 
  xcodevalue: mapindex <DBref>
  XTYPE: MECH
  
  This xcode value stores the DBref of the map the RS Unit is 
  currently linked to.
  
  NOTE - if the unit is not 'on' any map the value stores -1
  
  See Also: @viewxcode
  
& maplight
 
  xcodevalue: maplight <short_ro>
  XTYPE: MAP
  
  This xcode value stores a number indicating the amount of light on 
  the map.
  
  Values:
  * 0 = Night
  * 1 = Dawn/Dusk
  * 2 = Day
  
  See Also: cloudbase, gravity, winddir, windspeed, temperature, 
  @viewxcode
  
& mapname
 
  xcodevalue: mapname <string>
  XTYPE: MAP
  
  This xcode value stores the name of the map linked to the mapobject.
  
  See Also: @viewxcode
  
& mapvis
 
  Attribute: mapvis 
  
  This attribute contains a string which the details 
  of the weather on the map.
  
  String structure:
  <visibility> <light> <wind dir> <wind speed> <cloudbase> <message>
  
  Arguments:
  light - 0 = Night, 1 = Dawn/Dusk, 2 = Day
  message - the text sent to players on the map to indicate that the 
            conditions have changed.
  
& mapvis
 
  xcodevalue: mapvis <char>
  XTYPE: MAP
  
  This xcode value stores the visibility on the map (in hexes).
  
  See Also: @viewxcode
  
& mapwidth
 
  xcodevalue: mapwidth <short_ro>
  XTYPE: MAP
  
  This xcode value stores the width of the map - ie the number of 
  hexes on the x axis.
  
  See Also: mapheight, @viewxcode
 
& master_room

  Config parameter: master_room <roomnum>
  Default: none

  Specifies the room that is searched for exits if a command does not
  match an exit in the current room, and for $-command if a command
  does not match any $-commands that are available to the player in
  his current location.
 
& match_own_commands

  Config parameter: match_own_commands <yes/no>
  Default: NO

  Specifies whether or not objects search themselves for $-commands
  when a command does not match an exit or an internal command.  In
  order for players to search themselves for commands, both
  match_own_commands and player_match_own_commands must be set to
  yes.

  See also: player_match_own_commands.
 
& max_players

  Config parameter: max_players <num>
  Default: -1 (unlimited)

  Sets the maximum number of players that may be connected at any one
  time.

  Note that wizards are allowed to login even if they would
  exceed the limit, and that this limit does not override any limits
  imposed by the system running the MUX (such as the maximum number
  of net connections a process may have).

  Players connecting when there are max_players players connected
  receive the contents of the file named by the full_file directive,
  and the full_motd_message (also settable via @motd/full), and are
  disconnected.

  See also: @motd, full_file, full_motd_message.
  
& maxjumpspeed
 
  xcodevalue: maxjumpspeed <float>
  XTYPE: MECH
  
  This xcode value stores the maximum speed a unit will achieve while 
  jumping.
  
  NOTE - the speed is expressed in kph.
  
  See Also: speed, maxspeed, @viewxcode
  
& maxspeed
 
  xcodevalue: maxspeed <float>
  XTYPE: MECH
  
  This xcode value stores the units current maxmimum speed. The value 
  returned is calculated dynamically taking into account any damage 
  the unit may have.
  
  See Also: speed, maxjumpspeed, @viewxcode
  
& maxvis
 
  xcodevalue: maxvis <short>
  XTYPE: MAP
  
  This xcode value stores a limiter on the maximum visible range. 
  The only sensor that may exceed this range is radar.
  
  See Also: @viewxcode
  
& mech
 
  Power: mech
  
  This gives the player access to the mech command set
  
  See Also: @power, @list powers
  
& mechdamage
 
  xcodevalue: mechdamage <>
  XTYPE: MECH
  
  This xcode value stores a list detailing damage to the RS Unit.
  
  The list is formated: 
  A:LOC/num[,LOC/num[,LOC(R),num]],I:LOC/num,C:LOC/num,R:LOC/num(num),G:LOC/num(num)

  NOTE - critical slots in this list are counted from ZERO, unlike 
  the critstatus command which counts from 1. Therefore the first 
  critslot is 0, the second is 1, and so on.
 
  Note - Special items such as searchlights are not displayed by this 
  list.

  * A: refers to armor damage. Therefore A:2/20 indicates that 
    location 2 has suffered 20 points of armor damage
 
  * A(R): refers to armor damage to the rear of the section. Therefore 
    A(R):2/1 indicates that location 2 has suffered 1 point of damage 
    to it's rear armor.
    
  * I: refers to internal damage. Therefore I:2/5 indicates that 
    location 2 has suffered 5 points of internal damage.
 
  * C: refers to critical damage. Therefore C:2/1 indicates that the 
    second critcal has been destroyed in location 2
 
  * R: refers to ammununition. Therefore R:4/9(5) indicates that the 
    ammunition biN in the 10th critslot of location 4 has has expended 
    5 'firings' worth of ammo
  
  * G: refers to temporary damage. Therefore G:1/4(6) indicates that 
    the object starting at the fifth critical in location 1 has a 
    failure. The failure being 6 it is an ammojam. 
 
 
  Locations:
 
  MECHS
  * 0 = Left Arm
  * 1 = Right Arm
  * 2 = Left Torso
  * 3 = Right Torso
  * 4 = Center Torso
  * 5 = Left Leg
  * 6 = Right Leg
  * 7 = Head
  * 8 = Left Arm (Rear)
  * 9 = Right Arm (Rear)
  * 10 = Left Torso (Rear)
  * 11 = Right Torso (Rear)
  * 12 = Center Torso (Rear)
  * 13 = Left Leg (Rear)
  * 14 = Right Leg (Rear)
  * 15 = Head (Rear) 
 
  VEHICLES
  * 0 = Left Side
  * 1 = Right Side
  * 2 = Front
  * 3 = Aft
  * 4 = Turret
  * 5 = Rotor 
 
  TEMP DAMAGE FLAGS
  * 0 = none
  * 1 = weapon jammed
  * 2 = shorted
  * 3 = dud
  * 4 = empty
  * 5 = destroyed
  * 6 = ammo jammed
  * 7 = ammo crit jammed 
 
 
  Example:
  Given that #1234 unit with no damage other than to the Right 
  Arm and that displays the following in result to the critstatus 
  command

------------------------------------------------------------------------------
                             Right Arm Criticals                             
------------------------------------------------------------------------------
 1 Shoulder                             7 PPC (Destroyed)                     
 2 Upper Actuator                       8 MediumLaser (Destroyed)             
 3 Lower Actuator (Destroyed)           9 Empty                               
 4 Hand Actuator                       10 Empty                               
 5 PPC (Destroyed)                     11 Empty                               
 6 PPC (Broken)                        12 Empty                               
---------------------------------------------------------------------------
 
  >think btgetxcodevalue(here,mechdamage)
  A:1/24,I:1/2,C:1/2,C:1/4,C:1/6,C:1/7
 
  An excerpt from the @viewxcode command:
 
  mechdamage  A:1/24,I:1/2,C:1/2,C:1/4,C
 
 
& mechmovetype
 
  xcodevalue: mechmovetype <>
  XTYPE: MECH
  
  This xcode value stores the movment type of the RS Unit.
  
  TYPES:
  * Biped
  * Wheel
  * VTOL
  * Hull
  * Foil
  * Sub
  * Hover
  * Quad
  * Track
  * Fly
  * None
  
  See Also: @viewxcode
 
& mechname

  Attribute: mechname
 
  This attribute contains the value returned as the name of an RS
  Unit.

  Note - It is an accepted convention that the first two characters of 
  the mechname be the faction ID.     
     
  Example:
  Given that #1234 is an EXT-4D with the attribute
  'mechaname:OO Exterminator'
 
  From another RS Unit
  >contacts
  PS*[se]B OO Extermina x:  4 y: 2 z: 0 r: 4.0 b:120 s:  0.0 h:  0  S:

  From within #1234
  >status i
  Mech Name: OO Exterminator      ID:[QN]   Mech Reference: EXT-4D
  <etc>

  See Also: contacts, report, status 
& mechname
 
  xcodevalue: mechname <string>
  XTYPE: MECH
  
  This xcode value stores the templated name for the RS Unit.
  
  See Also: @viewxcode
  
& mechprefid
 
  Attribute: mechprefid <ID>
  
  This attribute, when set on a RS Unit, will attempt to assign the 
  preferred ID to the RS Unit.
  
  This is useful for objects which are faction/team specific such as 
  crawlers or radio towers.
  
& mechref
 
  xcodevalue: mechref <>
  XTYPE: MECH
  
  This xcode value stores the Unit-Reference for the RS Unit.
  
  Example:
  >@viewxcode
  mechref                       EXT-4D 
  
  See Also: @viewxcode
  
& mechrep
 
  Power: mechrep
  
  This gives the player access to the mechrep command set
  
  See Also: @power, @list powers
  
& mechtype
 
  Attribute: mechtype <model>
  
  This attribute stores the RS Unit's model or reference as per the 
  template. 
  
  Example
  
  >ex #1234/mechtype
  Mechtype: EXT-4D
  
  >ex #2345/mechtype
  Mechtype: AGS-2D
  
& mechtype
 
  xcodevalue: mechtype <>
  XTYPE: MECH
  
  This xcode value stores the type of the RS Unit.
  
  Values:
  
  * Mech
  * Vehicle
  * Mechwarrior
  * AeroFighter
  * Spheroid_Dropship
  * Aerodyne_Dropship
  * VTOL
  * Naval
  * Battlesuit
  
  See Also: @viewxcode
  
& memstats
 
  Debug Command: memstats [long]
  
  This command shows memory statistics for the XCODE objects in the 
  DB.
  
  Arguments
  none - displays the short form
  * long - displays a more detailed report
  
  Example:
  >memstats long
  #13: MAP (362 bytes)
  #62: MAP (250301 bytes)
  #217: MAP (378 bytes)
  #809: MAP (367 bytes)
  #833: MAP (378 bytes)
  #961: MAP (367 bytes)
  #974: MAP (367 bytes)
    24 MECH                : 73344 bytes total, 3056 each
     9 MECHREP             : 72 bytes total, 8 each
     7 MAP                 : 252520 bytes total, 36074 avg, 362/250301 
      small/large
     1 AUTOPILOT           : 272 bytes total, 272 each
  Grand total: 326208 bytes.
 
& money_name_plural

  Config parameter: money_name_plural <string>
  Default: pennies

  Specifies the string to use to describe the coin of the realm when
  they are being referred to plurally (such as: 'You have <number>
  pennies.', where <number> is not 1).

  See also: money_name_singular.
 
& money_name_singular

  Config parameter: money_name_singular <string>
  Default: penny

  Specifies the string to use to describe the coin of the realm when
  they are being referred to singularly (such as: 'You found a
  penny!').

  See also: money_name_plural.
  
& monitor
 
  Power: monitor
  
  This power permits the player to set or clear the MONITOR flag
  
  See Also: @power, @list powers, monitor
 
& motd_file

  Config parameter: motd_file <pathname>
  Default: text/motd.txt

  Specifies the name of the file to be shown to players immediately
  after they connect to their characters.

  See also: @readcache, newuser_file, motd_message.
 
& motd_message

  Config parameter: motd_message <message>
  Default: none

  Sets the MOTD message that is displayed to all characters when they
  log in.

  This message is displayed in addition to the contents of the
  motd.txt file.  It can be changed with the @motd command and
  examined by the @listmotd command.

  See also: @listmotd, @motd, motd_file.
 
& mud_name

  Config parameter: mud_name <string>
  Default: TinyMUX
 
& news_file

  Config parameter: news_file <path>
  Default: text/news.txt

  Specifies the name of the file containing the text used by the news
  command. You may use ANSI color sequences in news.

  See also: news, news_index
 
& news_index

  Config parameter: news_index <path>
  Default: text/news.indx

  Specifies the name of the index file used by the news command.  This
  file must be generated by mkindex from the news file.  The
  contents of this file are read in to a hash table when the game is
  started and whenever a @readcache command is executed.

  See also: news, @readcache, news_file
 
& newuser_file

  Config parameter: newuser_file <filename>.
  Default: text/newuser.txt

  Specifies the file to be shown to new players immediately after they
  create their characters, in place of the MOTD file.  This file
  should contain information about the basic commands and how to get
  help.

  See also: @readcache, motd_file.
  
& no_destroy
 
  Power: no_destroy
  
  This power prevents the player being destroyed or toaded.
  
  See Also: @power, @list powers, @toad
 
& notify_recursion_limit

  Config parameter: notify_recursion_limit <num>
  Default: 20

  Sets the maximum number of times that the notify() routine may be
  called recursively.  A recursive call is made whenever a message
  heard by an object is to be forwarded to its contents.
 
& number_guests

  Config parameter: number_guests <num>
  Default: 30

  How many guests should we allow at any one time?

  See also: guest_char_num, guest_nuker, guest_prefix.
  
& numseen
 
  xcodevalue: numseen <short>
  XTYPE: MECH
  
  This xcode value stores the number of enemy units currently 'seen' 
  by the RS Unit.
  
  See Also: @viewxcode
 
& open_cost

  Config parameter: open_cost <amount>
  Default: 1

  Indicates the cost of using the @open command to open a new exit.
  If a destination for the new exit is specified and the link is
  successful, then the link_cost is also charged.

  See also: @open, link_cost.
 
& output_database

  Config parameter: output_database <pathname>
  Default: none

  Specifies the file to which the database is to be written when
  writing checkpoint dumps or writing the final dump after receiving
  a @shutdown command.

  See also: @dump, @shutdown, checkpoint_database, input_database.
 
& output_limit

  Config parameter: output_limit <amount>
  Default: 16384

  Specifies how many bytes should be output before the output is
  flushed, and characters are lost.
  
& overheat
 
  xcodevalue: overheat <float>
  XTYPE: MECH
  
  This xcode value stores the units overheat. This is heat over a 
  certain level, at which point BTH Modifications apply.
  
  See Also: @viewxcode
 
& page_cost

  Config parameter: page_cost <amount>
  Default: 0

  Specifies the cost of using the page command.

  See also: page.
 
& paranoid_allocate

  Config parameter: paranoid_allocate <yes/no>
  Default: no

  Controls whether or not the game performs a consistency check on the
  entire set of xbuf buffers each time one is allocated or freed.
  This check involves making sure that nobody has written to the
  memory immediately before and after each buffer.  Normally, only
  the buffer being allocated or freed is checked.
 
& parent_recursion_limit

  Config parameter: parent_recursion_limit <num>
  Default: 10

  This directive specifies how far back to check parents for commands
  and attributes.
  
& pass_locks
 
  Power: pass_locks
  
  This power permits the player to pass any lock.
  
  See Also: @power, @list powers, @lock
& paycheck

  Config parameter: paycheck <amount>
  Default: 0

  Specifies the default amount of money that players receive each day
  they connect.  This parameter may be overridden by setting the
  ALLOWANCE attribute on the player to a different value.

  See also: @allowance, earn_limit, starting_money.
 
& pemit_any_object

  Config parameter: pemit_any_object <yes/no>
  Default: no

  Indicates whether or not players may @pemit to faraway objects they
  do not control.  It does not affect @pemits to faraway players,
  the pemit_far_players directive is used for that purpose.

  See also: pemit_far_players.
 
& pemit_far_players

  Config parameter: pemit_far_players <yes/no>
  Default: no

  Controls whether or not players may use the @pemit command to send
  messages to other connected players that are not in the same room.
  The rules and costs for this form of @pemit are the same as for
  page.

  See also: pemit_any_object.
 
& permit_site

  Config parameter: permit_site <addr> <mask>

  Indicates that connections are to be accepted and registration is
  not to be enforced from sites whose address matches the specified
  address when ANDed with the mask.  This directive is typically
  used to enable connections from a few selected hosts or subnets
  that would otherwise be disallowed by a forbid_site directive.
  The default is all sites permitted, none forbidden.

  See also: badsite_file, forbid_site, register_site, SITE LISTS.
  
& perception
 
  xcodevalue: perception <char>
  XTYPE: MECH
  
  This xcode value stores the preception skill of the pilot of the RS 
  Unit.
  
  See Also: perception, @viewxcode
 
& pilot
 
  Attribute: pilot <dbref>
  
  This attribute contains the dbref of the player permitted to pilot 
  the RS Unit
  
& pilotdam
 
  xcodevalue: pilotdam <char>
  XTYPE: MECH
  
  This xcode value stores the bruise/lethal damage that the pilot of 
  the RS Unit is suffering.
  
  NOTE - <char> <=5 is bruise damage, >5 is lethal damage.
  
  See Also: @viewxcode
  
& pilotnum
 
  xcodevalue: pilotnum <DBref>
  XTYPE: MECH
  
  This xcode value stores the dbref of the pilot of the RS Unit.
  
  See Also: @viewxcode
 
& player_flags

  Config parameter: player_flags <flags>
  Default: none

  Modifies the set of flags that a player receives when it is created
  via the @pcreate command or via the connection screen.  Flags
  prefixed by a ! remove the indicated flag from the set.

  See also: @list, exit_flags, robot_flags, room_flags, thing_flags.
 
& player_listen

  Config parameter: player_listen
  Default: no

  Indicates whether the Listen, Aahear, Ahear, and Amhear attributes
  on player objects are to be obeyed.
 
& player_match_own_commands

  Config parameter: player_match_own_commands <yes/no>.
  Default: no

  Specifies whether or not players should check themselves for
  $-commands. This parameter is only checked if the
  match_own_commands parameter is set to yes.

  See also: match_own_commands.
 
& player_queue_limit

  Config parameter: player_queue_limit
  Default: 100

  Sets the maximum number of commands that non-wizard players may have
  on the queue at one time.  An attempt to queue more commands than
  allowed will halt the object performing the command.
 
& player_quota

  Config parameter: player_quota <amount>
  Default: 1

  Sets how much quota it costs to create a robot player (and also how
  much the remaining quota is increased when a robot is @destroyed.

  See also: @quota, exit_quota, room_quota, thing_quota, QUOTAS.
 
& player_starting_home

  Config parameter: player_starting_home
  Default: <player_starting_room>

  Specifies the room to which the home of new players is set.  If this
  parameter has not been set, then the value of the
  player_starting_room parameter is used instead.

  See also: default_home, player_starting_room, @pcreate,
            player_flags.
 
& player_starting_room

  Config parameter: player_starting_room
  Default: 0

  Specifies the room that new players start out in.  If the
  player_starting_home parameter has not been set, then
  player_starting_room is used for both.

  See also: player_starting_home, @pcreate, player_flags.
 
& plushelp_file

  Config parameter: plushelp_file <path>
  Default: text/plushelp.txt

  Specifies the name of the file containing the text used by the +help
  command.

  See also: plushelp_index
 
& plushelp_index

  Config parameter: plushelp_index <path>
  Default: text/plushelp.indx

  Specifies the name of the index file used by the +help command.
  This file must be generated by mkindx from the plushelp file.  The
  contents of this file are read in to a hash table when the game is
  started and whenever a @readcache command is executed.

  See also: @readcache, plushelp_file
  
& poll
 
  Power: poll
  
  This power permits the player to set the Doing poll.
  
  See Also: @power, @list powers, poll()
 
& port

  Config parameter: port <port>
  Default: 6250

  Specifies the IP port on which the game listens for new connections.
 
& postdump_message

  Config parameter: postdump_message <message>
  Default: none

  Sets the message that is sent to everyone after a database dump
  whether automatically or via the @dump command.

  See also: @dump, dump_message.
 .
& prog
 
  Power: prog
  
  This power permits the player to use the @prog command on any 
  player.
  
  See Also: @power, @list powers, @prog
 
& public_channel

  Config parameter: public_channel <name>
  Default: Public

  Specifies the name of the channel that new players join when they
  are created. You must have previously created the channel. To
  disable this feature, simply set this parameter to nothing.

  See also: guests_channel.
 
& public_flags

  Config parameter: public_flags <yes/no>
  Default: yes

  If enabled, indicates that players may get the flags of any object
  with the flags() function call.  Otherwise, they may only get the
  flags for objects that are examinable by them.

  See also: flags().
 
& queue_active_chunk

  Config parameter: queue_active_chunk <num>
  Default: 10

  Specifies the number of commands to be run from the player queue
  when the check for network traffic indicates that there is data
  needing to be read from or written to the network.

  See also: queue_idle_chunk.
 
& queue_idle_chunk

  Config parameter: queue_idle_chunk <num>
  Default: 10

  Specifies the number of commands to be run from the player queue
  when the check for network traffic indicates that there is no data
  needing to be read from or written to the network.

  See also: queue_active_chunk.
 
& quiet_look

  Config parameter: quiet_look <yes/no>
  Default: yes

  Indicates whether or not players are shown the attributes set on an
  object when they look at it.  Not recommended.
 
& quiet_whisper

  Config parameter: quiet_whisper <yes/no>
  Default: yes

  Indicates whether or not whispers are completely invisible except to
  the whispered-to player, or if a '<whisperer> whispers something
  to <recipient>.' message is displayed to everyone else in the same
  room.

  See also: whisper.
 
& quit_file

  Config parameter: quit_file <filename>
  Default: text/quit.txt

  Specifies the name of the file that is displayed to users after they
  QUIT but before the network connection is closed.

  See also: QUIT, @readcache.
  
& quota
 
  Power: quota
  
  This power permits a player to see and change the quota for anyone.
  
  See Also: @power, @list powers
 
& quotas

  Config parameter: quotas <yes/no>
  Default: no

  Indicates whether or not building quotas are enforced and
  maintained.

  Quotas are stored as a relative number, ie. number of objects that
  the player may create, not the total number that the player may
  create.

  If quotas are turned off and turned back on later, any building or
  @destroying that occurs in the interim does not affect the quotas.

  See also: @allquota, @create, @destroy, @dig, @open, @quota, QUOTAS.
 
& read_remote_desc

  Config parameter: read_remote_desc <yes/no>
  Default: no

  Indicates whether or not the descriptions of faraway objects are
  available to players that don't control them via the examine
  command and get() function.

  See also: examine, get().
 
& read_remote_name

  Config parameter: read_remote_name <yes/no>
  Default: no

  Indicates whether or not the names of faraway objects are available
  to players that don't control them via the examine command and get()
  function.

  See also: examine, get().
 
& register_create_file

  Config parameter: register_create_file <filename>
  Default: text/create_reg.txt

  Specifies the name of the file that is shown to players who attempt
  to create a new character when registration is in force from their
  site.

  See also: @list_file, @readcache, register_site.
 
& register_site

  Config parameter: register_site <addr> <mask>

  Indicates that registration is to be enforced for sites whose
  address matches the specified address when ANDed with the mask.

  See also: forbid_site, permit_site, REGISTRATION, SITE LISTS.
  
& reload
 
  Mechrep Command: reload <name> <loc> <critslot> [ammoflag]
  
  This command reloads the ammobin in <loc> at <critslot>
  
  Arguments:
  * name - the name of the weapon drawing on that ammobin
  * loc - the location of the ammobin (eg CT, LA)
  * critslot - the critical slot where the ammobin is
  
  * ammoflag - See reload2
  
  Example:
  
  >reload IS.LRM-10 ct 11 l
  Weapon loaded!
  
  Continued in reload2
  
& reload2
 
  Ammo flags:
  
    * + - half-ton mode
    * l - lbx ammo
    * a - artemis ammo
    * c - cluster ammo
    * m - mine ammo
    * s - smoke ammo
    * w - swarm ammo
    * 1 - swarm1 ammo
    * i - inferno ammo
    * n - narc ammo
    * x - explosive iNarc ammo
    * y - haywire iNarc ammo
    * e - ecm iNarc ammo
    * t - stinger ammo
    * r - AC AP ammo
    * f - AC flechette ammo
    * d - AC incendiary ammo
    * p - AC precision ammo
    * u - AC caseless ammo
  
  See Also: settarget, restock
 
 
& removestuff
 
  RS Command: removestuff <name> <num>
  
  This command permits you to remove <num> of <name> from the manifest 
  of an RS Unit or the stores of a bay.
  
  Arguments:
  <name> This argument can be either a specifie name or alternatively 
         the command accepts the use of wildcards.
  
  Errors:
  * if arguments < 2 the command returns "Invalid number of 
    arguments!"
  * if <num> is <=0 the command returns "Invalid amount!"
  * if <name> is not a valid partname the command returns "Nothing 
    matches <name>!"
  * if the location is not an RS Unit or hangar/bay the command 
    returns "You ain't in your 'mech!" or "You ain't in hangar!"
  
  Example:
  >removestuff se* 10
  You remove 10 SearchLights.
  You remove 10 Seedss.
  You remove 10 Sensorss.
  
  See Also: addstuff, clearstuff, stores, manifest
  
& repair
 
  Mechrep Command: repair <loc> <type> <[val | subsect]>
  
  Arguments:
  loc - Location on which to perform the repair.
  type -  the type of repair to carry out. Valid arguments are:
       * A - armor
       * C - crit
       * I - internal
       * R - rear armor
       * S - section reattach
   val - where the repair is to armor (ie type = A, I, or R) this 
         argument details the amount of armor to repair. 
   subsect - Where the repair is to a crit (ie type = C) this argument 
             details the critslot to repair
  
  NOTE - an invalid argument for the <val> (eg a non-numeric arg) will 
  result in 0 armor on that location.
  
  Continued in repair2
  
 
& repair2
  
  NOTE - when specifying the amount of armor, you should specify the 
  total amount for that location, not the amount required to bring the 
  armor up to that total. Therefore if a unit normall has 20 points of 
  armor at that location, and currently has 10 - you specify a <val> 
  of 20.
  
  Example:
  Given that #1234 is an EXT-4D which requiress repair to the front 
  armor on the LL and replacement of a MediumLaser in the RA at 
  critslot 4:
  
  >settarget #1234
  Mech to repair changed to #1234
  
  >repair LL A 19
  Armor repaired!
  
  >repair RA C 4
  Critical location repaired!
  
  See Also: settarget
 
 
& resetcrits
 
  Mecrep Command: resetcrits
  
  This command resets the criticals of the targetted RS Unit to the 
  standard for that unit type.
  
  In effect this command removes any installed components except 
  engines and gyros on mech.
  
  See Also: settarget 
& restock
 
  Mechrep Command: restock <loc> <critslot>
  
  This command reloads the ammobin in <loc> at <critslot>.
  Unlike the 'RELOAD' command, it does not alter the type
  of the ammo bin. Thus, it is useful for tech systems
  that simply want to reload an ammo bin without changing
  the template.
  
  Arguments:
  * name - the name of the weapon drawing on that ammobin
  * loc - the location of the ammobin (eg CT, LA)
  
  Example:
  
  >reload LA 10
  Weapon restocked!
  
  See Also: reload
 
 
& restore
 
  Mechrep Command: restore
  
  This command returns the targtetted RS Unit to it's templated 
  condition.
 
  See Also: settarget
& retry_limit

  Config paramater: retry_limit <count>
  Default: 3

  Specifies the number of times that a user is allowed to try to
  connect to an existing player before being disconnected.

  See also: conn_timeout.
 
& robot_cost

  Config paramater: robot_cost <amount>
  Default: 1000

  Specifies the cost of using the @robot command to create a robot.

  See also: @robot, ROBOT.
 
& robot_flags

  Config parameter: robot_flags <flags>
  Default: ROBOT

  Modifies the set of flags that a robot receives when it is created
  via the @robot command.  Flags prefixed by a ! remove the
  indicated flag from the set.

  See also: @list, exit_flags, player_flags, room_flags, thing_flags.
 
& robot_speech

  Config parameter: robot_speech: <yes/no>
  Default: yes

  Indicates whether or not robot characters are allowed to use the
  speech, pose, and emit commands in areas not controlled by their
  owner.

  See also: @robot, ROBOT.
 
& room_flags

  Config parameter: room_flags <flags>
  Default: none

  Modifies the set of flags that a room receives when it is @dug.
  Flags prefixed by a ! remove the indicated flag from the set.

  See also: @list, exit_flags, player_flags, robot_flags, thing_flags.
 
& room_quota

  Config parameter: room_quota <amount>
  Default: 1

  Sets how much quota it costs to dig a room (and also how much the
  remaining quota is increased when a room is @destroyed.

  See also: @quota, exit_quota, player_quota, thing_quota, QUOTAS.
 
& sacrifice_adjust

  Config parameter: sacrifice_adjust <amount>
  Default -1

  This parameter is part of the formula that is used to determine an
  object's value given the amount spent on its creation.  The
  formula is:

     value = (cost / sacrifice_factor) + sacrifice_adjust.

  The inverse formula is used to determine how much the owner receives
  when @destroying an object.

  See also: @create, @destroy, SACRIFICING, sacrifice_factor.
 
& sacrifice_factor

  Config parameter: sacrifice_factor <amount>
  Default 5

  This parameter is part of the formula that is used to determine an
  object's value given the amount spent on its creation.  The
  formula is:

     value = (cost / sacrifice_factor) + sacrifice_adjust.

  The inverse formula is used to determine how much the owner receives
  when   @destroying an object.

  See also: @create, @destroy, SACRIFICING, sacrifice_adjust.
  
& savemap
 
  Map Command: savemap <name>
  
  This command saves the map, in the state it is in at the time of the 
  commands being run, to <name>.
  
  Error Messages:
  * if arguments < 1 the command returns "Invalid number of arguments"
  * if <name> cannot be opened for write access the command returns 
  "Unable to open the map file!"
   
& savenew
 
  Mechrep Command: savenew <templatename>
  
  This command saves the current state of the targetted RS Unit as a 
  new template.
  
  See Also: settarget
  
& scanrange
 
  xcodevalue: scanrange <char>
  XTYPE: MECH
  
  This xcode value stores the maximum range that the 'scan' range will 
  work.
  
  See Also: scan, @viewxcode
  
& search
 
  Power: search
  
  This power permits the player to use the @search command on any 
  player.
  
  See Also: @power, @list powers, @search
 
& search_cost

  Config parameter: search_cost <amount>
  Default: 100

  Specifies how much commands that scan the entire database (such as
  @find, @search, and stats with a playername) cost.

  See also: stats, @find, @search.
  
& see_all
 
  Power: see_all
  
  This power permits the player to examine and see attributes the same 
  way someone with the wizard flag can.
  
  See Also: @power, @list powers
  
& see_hidden
 
  Power: see_hidden
  
  This power permits the player to see hidden players via the WHO 
  command.
  
  See Also: @power, @list powers
 
& see_owned_dark

  Config parameters: see_owned_dark <yes/no>
  Default: yes

  Specifies whether or not players see their own DARK objects when
  they look at a room.  It does not affect the inventory or examine
  commands, both of which show all objects.
  
& see_queue
 
  Power: see_queue
  
  This power permits the player to use @ps/all or to use the @ps 
  command on any player.
  
  See Also: @power, @list powers, @ps
  
& sensors
 
  xcodevalue: sensors <>
  XTYPE: MECH
  
  This xcode value stores the sensors currently being used by the RS 
  Unit.
  
  See Also: sensor, @viewxcode 
& setarmor
 
  Mechrep Command: setarmor <loc> <aval> <ival> <rval>
 
  This command sets the armor values for <loc>
  
  Arguments:
  * <loc> - the location on the RS Unit (eg RT)
  * <aval> - the amount of front armor
  * <ival> - the amount if internal armore
  * <rval> - the amount of rear armor (if applicable)
  
  Note - on locations where no rear armor exists, omit the argument.
  
  Example:
  
  >setarmor ct 21 21 8
  Front armor set to    : 21
  Internal armor set to : 21
  Rear armor set to     : 8
  
  >setarmor la 18 10
  Front armor set to    : 18
  Internal armor set to : 10
  
  See Also: settarget
  
& setcargospace
 
  Mechrep Command: setcargospace <cargo> <maxton>
  
  This command sets the total amount of cargo that the RS Unit can 
  carry to <cargo>/2 and the maximum tonnage of any single item to 
  <maxton>
  
  The command sets the 'cargospace' and 'carmaxton' xcode values on 
  the unit.
  
  Example
  Given that you wish to set the RS Unit to have a cargo capacity of 
  500 tons and a maximum tonnage for individual items of 75 tons:
  
  >setcargospace 1000 75
  500.00 cargospace and 75 tons of maxton space set.
  
  See Also: settarget, @viewxcode
  
& setcond
 
  Map Command: setcond <grav> <temp> [<vac> [<underground>]]
  
  This command sets the conditions which apply on the map. To set the 
  conditions for a map you must be within the map object.
  
  Arguments:
  * <grav> - expresses the desired gravity in 1/100ths of a G
  * <temp> - expresses the desired temperature in degrees
  * <vac> - boolean value indicating if the map is in vaccum
  * <underground> - boolean value indicating if the map is 
                    underground.
  
  Error Messages:
  * if number of args < 2 the command returns "(At least 2 options 
    required (gravity and temperature)")
  * if <grav> is invalid the command returns "Invalid gravity (must 
    be interger in range of 0 to 255)
  * if <temp> is invalid the command returns "Invalid temperature 
  (must be integer in ranage of -128 to 127)
  * if invalid vacuum flag the command returns "Invalid vacuumn flag 
  (must be integer, 0 or 1)
  * if invalid underground flag the command returns "Invalid 
  underground flag (must be integer, 0 or 1)
  
& setheatsinks
 
  Mechrep Command: setheatsinks <num>
  
  This command sets the number of heatsinks installed on the RS Unit.
  
  The command sets the 'heatsinks' xcode value on the unit.
  
  See Also: settarget, @viewxcode
  
& setjumpspeed
 
  Mecrep Command: setjumpspeed <num>
  
  This command sets the speed that an RS Unit moves whilst jumping.
  
  The command sets the 'maxjumpspeed' xcode value on the unit.
  
  NOTE - the <num> argument must be expressed in KPH per MP
  
  Example:
  Given that you are setting the jumpspeed on an EXT-4D
  
  >setjumpspeed 6
  Jumpspeed changed to 64.50.
  
  See Also: settarget, @viewxcode
  
& setlrsrange
 
  Mechrep Command: setlrsrange <num>
  
  This command sets the range of the lrs command for the RS Unit.
  
  The command sets the 'lrsrange' xcode value on the unit.
  
  See Also: settarget, @viewxcode
  
& setmapindx
 
  RS Command: setmapindx <num>
  
  This command set the  mapindex xcode value on the RS Unit.
  
  Errors:
  * if arguments < 1 the command returns "Invalid number of argumetns 
    to SETMAPINDX!
  * if <num> is not a valid Map object the command returns "Invalid 
    map index!"
  * if the map is full the command returns "There are too many mechs 
    on that map!"
  
  See Also: mapindex, @viewxcode 
& setmapsize
 
  Map Command: setmapsize <x> <y>
  
  This command sets the dimensions of the map to the specified sizes.
  
  To run this command you must be within the mapobject to which the 
  map you wish to modify is attached.
  
  Error Messages:
  * if args !=2 the command returns "Invalid number of arguments (X/Y 
    expected)"
  * <x> or <y> is invalid the command returns "X,Y out of range!"
  * if attempt to create new map fails the command returns "Memory 
    allocation failed in setmapsize!"
  
& setmaxspeed
 
  Mechrep Command: setmaxspeed <num>
  
  This command sets the run or flank speed for the targetted RS Unit.
  
  The command sets the 'maxspeed' xcode value on the unit
  
  NOTE - the <num> argument must be expressed in KPH per MP
  
  Example:
  Given that you are setting the maxspeed on an EXT-4D
  
  >maxspeed 9
  Maxspeed changed to 96.75.
  
  See Also: settarget, @viewxcode
  
& setmove
 
  Mehrep Command: setmove <type>
  
  This command sets the movement type for the RS Unit.
  
  The command sets the 'mechmovetype' xcode value on the unit.
  
  Arguments:
  * B - biped - mechs and bsuits
  * FL - fly - aero and dropships
  * FO - foil
  * HO - hover
  * HU - hull - naval units
  * Q - quad 
  * S - sub 
  * T - tracked
  * V - vtol
  * W - wheeled
  * N - none
  
  See Also: settarget, @viewxcode
  
& setradiorange
 
  Mechrep Command: setradiorange <num>
  
  This command sets the range for the 'radio' system for the RS Unit.
  
  The command sets the 'radiorange' xcode value for the unit.
  
  See Also: settarget, @viewxcode
  
& setscanrange
 
  Mechrep Command: setscanrange <num>
  
  This command sets the range for the scan command for the RS Unit.
  
  The command sets the 'scanrange' xcode value on the unit.
  
  See Also: settarget, @viewxcode
  
& settacrange
 
  Mechrep Command: settacrange <num>
  
  This command sets the range for the tactical command for the RS 
  Unit.
  
  The command sets the 'tacrange' xccode value on the unit.
  
  See Also: settarget, @viewxcode
  
& settarget
 
  Mechrep command: settarget <#DBref>
  
  This command sets the unit to which all other mechrep commands will 
  apply.
  
  Example:
  Given that you wish to carry out one ore more mechrep commands on 
  dbref #1234
  
  >settarget #1234
  Mech to repair changed to #1234
  
& setteam
 
  RS Command: setteam <num>
  
  This command sets the team an RS Unit belongs to.
  
  Errors:
  * if arguments !=1 the command returns "Invalid number of arguments"
  * if the RS Unit is not on a map the command returns "Mech is not on 
    a map: Can't set team"
  
& settons
 
  Mechrep Command: settons <num>
  
  This command set the tonnage for the targetted RS Unit.
  
  The command sets the 'tons' xcode value for the unit.
  
  See Also: settarget, @viewxcode
  
& settype
 
  Mechrep Command:settype <unit type>
  
  This command set the unit to the specified type.
  
  The command sets the 'mechtype' xcode value for the unit.
  
  Arguments:
  
  * A -  aero
  * B - bsuit
  * D - aerodyne style dropship
  * G - ground
  * M - biped mech
  * N - naval
  * Q - quad mech
  * S - spheroiddropsship 
  * V - vtol
  
  See Also: settarget, @viewxcode
  
& setxy
 
  RS Command: setxy <x> <y> [<z>]
  
  This command permits you to set the location of the RS Unit you are 
  in at the specified coordinates.
  
  Arguments:
  * <x> - the location on the x axis
  * <y> - the location on the y axis
  * <z> - the height at which to place the unit
  
  NOTE - if the <z> argument is omitted then the RS Unit will be 
  placed at the z of the hex specified by <x> <y>
  
  Errors:
  * if arguments < 2 or > 3 the command returns "Invalid number of 
    arguments to SETXY!"
  * if <x> or <y> are outsides the boundaries of the map the command 
    returns "Invalid coordinates!"
  
  See Also: btsetxy()
  
& showtech
 
  Mechrep Command: showtech
  
  This command displays a list of the advanced techologies installed 
  on the targetted RS Unit.
  
  Example:
  Given that the targetted RS Unit is an EXT-4D
  
  >showtech
  --------Advanced Technology--------
  Mech uses Double Heat Sinks
  Inner Sphere style Anti-Missile System
  Brief version (May have something previous hadn't):
  IS_AMS DoubleHS XLEngine_Tech
  
  See Also: settarget
  
& shutdown
 
  Debug command: shutdown <map>
  
  This command will shutdown all RS Units on a map and clear it by 
  setting the mapindex xcodevalue to -1.
  
  Example:
  Given that #62 is a valid map object with RS Units on it.
  
  >shutdown 62
  Shutting down Mech #159 and restting map index to -1....
  Shutting down Mech #1798 and restting map index to -1....
  Shutting down Mech #1800 and restting map index to -1....
  Shutting down Mech #1805 and restting map index to -1....
  Shutting down Mech #36 and restting map index to -1....
  Map Cleared
  
  See Also: @viewxcode
  
& si
 
  xcodevalue: si <char>
  XTYPE: MECH
  
  This xcode value stores the structural integrity for a unit.
  
  NOTE - Structural Integrity applies to space-oriented RS Units and 
  is not in use in this codebase
  
  See Also: si_orig, @viewxcode 
& si_orig
 
  xcodevalue: si_orig <char>
  XTYPE: MECH
    
  This xcode value stores the templated structural integrity for a 
  unit.
  
  NOTE - Structural integrity applies to space-oriented RS Units and 
  is not in use in this codebase
  
  See Also: si, @viewxcode
& signal_action

  Config parameter: signal_action <default|exit>
  Default: default

  Specifies what action to take when a fatal signal is received.  The
  possibilities are:

     default  - Log the error, produce a panic dump, dump a core file,
                and restart the game using the last reliably saved
                database. For a description of the restart process,
                see @restart.
     exit     - Log the error, and exit, hopefully with a core file.
 
& site_chars

  Config parameter: site_chars <number>
  Default: 25.

  Specifies the length of the hostname that is shown in a wizard WHO
  listing. If <number> is 0, then the hostname will be shown in full.
  
& snipe
 
  RS Command: snipe <UnitID> <weapon>
  
  This command lets you fire artillery weapons with movment 
  predicition.
 
& space_compress

  Config parameter: space_compress <yes/no>
  Default: yes

  Specifies whether or not extra spaces are to be removed from user
  input as it is processed.  If enabled, multiple spaces are
  compressed to a single space, and spaces at the ends of strings
  are removed.
  
& speed
 
  xcodevalue: speed <float>
  XTYPE: MECH
  
  This xcode value stores the current speed of a unit.
  
  NOTE - the value stored is NOT the desired speed (as is set via 
  'speed  n') 
  
  See Also: speed, @viewxcode
  
& --enable-sql-support

  Compile option: --enable-sql-support
  Default: disabled
 
  Enables the MUX->SQL port. This functions in the form of starting
  sqlslave processes alongside the main netmux to handle SQL queries
  via @query. This is great if you want to integrate your game and
  website together for things like player rankings. If you enable
  this, you will need libdbi and one or more of the libdbi database
  drivers installed.
 
& stack_limit

  Config parameter: stack_limit <number>
  Default: 50

  The number of items that are allowed on an object's stack. You
  should be sparse with this parameter, as stack items are retained
  until they are removed.
  
& stall
 
  xcodevalue: stall <int>
  XTYPE: MECH
  
  This xcode value stores the number of the repair stall the RS Unit 
  is currently in.
  
  If the unit is not in a stall the value is -
  
  See Also: @viewxcode
 
& starting_money

  Config parameter: starting_money <amount>
  Default: 0

  Sets the amount of money that new players start out with.

  See also: paycheck.
 
& starting_quota

  Config parameter: starting_quota <amount>
  Default: 20

  Sets the building quota that players receive when they are created,
  whether by @pcreate or the connection screen.

  See also: @quota, quotas.
  
& stat_any
 
  Power: stat_any
  
  This power permits the player to use the @stat command on any 
  player.
  
  See Also: @power, @list powers, @stat
  
& status
 
  xcodevalue: status <bv>
  XTYPE: MECH
  
  This xcode value stores status-flags for the RS Unit.
  
  Flags:
  
  * a = For VTOL/Aero units this flag indicates that the unit is 
        landed. It is unused for other unit types.
  * b = Toso is rotated right
  * c = Torso is rotated left
  * d = Unit is started
  * e = Unit is in partial cover. (used internally, mostly. at least 
        one of the people who locked this unit has partial cover on 
        it.)
  * f = Unit is destroyed.
  * g = Unit is jumping.
  * h = Unit is fallen. (skirt/track destroyed for tanks)
  * i = Unit is attempting DFA.
  * j = Unit is performing an action. (set via scode if unit is 
        'doing something'. Prevents turning and speed changes)
  * k = Unit's arms are flipped.
  * l = Unit has AMS and it's activated.
  * m = UNUSED currently.
  * n = pilot is unconcious.
  * o = Unit is being towed.
  * p = Unit has locked a unit ("We mean business")
  * q = Unit has locked a building (<x> <y> b)
  * r = Unit has locked a hex (<x> <y>)
  * s = Unit has locked a hex for ignition (<x> <y> i)
  * t = Unit has locked a hex for clearing (<x> <y> c)
  * u = Unit has MASC enabled.
  * v = Unit is blinded. (la sensors near heat, for instance)
  * w = Unit is COMBAT_SAFE. (can be hit but wont take damage (will, 
        however, be forced to do pilot rolls and such.)
  * x = contacts are reported even if unit is shutdown.
  * y = Unit has just fired.
  * z = Unit has SCHARGE enabled (supercharger).
  * A = Unit has HULLDOWN enabled.
  * B = Units map is under special rules (one of the following:)
    * C = abnormal gravity (not 1G)
    * D = abnormal temperature (enough to adjust heatsinks.) between 
          -30 and +50 degrees celcius is considered normal* 
    * E = Unit is in vacuum.
  * F = UNUSED currently. 
  
  See Also: status2, @viewxcode
  
& status2
 
  xcodevalue: status2 <bv>
  XTYPE: MECH
  
  This xcode value stores status flags for the RS Unit.
  
  Flags:
  
  * a - Unit has ECM enabled.
  * b - Unit has ECCM enabled.
  * c - Unit affected by ECM.
  * d - Unit protected by ECM.
  * e - Unit has ECM countered by ECCM. Only happens when enemy ECCM is in range.
  * f - Unit has SLITE enabled.
  * g - Unit has Stealth Armor enabled.
  * h - Unit has Nullsig system enabled.
  * i - Unit has Angel ECM enabled.
  * j - Unit has Angel ECCM enabled.
  * k - Unit protected by Angel ECM.
  * l - Unit affected by Angel ECM.
  * m - Unit has Personal ECM enabled.
  * n - Unit has Personal ECCM enabled.
  * o - Unit has Auto-Turret enabled to locked target.
  * p - UNUSED currently.
  * q - Unit is Sprinting.
  * r - Unit is Evading.
  * s - Unit is Dodging.
  * t - Unit has its attacks sent to the 'MechAttackEmits' channel.
  * u - UNUSED currently.
  * v - UNUSED currently.
  * w - UNUSED currently.
  * x - UNUSED currently.
  * y - UNUSED currently.
  * z - UNUSED currently.
  * A - UNUSED currently.
  * B - UNUSED currently.
  * C - UNUSED currently.
  * D - UNUSED currently.
  * E - UNUSED currently.
  * F - UNUSED currently. 
  
  See Also: status, @viewxcode
 
& status_file

  Config parameter: status_file <filename>
  Default: shutdown.status

  If you give an argument to the @shutdown command, that argument is
  written out to the file named by this directive.  The file can be
  used by an auto-restart script to decide whether or not to bring
  the MUX back up, for instance.
  
& steal_money
 
  Power: steal_money
  
  This permits the player to give negative amounts of money.
  
  See Also: @power, @list powers
 
& suspect_site

  Config parameter: suspect_site <addr> <mask>

  Indicates that sites whose address matches the specified address
  when ANDed with the mask are to be considered suspect, and any
  player creates, connects and disconnects are to be reported to all
  logged-in wizards.

  See also: trust_site, SITE LISTS.
 
& sweep_dark

  Config parameter: sweep_dark <yes/no>
  Default: no

  Indicates whether or not players are allowed to @sweep dark places
  they do not control.

  See also: @sweep.
 
& switch_default_all

  Config parameter: switch_default_all <yes/no>
  Default: yes

  Indicates whether the @switch command should perform the commands
  for all targets that match or just the first one that matches if
  you don't specify either /all or /first as a command switch.
  
& tacrange
 
  xcodevalue: tacrange <char>
  XTYPE: MECH
  
  This xcode value stores the tactical range of the RS Unit.
  
  See Also: settacrange, @viewxcode
  
& tankcritstatus
 
  xcodevalue: tankcritstatus <bv>
  XTYPE: MECH
  
  This xcode value stores crit status flags for vehicles.
  
  Flags:
  
  * a = Turret Locked
  * b = Turret Jammed
  * c = Unit is Dug In
  * d = Unit is Digging In
  * e = Crew Stunned
  * f = Tail Rotor Destroyed 
 
  See Also: critstatus, critstatus2, @viewxcode
  
& targcomp
 
  xcodevalue: targcomp <char>
  XTYPE: MECH
  
  This xcode value stores the 'tweaked mode' for the RS Unit's 
  targetting computer.
  
  Flags:
  
  *  0 = Normal - Standard BTMux locking rules. 
  * 1 = Short Range - -1 BTH at Short Range, +1 BTH at Long Range. 
  * 2 = Long Range - -1 BTH at Longe Range, +1 BTH at Short Range. 
  * 3 = Multi-Track  - +1 BTH if the target is not in forward 
        arc, no unstable lock BTH penalties. 
  * 4 = Anti-Aircraft - -2 BTH to aircraft, +1 to ground units. 
  
  See Also: @viewxcode
  
& target
 
  xcodevalue: target <DBref>
  XTYPE: TURRET
  XTYPE: MECH
  
  This xcode value stores the dbref of the RS Unit which is locked.
  
  If no unit is locked the value stored is -1
  
  See Also: lock, @viewxcode
  
& team
 
  xcodevalue: team <int>
  XTYPE: MECH
  
  This xcode value stores the number of the Team to which the RS Unit 
  belongs.
  
  Units with the same number are considered friendly, all others are 
  treated as enemies.
  
  See Also: @viewxcode
  
& tech
 
  Power: tech
  
  This power permits the holder to carry out In Character tech commands.
  
  See Also: @power, @list powers
  
& techtime
 
  Attribute: techtime <secs>
  
  This attribute contains a string which expresses the date/time when 
  the player will have 0 seconds of repairs being carried out.
  
  The string is formatted in the same format as convsecs()
  
  See Also: convesecs()
  
& techtime
 
  xcodevalue: techtime <>
  XTYPE: MECH
  
  This xcode value stores the amount of tech time (repair time) 
  currently logged on the RS unit.
  
  The value expresses the time in seconds.
  
  See Also: @viewxcode
  
& tel_anything
 
  Power: tel_anything
  
  This power permits the player to @teleport anything. This includes 
  the ability to @teleport himself to any location (as per 
  tel_anywhere).
  
  See Also: @power, @list powers, @teleport
  
& tel_anywhere
 
  Power: tel_anywhere
  
  This power permits the player to @teleport to any location
  
  See Also: @power, @list powers, @teleport
  
& temperature
 
  xcodevalue: temperature <char>
  XTYPE: MAP
  
  This xcode value stores the temperature on the map.
  
  See Also: cloudbase, gravity, maplight, winddir, windspeed,
  @viewxcode
  
& template
 
  Power: template
  
  This gives the player the ability to template units
  
  See Also: @power, @list powers
 
& terse_shows_contents

  Config parameter: terse_shows_contents <yes/no>
  Default yes

  Indicates whether or not to suppress the listing of a location's
  contents when producing TERSE output (whether from an automatic
  look or a 'real' look if look_obey_terse is turned on.

  See also: look_obey_terse, terse_shows_exits,
            terse_shows_move_messages.
 
& terse_shows_exits

  Config parameter: terse_shows_exits <yes/no>
  Default yes

  Indicates whether or not to suppress the listing of a location's
  obvious exits when producing TERSE output (whether from an
  automatic look or a 'real' look if look_obey_terse is turned on.

  See also: look_obey_terse, terse_shows_contents,
            terse_shows_move_messages.

& terse_shows_move_messages

  Config parameter: terse_shows_move_messages <yes/no>
  Default yes

  Indicates whether or not to suppress messages related to moving
  about produced by locations and exits.  These messages are the
  ENTER and LEAVE messages on locations, and the SUCC and DROP
  messages on exits.

  The messages seen by others (Oxxx attributes) and the actions to be
  performed (Axxx attributes) are unaffected.

  See also: look_obey_terse, terse_shows_contents, terse_shows_exits.
 
& thing_flags

  Config parameter: thing_flags <flags>
  Default: none

  Modifies the set of flags that a thing receives when it is @created.
  Flags prefixed by a ! remove the indicated flag from the set.

  See also: @list, exit_flags, player_flags, robot_flags, room_flags.
 
& thing_quota

  Config parameter: thing_quota <amount>
  Default: 1

  Sets how much quota it costs to create a thing (and also how much
  the remaining quota is increased when a thing is @destroyed.

  See also: @quota, exit_quota, player_quota, room_quota, QUOTAS.
  
& timeout
 
  Attribute: timeout <secs>
  
  This attribute sets the disconnect timeout for a specific user.
  
  If the user has been idle longer than this figure when the next idle 
  check is carried out the user will be disconnected.
 
& timeslice

  Config parameter: timeslice <amount>
  Default: 100

  Specifies the interval at which connected users' command quotas are
  increased.  Each command a user types in (commands executed by
  machines do not count) decreases that user's quota by 1, and the
  user's commands are only executed if the quota is greater than
  zero.

  See also: command_quota_incr, command_quota_max.
  
& tons
 
  xcodevalue: tons <int>
  XTYPE: MECH
  
  This xcode value stores the tonnage of the RS Unit.
  
  See Also: @viewxcode
  
& towing
 
  xcodevalue: towing <int_ro>
  XTYPE: MECH
  
  This xcode value stores the dbref of the unit which is being towed.
  
  See Also: @viewxcode
 
& trace_output_limit

  Config parameter: trace_output_limit <amount>
  Default: 200

  Specifies the maximum number of lines of trace output that will be
  displayed when using top-down format.  Bottom-up format output is
  not affected by this parameter.

  Note that this parameter is intended as a limit on the amount of
  memory used to store intermediate data and not on the quantity of
  trace output, top-down format needs to keep all intermediate
  results in memory before displaying them, while bottom-up format
  displays them immediately after generating them.

  When trace output lines are discarded, only the last
  (trace_output_limit) lines are kept.  These lines contain
  information about the evaluations done earliest in the process of
  evaluating the expression (usually the innermost evaluations and
  earlier arguments of outer functions).
 
& trace_topdown

  Config parameter: trace_topdown <yes/no>
  Default: yes

  Specifies whether TRACE output is displayed top-down (complete
  evaluation shown first, followed by sub-evaluations), or bottom-up
  (sub-evaluations shown first, followed by the larger evaluation of
  which they are a part).
 
& trust_site

  Config parameter: trust_site <addr> <mask>

  Indicates that sites whose address matches the specified address
  when ANDed with the mask are not to be considered suspect.

  See also: suspect_site, SITE LISTS.
  
& turret0
 
  xcodevalue: turret0 <DBRef>
  XTYPE: MECH
  
  This xcode is used by a system which enables individual player 
  controlled turrets on large units.
  
  This system is not fully implemented and this xcode value is 
  currently unused.
  
  See Also: turret1, turret2, @viewxcode
   
& turret1
 
  xcodevalue: turret1 <DBRef>
  XTYPE: MECH
  
  This xcode is used by a system which enables individual player 
  controlled turrets on large units.
  
  This system is not fully implemented and this xcode value is 
  currently unused.
  
  See Also: turret0, turret2, @viewxcode
   
& turret2
 
  xcodevalue: turret2 <DBRef>
  XTYPE: MECH
  
  This xcode is used by a system which enables individual player 
  controlled turrets on large units.
  
  This system is not fully implemented and this xcode value is 
  currently unused.
  
  See Also: turret0, turret1, @viewxcode
 
& uncompress_program

  Config parameter: uncompress_program <path>
  Default: gzip -d

  Specifies the program to be run to uncompress compressed database
  files when reading them in at startup.

  See also: compress_program, compresion.
  
& unkillable
 
  Power: unkillable
  
  This power renders the player unkillable.
  
  See Also: @power, @list powers
 
& unowned_safe

  Config parameter: unowned_safe <yes/no>
  Default: no

  Indicates whether or not objects not owned by you are automatically
  considered SAFE.  (This parameter only affects wizards)  Note that
  players are always considered SAFE, and DESTROY_OK things are
  never considered SAFE.

  See also: @destroy, DESTROY_OK, SAFE.
  
& unusablearcs
 
  xcodevalue: unusablearcs (int_ro)
  XTYPE: MECH
  
  This xcode value is used by a system which permits control over the 
  weapons on firing arcs for space oriented units.
  
  NOTE - The system is not implemented in this codebase and the value 
  is not in use.
  
  See Also: @viewxcode
 
& use_http

  Config parameter: use_http <yes/no>
  Default: no

  Indicates whether or not http access is allowed.
 
& user_attr_access

  Config parameter: user_attr_access [!]<privilege>
  [[!]<privilege>]...

  Changes the access flags that new user-named attributes receive when
  they are created.  By default, user attributes are invisible to
  others.
 
& wait_cost

  Config parameter: wait_cost <amount>
  Default: 10

  Sets the amount of money that it costs to run the @wait command and
  other actions that add commands to the queue.  The money is
  refunded when the command is removed from the queue (either when
  it is executed or by @halt).

  See also: @wait.
  
& winddir
 
  xcodevalue: winddir <short>
  XTYPE: MAP
  
  This xcode value stores the direction of the wind on the map
  
  See Also: cloudbase, gravity, maplight, temperature, windspeed, 
  @viewxcode
  
& windspeed
 
  xcodevalue: windspeed <short>
  XTYPE: MAP
  
  This xcode value stores the speed of the wind on the map
  
  See Also: cloudbase, gravity, maplight, temperature, winddir, 
  @viewxcode
 
& wizard_help_file

  Config parameter: wizard_help_file <path>
  Default: text/wizhelp.txt

  Specifies the name of the file containing the text used by the
  wizhelp command.

  See also: wizhelp, wizard_help_index
 
& wizard_help_index

  Config parameter: wizard_help_index <path>
  Default: text/wizhelp.indx

  Specifies the name of the index file used by the wizhelp command.
  This file must be generated by mkindex from the wizard help file.
  The contents of this file are read in to a hash table when the
  game is started and whenever a @readcache command is executed.

  See also: wizhelp, @readcache, wizard_help_file
 
& wizard_motd_file

  Config parameter: wizard_motd_file <path>
  Default: text/wizmotd.txt

  Specifies the name of the file that contains the wizard MOTD message
  that is displayed to wizards when they log in.  This message is
  displayed in addition to the wizard MOTD message that is set by
  the @motd/wiz command or the wizard_motd_message config parameter.

  The contents of the file are read in to a cache when the game is
  started and whenever a @readcache command is executed.

  See also: @readcache, wizard_motd_message.
 
& wizard_motd_message

  Config parameter: wizard_motd_message <message>
  Default: none

  Sets the wizard MOTD message that is displayed to wizards when they
  log in.

  This message is displayed in addition to the contents of the
  wizmotd.txt file.  It can be changed with the @motd/wiz command
  and examined by the @listmotd command.

  See also: @listmotd, @motd, motd_message, wizard_motd_file.
 & help
 
  This is the MUX online help facility for wizard commands and topics.
  The information provided by this command is generally not useful for
  anyone other than wizards and game maintainers, as the features described
  here are only accessable to characters whose WIZARD bit is set, or to those
  who have access to the directory where the MUX data files reside.
 
  Syntax of help command:
     wizhelp [<command/topic>]
 
  To get a list of MUX wizard topics:
     wizhelp topics
 
  To get a list of MUX wizard commands:
     wizhelp commands
 
  To get help on the BTech extensions, refer to:
     wiznews
  If there are any errors in the help text, please notify a Wizard.
 
  See also: help

& wiznews_file

  Config parameter: wiznews_file <path>
  Default: text/wiznews.txt

  Specifies the name of the file containing the text used by the
  wiznews command.

  See also: wiznews_index
 
& wiznews_index

  Config parameter: wiznews_index <path>
  Default: text/wiznews.indx

  Specifies the name of the index file used by the help command.  This
  file must be generated by mkindex from the wizard help file.  The
  contents of this file are read in to a hash table when the game is
  started and whenever a @readcache command is executed.

  See also: @readcache, wiznews_file
  
& x
 
  xcodevalue:x <short>
  XTYPE: MECH
  
  This xcode value stores the x coordinate of the hex the RS Unit is 
  currently in.
  
  See also: y, z, fx, fy, fz, @viewxcode
  
& y
 
  xcodevalue: y <short>
  XTYPE: MECH
  
  This xcode value stores the y coordinate of the hex the RS Unit is 
  currently in.
  
  See also: x, z, fx, fy, fz, @viewxcode
  
& z
 
  xcodevalue: z <short>
  XTYPE: MECH
  
  This xcode value stores the z value (ie vertical height) for the RS 
  Unit
  
  See also: y, z, fx, fy, fz, @viewxcode
 
& zone_recursion_limit

  Config parameter: zone_recursion_limit <num>
  Default: 20

  This directive specifies how far back to check a zone tree for
  control and commands.
 