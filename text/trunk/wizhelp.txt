& log

  Config parameter: log [!]<logoption> [[!]<logoption>]...

  Specifies what types of events are to be logged to the logfile.

    accounting     - Write an accounting record to the log for each
                     player who disconnects.
    all_commands   - Record all commands executed.
    bad_commands   - Record commands entered that did not match
                     anything.
    buffer_alloc   - Record buffer allocates and frees.
    bugs           - Record internal inconsistencies found.
    checkpoints    - Record automatic database dumps.
    config_changes - Record uses of the @admin command.
    create         - Record creation of new players.
    killing        - Record uses of the kill and slay commands.
    logins         - Record connects to characters.
    network        - Record new and broken net connections.
    problems       - Record problems found with the database.
    security       - Record security-related events.
    shouts         - Record uses of the @wall command.
    startup        - Record information about game startup.
    wizard         - Record uses of dangerous commands like @toad.

  See also: log_options.
 & register_create_file
 
  Config parameter: register_create_file <filename>
  Default: text/create_reg.txt
 
  Specifies the name of the file that is shown to players who attempt
  to create a new character when registration is in force from their
  site.
 
  See also: @list_file, @readcache, register_site.
 & down_motd_message

  Config parameter: down_motd_message <message>. 
  Default: text/down.txt

  Sets the message that is displayed when a player attempts to connect
  to a non-wizard character when logins are disabled.  This message
  is displayed in addition to the contents of the down.txt file.

  See also: @disable, down_motd_file.
 & port
 
  Config parameter: port <port>.  
  Default: 6250
 
  Specifies the IP port on which the game listens for new connections.
 & quota_cost
 
  Config parameter: quota_cost <amount>.  
  Default: 1
 
  Indicates how much adding one object to the database charges against
  the player's quota.
 
  See also: @create, @destroy, @dig, @open, @quota, QUOTAS.
 & config_access

  Config parameter: config_access <param> [!]<privilege>
  [[!]<privilege>]...

  Changes the privileges needed to change the specified configuration
  parameter.  The value 'disabled' indicates that the parameter may
  only be specified in the configuration file at startup.  Setting
  privileges to anything other than disabled or god is meaningless
  unless the restriction on the @admin command is weakened.

  See also: @admin, @list config_permissions, PERMISSIONS.
 & permit_site
 
  Config parameter: permit_site <addr> <mask>
 
  Indicates that connections are to be accepted and registration is
  not to be enforced from sites whose address matches the specified 
  address when ANDed with the mask.  This directive is typically 
  used to enable connections from a few selected hosts or subnets 
  that would otherwise be disallowed by a forbid_site directive.  
  The default is all sites permitted, none forbidden.
 
  See also: badsite_file, forbid_site, register_site, SITE LISTS.
 & log_options

  Config parameter: log_options [!]<option> [[!]<option>]...

  Specifies the type of information to be included in each log entry.

  The possible values are:
    flags       - Include the flags set on a player or object.
    location    - Include the location of referenced players and
                  objects.
    owner       - Include the owner of referenced players and objects.
    timestamp   - Include a timestamp in each log entry.

  See also: log.
 & initial_size

  Config parameter: initial_size <number>. 
  Default: 1000

  This is the number of objects that can be created before the
  database structure has to be reallocated again. This is needed
  since MUX allocates space for the database in large chunks, the
  size of which depends on this parameter.
 & exit_flags

  Config parameter: exit_flags <flags>. 
  Default: blank

  Modifies the set of flags that an exit receives when it is created
  via the @open command or via the optional exit creation parameters
  of the @dig or @link commands.  Flags prefixed by a ! remove the
  indicated flag from the set.

  See also: @list, player_flags, robot_flags, room_flags, thing_flags.
 & public_flags
 
  Config parameter: public_flags <yes/no>.  
  Default: yes
 
  If enabled, indicates that players may get the flags of any object
  with the flags() function call.  Otherwise, they may only get the 
  flags for objects that are examinable by them.
 
  See also: flags().
 & robot_speech
 
  Config parameter: robot_speech: <yes/no>.  
  Default: yes
 
  Indicates whether or not robot characters are allowed to use the
  speech, pose, and emit commands in areas not controlled by their 
  owner.
 
  See also: @robot, ROBOT.
 & have_plushelp

  Config parameter: have_plushelp <yes/no>.
  Default: yes

  This specifies whether the indexed +help file should be used.
  It should be set to no if a softcoded +help command is present.

  See also: plushelp_file, plushelp_index.
 & exit_quota

  Config parameter: exit_quota <amount>. 
  Default: 1

  Sets how much quota it costs to create an exit (and also how much
  the remaining quota is increased when an exit is @destroyed.

  See also: @quota, player_quota, room_quota, thing_quota, QUOTAS.
 & wizard_motd_file
 
  Config parameter: wizard_motd_file <path>.  
  Default: text/wizmotd.txt
 
  Specifies the name of the file that contains the wizard MOTD message
  that is displayed to wizards when they log in.  This message is 
  displayed in addition to the wizard MOTD message that is set by 
  the @motd/wiz command or the wizard_motd_message config parameter.  
 
  The contents of the file are read in to a cache when the game is 
  started and whenever a @readcache command is executed.
 
  See also: @readcache, wizard_motd_message.
 & examine_public_attrs

  Config parameter: examine_public_attrs <yes/no>. 
  Default: yes

  Indicate whether or not the examine command should display the
  public attributes of the object by default when used by a player
  who does not control the object.  Regardless of the setting of
  this parameter, the short form is available with examine/brief and
  the long form with examine/long.

  See also: examine.
 & uncompress_program
 
  Config parameter: uncompress_program <path>.  
  Default: gunzip
 
  Specifies the program to be run to uncompress compressed database
  files when reading them in at startup.
 
  See also: compress_program, compresion.
 & dump_interval

  Config parameter: dump_interval <amount>. 
  Default: 3600

  Specifies the time in seconds between automatic database dumps.

  See also: dump_offset, output_database.
 & compress_program

  Config parameter: compress_program <path>.  
  Default: gzip

  Specifies the program to be run to compress the database file when
  it is written.  If database file compression is enabled, database
  dumps are piped through this program on their way out to disk.

  See also: compresion, uncompress_program.
 & dig_cost

  Config parameter: dig_cost <amount>. 
  Default: 1

  Specifies how much the @dig command costs.
 & dump_offset

  Config parameter: dump_offset <amount>.  
  Default: 0

  Specifies the time in seconds between startup and the first database
  dump.

  If zero, the value of the dump_interval parameter is used.

  See also: dump_interval.
 & wiznews_file

  Config parameter: wiznews_file <path>. 
  Default: text/wiznews.txt

  Specifies the name of the file containing the text used by the
  wiznews command.

  See also: wiznews_index
 & find_money_chance

  Config parameter: find_money_chance <amount>. 
  Default: 0

  Indicates the chance that players have of finding money when
  entering a new room.  The chance is 1 / find_money_chance, except
  that finding money is disabled if this parameter is set to zero.

  See also: earn_limit, paycheck.
 & help_index

  Config parameter: help_index <path>. 
  Default: text/help.indx

  Specifies the name of the index file used by the help command.  This
  file must be generated by mkindx from the help file.  The contents
  of this file are read in to a hash table when the game is started
  and whenever a @readcache command is executed.

  See also: help, @readcache, help_file
 & max_players

  Config directive: max_players <num>. 
  Default: -1 (unlimited)

  Sets the maximum number of players that may be connected at any one
  time.
 
  Note that wizards are allowed to login even if they would
  exceed the limit, and that this limit does not override any limits
  imposed by the system running the MUX (such as the maximum number
  of net connections a process may have). 

  Players connecting when there are max_players players connected
  receive the contents of the file named by the full_file directive,
  and the full_motd_message (also settable via @motd/full), and are
  disconnected.

  See also: @motd, full_file, full_motd_message.
 & alias

  Config parameter: alias <new> <old>
 
  Defines the command <new> to be an alias of the command <old>.& cache_trim

  Config parameter: cache_trim <yes/no>.  
  Default: no.

  When this parameter is 'yes', the cache will be periodically trimmed
  to eliminate unused space. It is especially useful when your cache
  tends to stretch because it cannot hold all the objects being
  accessed at once.
 & command_quota_increment

  Config parameter: command_quota_increment <amount>. 
  Default: 1

  Specifies the number of commands by which the command quota for
  connected users each timeslice.  Each command a user types in
  (commands executed by machines do not count) decreases the quota
  by 1, and the user's commands are only executed if the quota is
  greater than zero.

  See also: command_quota_max, timeslice.
 & check_offset

  Config parameter: check_offset <secs>.  
  Default: 300.

  Specifies how long after startup the first automatic database check
  is to be performed.  Subsequent checks are performed every
  check_interval seconds.

  See also: check_interval, @dbck.
 & guests_channel

  Config parameter: guests_channel <name>.
  Default: Guests

  Specifies the name of the channel that guests join when they
  connect. You must have created the channel already. To disable
  this feature, simply set this parameter to nothing.

  See also: public_channel.
 & starting_money
 
  Config parameter: starting_money <amount>.  
  Default: 0
 
  Sets the amount of money that new players start out with.
 
  See also: paycheck.
 & comsys_database

  Config parameter: comsys_database <path>.  
  Default: comsys.db

  Specifies the file that comsystem and macro information is stored
  in.

  This database is loaded at startup if either have_comsys or
  have_macros are on.

  See also: have_comsys, have_macros.
 & starting_quota
 
  Config parameter: starting_quota <amount>.  
  Default: 20
 
  Sets the building quota that players receive when they are created,
  whether by @pcreate or the connection screen.
 
  See also: @quota, quotas.
 & attr_alias

  Config parameter: attr_alias <alias> <attr>.

  Makes <alias> an alias for the attribute <attr>.
 & pemit_far_players
 
  Config parameter: pemit_far_players <yes/no>.  
  Default: no
 
  Controls whether or not players may use the @pemit command to send
  messages to other connected players that are not in the same room.  
  The rules and costs for this form of @pemit are the same as for 
  page.
 
  See also: pemit_any_object.
 & output_limit
 
  Config parameter: output_limit <amount>. 
  Default: 16200
 
  Specifies how many bytes should be output before the output is
  flushed, and characters are lost.
 & default_home

  Config directive: default_home <location>. 
  Default (player_starting_home)

  Sets the home location for objects which have an invalid home
  (whether because the home location was deleted, or is owned by
  another player and is not set ABODE) and the home of their owner
  is also invalid.  If this parameter is not set, the value of
  player_starting_home is used instead.

  See also: player_starting_home.
 & dark_sleepers

  Config directive: dark_sleepers <yes/no>.  
  Default: yes

  Indicates whether or not disconnected players are to be considered
  'dark', so that they do not show up when a player looks in the
  room that they are in.  Disconnected players can still be found by
  examining the room or by using [next()] to follow the contents
  chain for the room.
 & examine_flags

  Config parameter: examine_flags <yes/no>. 
  Default: yes

  Indicates whether or not the examine command should include an
  expanded flags list in the description of the object.

  See also: examine.
 & mud_name

  Config parameter: mud_name <string>. 
  Default: TinyMUX
 & forbid_site

  Config parameter: forbid_site <addr> <mask>.

  Indicates that connections are to be rejected from sites whose
  address  matches the specified address when ANDed with the mask. 
  The contents of the file specified by badsite_file is sent
  immediately before closing the connection.  This directive may be
  used to restrict access to just the local network, or to prevent
  access from troublemaking sites.

  The default is for all sites to be allowed to connect, none
  forbidden.

  See also: badsite_file, permit_site, register_site, SITE LISTS.
 & retry_limit
 
  Config paramater: retry_limit <count>.  
  Default: 3
 
  Specifies the number of times that a user is allowed to try to
  connect to an existing player before being disconnected.
 
  See also: conn_timeout.
 & down_file

  Config parameter: down_file <pathname>. 
  Default: text/down.txt

  Specifies the name of the file that is displayed when players
  attempt to connect to a non-wizard character when logins are
  disabled.

  See also: @disable, down_motd_message.
 & wiznews_index

  Config parameter: wiznews_index <path>
  Default: text/wiznews.indx

  Specifies the name of the index file used by the help command.  This
  file must be generated by mkindex from the wizard help file.  The
  contents of this file are read in to a hash table when the game is
  started and whenever a @readcache command is executed.

  See also: @readcache, wiznews_file
 & idle_wiz_dark

  Config parameter: idle_wiz_dark <yes/no>. 
  Default: no

  Indicates whether or not wizards or players with the idle power who
  are idle for longer than the default timeout value are to
  automatically be set DARK, and then unDARKed when they type in
  their next command.

  Wizards  already set DARK are not automatically unDARKed. Any
  player who is set dark by this action will have a 'd' instead of a
  'D' by their idle time in the privileged WHO listing.
 & events_daily_hour

  Config parameter: events_daily_hour <hour>. 
  Default: 7.

  Specifies the hour that @daily is executed. No guarantee is made as
  to what time during this hour it is executed. This should be a
  number between 0 and 23.
 & function_access

  Config parameter: function_access <function> [!]<priv>
  [[!]<priv>]...

  Changes the privileges needed to call the MUX function <function>.
  If you do not have permission to call a function, the function
  returns the value "#-1 PERMISSION DENIED" instead of the value it
  would normally return.

  See also: @list functions, FUNCTION LIST, PERMISSIONS.
 & wizard_help_file
 
  Config parameter: wizard_help_file <path>.  
  Default: text/wizhelp.txt
 
  Specifies the name of the file containing the text used by the
  wizhelp command.
 
  See also: wizhelp, wizard_help_index
 & terse_shows_move_messages
 
  Config parameter: terse_shows_move_messages <yes/no>.  
  Default yes
 
  Indicates whether or not to suppress messages related to moving
  about produced by locations and exits.  These messages are the 
  ENTER and LEAVE messages on locations, and the SUCC and DROP 
  messages on exits.
  
  The messages seen by others (Oxxx attributes) and the actions to be
  performed (Axxx attributes) are unaffected.

  See also: look_obey_terse, terse_shows_contents, terse_shows_exits.
 & timeslice
 
  Config parameter: timeslice <amount>.  
  Default: 1000
 
  Specifies the interval at which connected users' command quotas are
  increased.  Each command a user types in (commands executed by
  machines do not count) decreases that user's quota by 1, and the 
  user's commands are only executed if the quota is greater than 
  zero.
 
  See also: command_quota_incr, command_quota_max.
 & public_channel
 
  Config parameter: public_channel <name>. 
  Default: Public
 
  Specifies the name of the channel that new players join when they
  are created. You must have previously created the channel. To 
  disable this feature, simply set this parameter to nothing.
 
  See also: guests_channel.
 & postdump_message
 
  Config parameter: postdump_message <message>.  
  Default: blank
 
  Sets the message that is sent to everyone after a database dump
  whether automatically or via the @dump command.
 
  See also: @dump, dump_message.
 & fork_vfork

  Config parameter: fork_vfork <yes/no>. 
  Default: no

  Indicates whether or not the vfork() system call should be used in
  place of fork() when a database dump is to be performed.  This
  parameter is only checked if the fork_dump parameter is set to
  yes.

  See also: fork_dump.
 & plushelp_index

  Config parameter: plushelp_index <path>. 
  Default: text/plushelp.indx
 
  Specifies the name of the index file used by the +help command.
  This file must be generated by mkindx from the plushelp file.  The
  contents of this file are read in to a hash table when the game is
  started and whenever a @readcache command is executed.

  See also: @readcache, plushelp_file
 & crash_database

  Config parameter: crash_database <path>.  
  Default: none

  Specifies the name of the database file that should be written when
  MUX detects an internal error and is about to crash.  Note that
  the database may contain corrupted links of the error occurs in
  the middle of moving links about.

  Dumping a crash database is currently not implemented.
 & page_cost
 
  Config parameter: page_cost <amount>.  
  Default: 10
 
  Specifies the cost of using the page command.
 
  See also: page.
 & function_invocation_limit

  Config directive: function_invocation_limit <num>. 
  Default: 2500

  This directive sets the maximum number of times that a command may
  make function calls.  If the invocation limit is exceeded, the
  string '#-1 FUNCTION INVOCATION LIMIT EXCEEDED' is returned.  This
  limit is  intended to prevent long hangs from creative uses of u()
  and iter().
 
  Note: @search is treated specially, each object examined with the
  eval=<arg> parameter is treated as a separate command for the
  purposes of the function invocation limit.
 & paranoid_allocate
 
  Config parameter: paranoid_allocate <yes/no>.  
  Default: no
 
  Controls whether or not the game performs a consistency check on the
  entire set of xbuf buffers each time one is allocated or freed.  
  This check involves making sure that nobody has written to the 
  memory immediately before and after each buffer.  Normally, only 
  the buffer being allocated or freed is checked.
 & have_zones

  Config parameter: have_zones <yes/no>. 
  Default: yes

  Specifies whether zones should be active. If this is off, zone
  connects and disconnects, zone commands, and the control aspects
  will all be disabled.
 & check_interval

  Config parameter: check_interval <secs>.  
  Default: 600.

  Specifies how often (in seconds) the database is to be automatically
  scanned for inconsistencies and purged of references to destroyed
  objects.

  Any inconsistencies found are either fixed or recorded in the log
  file.

  See also: check_offset, @dbck.
 & function_recursion_limit

  Config directive: function_recursion_limit <num>. 
  Default: 50

  This directive sets the maximum number of nested function calls that
  may be made before the function call is aborted and the string
  '#-1 FUNCTION RECURSION LIMIT EXCEEDED' is returned.  Normally this
  is not a problem, but the u() function can be used to cause
  infinite recursion (unless blocked by a recursion limit)
 & notify_recursion_limit

  Config directive: notify_recursion_limit <num>. 
  Default: 20

  Sets the maximum number of times that the notify() routine may be
  called recursively.  A recursive call is made whenever a message
  heard by an object is to be forwarded to its contents.
 & concentrator_port

  Config parameter: concentrator_port <port number>.  
  Default: 6251

  Specifies the port number that the MUX will expect the concentrator
  to use when it is active. This parameter is meaningless if you do
  not have concentrator support compiled into the server.
 & full_file

  Config parameter: down_file <pathname>. 
  Default: text/full.txt

  Specifies the name of the file that is displayed when players
  attempt to connect to a non-wizard character when the number of
  connected players is not less than the number of players allowed
  by the max_players directive.

  See also: full_motd_message, max_players.
 & have_comsys

  Config parameter: have_comsys <yes/no>. 
  Default: yes

  Specifies whether or not the comsystem should be active.

  See also: comsys_database, have_macros.
 & quit_file
 
  Config parameter: quit_file <filename>.  
  Default: text/quit.txt
 
  Specifies the name of the file that is displayed to users after they
  QUIT but before the network connection is closed.
 
  See also: QUIT, @readcache.
 & idle_interval

  Config parameter: idle_interval <secs>. 
  Default: 60

  Sets the interval between checks for idle users.

  See also: conn_timeout, idle_timeout.
 & look_obey_terse

  Config parameter: look_obey_terse <yes/no>. 
  Default: YES
 
  Indicates whether or not the 'look' command obeys the TERSE flag
  when deciding how much information to display.  If set to yes, the
  terse_shows_contents, terse_shows_exits, and
  terse_shows_move_messages config options control the amount of
  information displayed for TERSE players.

  See also: terse_shows_contents, terse_shows_exits,
            terse_shows_move_messages.
 & attr_cmd_access

  Config parameter: attr_cmd_access [!]<privilege> [[!]<privilege>]...

  Changes the access rights on all attribute-setting commands in
  parallel.
 
  Use this parameter to allow or deny access to the attribute-setting
  commands as a group.  This directive should normally be followed
  by access directives to properly set access to restricted
  attributes.

  See also: access, PERMISSIONS.
 & access

  Config parameter: access <command> <permlist>
 
  Modifies the permissions needed to execute the indicated command.
 
  Specifying a permission adds it to the list of permissions required;
  to remove a permission prefix it with a ! character.
 
  See also: PERMISSIONS, @list.
 & cache_depth

  Config parameter: cache_depth <depth>.  
  Default: 10.

  Specifies the depth of the database cache.  Each bucket in the cache
  is allowed to have this many entries before it will try to remove
  old entries.

  See also: cache_width.
 & fixed_home_message

  Config parameter: fixed_home_message <string>. 
  Default: none

  Specifies the string that is sent to a player when they try to go
  home while they are set with the FIXED flag.

  See also: fixed_tel_message.
 & space_compress
 
  Config parameter: space_compress <yes/no>.  
  Default: yes
 
  Specifies whether or not extra spaces are to be removed from user
  input as it is processed.  If enabled, multiple spaces are 
  compressed to a single space, and spaces at the ends of strings 
  are removed.
 & player_match_own_commands
 
  Config parameter: player_match_own_commands <yes/no>.  
  Default: no
 
  Specifies whether or not players should check themselves for
  $-commands. This parameter is only checked if the  
  match_own_commands parameter is set to yes.
 
  See also: match_own_commands.
 & guest_nuker

  Config parameter: guest_nuker <num>.
  Default: 1.

  Specifies who is to nuke guests when they log off. If it is not a
  good object or a wizard, it defaults to #1.

  See also: guest_char_num, guest_prefix, number_guests.
 & player_queue_limit
 
  Config parameter: player_queue_limit.  
  Default: 100
 
  Sets the maximum number of commands that non-wizard players may have
  on the queue at one time.  An attempt to queue more commands than 
  allowed will halt the object performing the command.
 & indent_desc

  Config parameter: indent_desc <yes/no>.
  Default: no

  Places a blank row before and after every room, object, and exit
  description when looked at.
 & cache_width

  Config parameter: cache_width <depth>.  
  Default: ??

  Specifies the number of buckets in the database cache.  A hashing
  function is used to assign objects or attributes to a particular
  bucket, where a linear search is performed.
 & money_name_singular

  Config parameter: money_name_singular <string>. 
  Default: penny

  Specifies the string to use to describe the coin of the realm when
  they are being referred to singularly (such as: 'You found a
  penny!').

  See also: money_name_plural.
 & paycheck
 
  Config parameter: paycheck <amount>.  
  Default: 0
 
  Specifies the default amount of money that players receive each day
  they connect.  This parameter may be overridden by setting the 
  ALLOWANCE attribute on the player to a different value.
 
  See also: @allowance, earn_limit, starting_money.
 & compression

  Config parameter: compress <yes/no>. 
  Default: no

  Indicates whether or not the database is to be compressed using the
  compress_program when it is written, and whether or not to check for
  a compressed database to uncompress at startup.

  See also: compress_program, uncompress_program.
 & mail_expiration

  Config parameter: mail_expiration <number of days>.
  Default: 14

  Sets the number of days that a @mail message should last before it
  is automatically deleted by the system. If this parameter is set
  to a negative number, this feature will be disabled.
 & site_chars
 
  Config parameter: site_chars <number>:  
  Default: 25.
 
  Specifies the length of the hostname that is shown in a wizard WHO
  listing. If <number> is 0, then the hostname will be shown in full.
 & motd_message

  Config parameter: motd_message <message>. 
  Default: blank

  Sets the MOTD message that is displayed to all characters when they
  log in.
 
  This message is displayed in addition to the contents of the
  motd.txt file.  It can be changed with the @motd command and
  examined by the @listmotd command.

  See also: @listmotd, @motd, motd_file.
 & idle_timeout

  Config parameter: idle_timeout <secs>. 
  Default: 3600 (one hour)

  Sets the amount of time that a player may remain idle before being
  automatically disconnected.  Players idle longer than this parameter
  are disconnected when the next check for idle players is done.

  See also: conn_timeout, idle_interval.
 & plushelp_file

  Config parameter: plushelp_file <path>. 
  Default: text/plushelp.txt

  Specifies the name of the file containing the text used by the +help
  command.

  See also: plushelp_index
 & earn_limit

  Config parameter: earn_limit <amount>. 
  Default: 10000

  Specifies the threshold at which earning additional money becomes
  difficult. Specifically, players with more than this much money no
  longer receive a  paycheck for each day they connect, don't receive
  insurance payments for being killed, and don't find money lying in
  the streets.

  See also: find_money_chance, paycheck.
 & signal_action
 
  Config parameter: signal_action <default|exit>.  
  Default: default
 
  Specifies what action to take when a fatal signal is received.  The
  possibilities are:
 
     default  - Log the error, produce a panic dump, dump a core file,
                and restart the game using the last reliably saved 
                database. For a description of the restart process, 
                see @restart.
     exit     - Log the error, and exit, hopefully with a core file.
 & master_room

  Config parameter: master_room <roomnum>. 
  Default: (none)

  Specifies the room that is searched for exits if a command does not
  match an exit in the current room, and for $-command if a command
  does not match any $-commands that are available to the player in
  his current location.
 & kill_guarantee_cost

  Config parameter: kill_guarantee_cost <amount>. 
  Default: 100

  Specifies the amount of money you have to spend (ie. kill target =
  <amount>) to have a 100% chance of killing them (assuming there
  are no other factors, such as the victim being immortal or in a
  HAVEN room, etc).  The chance of a successful kill is <amount
  spent> / <kill_guarantee_cost>.
 
  See also: kill, kill_max_cost, kill_min_cost, HAVEN, IMMORTAL,
            KILLING.
 & money_name_plural

  Config parameter: money_name_plural <string>.  
  Default: pennies
 
  Specifies the string to use to describe the coin of the realm when
  they are being referred to plurally (such as: 'You have <number>
  pennies.', where <number> is not 1).

  See also: money_name_singular.
 & quiet_look
 
  Config parameter: quiet_look <yes/no>.  
  Default: yes
 
  Indicates whether or not players are shown the attributes set on an
  object when they look at it.  Not recommended.
 & connect_reg_file

  Config parameter: connect_reg_file <path>. 
  Default: text/register.txt

  Specifies the name of the file that a user sees immediately after
  connecting to the MUX if registration is enabled.  This file
  normally contains help on how to get a character (usually by
  sending e-mail to one of the wizards), how to connect to an
  existing character, as well as the WHO and QUIT commands.

  See also: connect_file
 & have_macros

  Config parameter: have_macros <yes/no>. 
  Default: yes

  Specifies whether or not the macro system should be active.
 
  See also: comsys_database, have_comsys.
 & have_mailer

  Config parameter: have_mailer <yes/no>. 
  Default: yes
  
  Specifies whether @mail and mail aliases should be active.

  See also: mail_database
 & robot_cost
 
  Config paramater: robot_cost <amount>.  
  Default: 1000
 
  Specifies the cost of using the @robot command to create a robot.
 
  See also: @robot, ROBOT.
 & unowned_safe
 
  Config parameter: unowned_safe <yes/no>.  
  Default: no
 
  Indicates whether or not objects not owned by you are automatically
  considered SAFE.  (This parameter only affects wizards)  Note that
  players are always considered SAFE, and DESTROY_OK things are 
  never considered SAFE.
 
  See also: @destroy, DESTROY_OK, SAFE.
 & conn_timeout

  Config parameter: conn_timeout <num>.  
  Default: 60

  Specifies how many seconds a new network connection may remain open
  before connecting to a character before being automatically
  disconnected.
 & open_cost

  Config parameter: open_cost <amount>. 
  Default: 1

  Indicates the cost of using the @open command to open a new exit.
  If a destination for the new exit is specified and the link is
  successful, then the link_cost is also charged.

  See also: @open, link_cost.
 & full_motd_message

  Config parameter: full_motd_message <message>. 
  Default: blank

  Sets the message that is displayed when a player attempts to connect
  to a non-wizard character when the number of connected players is
  not less than the number of players allowed by the max_players
  directive.  This message is displayed in addition to the contents
  of the full.txt file.

  See also: down_motd_file, max_players.
 & terse_shows_contents
 
  Config parameter: terse_shows_contents <yes/no>.  
  Default yes
 
  Indicates whether or not to suppress the listing of a location's
  contents when producing TERSE output (whether from an automatic 
  look or a 'real' look if look_obey_terse is turned on.
 
  See also: look_obey_terse, terse_shows_exits,
            terse_shows_move_messages.
 & badsite_file

  Config parameter: badsite_file <path>  
  Default: text/badsite.txt

  Specifies the name of the file that is sent to new net connections
  from sites that have been blocked from accessing the server.  The
  connection is closed immediately after the file is sent.

  See also: forbid_site, permit_site.
 & logout_cmd_access

  Config parameter: logout_cmd_access <command> <permlist>

  Specifies permission for logged-out commands, like WHO, DOING,
  SESSION, QUIT, OUTPUTPREFIX, and OUTPUTSUFFIX.

  See also: access.
 & queue_active_chunk
 
  Config parameter: queue_active_chunk <num>.  
  Default: 0
 
  Specifies the number of commands to be run from the player queue
  when the check for network traffic indicates that there is data 
  needing to be read from or written to the network.
 
  See also: queue_idle_chunk.
 & input_database

  Config parameter: input_database. 
  Default: tinymux.db

  Specifies the name of the database file that is read in at startup.
 
  This file is used only as an input file, the parameter
  output_database controls where updated copies of the database are
  written.

  See also: crash_database, gdbm_database, output_database.
 & clone_copies_cost

  Config parameter: clone_copies_cost <yes/no>.  
  Default: NO

  Indicates whether or not @cloned objects inherit the cost of the
  original.
 
  If disabled, @cloned objects cost the same as a @create that doesn't
  specify the object cost.  The new owner is charged the correct
  amount in either case.

  See also: @clone.
 & player_starting_home
 
  Config parameter: player_starting_home.  
  Default: <player_starting_room>
 
  Specifies the room to which the home of new players is set.  If this
  parameter has not been set, then the value of the 
  player_starting_room parameter is used instead.
 
  See also: default_home, player_starting_room, @pcreate,
            player_flags.
 & player_starting_room
 
  Config parameter: player_starting_room.  
  Default: 0
 
  Specifies the room that new players start out in.  If the
  player_starting_home parameter has not been set, then
  player_starting_room is used for both.
 
  See also: player_starting_home, @pcreate, player_flags.
 & fork_dump

  Config parameter: fork_dump <yes/no>. 
  Default: yes

  Indicates whether or not database dumps are to be done by fork()ing
  off a separate process to perform the dump.  While enabling this
  parameter reduces the amount of time needed to perform the dump,
  it requires that the system  have enough free swap space to hold a
  second copy of the running game.

  See also: fork_vfork.
 & trace_output_limit
 
  Config parameter: trace_output_limit <amount>.  
  Default: 200
 
  Specifies the maximum number of lines of trace output that will be
  displayed when using top-down format.  Bottom-up format output is 
  not affected by this parameter.
 
  Note that this parameter is intended as a limit on the amount of
  memory used to store intermediate data and not on the quantity of 
  trace output, top-down format needs to keep all intermediate 
  results in memory before displaying them, while bottom-up format 
  displays them immediately after generating them.
 
  When trace output lines are discarded, only the last
  (trace_output_limit) lines are kept.  These lines contain 
  information about the evaluations done earliest in the process of 
  evaluating the expression (usually the innermost evaluations and 
  earlier arguments of outer functions).
 & match_own_commands

  Config parameter: match_own_commands <yes/no>. 
  Default: NO

  Specifies whether or not objects search themselves for $-commands
  when a command does not match an exit or an internal command.  In
  order for players to search themselves for commands, both
  match_own_commands and player_match_own_commands must be set to
  yes.

  See also: player_match_own_commands.
 & player_listen
 
  Config parameter: player_listen.  
  Default: no
 
  Indicates whether the Listen, Aahear, Ahear, and Amhear attributes
  on player objects are to be obeyed.
 & guest_file

  Config parameter: guest_file <path>. 
  Default: text/guest.txt.

  Specifies the file that is to be shown to people connecting to the
  guest character in place of the motd file.

  See also: guest_char_num.
 & player_flags
 
  Config parameter: player_flags <flags>.  
  Default: blank
 
  Modifies the set of flags that a player receives when it is created
  via the @pcreate command or via the connection screen.  Flags 
  prefixed by a ! remove the indicated flag from the set.
 
  See also: @list, exit_flags, robot_flags, room_flags, thing_flags.
 & good_name

  Config parameter: good_name <name>.

  Removes <name> from the list of names that may not be used as a
  player name, reversing the effect of a bad_name directive.  The
  name must match exactly (wildcard matching is not performed).
 & status_file
 
  Config parameter: status_file <filename>.  
  Default: shutdown.status
 
  If you give an argument to the @shutdown command, that argument is
  written out to the file named by this directive.  The file can be 
  used by an auto-restart script to decide whether or not to bring 
  the MUX back up, for instance.
 & player_quota
 
  Config parameter: player_quota <amount>.  
  Default: 1
 
  Sets how much quota it costs to create a robot player (and also how
  much the remaining quota is increased when a robot is @destroyed.
 
  See also: @quota, exit_quota, room_quota, thing_quota, QUOTAS.
 & robot_flags
 
  Config parameter: robot_flags <flags>.  
  Default: ROBOT
 
  Modifies the set of flags that a robot receives when it is created
  via the @robot command.  Flags prefixed by a ! remove the 
  indicated flag from the set.
 
  See also: @list, exit_flags, player_flags, room_flags, thing_flags.
 & gdbm_database

  Config parameter: gdbm_database <path>. 
  Default: none.

  Specifies the name of the file that stores the text portion of the
  database.  The text strings are stored in a binary format optimized
  for fast retrieval and storage rather than access with programs
  such as more.
 & stack_limit
 
  Config parameter: stack_limit <number>.  
  Default: 50.
 
  The number of items that are allowed on an object's stack. You
  should be sparse with this parameter, as stack items are retained 
  until they are removed.
 & list_access

  Config parameter: list_access <param> [!]<privilege>
  [[!]<privilege>]...

  Changes the access needed to the <param> option of the @list
  command.

  See also: @list, PERMISSIONS.
 & quotas
 
  Config parameter: quotas <yes/no>.  
  Default: no
 
  Indicates whether or not building quotas are enforced and
  maintained.
 
  Quotas are stored as a relative number, ie. number of objects that
  the player may create, not the total number that the player may 
  create.
 
  If quotas are turned off and turned back on later, any building or
  @destroying that occurs in the interim does not affect the quotas.
 
  See also: @allquota, @create, @destroy, @dig, @open, @quota, QUOTAS,
            quota_cost.
 & user_attr_access
 
  Config parameter: user_attr_access [!]<privilege>
  [[!]<privilege>]...
 
  Changes the access flags that new user-named attributes receive when
  they are created.  By default, user attributes are invisible to 
  others.
 & number_guests

  Config directive: number_guests <num>.
  Default: 30

  How many guests should we allow at any one time?

  See also: guest_char_num, guest_nuker, guest_prefix.
 & queue_idle_chunk
 
  Config parameter: queue_idle_chunk <num>.  
  Default: 3
 
  Specifies the number of commands to be run from the player queue
  when the check for network traffic indicates that there is no data 
  needing to be read from or written to the network.
 
  See also: queue_active_chunk.
 & quiet_whisper
 
  Config parameter: quiet_whisper <yes/no>.  
  Default: yes
 
  Indicates whether or not whispers are completely invisible except to
  the whispered-to player, or if a '<whisperer> whispers something 
  to <recipient>.' message is displayed to everyone else in the same
  room.
 
  See also: whisper.
 & pemit_any_object
 
  Config parameter: pemit_any_object <yes/no>.  
  Default: no
 
  Indicates whether or not players may @pemit to faraway objects they
  do not control.  It does not affect @pemits to faraway players, 
  the pemit_far_players directive is used for that purpose.
 
  See also: pemit_far_players.
 & logout_cmd_alias

  Config parameter: logout_cmd_alias <alias> <command>
  
  Makes <alias> an alias for <command>, where <command> is one of WHO,
  DOING, SESSION, QUIT, OUTPUTPREFIX, and OUTPUTSUFFIX.
 & sweep_dark
 
  Config parameter: sweep_dark <yes/no>.  
  Default: no
 
  Indicates whether or not players are allowed to @sweep dark places
  they do not control.
 
  See also: @sweep.
 & fascist_teleport

  Config parameter: fascist_teleport <yes/no>. 
  Default: no

  If this parameter is set to yes, then players (and objects) may not
  teleport out of locations that they do not control or which are not
  set JUMP_OK.  If the teleporting player is inside an object, the
  room that ultimately contains the object is checked.  Going home
  is unaffected.
 & wizard_help_index
 
  Config parameter: wizard_help_index <path>.  
  Default: text/wizhelp.indx
 
  Specifies the name of the index file used by the wizhelp command.
  This file must be generated by mkindex from the wizard help file.  
  The contents of this file are read in to a hash table when the 
  game is started and whenever a @readcache command is executed.
 
  See also: wizhelp, @readcache, wizard_help_file
 & bad_name

  Config parameter: bad_name <wildcarded-name>

  Specifies that any name that matches <wildcarded-name> may not be
  used as a player name.  Attempts to create a player with a
  disallowed name (or to rename to a disallowed name) will be
  rejected.  Normally, words that lead off messages from MUX are
  disallowed, some sites may wish to disallow some obscene names as
  well.
 & flag_alias

  Config parameter: flag_alias <alias> <flagname>

  Defines <alias> as a synonym for the flag <flagname>.
 & mail_database

  Config parameter: mail_database <path>. 
  Default: mail.db

  Sets the file that @mail information is to be stored in. The
  database is only loaded or saved if have_mailer is set to yes.

  See also: have_mailer.
 & room_flags

  Config parameter: room_flags <flags>.  
  Default: blank
 
  Modifies the set of flags that a room receives when it is @dug.
  Flags prefixed by a ! remove the indicated flag from the set.
 
  See also: @list, exit_flags, player_flags, robot_flags, thing_flags.
 & news_index

  Config parameter: news_index <path>. 
  Default: text/news.indx

  Specifies the name of the index file used by the news command.  This
  file must be generated by mkindex from the news file.  The
  contents of this file are read in to a hash table when the game is
  started and whenever a @readcache command is executed.

  See also: news, @readcache, news_file
 & attr_access

  Config parameter: attr_access
 
  Changes the access rights to the named attribute.

  The following privileges may be used:
  private     - The attribute is visible only to those who can examine
                the object.
  internal    - The attribute is not visible to anyone.
  wizard      - Only wizards may change the attribute.
  hidden      - The attribute is visible only to wizards.
 & trace_topdown
 
  Config parameter: trace_topdown <yes/no>.  
  Default: yes
 
  Specifies whether TRACE output is displayed top-down (complete
  evaluation shown first, followed by sub-evaluations), or bottom-up
(sub-evaluations shown first, followed by the larger evaluation of 
which they are a part).
 & guest_char_num

  Config parameter: guest_char_num <number>. 
  Default: (none)

  Indicates the database number of the guest character.  If set, the
  specified guest character is subject to additional restrictions
  (such as not being allowed to create or destroy objects).  The
  actual restrictions can be changed with the access config
  parameter using the no_guest permission.

  See also: guest_prefix, guest_nuker, number_guests, access.
 & room_quota
 
  Config parameter: room_quota <amount>.  
  Default: 1
 
  Sets how much quota it costs to dig a room (and also how much the
  remaining quota is increased when a room is @destroyed.
 
  See also: @quota, exit_quota, player_quota, thing_quota, QUOTAS.
 & see_owned_dark
 
  Config parameters: see_owned_dark <yes/no>.  
  Default: yes
 
  Specifies whether or not players see their own DARK objects when
  they look at a room.  It does not affect the inventory or examine
  commands, both of which show all objects.
 & terse_shows_exits
 
  Config parameter: terse_shows_exits <yes/no>.  
  Default yes
 
  Indicates whether or not to suppress the listing of a location's
  obvious exits when producing TERSE output (whether from an 
  automatic look or a 'real' look if look_obey_terse is turned on.
 
  See also: look_obey_terse, terse_shows_contents,
            terse_shows_move_messages.
& motd_file

  Config parameter: motd_file <pathname>. 
  Default: text/motd.txt

  Specifies the name of the file to be shown to players immediately
  after they connect to their characters.

  See also: @readcache, newuser_file, motd_message.
 & lock_recursion_limit

  Config directive: lock_recursion_limit <num>. 
  Default: 20

  Sets the maximum number of levels of indirection that may be used
  when using indirect locks.  If more than this many levels are
  used, the lock fails and the user gets an error message.
 & kill_max_cost

  Config parameter: kill_max_cost <amount>. 
  Default: 100

  Specifies the maximum amount of money that may be usefully spent on
  a kill attempt.  Spending more than this amount does not improve
  the chance of success.  Setting this parameter to less than the
  kill_guarantee_cost parameter prevents 'automatic kills', as the
  kill will always have a chance of failing.

  See also: kill, kill_guarantee_cost, kill_min_cost, HAVEN, IMMORTAL,
            KILLING.
 & wait_cost
 
  Config parameter: wait_cost <amount>.  
  Default: 10
 
  Sets the amount of money that it costs to run the @wait command and
  other actions that add commands to the queue.  The money is 
  refunded when the command is removed from the queue (either when 
  it is executed or by @halt).
 
  See also: @wait.
 & read_remote_desc
 
  Config parameter: read_remote_desc <yes/no>.  
  Default: no
 
  Indicates whether or not the descriptions of faraway objects are
  available to players that don't control them via the examine 
  command and get() function.
 
  See also: examine, get().
 & read_remote_name
 
  Config parameter: read_remote_name <yes/no>.  
  Default: no
 
  Indicates whether or not the names of faraway objects are available
  to players that don't control them via the examine command and get()
  function.
 
  See also: examine, get().
 & use_http
 
  Config parameter: use_http <yes/no>.  
  Default: no
 
  Indicates whether or not http access is allowed.
 & wizard_motd_message
 
  Config parameter: wizard_motd_message <message>.  
  Default: blank
 
  Sets the wizard MOTD message that is displayed to wizards when they
  log in.
  
  This message is displayed in addition to the contents of the
  wizmotd.txt file.  It can be changed with the @motd/wiz command 
  and examined by the @listmotd command.
 
  See also: @listmotd, @motd, motd_message, wizard_motd_file.
 & kill_min_cost

  Config parameter: kill_min_cost <amount>. 
  Default: 10

  Specifies the minimum (and default) cost for attempting to kill
  someone or something.

  See also: kill, kill_guarantee_cost, kill_max_cost, HAVEN, IMMORTAL,
            KILLING.
 & link_cost

  Config parameter: link_cost <amount>. 
  Default: 1.

  Specifies the cost of using the @link command to establish or change
  the link of an exit to its destination, the home of a player or an
  object, or the drop-to of a room.

  See also: @link.
 & zone_recursion_limit
 
  Config directive: zone_recursion_limit <num>. 
  Default: 20
 
  This directive specifies how far back to check a zone tree for
  control and commands.
 & search_cost
 
  Config parameter: search_cost <amount>.  
  Default: 100
 
  Specifies how much commands that scan the entire database (such as
  @find, @search, and stats with a playername) cost.
 
  See also: stats, @find, @search.
 & dump_message

  Config parameter: dump_message <message>. 
  Default: blank

  Sets the message that is sent to everyone before the database is
  being dumped to disk, whether automatically or via the @dump
  command.

  See also: @dump, postdump_message.
 & thing_flags
 
  Config parameter: thing_flags <flags>.  
  Default: blank
 
  Modifies the set of flags that a thing receives when it is @created.
  Flags prefixed by a ! remove the indicated flag from the set.
 
  See also: @list, exit_flags, player_flags, robot_flags, room_flags.
 & newuser_file

  Config parameter: newuser_file <filename>. 
  Default: text/newuser.txt

  Specifies the file to be shown to new players immediately after they
  create their characters, in place of the MOTD file.  This file
  should contain information about the basic commands and how to get
  help.

  See also: @readcache, motd_file.
 & register_site
 
  Config parameter: register_site <addr> <mask>
 
  Indicates that registration is to be enforced for sites whose
  address matches the specified address when ANDed with the mask.
 
  See also: forbid_site, permit_site, REGISTRATION, SITE LISTS.
 & trust_site
 
  Config parameter: trust_site <addr> <mask>.
 
  Indicates that sites whose address matches the specified address
  when ANDed with the mask are not to be considered suspect.
 
  See also: suspect_site, SITE LISTS.
 & connect_file

  Config parameter: connect_file <path>.  
  Default: text/connect.txt

  Specifies the name of the file that a user sees immediately after
  connecting to the MUX if registration is not enabled.  This file
  normally contains help on how to connect to or create a character,
  as well as the WHO and QUIT commands.

  See also: connect_reg_file
 & thing_quota
 
  Config parameter: thing_quota <amount>.  
  Default: 1
  
  Sets how much quota it costs to create a thing (and also how much
  the remaining quota is increased when a thing is @destroyed.
 
  See also: @quota, exit_quota, player_quota, room_quota, QUOTAS.
 & sacrifice_adjust
 
  Config parameter: sacrifice_adjust <amount>.  
  Default -1.
 
  This parameter is part of the formula that is used to determine an
  object's value given the amount spent on its creation.  The 
  formula is:

     value = (cost / sacrifice_factor) + sacrifice_adjust.

  The inverse formula is used to determine how much the owner receives
  when @destroying an object.
 
  See also: @create, @destroy, SACRIFICING, sacrifice_factor.
 & create_max_cost

  Config directive: create_max_cost <amount>.  
  Default: 505

  Specifies the maximum amount of money that is used in calculating
  the value of a created object.  Specifying more than this amount
  of money in a @create command will cause the excess to be wasted.

  See also: create_min_cost, sacrifice_adjust, sacrifice_factor.
 & machine_command_cost

  Config parameter: machine_command_cost <number>. 
  Default: 64

  Sets the cost for running a command from a machine, as opposed to
  running it interactively.  Each command run has a one in <number>
  chance of being charged one coin for machine overhead.
 & include

  Config parameter: include <path>. 
  Default: none

  Reads and processes configuration directives from the named file.

  This directive is only valid during startup.
 & command_quota_max

  Config parameter: command_quota_max <amount>. 
  Default: 100

  Specifies the maximum value for the command quota for connected
  users.
 
  A user's command quota is only increased if it is below this value.
  Each command a user types in (commands executed by machines do not
  count) decreases the quota by 1, and the user's commands are only
  executed if the quota is greater than zero.

  See also: command_quota_increment, timeslice.
 & create_min_cost

  Config directive: create_min_cost <amount>. 
  Default: 10

  Specifies the minimum (and default) cost for creating an object.

  See also: create_max_cost, sacrifice_adjust, sacrifice_factor.
 & parent_recursion_limit

  Config directive: parent_recursion_limit <num>. 
  Default: 10

  This directive specifies how far back to check parents for commands
  and attributes.
 & output_database
 
  Config parameter: output_database <pathname>.  
  Default: none
 
  Specifies the file to which the database is to be written when
  writing checkpoint dumps or writing the final dump after receiving 
  a @shutdown command.
  
  See also: @dump, @shutdown, checkpoint_database, input_database.
 & help_file

  Config parameter: help_file <path>. 
  Default: text/help.txt

  Specifies the name of the file containing the text used by the help
  command.

  See also: help, help_index
 & switch_default_all
 
  Config parameter: switch_default_all <yes/no>.  
  Default: yes
 
  Indicates whether the @switch command should perform the commands
  for all targets that match or just the first one that matches if 
  you don't specify either /all or /first as a command switch.
 & sacrifice_factor
 
  Config parameter: sacrifice_factor <amount>.  
  Default 5.
 
  This parameter is part of the formula that is used to determine an
  object's value given the amount spent on its creation.  The 
  formula is:

     value = (cost / sacrifice_factor) + sacrifice_adjust.

  The inverse formula is used to determine how much the owner receives
  when   @destroying an object.
 
  See also: @create, @destroy, SACRIFICING, sacrifice_adjust.
 & suspect_site
 
  Config parameter: suspect_site <addr> <mask>
 
  Indicates that sites whose address matches the specified address
  when ANDed with the mask are to be considered suspect, and any 
  player creates, connects and disconnects are to be reported to all 
  logged-in wizards.
 
  See also: trust_site, SITE LISTS.
 & fixed_tel_message

  Config parameter: fixed_tel_message <string>. 
  Default: none

  Specifies the string that is sent to a player when they try to
  teleport while they are set with the FIXED flag.

  See also: fixed_home_message.
 & news_file

  Config parameter: news_file <path>. 
  Default: text/news.txt

  Specifies the name of the file containing the text used by the news
  command. You may use ANSI color sequences in news.
 
  See also: news, news_index
 & hostnames

  Config parameter: hostnames <yes/no>. 
  Default: yes

  Indicates whether or not IP addresses should be replaced with host
  names where possible in the log file and wizard WHO report.
 & btarmorstatus_ref()

  Syntax: btarmorstatus_ref(<UnitRef>,<location|All>)

  This function returns a list detailing the status of the armor in
  the specified <location> (or 'All' for the totals for the unit) on
  a reference unit ie the default templated value. The format of the
  string is:

  <current front armor>/<templated front armor>|
  <current internal>/<templated internal>|<current rear
  armor>/<templated rear armor>
  
  Note: As this is a reference function, the return string will show
  no damage unless the unit was actually templated with damage.

  Error Messages:

    * If <UnitRef> is not a valid unit the function returns #-1 NO
      SUCH MECH
    * If <location> is not a valid location the function returns #-1
      INVALID SECTION
    * Any other errors will return #-1 ERROR

  Continued in btarmourstatus_ref()2
  & btgetxcodevalue()

  Syntax: btgetxcodevalue(<ObjectDB>,<xcodevalue>)

  This function returns the value stored in <xcodevalue> on the
  specified object.

  Error Messages:

  * If <ObjectDB> is not valid the function returns #-1
  * If <xcodevalue> is not valid the function returns #-1

  Example:
  Given a map #dbref 62:

  > think btgetxcodevalue(#62, mapvis)
  30
& btweapstat()

  Syntax: btweapstat(<weaponname>,<stat>)

  This function returns the information requested by <stat> for
  <weaponname>

	Note: Be sure to use the long name for <weaponname> or results may
	be inaccurate.

  Arguments:

  * <stat> = VRT returns the Variable Reycled Time for the weapon
  * <stat> = TYPE returns the weapontype for the weapon
  * <stat> = HEAT returns the heat generated by the weapon
  * <stat> = DAMAGE returns the damage done by the weapon
  * <stat> = MIN returns the minium range of the weapon
  * <stat> = SR returns the short range of the weapon
  * <stat> = MR returns the medium range for the weapon
  * <stat> = LR returns the long range for the weapon
  * <stat> = CRIT returns the number of critslots required by the
    weapon
  * <stat> = AMMO returns the amount an ammobin can hold of the
    ammunition for that weapon
  * <stat> = WEIGHT the function returns the weight of the weapon
  * <stat> = BV returns the Battle Value of the weapon

  Continued in btweapstat()2
& btpartmatch()

  Syntax: btpartmatch(<PartName>)

  This function returns the unique part number(s) for the given part.
  Each part has a unique number that may be used to easily convert
  between part names and numbers. A number is returned for each type
  of the weapon or part you specify (if applicable). This can be
  converted back to a name using btpartname().

  This function will accept wildcards in the PartName.

  Error Messages:

 * If <partname> is not valid the the function will return #-1
   INVALID PARTNAME
 * If <partname> is > 399 characters long the function will return
    #-1 PARTNAME TOO LONG

  Continued in btpartmatch()2
& btloadmap()2

  Error Messages:

  * If <MapOBJ> is not a valid map object the function will return #-
    1 INVALID TARGET
  * If <mapname> is not a valid map the function will return #-1 MAP
     NOT FOUND

  Example:
  Given that #100 is a valid Map Object, FAL.hills is a valid map, and
  2 units #1234 and #2345 are on the map before the command is run:

  > think btloadmap(#100,FAL.hills,1)
  Shutting down Mech #1234 and restting map index to -1....
  Shutting down Mech #2345 and restting map index to -1....
  1
& btdamagemech()

  Syntax:
  btdamagemech(<UnitDB>,<totaldamage>,<clustersize>,<direction>
  ,<attemptcrit>,<message to unit>,<message to LOS>)

  This function inflicts <totaldamage> upon the unit specified in
  <UnitDB> from <direction> and will attempt to crit the unit in
  response to <attemptcrit>. <message to unit> will be sent to the
  occupant(s) of <UnitDB> and <message to LOS>, prepended by the unit
  name, be sent to those units within line of sight.

  The function returns 1 if successful, 0 if failed.
	
	Note: Arguments for <totaldamage>, <clustersize>, <direction>, and
  <attemptcrit> must be numerical.

  Direction arguments

    * 0-7 = Specific front hitlocation
    * 8-15 = Specific rear hitlocation
    * 16-18 = Random front hitlocation
    * 19-21 = Random rear hitlocation

Continued in btdamagemech()2
& btloadmech()

  Syntax: btloadmech(<MechOBJ>,<mechref>)

  This function loads <mechref> onto <MechOBJ>.

  The function returns 1 if successful.

	Note: To be considered a 'valide mech object' the object must be 
	set with the XCODE flag and have the XTYPE:MECH attribute set
	
	Note: This function loads the appropriate xcode values for <mechref>
  on <MechOBJ>, but it does not make a complete unit.

  Error Messages:

  * If <MechOBJ> is not a valid mech object the function will return
    #-1 INVALID TARGET
  * If <mechref> is not a valid mech reference the function will
    return #-1 UNABLE TO LOAD TEMPLATE
  *

  Example:
  Given that #1234 is a valid Mech Object and EXT-4D is a valid mech
  reference:

  > think btloadmech(#1234,EXT-4D)
  1
& bttechstatus()

  Syntax: bttechstatus(<UnitDB>)

  This function returns a space delimited list of any 'special
  technologies' installed on <UnitDB>

  Special Technologies:

    * AntiAircraft        * ArtemisV_Tech       * BeagleProbe
    * C3I_Tech            * C3MasterTech        * C3SlaveTech
    * CargoTech           * CL_AMS              * Clan
    * CompactEngine_Tech  * CritProof_Tech      * DoubleHS
    * ECM                 * EndoSteel_Tech    
    * FerroFibrous_Tech   * FlipArms            * ICEEngine_Tech
    * IS_AMS              * LightEngine_Tech    * Masc
    * OmniMech_Tech       * SalvageTech         * SearchLight
    * StealthArmor_Tech   * TAG_Tech            * TripleMyomerTech
    * XLEngine_Tech       * XXL_Tech

  Note: The above list is not comprehensive. It details the special
  technologies which are most frequently implemented within BT mux.
  For a detailed list of all special technologies see
  src/hcode/btech/template.c

  Continued in bttechstatus()2
 & btarmorstatus_ref()2

  Example:

  Given that EXT-4D is valid mech reference

  > think btarmorstatus_ref(EXT-4D,ct)
  21/21|21/21|8/8
  > think btarmorstatus_ref(EXT-4D,all)
  168/168|104/104
& btdamages()

  Syntax: btdamages(<UnitDB>)

  This function returns a list of the damages on <UnitDB>.
  The function returns nothing if the unilt has no damage.

  The format of the list is:
  <repairnum>|<location>|<typenum>|<data>|<fixing>,

  <typenum>
  Displays the damage type
  * <typenum> 0 requires a reattach
  * <typenum> 1 and 2 requires a part replacement
  * <typenum> 3 to 9 requires an enhancedcrit repair
  * <typenum> 10 requires a weapon replacement
  * <typenum> 11 requires an ammo reload
  * <typenum> 12 requires an armor patch
  * <typenum> 13 requires an armor patch to the rear
  * <typenum> 14 requires repair of an internal
  * <typenum> 15 requires a detatch
  * <typenum> 16 and 17 requires scrapping
  * <typenum> 18 requires an unload
  * <typenum> 19 requires a reseal
  * <typenum> 20 requires a replacesuit

Continued in btdamages()2
& btgetbv_ref()

  Syntax: btgetbv_ref(<UnitRef>)

  This function returns the Battle Value for the specified 'reference'
  unit - ie the default templated unit.

  Error Messages:

  * If <UnitRef> is not a valid unit reference the function returns
    #-1 NO SUCH MECH

  Example:
  Given that EXT-4D is a valid unit reference:

  > think btgetbv_ref(EXT-4D)
  925

  See also: btgetbv& btgetxcodevalue_ref()

  Syntax: btgetxcodevalue_ref(<UnitRef>,<xcodevalue>)

  This function returns the value stored in <xcodevalue> on the
  specified 'reference' unit - ie the default templated value.
 
	Note: Unlike btgetxcodevalue this function will only work on objects
	which are set XTYPE:MECH

  Error Messages:

  * If <UnitDB> is not a valid unit the function returns
  #-1 NO SUCH MECH
  * If <xcodevalue> is not valid the function returns #-1

  Example:
  Given that THE-N is a valid unit:

  > think btgetxcodevalue_ref(THE-N, maxspeed)
  96.75
 
  See Also: btgetxcodevalue()& btunitfixable()

  Syntax: btunitfixable(<UnitDB>)

  This function determines if a unit is 'cored' - ie unrepairable. The
  function returns 1 if the unit is repairable, otherwise it returns
  0.

  Error Messages:

  * If <UnitDB> is not a valid RS unit the function returns #-1
    INVALID TARGET

  Example:
  Given that #1234 is a mech which is repairable, and #2345 is a mech
  which is unrepairable

  > think btunitfixable(#1234)
  1
  > think btunitfixable(#2345)
  0
& btweapstat()2

  Note: <type> will return 0 for energy weapons, 1 for missile
  weapons, 2 for artillery weapons, 3 for ammo weapons and 4 for other
  weapons (eg sword)

  Error Messages:

  * If <weaponname> is not a valid partname the function returns #-1
    INVALID PART NAME
  * if <weaponname> is not a valid weaponname the function returns #
    -1 NOT A WEAPON

  Example:

  > think btweapstat(cl.erppc,bv)
  412
& btpartmatch()2

  Example:
  > think btpartmatch(IS.LRM-5)
  40
  > think btpartmatch(LRM-5)
  16 40
  > think btpartmatch(LRM*)
  13 37 14 38 15 39 16 40

  Notice how the LRM-5 returned two values. This is due to the fact
  that there is a CL (Clan) LRM-5 and an IS (Inner Sphere) LRM-5.

  LRM* matched 8 items: The CL and IS versions of LRM-10, LRM-15, LRM-
  20, LRM-5.

	Note: Placement position of wildcards is extremely critical. *LRM
	does not equal LRM* or *LRM*& bttechlist()

  Syntax: bttechlist(<UnitDB>)

  This function returns a string listing the special technologies that
  <UnitDB> is equipped with. The list indicates the technologies in
  short form, but, are generally easy to interperet.

  Error Messages:
    * if <UnitDB> is not a valid RS unit the function will return
      #-1 NOT A MECH

  Example:
  Given that #2299 is a valid RS unit

  > think bttechlist(#2299)
  DHS SS FUS MTOW

  See Also: bttechlist_ref()& bttechlist_ref()

  Syntax: bttechlist_ref(<UnitREF>)

  This function returns a space delimited list of any 'special
  technologies' employed by <UnitREF>

  Error Messages:

  * If <UnitREF> is not valid the function will return
    #-1 NO SUCH MECH
  * Other errors will cause the function to return #-1 ERROR

  Example:
  Given that MAD-9S is a valid template

  > think bttechlist_ref(mad-9s)
  DHS ECM BAP SL ES LENG  CASE

  See also: bttechstatus(), bttechlist()
 & btarmorstatus()

  Syntax: btarmorstatus(<UnitDB>,<location>)

  This function returns a list detailing the status of the armor in
  the specified <location> on <UnitDB>. The format of the string is:

  <current front armor>/<templated front armor>|<current
  internal>/<templated internal>|<current rear armor>/<templated rear
  armor>

Error Messages:

  * if <UnitDB> is not a valid RS unit the function will return #-1
    NOT A MECH
  * if <location> is not valid the function returns #-1 INVALID
    SECTION
  * Any other errors will return #-1 ERROR

  Example:

  Given that #1234 is a mech which has taken 5 damage to the front
  armor of it's Left Torso

  > think btarmorstatus(#1234,lt)
  13/18|14/14|6/6

  See Also: btarmorstatus_ref()& btmechfreqs()

  Syntax: btmechfreqs(<UnitDB>)

  This function returns a string containing the frequencies and
  channelmodes set on <UnitDB>.

  The format of the string is <channelnumber>|<freq>|<mode>|<color>,

  <mode> returns:
  * a = Digital
  * b = Mute
  * c = Relay
  * d = Info
  * - = Analog

  Error Messages:
  * If <UnitDB> is not a valid RS unit the function returns #-1
    INVALID TARGET

  Continued in btmechfreqs()2
& btweaponstatus_ref()2

  Argument:

  * If <location> is specified only the weapons for that location are
    returned, otherwise all weapons are listed.

  <Weapon Type> is listed as:
    * 0 = Beam Weapon
    * 1 = Missile Weapon
    * 2 = Artillery Weapon
    * 3 = Ammo Weapon
    * 4 = Hand Weapon

  <Weapon Status> is listed as:
    * 0 = Weapon Operational
    * 1 = Weapon (temporarily) glitched
    * 2 = Weapon destroyed/flooded

  Error Messages:
    * If <UnitRef> is not a valid RS unit the function will return
      #-1 NO SUCH MECH
    * If <location> is not valid the function will return
      #-1 INVALID SECTION

  Example:
  Given that EXT-4D is a valid reference:

 > think btweaponstatus_ref(#1234,la)
 0|MediumLaser|1|0|20|0|0|0,1|MediumLaser|1|0|20|0|0|0
& btweaponstatus()2
 
  * 0 = Beam Weapon
  * 1 = Missile Weapon
  * 2 = Artillery Weapon
  * 3 = Ammo Weapon
  * 4 = Hand Weapon

  <Weapon Status> is listed as:

  * 0 = Weapon Operational
  * 1 = Weapon (temporarily) glitched
  * 2 = Weapon destroyed/flooded

  Error Messages:

  * If <UnitDB> is not a valid RS unit the function will return #-1
    NO SUCH MECH
  * If <location> is not valid the function will return #-1 INVALID
    SECTION

  Example:
  Given that #1234 is an EXT-4D which fired 1 of it's left arm medium
  lasers 10 seconds ago:

  > think btweaponstatus(#1234,la)
  0|MediumLaser|1|0|20|10|0|0,1|MediumLaser|1|0|20|0|0|0
& btloadmap()

  Syntax: btloadmap(<MapOBJ>,<mapname>[,<clear>])

  This function loads <mapname> on <MapOBJ> and optionally clears the
  map of RS units.

  The function returns 1 if successful.

  Arguments:

  * If <clear> > 0 the function will clear the map of units.
  * If <clear> = 0 the function will not clear the map of units.

	Note: The <clear> argument is optional, and if not stated the
  default is to not clear the map.

	Note: The argument for <mapname> is case sensitive.

  Continued in btloadmap()2
  & btmakemechs()2
 
  Error Messages:

  * If the number of arguments is < 2 the function returns #-1
    Insufficient arguments!
  * If the number of arguments is > 5 the function returns #-1 Too
     many arguments!
  * If <Faction> is not a valid faction the function returns #-1
    Invalid faction name!
  * if <type> is a null string the function returns #-1 Invalid type
    bitvector!
  * if <type> is not a valid <type> the function returns #-1 NO
    UNITS WITH FLAG <type> FOUND
  * If <tonnage> is > 4000 the function returns #-1 Max of 4000 tons
    of mecha at once! Sowwy!
  * if <opttonnage> is < 20 the function returns #-1 Invalid
    tonnage!
  * if <maxvariation> is < 5 the function returns #-1 Invalid
    MaxDifference!

  Example:
  Given that Draconis Combine is a valid faction with a short name of
  DC

  > think btmakemechs(dc,500,1,60,10)
  CRD-3R DRG-1C DRG-1C DRG-1N DV-6M HBK-4J SHD-2K TBT-5J
& btdamagemech()2

  Hit Locations

  MECHS
  * 0 = Left Arm
  * 1 = Right Arm
  * 2 = Left Torso
  * 3 = Right Torso
  * 4 = Center Torso
  * 5 = Left Leg
  * 6 = Right Leg
  * 7 = Head
  * 8 = Left Arm (Rear)
  * 9 = Right Arm (Rear)
  * 10 = Left Torso (Rear)
  * 11 = Right Torso (Rear)
  * 12 = Center Torso (Rear)
  * 13 = Left Leg (Rear)
  * 14 = Right Leg (Rear)
  * 15 = Head (Rear)

  VEHICLES
  * 0 = Left Side
  * 1 = Right Side
  * 2 = Front
  * 3 = Aft
  * 4 = Turret
  * 5 = Rotor
& btdamagemech()3

  AttemptCrit arguments
  This argument is boolean: 0=no 1=yes

  Error Messages:

  * Invalid <UnitDB> results in #-1 NOT A MECH
  * Invalid <totaldamage> results in #-1 INVALID 2ND ARG
  * Invalid <clustersize> results in #-1 INVALID 3RD ARG
  * Invalid <direction> results in #-1 INVALID 4TH ARG
  * Invalid <attemptcrit> results in #-1 INVALID 5TH ARG

  Example:

  Given that #1234 is a unit

  > think btdamagemech(#1234, 2, 2, 0, 0, BANG, GETS BANGED)
  1

  The occupant(s) of the unit will see:

  BANG
  You have been hit for 2 points of damage in the left arm

  The occupants of any units within LOS will see:

  unit name [ID] GETS BANGED
& bttechtime()

  Syntax: bttechtime()

  This function returns the techtime (ie the amount of time to
  complete current repairs) for the invoker.

  Example:
  Given that #1234 is player who has 27 minutes and 14 seconds of
  techtime remaining

  > think bttechtime(#1234)                                                        
  00:27:14
& btgetrealmaxspeed()

  Syntax: btgetrealmaxspeed(<UnitDB>)

  This function returns the maximum speed of the specified unit.

	Note: The function returns a dynamically calculated value, taking
	into account damage and cargo weight.

  Error Messages:

  * If <UnitDB> is not a valid RS unit the function returns #-1 NOT A
    MECH

  Example:
  Given that #1234 is a valid unit

  > think btgetrealmaxspeed(#1234)
  86.000000
& btsetcharvalue()

  Syntax: btsetcharvalue(<ObjectDB>,<skill/attribute>,<value>,<mode>)

  This function sets the value of the specified skill or attribute on
  the specified object (player). The mode argument indicates which
  aspect of the skill/attribute to set:
	
	Note: When setting the value of an attribute, <mode> MUST be set to
	0
	
	Note: If <value> is set to a non-numeric argument the
	<skill/attribute> will be set to 0

  Arguments:
  <mode>
  * 0 - set the actual value of <skill/attribute> to <value>
  * 1 - set the BTH of <skill> to <value> (increasing the skill level
    to the necessary extent)
  * 2 - adds <value> to the XP amount of <skill/attribute>

  Continued in btsetcharvalue()2
& btfasabasecost_ref()

  Syntax: btfasabasecost_ref(<UnitRef>)

  This function calculates the FASA cost for the reference unit
  <UnitRef> - ie the default templated unit.
 
	Note: The information returned by this function requires the bt-
	advanced-econ compile-time directive.
	
	Note: The base cost is calculated based on a number of factors,
	including the part costs set via btsetpartcost(). Make sure these
	prices are intact before using the FASA cost function.

  Error Messages:

  * If <UnitRef> is not a valid reference the function returns
    #-1 INVALID REF
  * If the mux was compiled without the bt-advanced-econ directive
    the function returns #-1 NO ECONDB SUPPORT

  Example: Given that EXT-4D is a valid refernce
  > think btfasabasecost_ref(ext-4d)
  15315135

  See also: btgetpartcost(), btsetpartcost()& btcharlist()2

  Example:
  Given that #dbref 1234 is a valid player

  > think btcharlist(skills,#1234)
  Blade Comm-Conventional Computer Gunnery-Artillery Gunnery-Flamer
  Gunnery-Laser Gunnery-Missile Gunnery-Spotting Medtech Perception
  Piloting-Aerospace Piloting-Biped Piloting-BSuit Piloting-Hover
  Piloting-Naval Piloting-Quad Piloting-Spacecraft Piloting-Tracked
  Piloting-Wheeled
  > think btcharlist(advantages)
  Ambidextrous Bloodname Combat_Sense Contact Dropship EI_Implant
  Exceptional_Attribute Extra_Edge Land_Grant Reputation Sixth_Sense
  Title Toughness Wealth Well-Connected Well_Equipped Dodge_Maneuver
  Maneuvering_Ace Melee_Specialist Pain_Resistance Speed_Demon
  Tech_Aptitud
 & btengrate_ref()

  Syntax: btengrate_ref(<UnitRef>)

  This function returns a space delimited string detailing the
  enginesize and susp_factor for the specified 'reference' unit - ie
  the default templated value.

  Error Messages:

  * If the object specified in <UnitRef> is not a valid reference
    then function returns #-1 INVALID REF

  Example:
  Given that EXT-4D is a valid reference:

  > think btengrate_ref(EXT-4D)
  390 0

  See Also: btengrate& btstores()

  Syntax: btstores(<MapDB>[,<partname>])

  This function returns a list of parts in the specified unit or
  hangar.

  The format of the list is <partname>:<amount>|

  The function accepts an optional argument of a partname in which
  case it returns the amount of that part located in the unit/hangar

	Note: This will work on units to see their cargo manifest, useful
	for carriers and other things.

  Error Messages:

  * If <MapDB> is not valid the function will return #-1 INVALID
    TARGET
  * If <partname> optional argument is included and is not a valid
    partname the function will return #-1 INVALID PART NAME

  Example:
  Given that #62 is a valid bay

  > think btstores(#62)
  Armor:5|Engine:5|IS.LargeLaser:2
  > think btstores(#62,Armor)
  5
& btcritslot_ref()

  Syntax: btcritslot_ref(<UnitRef>,<location>,<critslot>,<typeflag>)

  This function returns the details about the contents of the
  specified <critslot> in <location> on a reference unit ie the
  default templated value.
 
	Note: As this is a reference function, the return string will show
	no damage unless the unit was actually templated with damage.

  Arguments:
  <typeflag> can be one of the following:

    * name will return the name of the item at that critslot
    * status will return the condition of the part - either
      Operational or Destroyed
    * data will return the amount of ammo in an ammobin
    * maxammo will return the maximum capacity of an ammobin
    * mode will return the weapon mode
    * any other argument will return the same as the name arg.

	Note: If the <typeflag> argument is mode and the weapon is set to
  normal mode, the function returns a blank string

  Continued in btcritslot_ref()2
& btlosm2m()

  Syntax: btlosm2m(<UnitDB>,<TargetUnitDB>)

  This function determines if the unit <TargetUnitDB> is within line
  of site of <UnitDB>.

  The function returns 1 if <TargetUnitDB> is within LOS of <UnitDB>,
  otherwise it returns 0

  Error Messages:

  * If the object specified in <UnitDB> or <TargetUnitDB> is not an
    RS unit the function returns #-1 INVALID MECH

  Example:
  Given that #dbref 1234, #dbref 2345 and #dbref 3456 are all valid RS
  units and that #2345 is within LOS of #1234 but #3456 is not:

  > think btlosm2m(#1234,#2345)
  1
  > think btlosm2m(#1234,#3456)
  0
& btgetweight()

  Syntax: btgetweight(<partname>)

  This function returns the weight of the specified part.

  Error Messages:

  * If <partname> is not valid the function returns
    #-1 INVALID PART NAME

  Example:
  Given that XXL_ENGINE is a valid part and weighs 1

  > think btgetweight(xxl_engine)
  1.000
 
  See Also: btpartweight()& btmakepilotroll()2

  Error Messages:

    * If <UnitDB> is not a unit, the function returns #-1 INVALID MECH

  Example: Given that #1234 is a unit piloted by a player with +4
  pilot stats

  think btmakepilotroll(#1234,1,1)
  1 <Or 0 if the pilot fails the roll>

  In the event that the pilot makes the roll, he/she will see:

  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 6

  In the event that the pilot fails the roll, but makes the damage
  roll, he/she will see:

  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 4
  You try to avoid taking damage in the fall.
  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 8
  <Further messages indicating damage to the unit>

  Continued in btmakepilotroll()3
& btmakepilotroll()3

  In the event that the pilot fails the roll, and fails the damage
  roll, he/she will see:

  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 4
  You try to avoid taking damage in the fall
  You make a piloting skill roll!
  Modified Pilot Skill: BTH 5     Roll: 3
  You take personal injury from the fall!
  You attempt to keep consciousness!
  Retain Conciousness on: 3       Roll: 8
  <Further messages indicating damage to the unit>
& bthexemit()

  Syntax: bthexemit(<MapDB>,<x>,<y>,<message>)

  This function emits <message> which will be seen by the occupant(s)
  of any unit within line of site of the hex specified in <x> <y>:

  The function returns 1 if successful, or an error message.

  Error Messages:

  * If <MapDB> is not a valid map the function returns
    #-1 INVALID MAP
  * If <message> is invalid (eg a null string) the function returns
    #-1 INVALID MESSAGE
  * If the hex specified by <x> <y> is outside the boundaries of the
    map the function returns #-1 INVALID COORDINATES

  Example:
  Given a map #dbref 62:

  > think bthexmit(#62, 10, 10, Fascinating emit)
  1

  The occupants of any units within LOS will see:

  Fascinating emit
& btaddstores()

  Syntax: btaddstores(<ObjectDB>,<partname>,<quantity>)

  This function adds <quantity> of part <partname> to the unit or
  hangar specifed in <ObjectDB>.

  The function returns the amount of <partname> in the object at the
  completion of the event.

  Error Messages:

  * If <ObjectDB> is not a valid unit or hangar the function returns
    #-1
  * If <quantity> is a null string or not numerical the function
    returns #-2 Illegal Value
  * If <partname> is not a valid partname or commodity the function
    returns #-1 INVALID PART NAME

  Example:
  Given that #dbref 62 is a valid bay with 1000 units of armor in
  store:

  > think btaddstores(#62,armor,1000)
  2000
& btpayload_ref()

  Syntax: btpayload_ref(<UnitRef>)

  This function displays a string detailing the weapons and ammunition
  payload of a reference unit, ie the default templated unit.

  The string is formatted <itemname>:<quantity>|

	Note: This function does not display melee weapons.

  Error Messages:

  * If <UnitRef> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If the function fails for any other reason the function returns
    #-1

  Example:
  Given that EXT-4D is valid mech reference

  > think btpayload_ref(ext-4d)
  IS.MediumLaser:4|IS.LRM-10:1|IS.Anti-MissileSystem:1
  |IS.SmallLaser:1|Ammo_IS.Anti-MissileSystem:1|Ammo_IS.LRM-10:1
& bttechstatus()2

  Error Messages:

  * If <UnitDb> is not valid the function will return #-1 NOT A MECH
  * If the function is uable to determine the technologies it will
    return #-1 UNABLE TO GET MECHDATA

  Example:
  Given that #1234 is a MAD-9S which is a valid template

  > think bttechstatus(#1234)
  DoubleHS ECM BeagleProbe SearchLight EndoSteel_Tech LightEngine_Tech
& btunderrepair()

  Syntax: btunderrepair(<UnitDB>)

  This function returns a value of '1' if the specified mech is under
  repair, and '0' if it is not.

  Error Messages:

  * If <UnitDB> is not a valid RS unit the function will return #-2
  * For any other error the function will return #-1

  Example:

  > think btunderrepair(#2983)
  1
  > think btunderrepair(#1024)
  0
& btgetrange()

  Syntax: btgetrange(<MapOBJ>,<arg1>,<arg2>[,<arg3>[,<arg4>[,<arg5>
          [,<arg6>[,<arg7>]]]]])

  This function returns the distance (in hexes) between the specified
  objects or hexes.

  Arguments:

  * The function requires between 3 and 7 arguments. Acceptable
  arguments are either 2 UnitDB's, 1 UnitDB and an xy[z] set, or 2
  xy[z] sets.

  Note: If you specify the z (altitude) element of one xy[z] set you
  must specify it for both 'locations' - either with another xy[z] set
  or implicitly with a unit.)

 Continued in btgetrange()2
& btsetmaxspeed()

  Syntax: btsetmaxspeed(<UnitDB>,<speed>)
 
  This function sets the running or flank speed for an RS unit to the
  valude specified. Consequently this sets the walk or cruise speed
  for the unit also.
 
  Note - the speed specified is expressed in kph, not movement points.
 
  Note - if <speed> is not a valid number the units max speed will be
  set to 0.
 
  Error Messages:
  * if <UnitDB> is not a valid RS unit the function will return
    #-1 NOT A MECH
   
  Example:
  Given that #1111 is a valid RS unit, and the desired speed is 222
  kph

  > think btsetmaxspeed(#1111,222)
  1
& btsetcharvalue()2

  Error Messages:

  * If <ObjectDB> is not valid the function will return #-1 INVALID
    TARGET
  * If <skill/attribute> is an attribute and <mode> does not equal 0
    the function will return #-1 ONLY SKILLS CAN HAVE FLAG
  * If <skill/attribute is not valie the function will return #-1
    INVALID VALUE

  Example:

  Given a player named Labrat (#dbref 1234):

  > think btsetcharvalue(#1234, medtech, 2, 0)
  Labrat's Medtech set to 2
  > think btsetcharvalue(#1234, medtech, 2, 1)
  Labrat's Medtech set to 5
  > think btsetcharvalue(#1234, medtech, 2, 2)
  Labrat gained 2 more Medtech XP.
& btcritstatus_ref()2

  <crittype> returns a value indicating the type of item stored at
  that <critslot>

    * 1 = Weapon
    * 2 = Ammo
    * 3 = Actuator
    * 4 = Cargo
    * 5 = Empty
    * 0 = Other (eg Cockpit, LifeSupport)

	Note: if <critslot> refers to a location where missiles are
	stored, <crittype> will return 4, indicating a cargo crittype

  Error Messages:

  * If <UnitRef> is not a valid reference the function returns
    #-1 NO SUCH MECH
  * If <location> is a null string or very invalid the function
    returns #-1 INVALID SECTION

	Note: <location> is not checked extensively - eg a 'location' of l
  will pass error checking. Therefore it is the programmers
  responsibility to ensure a correct argument

  Continued in btcritstatus_ref()3
& btcritstatus_ref()3

  Example:

  Given that EXT-4D is a valid reference:

  > think btcritstatus_ref(EXT-4D, la)
  1||ShoulderOrHip|0|3,2||UpperActuator|0|3,3||LowerActuator|0|3,4|
  |HandOrFootActuator|0|3,5||MediumLaser|0|1,6||MediumLaser|0|1,7|
  |Empty|0|5,8||Empty|0|5,9||Empty|0|5,10||Empty|0|5,11||Empty|0|5,12|
  |Empty|0|5
& btsetxy()

  Syntax: btsetxy(<UnitDB>,<MapDB>,<x>,<y>[,<z>])

  This function sets the position of <UnitDB> to hex <x>,<y> and
  optionally at an altitude of <z>.

  If the argument <z> is omitted, the function determines the
  elevation of the hex <x>,<y> and sets <z> to that value.

	Note: In that the function automatically ascertains the value of z,
	it is generally wisest to omit this argument.

  The function returns 1 if successful.

  Error Messages:

  * If <UnitDB> is not a valid RS unit the function returns #-1
     INVALID TARGET
  * If <MapDB> is not a valid map object the function returns #-1
    INVALID MAP
  * If <x> is outside the boundaries of the map the function returns
    #-1 X COORD
  * If <y> is outside the boundaries of the map the function returns
    #-1 Y COORD
  * If <z> is > 10000 the function returns #-1 Z COORD

  Example:
  Given that #1234 is a mech and #62 is a map object

  > think btsetxy(#1234,#62,10,10,0)
  1
& btweaponstatus_ref()

  Syntax: btweaponstatus_ref(<UnitRef>[,<location>])

  This function returns a list detailing the status of the weapon(s)
  on a reference unit ie the default templated value. The list is
  delimited with | between fields and , between records. The format of
  the string is:

  <weapon number>|<weapon name>|<number of crits>|<part
  quality>|<weapon recycle time>|<recycle time left>|<weapon
  type>|<weapon status>
 
	Note: As this is a reference function, the return string will show
	no damage unless the unit was actually templated with damage.
	
	Note: As this is a reference function weapons will not have been
	fired.

  Continued in btweaponstatus_ref()2
& btcritstatus_ref()

  Syntax: btcritstatus_ref(<UnitRef>,<location>)

  This function returns a string displaying the status of the
  criticals in <location> on a reference unit ie the default
  templated value.

  The string returned is formatted
 <critslot>|<?>|<partname>|<operational>|<crittype>

	Note: As this is a reference function, the return string will show
	no damage unless the unit was actually templated with damage.

	Note: The element denoted <?> is used for the brand of partnames,
	however brands are not implemented on this codebase, so will return
	empty

  <operational> returns 0 if the <critslot> is functional, -1 if the
  part at <critslot> is destroyed

  Continued in btcritstatus_ref()2& btlistblz()
 
  Syntax: btlistblz(<MapDB>)
 
  This function lists those hexes on <MapDB> which are blocked landing 
  zones.
 
  The lists is formated <x> <y> <z> and delimited with the | character

  Error Messages:
 
  * if <MapDB> is not a valid Map the function will return 
    #-1 INVALID MAP. 
 
  Example:
 
  Given that #1234 is a valid Map Object with 4 bases at 20 20, 
  20 40, 40 20, and 40 40. 

  > think btlistblz(#1234)
  20 20 0|20 40 0|40 20 0|40 40 0
& btremovestores()

  Syntax: btremovestores(<ObjectDB>,<partname>,<quantity>)

  This function removes <quantity> of part <partname> from the unit or
  hangar specifed in <ObjectDB>.

  The function returns the amount of <partname> in the object at the
  completion of the event.

  Error Messages:

  * If <ObjectDB> is not a valid unit or hangar the function
    returns #-1
  * If <quantity> is a null string or not numerical the function
    returns #-2 Illegal Value
  * If <partname> is not a valid partname or commodity the function
    returns #-1 INVALID PART NAME

  Example:
  Given that #dbref 62 is a valid bay with 2000 units of armor in
  store:

  > think btremovestores(#62,armor,1000)
  1000
& btcritstatus()

  Syntax: btcritstatus(<UnitDB>,<location>)

  This function returns a string displaying the status of the
  criticals in <location> on <UnitDB>

  The string returned is formatted"
  <critslot>|<?>|<partname>|<operational>|<crittype>
	
	Note: The element denoted <?> is used for the brand of partnames,
	however brands are not implemented on this codebase, so will return
	empty

  <operational> returns 0 if the <critslot> is functional, -1 if the
  part at <critslot> is destroyed

  <crittype> returns a value indicating the type of item stored at
  that <critslot>

  * 1 = Weapon
  * 2 = Ammo
  * 3 = Actuator
  * 4 = Cargo
  * 5 = Empty
  * 0 = Other (eg Cockpit, LifeSupport)

	Note: if <critslot> refers to a location where missiles are stored,
  <crittype> will return 4, indicating a cargo crittype

 Continued in btcritstatus()2
 & btmapemit()
   
  Error Messages:

  * If <MapDB> is not valid the function returns #-1 INVALID MAP
  * If <message> is not valid (eg a null string) the function returns
    #-1 INVALID MESSAGE

  Example:
  Given that #62 is a valid mapobject

  > think btmapemit(#62, Fascinating Message)
  1

  The occupant(s) of any units on the map will see:

  Fascinating Message
& btweaponstatus()

  Syntax: btweaponstatus(<UnitDB>[,<location>])

  This function returns a list detailing the status of the weapon(s)
  on <UnitDB>. The list is delimited with | between fields and ,
  between records. The format of the string is:

  <weapon number>|<weapon name>|<number of crits>|<part
  quality>|<weapon recycle time>|<recycle time left>|<weapon
  type>|<weapon status>

  Argument:

  * If <location> is specified only the weapons for that location are
    returned, otherwise all weapons are listed.

  <Weapon Type> is listed as:

  Continued in btweaponstatus()2
& bthexlos()

  Syntax: bthexlos(<UnitDB>,<x>,<y>)

  This function determines if <UnitDB> is within line of site of the
  hex specified by <x> <y>.

  The function returns 1 if the unit is within LOS of the hex, and 0
  if it is not.

  Error Messages:

  * If <UnitDB> is not an RS unit the function returns
  #-1 INVALID MECH
  * If <x> <y> are outside the boundaries of the map the function
    returns #-1 INVALID COORDINATES

  Example:
  Given a unit #dbref 1234 within LOS of 10,10 but NOT within LOS of
  20,20:

  > think bthexlos(#1234,10,10)
  1
  > think bthexlos(#1234,20,20)
  0
& btthreshold()

  Syntax: btthreshold(<skill>)

  This function returns the threshold constant. This constant is one
  of the factors used to calculate the number of points required in
  the XP pool of <skill> to improve the skill's base-to-hit by 1.

  Error Messages:

  * If <skill> is not valid the function will return #-1 ERROR

  Example:

  > think btthreshold(medtech)
  999999

	Note: The amount returned by btthreshold is NOT the only factor in
	determining if a player will 'level up'. Further calculations
	modify the required XP dynamically.& btgetcharvalue()

  Syntax: btgetcharvalue(<ObjectDB>,<skill/attribute>,<mode>)

  This function returns the value of the specified skill or attribute
  on the specified object (player). The mode argument indicates which
  aspect of the skill/attribute to return:

    * 0 returns the skill/attribute base level
    * 1 returns the skill/attribute BTH
    * 2 returns the skill XP

  Error Messages:

    * If <ObjectDB> is not valid the function returns #-1 INVALID
TARGET
    * If <skill/attribute> is not valid the function returns #-1
INVALID VALUE

  Example:
  Given a player #dbref 1234 with a Perception of 1(6+):

  > think btgetcharvalue(#1234, perception, 0)
  1
  > think btgetcharvalue(#1234, perception, 1)
  6
  > think btgetcharvalue(#1234, perception, 2)
  16
& btsetarmorstatus()
 
  Syntax: btsetarmorstatus(<UnitDB>,<location>,<armortype>,<amount>)
 
  This function sets the armor on <UnitDB>'s <location> to <amount>.
  <armortype> determines which armor for the specified location is 
  set:
    * 0 - Front armor
    * 1 - Internal armor
    * 2 - Rear armor (where applicable) 

  This function permits <amounts> in excess of the templated value
	
	Note: Esnure that <amount> is numeric. Using a non-numeric argument 
        will result in the armor value being set to 0
	Note: This function only impacts on <UnitDB> and has no effect on 
	      the template for a unit

  Continued in btsetarmorstats()2& btpartweight()

  Syntax: btpartweight (<partname>)

  This function returns the weight of <partname>.

  Error Messages:

  * If <partname> is not valid the function returns #-1 INVALID PART
    NAME

  Example:
  Given that XXL_ENGINE is a valid part and weighs 1

  > think btgetweight(xxl_engine)
  1.000& btmapunits()2

  Error Messages:

  * If <MapOBJ> is not a valid map the function returns #-1 INVALID
    MAP
  * If <x> falls outside the boundaries of the map the function
    returns #-1 INVALID X COORD
  * If <y> falls outside the boundaries of the map the function
    returns #-1 INVALID Y COORD
  * If <range> is < 0 the function returns #-1 INVALID RANGE
  * For other errors the function returns #-1 INVALID ARGUMENTS

  Example:
  Given that #62 is a valid MapOBJ, with 2 units #1234 (at 10,10) and
  #2345 (10,10,10) on it

  think btmapunits(#62)
  #1234 #2345
  think btmapunits(#62,0,0,14)
  #1234 #2345
  think btmapunits(#62,0,0,0,14)
  #1234
& btmakepilotroll()

  Syntax: btmakepilotroll(<UnitDB>,<roll modifier>,<damage modifer>)

  This function causes the pilot of <UnitDB> to make a pilot roll.

  The <roll modifier> is added to the applicable pilot-skill base of
  the pilot to provide the base-to-hit of the roll.

  If the pilot makes the roll, ie rolls higher than the base-to-hit,
  the event is complete.

  If the pilot fails the roll, ie rolls lower than the base-to-hit,
  then the <damage modifier> is added to the pilot-skill base to
  provide the base-to-hit of a roll to determine if the player will
  suffer damage.
 
  If the pilot makes the damage roll, the unit is damaged but not the
  player, and the event is complete.

  If the pilot fails the damage roll, both the unit and player suffer
  damage. The player makes a further roll to determine if he/she will
  retain consciousness and the event is complete.
	
	Note: A consciousness roll does not use the modifiers stated in the
	btmakepilotroll function.

    * If the pilot passes the initial roll the function returns 1.
    * If the pilot fails the initial roll the function returns 0.

  Continued in btmakpilotroll()2
& btsetpartcost()

  Syntax: btsetpartcost(<partname>,<cost>)

  This function sets the cost of the specified part.

  The function returns the value that the cost was set to.
	
	Note: <cost> must be numeric. If a non-numeric argument is used the
  cost is set to 0.
	
	Note: The information manipulated by this function requires the bt-
	advanced-econ compile-time directive.

  Error Messages:

  * If <partname> is not valid the function returns #-1 INVALID PART
     NAME
  * If the mux was compiled without the bt-advanced-econ directive
    the function returns #-1 NO ECONDB SUPPORT

  Example:
  Given that VTOL_FUEL is a valid part

  > think btsetpartcost(vtol_fuel,500)
  500
& btmapelev()

  Syntax: btmapelev(<MapDB>,<x>,<y>)

  This function returns the elvation of the specified hex on the
  specified map. This can be a number between -9 and 9. Negative
  numbers denote water, positive may be any other terrain.

  Error Messages:

  * If <MapDB> is not valid the function will return #-1
  * If <x> <y> are not numerical the function will return #-2
  * If <x> <y> are outside the boundaries of the map the function
    will return ?

  Example:
  Given that #62 is a map of 50 x 50

  > think btmapelev(#62,5,9)
  1
  > think btmapelev(#62,10,10)
  -3
  > think btmapelev(#62,27,61)
  ?
& btcritslot()2

  Error Messages:

  * If <UnitDB> is not a valid unit the function returns #1-NOT A
    MECH
  * if <location> is not valid the function returns #-1 INVALID
    SECTION
  * If <critslot> is not valid the function returns #-1 INVALID
    CRITICAL
  * If <typeflag> is maxammo and the slot is not an ammobin the
    function returns #-1 NOT AMMO
  * if <typeflag> is mode and the slot is not ammo or weapon the
    function returns #-1 NOT AMMO OR WEAPON

  Example:
  Given that #1234 is a valid unit:
  * with a recently fired srm-6 set to fire artemis in slot 1 of
    the Left Torso,
  * an ammobin in slot 3 of the Left Torso:

  > think btcritslot(#1234,lt,1,name)
  IS.SRM-6
  > think btcritslot(#1234,lt,1,status)
  Operational
  > think btcritslot(#1234,lt,1,data)
  15
  > think btcritslot(#1234,lt,1,mode)
  A
  > think btcritslot(#1234,lt,3,maxammo)
  15
& btmapemit()

  Syntax: btmapemit(<MapDB>,[x, y, z, range,]<message>)

  This function emits <message> to all appropriate units on <MapDB>.

  The function returns 1 if successful, 0 if failed.

  Arguments:
  There are 3 valid forms:

  * btmapemit(<MapOBJ>) - emits the message to all units on the map
  * btmapunits(<MapOBJ>,<x>,<y>,<range>) - emits the message to units
    within <range> of <x>, <y>
  * btmapunits(<MapOBJ>,<x>,<y>,<z>,<range>) - emits the message to
    all units within <range> of <x>,<y>,<z>

	Note: The function does not take the altitude of a unit into
  consideration when ascertaining if it is within range UNLESS the 
  third form is used (ie the <z> argument is included)

  Continued in btmapemit()2
& btsetxcodevalue()

  Syntax: btsetxcodevalue(<ObjectDB>,<xcodevalue>,<value>)

  This function stores <value> in <xcodevalue> on the specified
  object.

  The function returns 1 if successful, #-1 if failed

	Warning: Modification of xcodevalues can have serious implications.
  Familiarity with XCODE is strongly advised.

  Error Messages:

  * If <ObjectDB> is not valid the function will return #-1
  * If <xcodvalue> is not a valid value for <ObjectDB>'s XTYPE the
    function will return #-1

  Example:
  Given a map (#dbref 62):

  > think btsetxcodevalue(#62, mapvis,20)
  1
& btmechfreqs()2
 
  Example: Given a unit #1234 with the following listchannels:
  # -- 	Mode -- 	Frequency -- 	Comtitle
  A 	DR-G 	123 	Title A
  B 	A--- 	234 	Title B
  C 	D-Mb 	345 	Title C
  D 	D--w 	456 	Title D
  E 	D--r 	567 	Title E
  F 	A--- 	678 	Title F
  G 	D--y 	789 	Title G
  H 	A--- 	0 	Title H

  > think btmechfreqs(#1234)
  1|123|ac|G,2|234|-|-,3|345|ab|b,4|456|a|w,5|567|a|r,6|678|-|-
  ,7|789|a|y,8|0|-|-
& btcritstatus()2

  Error Messages:

  * If <UnitDB> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If <location> is a null string or very invalid the function
    returns #-1 INVALID SECTION

	Note: <location> is not checked extensively - eg a 'location' of l
will pass
	error checking. Therefore it is the programmers responsibility to
ensure a
	correct argument

  Example:
  Given that #1234 is an EXT-4D with a destroyed Upper Actuator and
  MediumLaser in the left arm

  > think btcritstatus(#1234, la)
  1||ShoulderOrHip|0|3,2||UpperActuator|-
  1|3,3||LowerActuator|0|3,4||HandOrFootActuator|0|3,5
  ||MediumLaser|0|1,6||MediumLaser|-
  1|1,7||Empty|0|5,8||Empty|0|5,9||Empty|0|5,10||Empty|0|5,
  11||Empty|0|5,12||Empty|0|5
& btgetbv()

  Syntax: btgetbv(<UnitDB>)

  This function returns the Battle Value for <UnitDB>

	Note: This function calculates the Battle Value dymanically - a
  damaged unit will return a recalculated BV.

  Error Messages:

  * If <UnitDB> is not a valid unit the function returns
    #-1 NOT A MECH

  Example:
  Given that #1234 is a valid RS unit (an EXT-4D)

  > think btgetbv(#1234)
  878

  Given the same unit as above after incurring 5 points of damage in
  the Right Arm

  > think btgetbv(#1234)
  866

  See also: btgetbv_ref& btdamages()2

	Note: <typenum> complies with the damages defined in
	src/hcode/btech/mech.tech.damages.h

  <data>
  * If <typenum>=0 then <data> shows the section to be reattached
  * If <typenum>=1 or 2, then <data> shows the partname to be
     replaced
  * If <typenum>=10 then <data> shows the weaponname to be replaced
  * if <typenum>=11 then <data> shows the ammoname and amount to be
    reloaded (format: <ammoname>:amount>)
  * If <typenum>=12 or 13, then <data> shows the amount of armor to
    be replaced.
  * If <typenum>=14 then <data> shows the internal to be replaced
  * If <typenum>=16 or 17, then <data> shows the item to be scrapped
  * if <typenum>=18 then <data> shows the ammoname and amount to be
    unloaded (format: <ammoname>:amount>)
  * If <typenum>=19 then <data> shows section to be resealed

  <fixing> returns 1 if the damage is being repaired, 0 if otherwise

  Error Messages:

  * Invalid <UnitDB> results in #-1 NOT A MECH
  * Other errores result in #-1 ERROR

Continued in btdamgaes()3
 & btdamages()3

  Example:

  Given that #1234 is a THE-N which has been cored

  >think btdamages(#1234) 1|RA|16|Shoulder|0,2|RA|16|Upper
  Actuator|0,3|RA|17|LRM-5|0,4|LA|16|Shoulder|0,5|LA|16|Upper
  Actuator|0,6|LA|16|Lower Actuator|0,7|LA|16|Hand
  Actuator|0,8|LA|17|MediumLaser|0,9|RL|16|Hip|0,10|RL|16|Upper
  Actuator|0,11|RL|16|Lower Actuator|0,12|RL|16|Foot
  Actuator|0,13|RL|16|HeatSink|0,14|RL|16|HeatSink|0,15|LL|16|Hip|  
  0,16|LL|16|Upper Actuator|0,17|LL|16|Lower Actuator|0,18|LL|16|Foot
  Actuator|0,19|LL|16|HeatSink|0,20|LL|16|HeatSink|0,21|H|16|Life
  Support|0,22|H|16|Sensors|0,23|H|16|Cockpit|0,24|H|17|MediumLaser|
  0,25|H|16|Sensors|0,26|H|16|Life Support|0
& btpartname()

  Syntax: btpartname(<PartNum>,<nametype>)

  This function returns the part name for the part number specified.

  Arguments:
  <nametype>

    * short
    * long
    * vlong

  Note: See the listforms command for a complete list of partnumbers
  and partnames.

  Error Messages:

  * If <partnum> is not valid the function will return #-1 INVALID
    PART NUMBER
  * If <nametype> is not valid the function will return #-1 INVALID
    NAME TYPE

  Example:

  > think btpartname(53,Short)
  A_CLSLRM10
  > think btpartname(16,Long)
  Ammo_StreakLRM-10
  > think btpartname(16,VLong)
  Ammo_CL.StreakLRM-10

  See Also: btpartmatch()& btengrate()

  Syntax: btengrate(<UnitDB>)

  This function returns a space delimited string detailing the
  enginesize and susp_factor for <UnitDB>.

  Error Messages:

  * If the object specified in <UnitDB> is not an RS unit the
   function returns #-1 NOT A MECH

  Example:
  Given that #dbref 1234 is a valid RS unit (an EXT-4D)

  > think btengrate(#1234)
  390 0

  See Also: btengrate_ref& btshowstatus_ref()

  Syntax: btshowstatus_ref(<UnitRef>,<targetplayer>,<location>)

  This function displays the output of the 'critstatus <location>'
  command on a reference unit, ie the default templated unit, to
  <targetplayer>.

  The function will return 1 if successful.

	Note: This function does not verify if <targetplayer> is connected
	to the mux.

  Error Messages:

  * If <UnitRef> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If <targetplayer> is not a player the function returns #-1
  * If <location> is not valid the function returns Invalid Section!

  Example:
  Given that EXT-4D is valid mech reference and #99 is a player

  > think btshowcritstatus_ref(ext-4d,#99,ct)
  1

  Player #99 will see the same output as if he/she had run the command
  'critstatus ct' in an EXT-4D& btcritslot()

  Syntax: btcritslot(<UnitDB>,<location>,<critslot>,<typeflag>)

  This function returns the details about the contents of the
  specified <critslot> in <location> on <UnitDB>.

  Arguments:
  <typeflag> can be one of the following:

  * name will return the name of the item at that critslot
  * status will return the condition of the part - either Operational
    or Destroyed
  * data will return the amount of ammo in an ammobin, the remaining
    recharge time for a weapon which has been fired
  * maxammo will return the maximum capacity of an ammobin
  * mode will return the weapon mode
  * any other argument will return the same as the name arg.

  Note: If the <typeflag> argument is mode and the weapon is set to
  normal mode, the function returns a blank string

 Continued in btcritslot()2
 & btgetpartcost()

  Syntax: btgetpartcost(<partname>)

  This function returns the cost of the specified part.

	Note: The cost defaults to 0 and must be set via btsetpartcost()

	Note: The information returned by this function requires the bt-
	advanced-econ compile-time directive.

  Error Messages:

  * If <partname> is not valid the function returns
    #-1 INVALID PART NAME
  * If the mux was compiled without the bt-advanced-econ directive
    the function returns #-1 NO ECONDB SUPPORT

  Example:
  Given that VTOL_FUEL is a valid part and costs 500

  > think btgetpartcost(vtol_fuel)
  500

  See Also: btsetpartcost(), btfasabasecost_ref()& btcritslot_ref()2

   
  Error Messages:

  * If <UnitRef> is not a valid reference the function returns
    #1-NOT A MECH
  * if <location> is not valid the function returns
    #-1 INVALID SECTION
  * If <critslot> is not valid the function returns
    #-1 INVALID CRITICAL
  * If <typeflag> is maxammo and the slot is not an ammobin the
    function returns #-1 NOT AMMO
  * if <typeflag> is mode and the slot is not ammo or weapon the
    function returns #-1 NOT AMMO OR WEAPON

  Example: Given that CHP-1N is a valid unit:

  > think btcritslot_ref(CHP-1N,lt,1,name)
  IS.SRM-6
  > think btcritslot_ref(CHP-1N,lt,1,status)
  Operational
  > think btcritslot_ref(CHP-1N,lt,1,data)
  0
  > think btcritslot_ref(CHP-1N,lt,1,mode)
  
  > think btcritslot_ref(CHP-1N,lt,3,maxammo)
  15
 & btmakemechs()

  Syntax: btmakemechs(<faction>,<totaltons>,[<types>,[<opttonnage>,
          [<maxvariation>]]])

  This function returns a space delimited list of mech references.

	Note: This function does NOT create mechs

  The function creates a mechsub for the 3025 era for <faction>,
  weighing <totaltons>. Arguments for <types>, <opttonnage> and
  <maxvariation> are optional.

  Arguments:
  <faction> must be the short name of a faction.

  <totaltons> must be a number not less than 20 and not greater than
  4000.

  <types> selects the types of units included in the mechsub:

  * If <types> = 1 then the function returns only mechs
  * If <types> = 2 then the function returns only aeros
  * If <types> = 3 then the function returns a mix of both mechs and
   aeros

  <opttonnage> is the optimum tonnage for units in the mechsub.

  <maxvariation> is the maximum variation past <opttonnage>.

  Continued in btmakemechs()2
&  btcharlist()

  Syntax:
  btcharlist(<skills|advantages|attributes>[,<playername>|playerDB>])

  This function returns the a space delimited list of all the
  specified criteria (ie skills, advantages or attributes). The
  function accepts an optional argument of a playername or #dbref,
  which case it returns only those which that character possesses.

	Note: If the initial argument is attributes, all players will return
  the full list as characters all have them

  Error Messages:

    * If the initial argument is not one of skills, advantages or
      attributes the function will return #-1 INVALID VALUE
    * If the optional argument specified is not a valid player name or
      #dbref the function returns #-1 INVALID TARGET
  
  Continued in btcharlist()2
  & btshowwspecs_ref()

  Syntax: btshowwspecs_ref(<UnitRef>,<targetplayer>)

  This function displays the output of the weaponspecs command on a
  reference unit, ie the default templated unit, to <targetplayer>.

  The function will return 1 if successful.

	Note: This function does not verify if <targetplayer> is connected
	to the mux.

  Error Messages:

  * If <UnitRef> is not a valid unit the function returns #-1 NO SUCH
    MECH
  * If <targetplayer> is not a player the function returns #-1

  Example:
  Given that EXT-4D is valid mech reference and #99 is a player

  > think btshowwspecs_ref(ext-4d,#99)
  1

  Player #99 will see the same output as if he/she had run the command
  weaponspecs in an EXT-4D& btparttype()

  Syntax: btparttype(<partname>)

  This function returns the type for the specified <partname>.

  Arguments:
  <Parttypes>

  * WEAP
  * AMMO
  * BOMB
  * PART
  * CARG
  * OTHER

  Error Messages:

  * If <partname> is not a valid part the function returns #-1
    INVALID PART NAME

  Example:

  Given that CL.ERPPC is a valid partname

  > think btparttype(cl.erppc)
  WEAP
& btgetrange()2

  Error Messages:
  * If insufficient arguments are provided the function will return #
    -1 FUNCTION (BTGETRANGE) EXPECTS BETWEEN 3 AND 7 ARGUMENTS
  * If <MapObj> is not a object with the XCODE flag the function
    will return #-1 INVALID MAPDB
  * If <MapObj> is an object with the XCODE flag but not a map
    object the function will return #-1 OBJECT NOT HCODE
  * If an argument of xy[z] sets is outside the boundaries of the
    map the function will return #-1 INVALID COORDS
  * If an argument of a UnitDB is invalid the function will return #
    -1 INVALID MECHDBREF
  * If an argyment of a UnitDB is not on the map specified in
    <MapObj> the function will return #-1 MECH NOT ON MAP
  * If one xy[z] set specifies the z argument, but the other does
    not the function will return #-1 INVALID ARGUMENTS
  * Any other error will return #-1 GENERAL ERROR

  Example:
  Given that #1234 and #2345 are valid units. Given that both units
  are on MapObj #62, located at 0,0 and 10,10.
   > think btgetrange(#217,#1234,#2345)
  13.228762
   > think btgetrange(#217,#1234,7,12)
  13.000007
   > think btgetrange(#62,14,1,10,10)
  9.643657
& btmapterr()

  Syntax: btmapterr(<MapDB>,<x>,<y>)

  This function returns a one-character string that represents the
  terrain in the specified hex on the specified map.

  Possible output:
  .   Clear       #   Road       ~   Water
  @   Building    =   Wall       -   Ice
  ^   Mountain    }   Desert     &   Fire
  %   Rough

 Error Messages:
 * If <MapDB> is not valid the function will return #-1
 * If <x> <y> are not numeric the function will return #-2
 * If <x> <y> are outside the boundaries of the map the function
   will return ?

  Example:
  Given that #62 is a map of 50 x 50
  > think btmapterr(#62,5,9)
  .
  > think btmapterr(#62,10,10)
  #
  > think btmapterr(#62,10,60)
  ?
& btmapunits()
 
  Syntax: btmapunits(<MapOBJ>,[<x>,<y>,<z>,<range>])

  This function returns a space delimited list of the dbrefs of
  objects of XTYPE:MECH on <MapOBJ>.

  Arguments:
  There are 3 valid forms:

  * btmapunits(<MapOBJ>) - lists all appropriate units on the map
  * btmapunits(<MapOBJ>,<x>,<y>,<range>) - lists all appropriate
    units within <range> of <x>, <y>
  * btmapunits(<MapOBJ>,<x>,<y>,<z>,<range>) - lists all appropriate
    units within <range> of <x>,<y>,<z>

	Note: The function does not take the altitude of a unit into
	consideration when ascertaining if it is within range UNLESS the
	third form is used (ie the <z> argument is included)

  Continued in btmapunits()2
& btnumrepjobs()

  Syntax: btnumrepjobs(<UnitDB>)

  This function returns the number of repair jobs on the unit
  specified by <UnitDB>

  Error Messages:

  * If <UnitDB> is not a valid unit the function returns #-1

  Example:
  Given that #1234 is mech with damaged armor on the Left Torso and
  Right Arm

  > think btmumrepjobs(#1234)
 2& btid2db()

  Syntax: btid2db(<UnitDB>,<target ID>)

  This function returns the #dbref of the unit bearing the <target ID>
  specified. The function requires that <target ID> be within line of
  sight of the unit specified in <UnitDB>.

	Note: <target ID> is not case sensitive

  Error Messages:

  * If the object specified in <UnitDB> is not an RS unit the
    function returns #-1 INVALID MECH/MAP
  * If the <target ID> specified is not within LOS of <UnitDB> the
    function returns #-1 INVALID TARGETID

  Example:
  Given that #dbref 1234 and #dbref 2345 are both valid RS units
  within LOS of each other and that the Target ID of #2345 is FL

  > think btid2db(#1234,FL)
  #2345
& bthexinblz()

  Syntax: bthexinblz(<MapOBJ>,<x>,<y>)

  The function determines if the hex designated by <x>,<y> on <MapOBJ>
  is within a blocked landingzone

  The function returns 1 if the hex is blocked, and 0 otherwise.

  Error Messages:

  * If <MapObj> is not valid the function returns #-1 INVALID MAP
  * If <x> or <y> are outside the boundaries of the map the function
    returns #-1 INVALID COORDS

  Example:
  Given that #62 is a valid MapObj and that hex 10,11 IS within a
  blocked landingzone:

  >think bthexinblz(#62,10,11)
  1
& btdesignex()

  Syntax: btdesignex(<UnitRef>)

  This function returns '1' if the specified unit reference exists in
  the /mechs directory and '0' if it does not. Note that if you copy a
  template into the mechs directory, you may need to perform a
  @restart before it becomes visible.

  Example:

  > think btdesignex(AS7-D)                                                        
  1
  > think btdesignex(AS20-C)
  0
 & btlag()

  Syntax: btlag()

  This function will return a '1' if the MUX event scheduler is out of
  sync (IE: Lagging), and a '0' if all is well. This is pretty much
  useless on even a semi-quazi-modern machine.

  Example:

  > think btlag()
  0
  > think btlag()
  1
& btsetarmorstatus()2
 
  Error Messages:
  * if <UnitDB> is not a valid RS unit the function will return 
    #-1 NOT A MECH
  * if <location> is not valid the function returns 
    #-1 INVALID SECTION
  * if <armortype> is not valid the function returns 
    #-1 INVALID ARMORTYPE
  * if <value> is not valid (eg a negative number) the function will 
    return #-1 INVALID ARMORVALUE
  * Any other errors will return #-1 ERROR 

  Example:
  Given that #1234 is a valID RS Unit
  
  > think btsetarmorstatus(#1234,ct,2,7)
  1
& btshowcritstatus_ref()

  Syntax: btshowstatus_ref(<UnitRef>,<targetplayer>,<location>)

  This function displays the output of the 'critstatus <location>'
  command on a reference unit, ie the default templated unit, to
  <targetplayer>.

  The function will return 1 if successful.

	Note: This function does not verify if <targetplayer> is connected
	to the mux.

  Error Messages:
 
  * If <UnitRef> is not a valid unit the function returns #-1 NO
    SUCH MECH
  * If <targetplayer> is not a player the function returns #-1
  * If <location> is not valid the function returns Invalid Section!

  Example:
  Given that EXT-4D is valid mech reference and #99 is a player

  > think btshowcritstatus_ref(ext-4d,#99,ct)
  1

  Player #99 will see the same output as if he/she had run the command
  'critstatus ct' in an EXT-4D
 
& help
 
  This is the MUX online help facility for wizard commands and topics.
  The information provided by this command is generally not useful for
  anyone other than wizards and game maintainers, as the features described
  here are only accessable to characters whose WIZARD bit is set, or to those
  who have access to the directory where the MUX data files reside.
 
  Syntax of help command:
     wizhelp [<command/topic>]
 
  To get a list of MUX wizard topics:
     wizhelp topics
 
  To get a list of MUX wizard commands:
     wizhelp commands
 
  To get help on the BTech extensions, refer to:
     wiznews
  If there are any errors in the help text, please notify a Wizard.
 
  See also: help
